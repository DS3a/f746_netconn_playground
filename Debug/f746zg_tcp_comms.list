
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034c8  080170d4  080170d4  000270d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a59c  0801a59c  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a59c  0801a59c  0002a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a5a4  0801a5a4  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a5a4  0801a5a4  0002a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a5a8  0801a5a8  0002a5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801a5ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801a63c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801a6dc  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000118e0  200001d0  0801a77c  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011ab0  0801a77c  00031ab0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000319f7  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000075ff  00000000  00000000  00061bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022d8  00000000  00000000  000691f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002158  00000000  00000000  0006b4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001233f  00000000  00000000  0006d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034e73  00000000  00000000  0007f967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011142d  00000000  00000000  000b47da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c5c07  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000099a0  00000000  00000000  001c5c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080170bc 	.word	0x080170bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	080170bc 	.word	0x080170bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ce:	f3bf 8f6f 	isb	sy
}
 80005d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <SCB_EnableICache+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableICache+0x48>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableICache+0x48>)
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SCB_EnableDCache+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
}
 8000622:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <SCB_EnableDCache+0x84>)
 8000626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800062a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0b5b      	lsrs	r3, r3, #13
 8000630:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000634:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800063e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	015a      	lsls	r2, r3, #5
 8000644:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000648:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <SCB_EnableDCache+0x84>)
 8000650:	4313      	orrs	r3, r2
 8000652:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1ef      	bne.n	8000640 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	60fa      	str	r2, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1e5      	bne.n	8000636 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
}
 800066e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SCB_EnableDCache+0x84>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SCB_EnableDCache+0x84>)
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
}
 8000680:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000682:	f3bf 8f6f 	isb	sy
}
 8000686:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800069c:	f000 f952 	bl	8000944 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006a0:	f7ff ff90 	bl	80005c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006a4:	f7ff ffb4 	bl	8000610 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fdc2 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f832 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 f89e 	bl	80007f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b4:	f004 fa26 	bl	8004b04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <main+0x58>)
 80006ba:	2100      	movs	r1, #0
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <main+0x5c>)
 80006be:	f004 fab3 	bl	8004c28 <osThreadNew>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <main+0x60>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80006c8:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <main+0x64>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <main+0x68>)
 80006ce:	f004 faab 	bl	8004c28 <osThreadNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <main+0x6c>)
 80006d6:	6013      	str	r3, [r2, #0]

  /* creation of tcp_thread */
  tcp_threadHandle = osThreadNew(start_tcp_thread, NULL, &tcp_thread_attributes);
 80006d8:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <main+0x70>)
 80006da:	2100      	movs	r1, #0
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <main+0x74>)
 80006de:	f004 faa3 	bl	8004c28 <osThreadNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <main+0x78>)
 80006e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e8:	f004 fa40 	bl	8004b6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x54>
 80006ee:	bf00      	nop
 80006f0:	0801a2ac 	.word	0x0801a2ac
 80006f4:	080008e9 	.word	0x080008e9
 80006f8:	200001ec 	.word	0x200001ec
 80006fc:	0801a2d0 	.word	0x0801a2d0
 8000700:	08000901 	.word	0x08000901
 8000704:	200001f0 	.word	0x200001f0
 8000708:	0801a2f4 	.word	0x0801a2f4
 800070c:	08000921 	.word	0x08000921
 8000710:	200001f4 	.word	0x200001f4

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f015 fb3b 	bl	8015d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <SystemClock_Config+0xd4>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <SystemClock_Config+0xd4>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xd4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a25      	ldr	r2, [pc, #148]	; (80007ec <SystemClock_Config+0xd8>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800077c:	2319      	movs	r3, #25
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000780:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fbe2 	bl	8002f5c <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800079e:	f000 f911 	bl	80009c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a2:	f002 fb8b 	bl	8002ebc <HAL_PWREx_EnableOverDrive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007ac:	f000 f90a 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2107      	movs	r1, #7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fe68 	bl	80034a4 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007da:	f000 f8f3 	bl	80009c4 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_GPIO_Init+0xec>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <MX_GPIO_Init+0xec>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_GPIO_Init+0xec>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <MX_GPIO_Init+0xec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <MX_GPIO_Init+0xec>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_GPIO_Init+0xec>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_GPIO_Init+0xec>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <MX_GPIO_Init+0xec>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0xec>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_GPIO_Init+0xec>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a22      	ldr	r2, [pc, #136]	; (80008dc <MX_GPIO_Init+0xec>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_GPIO_Init+0xec>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_GPIO_Init+0xec>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_GPIO_Init+0xec>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_GPIO_Init+0xec>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000884:	4816      	ldr	r0, [pc, #88]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000886:	f002 fae5 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000890:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_GPIO_Init+0xf4>)
 8000892:	f002 fadf 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_GPIO_Init+0xf0>)
 80008b0:	f002 f924 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0xf4>)
 80008ce:	f002 f915 	bl	8002afc <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40020800 	.word	0x40020800

080008e8 <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008f0:	f003 fac6 	bl	8003e80 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  tcpclient_init();
 80008f4:	f000 faea 	bl	8000ecc <tcpclient_init>
  for (;;) {
    osDelay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f004 fa3b 	bl	8004d74 <osDelay>
 80008fe:	e7fb      	b.n	80008f8 <start_conn_handler+0x10>

08000900 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_control */
  /* Infinite loop */
  for(;;)
  {
	if (1)
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <start_motor_control+0x1c>)
 800090e:	f002 faba 	bl	8002e86 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f004 fa2e 	bl	8004d74 <osDelay>
	if (1)
 8000918:	e7f6      	b.n	8000908 <start_motor_control+0x8>
 800091a:	bf00      	nop
 800091c:	40020400 	.word	0x40020400

08000920 <start_tcp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_tcp_thread */
void start_tcp_thread(void *argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_tcp_thread */
  struct netif *gnetif = get_static_netif();
 8000928:	f003 faa0 	bl	8003e6c <get_static_netif>
 800092c:	4603      	mov	r3, r0
 800092e:	60fb      	str	r3, [r7, #12]
  ethernetif_input(gnetif);
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f003 fe47 	bl	80045c4 <ethernetif_input>
  sys_check_timeouts();
 8000936:	f012 fbf9 	bl	801312c <sys_check_timeouts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f004 fa1a 	bl	8004d74 <osDelay>
 8000940:	e7fb      	b.n	800093a <start_tcp_thread+0x1a>
	...

08000944 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000956:	f000 fda7 	bl	80014a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800095a:	2301      	movs	r3, #1
 800095c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800095e:	2300      	movs	r3, #0
 8000960:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MPU_Config+0x58>)
 8000964:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000966:	230e      	movs	r3, #14
 8000968:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800096a:	2300      	movs	r3, #0
 800096c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800096e:	2301      	movs	r3, #1
 8000970:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000972:	2303      	movs	r3, #3
 8000974:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000976:	2301      	movs	r3, #1
 8000978:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800097a:	2301      	movs	r3, #1
 800097c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000986:	463b      	mov	r3, r7
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fdc5 	bl	8001518 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800098e:	2004      	movs	r0, #4
 8000990:	f000 fda2 	bl	80014d8 <HAL_MPU_Enable>

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20010000 	.word	0x20010000

080009a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b2:	f000 fc53 	bl	800125c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010000 	.word	0x40010000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	210f      	movs	r1, #15
 8000a0a:	f06f 0001 	mvn.w	r0, #1
 8000a0e:	f000 fd21 	bl	8001454 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <HAL_InitTick+0xd0>)
 8000a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a34:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <HAL_InitTick+0xd0>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <HAL_InitTick+0xd0>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a48:	f107 020c 	add.w	r2, r7, #12
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fef8 	bl	8003848 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a58:	f002 fee2 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <HAL_InitTick+0xd4>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9b      	lsrs	r3, r3, #18
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_InitTick+0xd8>)
 8000a72:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_InitTick+0xdc>)
 8000a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_InitTick+0xd8>)
 8000a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <HAL_InitTick+0xd8>)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_InitTick+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_InitTick+0xd8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_InitTick+0xd8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <HAL_InitTick+0xd8>)
 8000a98:	f002 ff08 	bl	80038ac <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d11b      	bne.n	8000ae2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aaa:	4813      	ldr	r0, [pc, #76]	; (8000af8 <HAL_InitTick+0xd8>)
 8000aac:	f002 ff60 	bl	8003970 <HAL_TIM_Base_Start_IT>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d111      	bne.n	8000ae2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000abe:	2019      	movs	r0, #25
 8000ac0:	f000 fce4 	bl	800148c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	d808      	bhi.n	8000adc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aca:	2200      	movs	r2, #0
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	2019      	movs	r0, #25
 8000ad0:	f000 fcc0 	bl	8001454 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_InitTick+0xe0>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e002      	b.n	8000ae2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	200001f8 	.word	0x200001f8
 8000afc:	40010000 	.word	0x40010000
 8000b00:	20000004 	.word	0x20000004

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b36:	f002 ff93 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001f8 	.word	0x200001f8

08000b44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <ETH_IRQHandler+0x10>)
 8000b4a:	f001 f903 	bl	8001d54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20004d98 	.word	0x20004d98

08000b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	return 1;
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <_kill>:

int _kill(int pid, int sig)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <_kill+0x20>)
 8000b74:	2216      	movs	r2, #22
 8000b76:	601a      	str	r2, [r3, #0]
	return -1;
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20011aac 	.word	0x20011aac

08000b8c <_exit>:

void _exit (int status)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ffe5 	bl	8000b68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b9e:	e7fe      	b.n	8000b9e <_exit+0x12>

08000ba0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
	}

return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e009      	b.n	8000c00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf1      	blt.n	8000bec <_write+0x12>
	}
	return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
	return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_isatty>:

int _isatty(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
	return 1;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d205      	bcs.n	8000cb8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <_sbrk+0x6c>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	20050000 	.word	0x20050000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	20000244 	.word	0x20000244
 8000ce4:	20011ab0 	.word	0x20011ab0
 8000ce8:	20011aac 	.word	0x20011aac

08000cec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <SystemInit+0x24>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <SystemInit+0x24>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SystemInit+0x28>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00
 8000d14:	40023800 	.word	0x40023800

08000d18 <tcpinit_thread>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2010      	movs	r0, #16
 8000d26:	f007 ff3f 	bl	8008ba8 <netconn_new_with_proto_and_callback>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a3c      	ldr	r2, [pc, #240]	; (8000e20 <tcpinit_thread+0x108>)
 8000d2e:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <tcpinit_thread+0x108>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d06e      	beq.n	8000e16 <tcpinit_thread+0xfe>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8000d38:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <tcpinit_thread+0x108>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	4939      	ldr	r1, [pc, #228]	; (8000e24 <tcpinit_thread+0x10c>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f007 ffeb 	bl	8008d1c <netconn_bind>
 8000d46:	4603      	mov	r3, r0
 8000d48:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d15c      	bne.n	8000e0c <tcpinit_thread+0xf4>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 10, 42, 0, 1);
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <tcpinit_thread+0x110>)
 8000d54:	4a35      	ldr	r2, [pc, #212]	; (8000e2c <tcpinit_thread+0x114>)
 8000d56:	601a      	str	r2, [r3, #0]
			dest_port = 3000;  // server port
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <tcpinit_thread+0x118>)
 8000d5a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d5e:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <tcpinit_thread+0x108>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <tcpinit_thread+0x118>)
 8000d66:	8812      	ldrh	r2, [r2, #0]
 8000d68:	492f      	ldr	r1, [pc, #188]	; (8000e28 <tcpinit_thread+0x110>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f008 f80e 	bl	8008d8c <netconn_connect>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8000d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d13c      	bne.n	8000df6 <tcpinit_thread+0xde>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8000d7c:	482d      	ldr	r0, [pc, #180]	; (8000e34 <tcpinit_thread+0x11c>)
 8000d7e:	f014 fe05 	bl	801598c <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <tcpinit_thread+0x108>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	492c      	ldr	r1, [pc, #176]	; (8000e38 <tcpinit_thread+0x120>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f008 f99b 	bl	80090c4 <netconn_recv>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f6      	bne.n	8000d82 <tcpinit_thread+0x6a>
					{
						/* Extract the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <tcpinit_thread+0x120>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3308      	adds	r3, #8
 8000d9a:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <tcpinit_thread+0x124>)
 8000d9c:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <tcpinit_thread+0x120>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	899a      	ldrh	r2, [r3, #12]
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <tcpinit_thread+0x128>)
 8000da6:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <tcpinit_thread+0x120>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6859      	ldr	r1, [r3, #4]
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <tcpinit_thread+0x120>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	895b      	ldrh	r3, [r3, #10]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4822      	ldr	r0, [pc, #136]	; (8000e44 <tcpinit_thread+0x12c>)
 8000dbc:	f015 f9bf 	bl	801613e <strncpy>

							// Or modify the message received, so that we can send it back to the server
//							sprintf (smsgc, "\"%s\" was sent by the Server\n", msgc);

							// semaphore must be taken before accessing the tcpsend function
							sys_arch_sem_wait(&tcpsem, 500);
 8000dc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dc4:	481b      	ldr	r0, [pc, #108]	; (8000e34 <tcpinit_thread+0x11c>)
 8000dc6:	f014 fdb0 	bl	801592a <sys_arch_sem_wait>

							// send the data to the TCP Server
							tcpsend (smsgc);
 8000dca:	481f      	ldr	r0, [pc, #124]	; (8000e48 <tcpinit_thread+0x130>)
 8000dcc:	f000 f83e 	bl	8000e4c <tcpsend>

							memset (msgc, '\0', 100);  // clear the buffer
 8000dd0:	2264      	movs	r2, #100	; 0x64
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	481b      	ldr	r0, [pc, #108]	; (8000e44 <tcpinit_thread+0x12c>)
 8000dd6:	f014 ffe2 	bl	8015d9e <memset>
						}
						while (netbuf_next(buf) >0);
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <tcpinit_thread+0x120>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f009 fe1e 	bl	800aa20 <netbuf_next>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	dcde      	bgt.n	8000da8 <tcpinit_thread+0x90>

						netbuf_delete(buf);
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <tcpinit_thread+0x120>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f009 fdf6 	bl	800a9e0 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 8000df4:	e7c5      	b.n	8000d82 <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <tcpinit_thread+0x108>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f008 fad0 	bl	80093a0 <netconn_close>
				netconn_delete(conn);
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <tcpinit_thread+0x108>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 ff6d 	bl	8008ce4 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8000e0a:	e004      	b.n	8000e16 <tcpinit_thread+0xfe>
			netconn_delete(conn);
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <tcpinit_thread+0x108>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 ff67 	bl	8008ce4 <netconn_delete>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000248 	.word	0x20000248
 8000e24:	0801a440 	.word	0x0801a440
 8000e28:	20000254 	.word	0x20000254
 8000e2c:	01002a0a 	.word	0x01002a0a
 8000e30:	2000025a 	.word	0x2000025a
 8000e34:	2000038c 	.word	0x2000038c
 8000e38:	2000024c 	.word	0x2000024c
 8000e3c:	20000250 	.word	0x20000250
 8000e40:	20000258 	.word	0x20000258
 8000e44:	2000025c 	.word	0x2000025c
 8000e48:	200002c0 	.word	0x200002c0

08000e4c <tcpsend>:

void tcpsend (char *data)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <tcpsend+0x30>)
 8000e56:	681c      	ldr	r4, [r3, #0]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff f9d9 	bl	8000210 <strlen>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	2300      	movs	r3, #0
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f008 f997 	bl	800919c <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <tcpsend+0x34>)
 8000e70:	f014 fd8c 	bl	801598c <sys_sem_signal>
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	20000248 	.word	0x20000248
 8000e80:	2000038c 	.word	0x2000038c

08000e84 <tcpsend_thread>:


static void tcpsend_thread (void *arg)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx++);
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <tcpsend_thread+0x38>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	490a      	ldr	r1, [pc, #40]	; (8000ebc <tcpsend_thread+0x38>)
 8000e94:	600a      	str	r2, [r1, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <tcpsend_thread+0x3c>)
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <tcpsend_thread+0x40>)
 8000e9c:	f015 f8ec 	bl	8016078 <siprintf>
		// semaphore must be taken before accessing the tcpsend function
		sys_arch_sem_wait(&tcpsem, 500);
 8000ea0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <tcpsend_thread+0x44>)
 8000ea6:	f014 fd40 	bl	801592a <sys_arch_sem_wait>
		// send the data to the server
		tcpsend(smsgc);
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <tcpsend_thread+0x40>)
 8000eac:	f7ff ffce 	bl	8000e4c <tcpsend>
		osDelay(500);
 8000eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb4:	f003 ff5e 	bl	8004d74 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx++);
 8000eb8:	e7e8      	b.n	8000e8c <tcpsend_thread+0x8>
 8000eba:	bf00      	nop
 8000ebc:	20000388 	.word	0x20000388
 8000ec0:	08017100 	.word	0x08017100
 8000ec4:	200002c0 	.word	0x200002c0
 8000ec8:	2000038c 	.word	0x2000038c

08000ecc <tcpclient_init>:




void tcpclient_init (void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <tcpclient_init+0x3c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f014 fd01 	bl	80158e0 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000ede:	2318      	movs	r3, #24
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4908      	ldr	r1, [pc, #32]	; (8000f0c <tcpclient_init+0x40>)
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <tcpclient_init+0x44>)
 8000eec:	f014 fdc4 	bl	8015a78 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000ef0:	2318      	movs	r3, #24
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4906      	ldr	r1, [pc, #24]	; (8000f14 <tcpclient_init+0x48>)
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <tcpclient_init+0x4c>)
 8000efe:	f014 fdbb 	bl	8015a78 <sys_thread_new>
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000038c 	.word	0x2000038c
 8000f0c:	08000d19 	.word	0x08000d19
 8000f10:	08017114 	.word	0x08017114
 8000f14:	08000e85 	.word	0x08000e85
 8000f18:	08017124 	.word	0x08017124

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f46:	f7ff fed1 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f014 fec9 	bl	8015ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fba3 	bl	8000698 <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f60:	0801a5ac 	.word	0x0801a5ac
  ldr r2, =_sbss
 8000f64:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000f68:	20011ab0 	.word	0x20011ab0

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>

08000f6e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00b      	beq.n	8000f96 <LAN8742_RegisterBusIO+0x28>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <LAN8742_RegisterBusIO+0x28>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <LAN8742_RegisterBusIO+0x28>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9a:	e014      	b.n	8000fc6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d17c      	bne.n	80010ec <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2220      	movs	r2, #32
 8001004:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e01c      	b.n	8001046 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f107 0208 	add.w	r2, r7, #8
 8001014:	2112      	movs	r1, #18
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	4798      	blx	r3
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	da03      	bge.n	8001028 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001020:	f06f 0304 	mvn.w	r3, #4
 8001024:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001026:	e00b      	b.n	8001040 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	d105      	bne.n	8001040 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
         break;
 800103e:	e005      	b.n	800104c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2b1f      	cmp	r3, #31
 800104a:	d9df      	bls.n	800100c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b1f      	cmp	r3, #31
 8001052:	d902      	bls.n	800105a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001054:	f06f 0302 	mvn.w	r3, #2
 8001058:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d145      	bne.n	80010ec <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6810      	ldr	r0, [r2, #0]
 8001068:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800106c:	2100      	movs	r1, #0
 800106e:	4798      	blx	r3
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	db37      	blt.n	80010e6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6810      	ldr	r0, [r2, #0]
 800107e:	f107 0208 	add.w	r2, r7, #8
 8001082:	2100      	movs	r1, #0
 8001084:	4798      	blx	r3
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	db28      	blt.n	80010de <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4798      	blx	r3
 8001092:	4603      	mov	r3, r0
 8001094:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001096:	e01c      	b.n	80010d2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4798      	blx	r3
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010aa:	d80e      	bhi.n	80010ca <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6810      	ldr	r0, [r2, #0]
 80010b4:	f107 0208 	add.w	r2, r7, #8
 80010b8:	2100      	movs	r1, #0
 80010ba:	4798      	blx	r3
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da07      	bge.n	80010d2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80010c2:	f06f 0304 	mvn.w	r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
                 break;
 80010c8:	e010      	b.n	80010ec <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80010ca:	f06f 0301 	mvn.w	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
               break;
 80010d0:	e00c      	b.n	80010ec <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1dd      	bne.n	8001098 <LAN8742_Init+0xc6>
 80010dc:	e006      	b.n	80010ec <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80010de:	f06f 0304 	mvn.w	r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	e002      	b.n	80010ec <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80010e6:	f06f 0303 	mvn.w	r3, #3
 80010ea:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d112      	bne.n	8001118 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4798      	blx	r3
 80010f8:	4603      	mov	r3, r0
 80010fa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80010fc:	bf00      	nop
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4798      	blx	r3
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001110:	d9f5      	bls.n	80010fe <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001118:	693b      	ldr	r3, [r7, #16]
 }
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6810      	ldr	r0, [r2, #0]
 8001136:	f107 020c 	add.w	r2, r7, #12
 800113a:	2101      	movs	r1, #1
 800113c:	4798      	blx	r3
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	da02      	bge.n	800114a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001144:	f06f 0304 	mvn.w	r3, #4
 8001148:	e06e      	b.n	8001228 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6810      	ldr	r0, [r2, #0]
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	2101      	movs	r1, #1
 8001158:	4798      	blx	r3
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	da02      	bge.n	8001166 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001160:	f06f 0304 	mvn.w	r3, #4
 8001164:	e060      	b.n	8001228 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001170:	2301      	movs	r3, #1
 8001172:	e059      	b.n	8001228 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6810      	ldr	r0, [r2, #0]
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	2100      	movs	r1, #0
 8001182:	4798      	blx	r3
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	da02      	bge.n	8001190 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800118a:	f06f 0304 	mvn.w	r3, #4
 800118e:	e04b      	b.n	8001228 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d11b      	bne.n	80011d2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <LAN8742_GetLinkState+0x90>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011ae:	2302      	movs	r3, #2
 80011b0:	e03a      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011bc:	2303      	movs	r3, #3
 80011be:	e033      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011ca:	2304      	movs	r3, #4
 80011cc:	e02c      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011ce:	2305      	movs	r3, #5
 80011d0:	e02a      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6810      	ldr	r0, [r2, #0]
 80011da:	f107 020c 	add.w	r2, r7, #12
 80011de:	211f      	movs	r1, #31
 80011e0:	4798      	blx	r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da02      	bge.n	80011ee <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80011e8:	f06f 0304 	mvn.w	r3, #4
 80011ec:	e01c      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011f8:	2306      	movs	r3, #6
 80011fa:	e015      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 031c 	and.w	r3, r3, #28
 8001202:	2b18      	cmp	r3, #24
 8001204:	d101      	bne.n	800120a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001206:	2302      	movs	r3, #2
 8001208:	e00e      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f003 031c 	and.w	r3, r3, #28
 8001210:	2b08      	cmp	r3, #8
 8001212:	d101      	bne.n	8001218 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001214:	2303      	movs	r3, #3
 8001216:	e007      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 031c 	and.w	r3, r3, #28
 800121e:	2b14      	cmp	r3, #20
 8001220:	d101      	bne.n	8001226 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001222:	2304      	movs	r3, #4
 8001224:	e000      	b.n	8001228 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001226:	2305      	movs	r3, #5
    }				
  }
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_Init+0x28>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_Init+0x28>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f8fc 	bl	800143e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	200f      	movs	r0, #15
 8001248:	f7ff fbea 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fbc0 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	20000390 	.word	0x20000390

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000390 	.word	0x20000390

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <__NVIC_SetPriorityGrouping>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	4313      	orrs	r3, r2
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	05fa0000 	.word	0x05fa0000

0800132c <__NVIC_GetPriorityGrouping>:
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff4c 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001466:	f7ff ff61 	bl	800132c <__NVIC_GetPriorityGrouping>
 800146a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f7ff ffb1 	bl	80013d8 <NVIC_EncodePriority>
 8001476:	4602      	mov	r2, r0
 8001478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff80 	bl	8001384 <__NVIC_SetPriority>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff54 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014ac:	f3bf 8f5f 	dmb	sy
}
 80014b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_MPU_Disable+0x28>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_MPU_Disable+0x28>)
 80014b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014bc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_MPU_Disable+0x2c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	e000ed90 	.word	0xe000ed90

080014d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_MPU_Enable+0x38>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_MPU_Enable+0x3c>)
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <HAL_MPU_Enable+0x3c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014f6:	f3bf 8f4f 	dsb	sy
}
 80014fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014fc:	f3bf 8f6f 	isb	sy
}
 8001500:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed90 	.word	0xe000ed90
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	785a      	ldrb	r2, [r3, #1]
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_MPU_ConfigRegion+0x84>)
 8001526:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d029      	beq.n	8001584 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001530:	4a1a      	ldr	r2, [pc, #104]	; (800159c <HAL_MPU_ConfigRegion+0x84>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7b1b      	ldrb	r3, [r3, #12]
 800153c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7adb      	ldrb	r3, [r3, #11]
 8001542:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001544:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7a9b      	ldrb	r3, [r3, #10]
 800154a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800154c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7b5b      	ldrb	r3, [r3, #13]
 8001552:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001554:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7b9b      	ldrb	r3, [r3, #14]
 800155a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800155c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7bdb      	ldrb	r3, [r3, #15]
 8001562:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001564:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7a5b      	ldrb	r3, [r3, #9]
 800156a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800156c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7a1b      	ldrb	r3, [r3, #8]
 8001572:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001574:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800157e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001580:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001582:	e005      	b.n	8001590 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_MPU_ConfigRegion+0x84>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_MPU_ConfigRegion+0x84>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed90 	.word	0xe000ed90

080015a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e06a      	b.n	8001688 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d106      	bne.n	80015ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2223      	movs	r2, #35	; 0x23
 80015c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f003 f87d 	bl	80046c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b31      	ldr	r3, [pc, #196]	; (8001690 <HAL_ETH_Init+0xf0>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a30      	ldr	r2, [pc, #192]	; (8001690 <HAL_ETH_Init+0xf0>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <HAL_ETH_Init+0xf0>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015e2:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_ETH_Init+0xf4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <HAL_ETH_Init+0xf4>)
 80015e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015ee:	4b29      	ldr	r3, [pc, #164]	; (8001694 <HAL_ETH_Init+0xf4>)
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4927      	ldr	r1, [pc, #156]	; (8001694 <HAL_ETH_Init+0xf4>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_ETH_Init+0xf4>)
 80015fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001618:	f7ff fe34 	bl	8001284 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800161e:	e011      	b.n	8001644 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001620:	f7ff fe30 	bl	8001284 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800162e:	d909      	bls.n	8001644 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2204      	movs	r2, #4
 8001634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	22e0      	movs	r2, #224	; 0xe0
 800163c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e021      	b.n	8001688 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1e4      	bne.n	8001620 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 ffac 	bl	80025b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f001 f853 	bl	8002708 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f001 f8a9 	bl	80027ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	461a      	mov	r2, r3
 800166e:	2100      	movs	r1, #0
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f001 f811 	bl	8002698 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2210      	movs	r2, #16
 8001682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40013800 	.word	0x40013800

08001698 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016a6:	2b10      	cmp	r3, #16
 80016a8:	d150      	bne.n	800174c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2223      	movs	r2, #35	; 0x23
 80016ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2204      	movs	r2, #4
 80016b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fa7b 	bl	8001bb4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0208 	orr.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff fde0 	bl	800129c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0204 	orr.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff fdcd 	bl	800129c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fdf3 	bl	80022f6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001726:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800173e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2223      	movs	r2, #35	; 0x23
 8001744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e000      	b.n	800174e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
  }
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001766:	2b10      	cmp	r3, #16
 8001768:	d17b      	bne.n	8001862 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2223      	movs	r2, #35	; 0x23
 800176e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <HAL_ETH_Start_IT+0x114>)
 8001796:	430b      	orrs	r3, r1
 8001798:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80017ac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2204      	movs	r2, #4
 80017b4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f9fc 	bl	8001bb4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0208 	orr.w	r2, r2, #8
 80017ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff fd61 	bl	800129c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0204 	orr.w	r2, r2, #4
 80017f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff fd4e 	bl	800129c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fd74 	bl	80022f6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001824:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800183c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	69d9      	ldr	r1, [r3, #28]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_ETH_Start_IT+0x118>)
 800184e:	430b      	orrs	r3, r1
 8001850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001854:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2223      	movs	r2, #35	; 0x23
 800185a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
  }
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	00020060 	.word	0x00020060
 8001870:	0001a0c1 	.word	0x0001a0c1

08001874 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001882:	2b23      	cmp	r3, #35	; 0x23
 8001884:	d16e      	bne.n	8001964 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2223      	movs	r2, #35	; 0x23
 800188a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001896:	69d9      	ldr	r1, [r3, #28]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_ETH_Stop_IT+0xfc>)
 800189e:	400b      	ands	r3, r1
 80018a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018a4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018bc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	f023 0302 	bic.w	r3, r3, #2
 80018d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0204 	bic.w	r2, r2, #4
 80018e4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fcd4 	bl	800129c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fcfa 	bl	80022f6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0208 	bic.w	r2, r2, #8
 8001910:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800191a:	2001      	movs	r0, #1
 800191c:	f7ff fcbe 	bl	800129c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00e      	b.n	800194c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	3212      	adds	r2, #18
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d9ed      	bls.n	800192e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2210      	movs	r2, #16
 800195c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	e000      	b.n	8001966 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
  }
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	fffe5f3e 	.word	0xfffe5f3e

08001974 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e045      	b.n	8001a24 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800199e:	2b23      	cmp	r3, #35	; 0x23
 80019a0:	d13f      	bne.n	8001a22 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019aa:	2201      	movs	r2, #1
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 ff70 	bl	8002894 <ETH_Prepare_Tx_Descriptors>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e02a      	b.n	8001a24 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80019ce:	f3bf 8f4f 	dsb	sy
}
 80019d2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d904      	bls.n	80019f0 <HAL_ETH_Transmit_IT+0x7c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	1f1a      	subs	r2, r3, #4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0a8      	b.n	8001baa <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5e:	2b23      	cmp	r3, #35	; 0x23
 8001a60:	d001      	beq.n	8001a66 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0a1      	b.n	8001baa <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	3212      	adds	r2, #18
 8001a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a7c:	f1c3 0304 	rsb	r3, r3, #4
 8001a80:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a82:	e06a      	b.n	8001b5a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d103      	bne.n	8001ab4 <HAL_ETH_ReadData+0x88>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d040      	beq.n	8001b36 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ae8:	3b04      	subs	r3, #4
 8001aea:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b10:	461a      	mov	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f002 ffa1 	bl	8004a5c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	441a      	add	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d902      	bls.n	8001b48 <HAL_ETH_ReadData+0x11c>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b04      	subs	r3, #4
 8001b46:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	3212      	adds	r2, #18
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db06      	blt.n	8001b70 <HAL_ETH_ReadData+0x144>
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d202      	bcs.n	8001b70 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d089      	beq.n	8001a84 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	441a      	add	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f815 	bl	8001bb4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bc8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	3212      	adds	r2, #18
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bda:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001bdc:	e040      	b.n	8001c60 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d112      	bne.n	8001c0c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 ff06 	bl	80049fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	74fb      	strb	r3, [r7, #19]
 8001bfa:	e007      	b.n	8001c0c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	461a      	mov	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c0c:	7cfb      	ldrb	r3, [r7, #19]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d026      	beq.n	8001c60 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <ETH_UpdateDescriptor+0xe4>)
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	e003      	b.n	8001c2a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001c28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c2a:	f3bf 8f5f 	dmb	sy
}
 8001c2e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d902      	bls.n	8001c4e <ETH_UpdateDescriptor+0x9a>
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	3212      	adds	r2, #18
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <ETH_UpdateDescriptor+0xb8>
 8001c66:	7cfb      	ldrb	r3, [r7, #19]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1b8      	bne.n	8001bde <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d00c      	beq.n	8001c90 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	800045f8 	.word	0x800045f8

08001c9c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3318      	adds	r3, #24
 8001ca8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cba:	e03f      	b.n	8001d3c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d028      	beq.n	8001d3c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db1b      	blt.n	8001d38 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	3304      	adds	r3, #4
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fee7 	bl	8004ae0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	3304      	adds	r3, #4
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3301      	adds	r3, #1
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d36:	e001      	b.n	8001d3c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_ETH_ReleaseTxPacket+0xac>
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1b9      	bne.n	8001cbc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b40      	cmp	r3, #64	; 0x40
 8001d6c:	d112      	bne.n	8001d94 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7c:	2b40      	cmp	r3, #64	; 0x40
 8001d7e:	d109      	bne.n	8001d94 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_ETH_IRQHandler+0x178>)
 8001d8c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f002 f9fa 	bl	8004188 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d113      	bne.n	8001dce <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10a      	bne.n	8001dce <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001dc6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f002 f9ed 	bl	80041a8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de0:	d14c      	bne.n	8001e7c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df4:	d142      	bne.n	8001e7c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	f043 0208 	orr.w	r2, r3, #8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e18:	d11a      	bne.n	8001e50 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_ETH_IRQHandler+0x17c>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001e40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e44:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	22e0      	movs	r2, #224	; 0xe0
 8001e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e4e:	e012      	b.n	8001e76 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e5e:	4013      	ands	r3, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e74:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f002 f9a6 	bl	80041c8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d10e      	bne.n	8001ea8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f81c 	bl	8001ed8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_ETH_IRQHandler+0x180>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_ETH_IRQHandler+0x180>)
 8001eb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001eba:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f815 	bl	8001eec <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	00010040 	.word	0x00010040
 8001ed0:	007e2000 	.word	0x007e2000
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 031c 	and.w	r3, r3, #28
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	02db      	lsls	r3, r3, #11
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	019b      	lsls	r3, r3, #6
 8001f2e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f023 0302 	bic.w	r3, r3, #2
 8001f3e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001f50:	f7ff f998 	bl	8001284 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f56:	e00d      	b.n	8001f74 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001f58:	f7ff f994 	bl	8001284 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f66:	d301      	bcc.n	8001f6c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e010      	b.n	8001f8e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ec      	bne.n	8001f58 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 031c 	and.w	r3, r3, #28
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	02db      	lsls	r3, r3, #11
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff0:	f7ff f948 	bl	8001284 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ff6:	e00d      	b.n	8002014 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ff8:	f7ff f944 	bl	8001284 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002006:	d301      	bcc.n	800200c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e009      	b.n	8002020 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ec      	bne.n	8001ff8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0d9      	b.n	80021f0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf14      	ite	ne
 800212e:	2301      	movne	r3, #1
 8002130:	2300      	moveq	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e00b      	b.n	8002228 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002216:	2b10      	cmp	r3, #16
 8002218:	d105      	bne.n	8002226 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800221a:	6839      	ldr	r1, [r7, #0]
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f88f 	bl	8002340 <ETH_SetMACConfig>

    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 031c 	bic.w	r3, r3, #28
 8002246:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002248:	f001 fade 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 800224c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d908      	bls.n	8002268 <HAL_ETH_SetMDIOClockRange+0x38>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d804      	bhi.n	8002268 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e027      	b.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d908      	bls.n	8002282 <HAL_ETH_SetMDIOClockRange+0x52>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d204      	bcs.n	8002282 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f043 030c 	orr.w	r3, r3, #12
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e01a      	b.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d303      	bcc.n	8002292 <HAL_ETH_SetMDIOClockRange+0x62>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d911      	bls.n	80022b6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d908      	bls.n	80022ac <HAL_ETH_SetMDIOClockRange+0x7c>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d804      	bhi.n	80022ac <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e005      	b.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f043 0310 	orr.w	r3, r3, #16
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e000      	b.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80022b6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	611a      	str	r2, [r3, #16]
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	01312cff 	.word	0x01312cff
 80022cc:	02160ebf 	.word	0x02160ebf
 80022d0:	03938700 	.word	0x03938700
 80022d4:	05f5e0ff 	.word	0x05f5e0ff
 80022d8:	08f0d17f 	.word	0x08f0d17f

080022dc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002314:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002318:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002326:	2001      	movs	r0, #1
 8002328:	f7fe ffb8 	bl	800129c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002336:	6193      	str	r3, [r2, #24]
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4b51      	ldr	r3, [pc, #324]	; (800249c <ETH_SetMACConfig+0x15c>)
 8002356:	4013      	ands	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7c1b      	ldrb	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <ETH_SetMACConfig+0x28>
 8002362:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002366:	e000      	b.n	800236a <ETH_SetMACConfig+0x2a>
 8002368:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	7c5b      	ldrb	r3, [r3, #17]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <ETH_SetMACConfig+0x38>
 8002372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002376:	e000      	b.n	800237a <ETH_SetMACConfig+0x3a>
 8002378:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800237a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002380:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	7fdb      	ldrb	r3, [r3, #31]
 8002386:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002388:	431a      	orrs	r2, r3
                        macconf->Speed |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800238e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	7f92      	ldrb	r2, [r2, #30]
 8002394:	2a00      	cmp	r2, #0
 8002396:	d102      	bne.n	800239e <ETH_SetMACConfig+0x5e>
 8002398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239c:	e000      	b.n	80023a0 <ETH_SetMACConfig+0x60>
 800239e:	2200      	movs	r2, #0
                        macconf->Speed |
 80023a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	7f1b      	ldrb	r3, [r3, #28]
 80023a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	791b      	ldrb	r3, [r3, #4]
 80023b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d102      	bne.n	80023c8 <ETH_SetMACConfig+0x88>
 80023c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c6:	e000      	b.n	80023ca <ETH_SetMACConfig+0x8a>
 80023c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	7bdb      	ldrb	r3, [r3, #15]
 80023d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023e2:	4313      	orrs	r3, r2
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7fe ff4e 	bl	800129c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002416:	4013      	ands	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002426:	2a00      	cmp	r2, #0
 8002428:	d101      	bne.n	800242e <ETH_SetMACConfig+0xee>
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	e000      	b.n	8002430 <ETH_SetMACConfig+0xf0>
 800242e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002430:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002436:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800243e:	2a01      	cmp	r2, #1
 8002440:	d101      	bne.n	8002446 <ETH_SetMACConfig+0x106>
 8002442:	2208      	movs	r2, #8
 8002444:	e000      	b.n	8002448 <ETH_SetMACConfig+0x108>
 8002446:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002448:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002450:	2a01      	cmp	r2, #1
 8002452:	d101      	bne.n	8002458 <ETH_SetMACConfig+0x118>
 8002454:	2204      	movs	r2, #4
 8002456:	e000      	b.n	800245a <ETH_SetMACConfig+0x11a>
 8002458:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800245a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002462:	2a01      	cmp	r2, #1
 8002464:	d101      	bne.n	800246a <ETH_SetMACConfig+0x12a>
 8002466:	2202      	movs	r2, #2
 8002468:	e000      	b.n	800246c <ETH_SetMACConfig+0x12c>
 800246a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800246c:	4313      	orrs	r3, r2
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe ff09 	bl	800129c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	ff20810f 	.word	0xff20810f

080024a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <ETH_SetDMAConfig+0x110>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7b1b      	ldrb	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <ETH_SetDMAConfig+0x2c>
 80024c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024ca:	e000      	b.n	80024ce <ETH_SetDMAConfig+0x2e>
 80024cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7b5b      	ldrb	r3, [r3, #13]
 80024d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	7f52      	ldrb	r2, [r2, #29]
 80024da:	2a00      	cmp	r2, #0
 80024dc:	d102      	bne.n	80024e4 <ETH_SetDMAConfig+0x44>
 80024de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024e2:	e000      	b.n	80024e6 <ETH_SetDMAConfig+0x46>
 80024e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	7b9b      	ldrb	r3, [r3, #14]
 80024ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	7f1b      	ldrb	r3, [r3, #28]
 80024fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80024fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	7f9b      	ldrb	r3, [r3, #30]
 8002502:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002504:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800250a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002512:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002514:	4313      	orrs	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002524:	461a      	mov	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002536:	2001      	movs	r0, #1
 8002538:	f7fe feb0 	bl	800129c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002544:	461a      	mov	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	791b      	ldrb	r3, [r3, #4]
 800254e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002554:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800255a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002560:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002568:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800256a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002572:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002578:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002586:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002594:	2001      	movs	r0, #1
 8002596:	f7fe fe81 	bl	800129c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	f8de3f23 	.word	0xf8de3f23

080025b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0a6      	sub	sp, #152	; 0x98
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025f0:	2300      	movs	r3, #0
 80025f2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800261c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002620:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002628:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fe86 	bl	8002340 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002634:	2301      	movs	r3, #1
 8002636:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002642:	2301      	movs	r3, #1
 8002644:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002656:	2300      	movs	r3, #0
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002668:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800266a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800266e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002674:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800267c:	2300      	movs	r3, #0
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff08 	bl	80024a0 <ETH_SetDMAConfig>
}
 8002690:	bf00      	nop
 8002692:	3798      	adds	r7, #152	; 0x98
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3305      	adds	r3, #5
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	3204      	adds	r2, #4
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <ETH_MACAddressConfig+0x68>)
 80026ba:	4413      	add	r3, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3303      	adds	r3, #3
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	061a      	lsls	r2, r3, #24
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3302      	adds	r3, #2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3301      	adds	r3, #1
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4313      	orrs	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	7812      	ldrb	r2, [r2, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <ETH_MACAddressConfig+0x6c>)
 80026ea:	4413      	add	r3, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40028040 	.word	0x40028040
 8002704:	40028044 	.word	0x40028044

08002708 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e03e      	b.n	8002794 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68d9      	ldr	r1, [r3, #12]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	3206      	adds	r2, #6
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d80c      	bhi.n	8002778 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68d9      	ldr	r1, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	e004      	b.n	8002782 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3301      	adds	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d9bd      	bls.n	8002716 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ac:	611a      	str	r2, [r3, #16]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e046      	b.n	8002856 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6919      	ldr	r1, [r3, #16]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002804:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800280c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	3212      	adds	r2, #18
 8002822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d80c      	bhi.n	8002846 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	e004      	b.n	8002850 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3301      	adds	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d9b5      	bls.n	80027c8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	60da      	str	r2, [r3, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002894:	b480      	push	{r7}
 8002896:	b08d      	sub	sp, #52	; 0x34
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3318      	adds	r3, #24
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028be:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028d6:	d007      	beq.n	80028e8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	3304      	adds	r3, #4
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0ff      	b.n	8002aec <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	3301      	adds	r3, #1
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002902:	4013      	ands	r3, r2
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	6852      	ldr	r2, [r2, #4]
 8002908:	431a      	orrs	r2, r3
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	431a      	orrs	r2, r3
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	431a      	orrs	r2, r3
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800296e:	f3bf 8f5f 	dmb	sy
}
 8002972:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002980:	e082      	b.n	8002a88 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e005      	b.n	80029ae <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	3301      	adds	r3, #1
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d902      	bls.n	80029c0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	3b04      	subs	r3, #4
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029e2:	d007      	beq.n	80029f4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	3304      	adds	r3, #4
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d029      	beq.n	8002a48 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a06:	e019      	b.n	8002a3c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a08:	f3bf 8f5f 	dmb	sy
}
 8002a0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d902      	bls.n	8002a2c <ETH_Prepare_Tx_Descriptors+0x198>
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	3b04      	subs	r3, #4
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	3301      	adds	r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3e1      	bcc.n	8002a08 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002a44:	2302      	movs	r3, #2
 8002a46:	e051      	b.n	8002aec <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	6852      	ldr	r2, [r2, #4]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a76:	f3bf 8f5f 	dmb	sy
}
 8002a7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f47f af78 	bne.w	8002982 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e005      	b.n	8002ab2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac2:	6979      	ldr	r1, [r7, #20]
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad4:	b672      	cpsid	i
}
 8002ad6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae6:	b662      	cpsie	i
}
 8002ae8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3734      	adds	r7, #52	; 0x34
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	ffffe000 	.word	0xffffe000

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e175      	b.n	8002e08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8164 	bne.w	8002e02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x56>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80be 	beq.w	8002e02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c9e:	4a61      	ldr	r2, [pc, #388]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_GPIO_Init+0x32c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d037      	beq.n	8002d3a <HAL_GPIO_Init+0x23e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a57      	ldr	r2, [pc, #348]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <HAL_GPIO_Init+0x23a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02b      	beq.n	8002d32 <HAL_GPIO_Init+0x236>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <HAL_GPIO_Init+0x338>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d025      	beq.n	8002d2e <HAL_GPIO_Init+0x232>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_GPIO_Init+0x33c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <HAL_GPIO_Init+0x22e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_GPIO_Init+0x340>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x22a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_GPIO_Init+0x344>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_GPIO_Init+0x348>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_GPIO_Init+0x34c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_GPIO_Init+0x350>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002d12:	2309      	movs	r3, #9
 8002d14:	e012      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d16:	230a      	movs	r3, #10
 8002d18:	e010      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	e00e      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e00c      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d22:	2306      	movs	r3, #6
 8002d24:	e00a      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e008      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e004      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f002 0203 	and.w	r2, r2, #3
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	4093      	lsls	r3, r2
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d4c:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7e:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da8:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	f67f ae86 	bls.w	8002b1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020c00 	.word	0x40020c00
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40021400 	.word	0x40021400
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40021c00 	.word	0x40021c00
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022400 	.word	0x40022400
 8002e50:	40013c00 	.word	0x40013c00

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e98:	887a      	ldrh	r2, [r7, #2]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	041a      	lsls	r2, r3, #16
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	400b      	ands	r3, r1
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eea:	f7fe f9cb 	bl	8001284 <HAL_GetTick>
 8002eee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ef0:	e009      	b.n	8002f06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef2:	f7fe f9c7 	bl	8001284 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f00:	d901      	bls.n	8002f06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e022      	b.n	8002f4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f20:	f7fe f9b0 	bl	8001284 <HAL_GetTick>
 8002f24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f26:	e009      	b.n	8002f3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f28:	f7fe f9ac 	bl	8001284 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f36:	d901      	bls.n	8002f3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e007      	b.n	8002f4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f48:	d1ee      	bne.n	8002f28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e291      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8087 	beq.w	800308e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f80:	4b96      	ldr	r3, [pc, #600]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8c:	4b93      	ldr	r3, [pc, #588]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d112      	bne.n	8002fbe <HAL_RCC_OscConfig+0x62>
 8002f98:	4b90      	ldr	r3, [pc, #576]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06c      	beq.n	800308c <HAL_RCC_OscConfig+0x130>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d168      	bne.n	800308c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e26b      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x7a>
 8002fc8:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a83      	ldr	r2, [pc, #524]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e02e      	b.n	8003034 <HAL_RCC_OscConfig+0xd8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x9c>
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7b      	ldr	r2, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8002ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xd8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0xc0>
 8003002:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a75      	ldr	r2, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b73      	ldr	r3, [pc, #460]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a72      	ldr	r2, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xd8>
 800301c:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b6c      	ldr	r3, [pc, #432]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6b      	ldr	r2, [pc, #428]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe f922 	bl	8001284 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe f91e 	bl	8001284 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e21f      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b61      	ldr	r3, [pc, #388]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xe8>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe f90e 	bl	8001284 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe f90a 	bl	8001284 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e20b      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x110>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d069      	beq.n	800316e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309a:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11c      	bne.n	80030ec <HAL_RCC_OscConfig+0x190>
 80030b2:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1df      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	493d      	ldr	r1, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	e040      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d023      	beq.n	800313c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a38      	ldr	r2, [pc, #224]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fe f8c0 	bl	8001284 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe f8bc 	bl	8001284 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1bd      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4929      	ldr	r1, [pc, #164]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
 800313a:	e018      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe f89c 	bl	8001284 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003150:	f7fe f898 	bl	8001284 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e199      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d038      	beq.n	80031ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d019      	beq.n	80031b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe f879 	bl	8001284 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe f875 	bl	8001284 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e176      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80031aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x23a>
 80031b4:	e01a      	b.n	80031ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	4a08      	ldr	r2, [pc, #32]	; (80031dc <HAL_RCC_OscConfig+0x280>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe f85f 	bl	8001284 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe f85b 	bl	8001284 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d903      	bls.n	80031e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e15c      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
 80031dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b91      	ldr	r3, [pc, #580]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ee      	bne.n	80031ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a4 	beq.w	8003342 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b8b      	ldr	r3, [pc, #556]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b88      	ldr	r3, [pc, #544]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a87      	ldr	r2, [pc, #540]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b85      	ldr	r3, [pc, #532]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003222:	4b82      	ldr	r3, [pc, #520]	; (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d118      	bne.n	8003260 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800322e:	4b7f      	ldr	r3, [pc, #508]	; (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7e      	ldr	r2, [pc, #504]	; (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe f823 	bl	8001284 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fe f81f 	bl	8001284 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e120      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003254:	4b75      	ldr	r3, [pc, #468]	; (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x31a>
 8003268:	4b6f      	ldr	r3, [pc, #444]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a6e      	ldr	r2, [pc, #440]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	e02d      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x33c>
 800327e:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a69      	ldr	r2, [pc, #420]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	4b67      	ldr	r3, [pc, #412]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a66      	ldr	r2, [pc, #408]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	e01c      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b05      	cmp	r3, #5
 800329e:	d10c      	bne.n	80032ba <HAL_RCC_OscConfig+0x35e>
 80032a0:	4b61      	ldr	r3, [pc, #388]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a60      	ldr	r2, [pc, #384]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	4b5e      	ldr	r3, [pc, #376]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	e00b      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5a      	ldr	r2, [pc, #360]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	4b58      	ldr	r3, [pc, #352]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a57      	ldr	r2, [pc, #348]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d015      	beq.n	8003306 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fd ffd3 	bl	8001284 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fd ffcf 	bl	8001284 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0ce      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ee      	beq.n	80032e2 <HAL_RCC_OscConfig+0x386>
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fd ffbd 	bl	8001284 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fd ffb9 	bl	8001284 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ee      	bne.n	800330e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003336:	4b3c      	ldr	r3, [pc, #240]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 800333c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80a4 	beq.w	8003494 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	d06b      	beq.n	8003430 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d149      	bne.n	80033f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd ff8a 	bl	8001284 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd ff86 	bl	8001284 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e087      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	4313      	orrs	r3, r2
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c0:	4b19      	ldr	r3, [pc, #100]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a18      	ldr	r2, [pc, #96]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd ff5a 	bl	8001284 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd ff56 	bl	8001284 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e057      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x478>
 80033f2:	e04f      	b.n	8003494 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd ff40 	bl	8001284 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fd ff3c 	bl	8001284 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e03d      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_RCC_OscConfig+0x4cc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x4ac>
 8003426:	e035      	b.n	8003494 <HAL_RCC_OscConfig+0x538>
 8003428:	40023800 	.word	0x40023800
 800342c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x544>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d028      	beq.n	8003490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d121      	bne.n	8003490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d11a      	bne.n	8003490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0d0      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d910      	bls.n	80034ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b67      	ldr	r3, [pc, #412]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	4965      	ldr	r1, [pc, #404]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003526:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d040      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d115      	bne.n	8003586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e073      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06b      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4936      	ldr	r1, [pc, #216]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	4313      	orrs	r3, r2
 8003596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003598:	f7fd fe74 	bl	8001284 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fd fe70 	bl	8001284 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e053      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 020c 	and.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1eb      	bne.n	80035a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d210      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 020f 	bic.w	r2, r3, #15
 80035de:	4922      	ldr	r1, [pc, #136]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f821 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x1cc>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1d0>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1d4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd f9e2 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	0801a318 	.word	0x0801a318
 8003674:	20000000 	.word	0x20000000
 8003678:	20000004 	.word	0x20000004

0800367c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003680:	b090      	sub	sp, #64	; 0x40
 8003682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
 8003688:	2300      	movs	r3, #0
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368c:	2300      	movs	r3, #0
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d00d      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x40>
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	f200 80a1 	bhi.w	80037e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x34>
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ae:	e09b      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_GetSysClockFreq+0x184>)
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036b4:	e09b      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b6:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ba:	e098      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036c6:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d028      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	2200      	movs	r2, #0
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	627a      	str	r2, [r7, #36]	; 0x24
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036e4:	2100      	movs	r1, #0
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e8:	fb03 f201 	mul.w	r2, r3, r1
 80036ec:	2300      	movs	r3, #0
 80036ee:	fb00 f303 	mul.w	r3, r0, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	4a43      	ldr	r2, [pc, #268]	; (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036f6:	fba0 1202 	umull	r1, r2, r0, r2
 80036fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036fc:	460a      	mov	r2, r1
 80036fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003702:	4413      	add	r3, r2
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2200      	movs	r2, #0
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003716:	f7fc fdd3 	bl	80002c0 <__aeabi_uldivmod>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4613      	mov	r3, r2
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003722:	e053      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003724:	4b35      	ldr	r3, [pc, #212]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	2200      	movs	r2, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	617a      	str	r2, [r7, #20]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003736:	f04f 0b00 	mov.w	fp, #0
 800373a:	4652      	mov	r2, sl
 800373c:	465b      	mov	r3, fp
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	0159      	lsls	r1, r3, #5
 8003748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374c:	0150      	lsls	r0, r2, #5
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	ebb2 080a 	subs.w	r8, r2, sl
 8003756:	eb63 090b 	sbc.w	r9, r3, fp
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800376a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800376e:	ebb2 0408 	subs.w	r4, r2, r8
 8003772:	eb63 0509 	sbc.w	r5, r3, r9
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	00eb      	lsls	r3, r5, #3
 8003780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003784:	00e2      	lsls	r2, r4, #3
 8003786:	4614      	mov	r4, r2
 8003788:	461d      	mov	r5, r3
 800378a:	eb14 030a 	adds.w	r3, r4, sl
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	eb45 030b 	adc.w	r3, r5, fp
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a2:	4629      	mov	r1, r5
 80037a4:	028b      	lsls	r3, r1, #10
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ac:	4621      	mov	r1, r4
 80037ae:	028a      	lsls	r2, r1, #10
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	2200      	movs	r2, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	60fa      	str	r2, [r7, #12]
 80037bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c0:	f7fc fd7e 	bl	80002c0 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80037dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetSysClockFreq+0x184>)
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3740      	adds	r7, #64	; 0x40
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	017d7840 	.word	0x017d7840

08003808 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_RCC_GetHCLKFreq+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000000 	.word	0x20000000

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003824:	f7ff fff0 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0b5b      	lsrs	r3, r3, #13
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	0801a328 	.word	0x0801a328

08003848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	220f      	movs	r2, #15
 8003856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0203 	and.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <HAL_RCC_GetClockConfig+0x60>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 020f 	and.w	r2, r3, #15
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40023c00 	.word	0x40023c00

080038ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e049      	b.n	8003952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f841 	bl	800395a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f000 fa00 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d001      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e054      	b.n	8003a32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d022      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x80>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d01d      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x80>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d018      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x80>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d013      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x80>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x80>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1e      	ldr	r2, [pc, #120]	; (8003a50 <HAL_TIM_Base_Start_IT+0xe0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d009      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x80>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_TIM_Base_Start_IT+0xe4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x80>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <HAL_TIM_Base_Start_IT+0xe8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d115      	bne.n	8003a1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_TIM_Base_Start_IT+0xec>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d015      	beq.n	8003a2e <HAL_TIM_Base_Start_IT+0xbe>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d011      	beq.n	8003a2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1a:	e008      	b.n	8003a2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e000      	b.n	8003a30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40010400 	.word	0x40010400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40001800 	.word	0x40001800
 8003a5c:	00010007 	.word	0x00010007

08003a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d122      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d11b      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0202 	mvn.w	r2, #2
 8003a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f905 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8f7 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f908 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d122      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11b      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0204 	mvn.w	r2, #4
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8db 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8cd 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8de 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d122      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d11b      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0208 	mvn.w	r2, #8
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8b1 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8a3 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f8b4 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d122      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0210 	mvn.w	r2, #16
 8003b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f887 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f879 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f88a 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0201 	mvn.w	r2, #1
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fc fede 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f91a 	bl	8003e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d10e      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b80      	cmp	r3, #128	; 0x80
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f90d 	bl	8003e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d10e      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f838 	bl	8003cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0220 	mvn.w	r2, #32
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8cd 	bl	8003e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a40      	ldr	r2, [pc, #256]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00f      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3d      	ldr	r2, [pc, #244]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d027      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d023      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d017      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <TIM_Base_SetConfig+0x134>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <TIM_Base_SetConfig+0x138>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <TIM_Base_SetConfig+0x13c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0xf8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40010400 	.word	0x40010400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	40001800 	.word	0x40001800
 8003e28:	40001c00 	.word	0x40001c00
 8003e2c:	40002000 	.word	0x40002000

08003e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return &gnetif;
 8003e70:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <get_static_netif+0x10>)
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000394 	.word	0x20000394

08003e80 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8003e86:	4b98      	ldr	r3, [pc, #608]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003e88:	220a      	movs	r2, #10
 8003e8a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8003e8c:	4b96      	ldr	r3, [pc, #600]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003e8e:	222a      	movs	r2, #42	; 0x2a
 8003e90:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003e92:	4b95      	ldr	r3, [pc, #596]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8003e98:	4b93      	ldr	r3, [pc, #588]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003e9e:	4b93      	ldr	r3, [pc, #588]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ea4:	4b91      	ldr	r3, [pc, #580]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003eaa:	4b90      	ldr	r3, [pc, #576]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003eb0:	4b8e      	ldr	r3, [pc, #568]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8003eb6:	4b8e      	ldr	r3, [pc, #568]	; (80040f0 <MX_LWIP_Init+0x270>)
 8003eb8:	220a      	movs	r2, #10
 8003eba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8003ebc:	4b8c      	ldr	r3, [pc, #560]	; (80040f0 <MX_LWIP_Init+0x270>)
 8003ebe:	222a      	movs	r2, #42	; 0x2a
 8003ec0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003ec2:	4b8b      	ldr	r3, [pc, #556]	; (80040f0 <MX_LWIP_Init+0x270>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003ec8:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <MX_LWIP_Init+0x270>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f006 ff43 	bl	800ad5c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003ed6:	4b84      	ldr	r3, [pc, #528]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	061a      	lsls	r2, r3, #24
 8003edc:	4b82      	ldr	r3, [pc, #520]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	4b80      	ldr	r3, [pc, #512]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003ee6:	789b      	ldrb	r3, [r3, #2]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	4313      	orrs	r3, r2
 8003eec:	4a7e      	ldr	r2, [pc, #504]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003eee:	78d2      	ldrb	r2, [r2, #3]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	061a      	lsls	r2, r3, #24
 8003ef4:	4b7c      	ldr	r3, [pc, #496]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	0619      	lsls	r1, r3, #24
 8003efa:	4b7b      	ldr	r3, [pc, #492]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	4319      	orrs	r1, r3
 8003f02:	4b79      	ldr	r3, [pc, #484]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f04:	789b      	ldrb	r3, [r3, #2]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	4977      	ldr	r1, [pc, #476]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f0c:	78c9      	ldrb	r1, [r1, #3]
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f16:	431a      	orrs	r2, r3
 8003f18:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	0619      	lsls	r1, r3, #24
 8003f1e:	4b72      	ldr	r3, [pc, #456]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	4319      	orrs	r1, r3
 8003f26:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f28:	789b      	ldrb	r3, [r3, #2]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	496e      	ldr	r1, [pc, #440]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f30:	78c9      	ldrb	r1, [r1, #3]
 8003f32:	430b      	orrs	r3, r1
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	0619      	lsls	r1, r3, #24
 8003f42:	4b69      	ldr	r3, [pc, #420]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	4319      	orrs	r1, r3
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f4c:	789b      	ldrb	r3, [r3, #2]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	430b      	orrs	r3, r1
 8003f52:	4965      	ldr	r1, [pc, #404]	; (80040e8 <MX_LWIP_Init+0x268>)
 8003f54:	78c9      	ldrb	r1, [r1, #3]
 8003f56:	430b      	orrs	r3, r1
 8003f58:	0e1b      	lsrs	r3, r3, #24
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	4a65      	ldr	r2, [pc, #404]	; (80040f4 <MX_LWIP_Init+0x274>)
 8003f5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003f60:	4b62      	ldr	r3, [pc, #392]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	061a      	lsls	r2, r3, #24
 8003f66:	4b61      	ldr	r3, [pc, #388]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	4b5f      	ldr	r3, [pc, #380]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f70:	789b      	ldrb	r3, [r3, #2]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	4313      	orrs	r3, r2
 8003f76:	4a5d      	ldr	r2, [pc, #372]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f78:	78d2      	ldrb	r2, [r2, #3]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	061a      	lsls	r2, r3, #24
 8003f7e:	4b5b      	ldr	r3, [pc, #364]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	0619      	lsls	r1, r3, #24
 8003f84:	4b59      	ldr	r3, [pc, #356]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	4319      	orrs	r1, r3
 8003f8c:	4b57      	ldr	r3, [pc, #348]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f8e:	789b      	ldrb	r3, [r3, #2]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	430b      	orrs	r3, r1
 8003f94:	4955      	ldr	r1, [pc, #340]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003f96:	78c9      	ldrb	r1, [r1, #3]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	4b52      	ldr	r3, [pc, #328]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	0619      	lsls	r1, r3, #24
 8003fa8:	4b50      	ldr	r3, [pc, #320]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	4319      	orrs	r1, r3
 8003fb0:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003fb2:	789b      	ldrb	r3, [r3, #2]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	494c      	ldr	r1, [pc, #304]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003fba:	78c9      	ldrb	r1, [r1, #3]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	4b49      	ldr	r3, [pc, #292]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	0619      	lsls	r1, r3, #24
 8003fcc:	4b47      	ldr	r3, [pc, #284]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	4319      	orrs	r1, r3
 8003fd4:	4b45      	ldr	r3, [pc, #276]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003fd6:	789b      	ldrb	r3, [r3, #2]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	4943      	ldr	r1, [pc, #268]	; (80040ec <MX_LWIP_Init+0x26c>)
 8003fde:	78c9      	ldrb	r1, [r1, #3]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	0e1b      	lsrs	r3, r3, #24
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	4a44      	ldr	r2, [pc, #272]	; (80040f8 <MX_LWIP_Init+0x278>)
 8003fe8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003fea:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <MX_LWIP_Init+0x270>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	061a      	lsls	r2, r3, #24
 8003ff0:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <MX_LWIP_Init+0x270>)
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <MX_LWIP_Init+0x270>)
 8003ffa:	789b      	ldrb	r3, [r3, #2]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	4313      	orrs	r3, r2
 8004000:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004002:	78d2      	ldrb	r2, [r2, #3]
 8004004:	4313      	orrs	r3, r2
 8004006:	061a      	lsls	r2, r3, #24
 8004008:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <MX_LWIP_Init+0x270>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	0619      	lsls	r1, r3, #24
 800400e:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	4319      	orrs	r1, r3
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004018:	789b      	ldrb	r3, [r3, #2]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	430b      	orrs	r3, r1
 800401e:	4934      	ldr	r1, [pc, #208]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004020:	78c9      	ldrb	r1, [r1, #3]
 8004022:	430b      	orrs	r3, r1
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800402a:	431a      	orrs	r2, r3
 800402c:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <MX_LWIP_Init+0x270>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	0619      	lsls	r1, r3, #24
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	4319      	orrs	r1, r3
 800403a:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <MX_LWIP_Init+0x270>)
 800403c:	789b      	ldrb	r3, [r3, #2]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	430b      	orrs	r3, r1
 8004042:	492b      	ldr	r1, [pc, #172]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004044:	78c9      	ldrb	r1, [r1, #3]
 8004046:	430b      	orrs	r3, r1
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800404e:	431a      	orrs	r2, r3
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	0619      	lsls	r1, r3, #24
 8004056:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004058:	785b      	ldrb	r3, [r3, #1]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	4319      	orrs	r1, r3
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004060:	789b      	ldrb	r3, [r3, #2]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	430b      	orrs	r3, r1
 8004066:	4922      	ldr	r1, [pc, #136]	; (80040f0 <MX_LWIP_Init+0x270>)
 8004068:	78c9      	ldrb	r1, [r1, #3]
 800406a:	430b      	orrs	r3, r1
 800406c:	0e1b      	lsrs	r3, r3, #24
 800406e:	4313      	orrs	r3, r2
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <MX_LWIP_Init+0x27c>)
 8004072:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <MX_LWIP_Init+0x280>)
 8004076:	9302      	str	r3, [sp, #8]
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <MX_LWIP_Init+0x284>)
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <MX_LWIP_Init+0x27c>)
 8004082:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <MX_LWIP_Init+0x278>)
 8004084:	491b      	ldr	r1, [pc, #108]	; (80040f4 <MX_LWIP_Init+0x274>)
 8004086:	4820      	ldr	r0, [pc, #128]	; (8004108 <MX_LWIP_Init+0x288>)
 8004088:	f007 fd4a 	bl	800bb20 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800408c:	481e      	ldr	r0, [pc, #120]	; (8004108 <MX_LWIP_Init+0x288>)
 800408e:	f007 fef5 	bl	800be7c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <MX_LWIP_Init+0x288>)
 8004094:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80040a4:	4818      	ldr	r0, [pc, #96]	; (8004108 <MX_LWIP_Init+0x288>)
 80040a6:	f007 fef9 	bl	800be9c <netif_set_up>
 80040aa:	e002      	b.n	80040b2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80040ac:	4816      	ldr	r0, [pc, #88]	; (8004108 <MX_LWIP_Init+0x288>)
 80040ae:	f007 ff61 	bl	800bf74 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80040b2:	4916      	ldr	r1, [pc, #88]	; (800410c <MX_LWIP_Init+0x28c>)
 80040b4:	4814      	ldr	r0, [pc, #80]	; (8004108 <MX_LWIP_Init+0x288>)
 80040b6:	f007 fff3 	bl	800c0a0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	2100      	movs	r1, #0
 80040be:	4814      	ldr	r0, [pc, #80]	; (8004110 <MX_LWIP_Init+0x290>)
 80040c0:	f011 fe6d 	bl	8015d9e <memset>
  attributes.name = "EthLink";
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <MX_LWIP_Init+0x290>)
 80040c6:	4a13      	ldr	r2, [pc, #76]	; (8004114 <MX_LWIP_Init+0x294>)
 80040c8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <MX_LWIP_Init+0x290>)
 80040cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80040d2:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <MX_LWIP_Init+0x290>)
 80040d4:	2210      	movs	r2, #16
 80040d6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80040d8:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <MX_LWIP_Init+0x290>)
 80040da:	490b      	ldr	r1, [pc, #44]	; (8004108 <MX_LWIP_Init+0x288>)
 80040dc:	480e      	ldr	r0, [pc, #56]	; (8004118 <MX_LWIP_Init+0x298>)
 80040de:	f000 fda3 	bl	8004c28 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200003d4 	.word	0x200003d4
 80040ec:	200003d8 	.word	0x200003d8
 80040f0:	200003dc 	.word	0x200003dc
 80040f4:	200003c8 	.word	0x200003c8
 80040f8:	200003cc 	.word	0x200003cc
 80040fc:	200003d0 	.word	0x200003d0
 8004100:	0800ac6d 	.word	0x0800ac6d
 8004104:	08004619 	.word	0x08004619
 8004108:	20000394 	.word	0x20000394
 800410c:	0800411d 	.word	0x0800411d
 8004110:	200003e0 	.word	0x200003e0
 8004114:	08017134 	.word	0x08017134
 8004118:	080048e1 	.word	0x080048e1

0800411c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004142:	2320      	movs	r3, #32
 8004144:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004146:	f3bf 8f4f 	dsb	sy
}
 800414a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800414c:	e00b      	b.n	8004166 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800414e:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	dcf0      	bgt.n	800414e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800416c:	f3bf 8f4f 	dsb	sy
}
 8004170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004172:	f3bf 8f6f 	isb	sy
}
 8004176:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00

08004188 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f001 f865 	bl	8005264 <osSemaphoreRelease>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20004d90 	.word	0x20004d90

080041a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <HAL_ETH_TxCpltCallback+0x1c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f855 	bl	8005264 <osSemaphoreRelease>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20004d94 	.word	0x20004d94

080041c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7fe f883 	bl	80022dc <HAL_ETH_GetDMAError>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d104      	bne.n	80041ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <HAL_ETH_ErrorCallback+0x2c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 f83d 	bl	8005264 <osSemaphoreRelease>
  }
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20004d90 	.word	0x20004d90

080041f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b0aa      	sub	sp, #168	; 0xa8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004212:	f107 0310 	add.w	r3, r7, #16
 8004216:	2264      	movs	r2, #100	; 0x64
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f011 fdbf 	bl	8015d9e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004220:	4b85      	ldr	r3, [pc, #532]	; (8004438 <low_level_init+0x240>)
 8004222:	4a86      	ldr	r2, [pc, #536]	; (800443c <low_level_init+0x244>)
 8004224:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004226:	2300      	movs	r3, #0
 8004228:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800422e:	23e1      	movs	r3, #225	; 0xe1
 8004230:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004232:	2300      	movs	r3, #0
 8004234:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004236:	2300      	movs	r3, #0
 8004238:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800423a:	2300      	movs	r3, #0
 800423c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800423e:	4a7e      	ldr	r2, [pc, #504]	; (8004438 <low_level_init+0x240>)
 8004240:	f107 0308 	add.w	r3, r7, #8
 8004244:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004246:	4b7c      	ldr	r3, [pc, #496]	; (8004438 <low_level_init+0x240>)
 8004248:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800424c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800424e:	4b7a      	ldr	r3, [pc, #488]	; (8004438 <low_level_init+0x240>)
 8004250:	4a7b      	ldr	r2, [pc, #492]	; (8004440 <low_level_init+0x248>)
 8004252:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004254:	4b78      	ldr	r3, [pc, #480]	; (8004438 <low_level_init+0x240>)
 8004256:	4a7b      	ldr	r2, [pc, #492]	; (8004444 <low_level_init+0x24c>)
 8004258:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800425a:	4b77      	ldr	r3, [pc, #476]	; (8004438 <low_level_init+0x240>)
 800425c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004260:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004262:	4875      	ldr	r0, [pc, #468]	; (8004438 <low_level_init+0x240>)
 8004264:	f7fd f99c 	bl	80015a0 <HAL_ETH_Init>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800426e:	2238      	movs	r2, #56	; 0x38
 8004270:	2100      	movs	r1, #0
 8004272:	4875      	ldr	r0, [pc, #468]	; (8004448 <low_level_init+0x250>)
 8004274:	f011 fd93 	bl	8015d9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004278:	4b73      	ldr	r3, [pc, #460]	; (8004448 <low_level_init+0x250>)
 800427a:	2221      	movs	r2, #33	; 0x21
 800427c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800427e:	4b72      	ldr	r3, [pc, #456]	; (8004448 <low_level_init+0x250>)
 8004280:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004284:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004286:	4b70      	ldr	r3, [pc, #448]	; (8004448 <low_level_init+0x250>)
 8004288:	2200      	movs	r2, #0
 800428a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800428c:	486f      	ldr	r0, [pc, #444]	; (800444c <low_level_init+0x254>)
 800428e:	f007 fb01 	bl	800b894 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2206      	movs	r2, #6
 8004296:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800429a:	4b67      	ldr	r3, [pc, #412]	; (8004438 <low_level_init+0x240>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80042a6:	4b64      	ldr	r3, [pc, #400]	; (8004438 <low_level_init+0x240>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	785a      	ldrb	r2, [r3, #1]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80042b2:	4b61      	ldr	r3, [pc, #388]	; (8004438 <low_level_init+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	789a      	ldrb	r2, [r3, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80042be:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <low_level_init+0x240>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	78da      	ldrb	r2, [r3, #3]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80042ca:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <low_level_init+0x240>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	791a      	ldrb	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80042d6:	4b58      	ldr	r3, [pc, #352]	; (8004438 <low_level_init+0x240>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	795a      	ldrb	r2, [r3, #5]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80042e8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80042f0:	f043 030a 	orr.w	r3, r3, #10
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80042fc:	2200      	movs	r2, #0
 80042fe:	2101      	movs	r1, #1
 8004300:	2001      	movs	r0, #1
 8004302:	f000 fead 	bl	8005060 <osSemaphoreNew>
 8004306:	4603      	mov	r3, r0
 8004308:	4a51      	ldr	r2, [pc, #324]	; (8004450 <low_level_init+0x258>)
 800430a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800430c:	2200      	movs	r2, #0
 800430e:	2101      	movs	r1, #1
 8004310:	2001      	movs	r0, #1
 8004312:	f000 fea5 	bl	8005060 <osSemaphoreNew>
 8004316:	4603      	mov	r3, r0
 8004318:	4a4e      	ldr	r2, [pc, #312]	; (8004454 <low_level_init+0x25c>)
 800431a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800431c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004320:	2224      	movs	r2, #36	; 0x24
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f011 fd3a 	bl	8015d9e <memset>
  attributes.name = "EthIf";
 800432a:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <low_level_init+0x260>)
 800432c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800432e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8004336:	2330      	movs	r3, #48	; 0x30
 8004338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800433c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004340:	461a      	mov	r2, r3
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4845      	ldr	r0, [pc, #276]	; (800445c <low_level_init+0x264>)
 8004346:	f000 fc6f 	bl	8004c28 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800434a:	4945      	ldr	r1, [pc, #276]	; (8004460 <low_level_init+0x268>)
 800434c:	4845      	ldr	r0, [pc, #276]	; (8004464 <low_level_init+0x26c>)
 800434e:	f7fc fe0e 	bl	8000f6e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004352:	4844      	ldr	r0, [pc, #272]	; (8004464 <low_level_init+0x26c>)
 8004354:	f7fc fe3d 	bl	8000fd2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004358:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800435c:	2b00      	cmp	r3, #0
 800435e:	d164      	bne.n	800442a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004360:	4840      	ldr	r0, [pc, #256]	; (8004464 <low_level_init+0x26c>)
 8004362:	f7fc fede 	bl	8001122 <LAN8742_GetLinkState>
 8004366:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800436a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800436e:	2b01      	cmp	r3, #1
 8004370:	dc06      	bgt.n	8004380 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f007 fe64 	bl	800c040 <netif_set_link_down>
      netif_set_down(netif);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f007 fdfb 	bl	800bf74 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800437e:	e056      	b.n	800442e <low_level_init+0x236>
      switch (PHYLinkState)
 8004380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004384:	3b02      	subs	r3, #2
 8004386:	2b03      	cmp	r3, #3
 8004388:	d82a      	bhi.n	80043e0 <low_level_init+0x1e8>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <low_level_init+0x198>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043b3 	.word	0x080043b3
 8004398:	080043c3 	.word	0x080043c3
 800439c:	080043d3 	.word	0x080043d3
        duplex = ETH_FULLDUPLEX_MODE;
 80043a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80043a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80043b0:	e01f      	b.n	80043f2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80043b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80043c0:	e017      	b.n	80043f2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80043c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80043d0:	e00f      	b.n	80043f2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80043de:	e008      	b.n	80043f2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80043e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80043e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80043f0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80043f2:	f107 0310 	add.w	r3, r7, #16
 80043f6:	4619      	mov	r1, r3
 80043f8:	480f      	ldr	r0, [pc, #60]	; (8004438 <low_level_init+0x240>)
 80043fa:	f7fd fe15 	bl	8002028 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80043fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800440a:	f107 0310 	add.w	r3, r7, #16
 800440e:	4619      	mov	r1, r3
 8004410:	4809      	ldr	r0, [pc, #36]	; (8004438 <low_level_init+0x240>)
 8004412:	f7fd fef3 	bl	80021fc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004416:	4808      	ldr	r0, [pc, #32]	; (8004438 <low_level_init+0x240>)
 8004418:	f7fd f99e 	bl	8001758 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f007 fd3d 	bl	800be9c <netif_set_up>
    netif_set_link_up(netif);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f007 fdd8 	bl	800bfd8 <netif_set_link_up>
}
 8004428:	e001      	b.n	800442e <low_level_init+0x236>
    Error_Handler();
 800442a:	f7fc facb 	bl	80009c4 <Error_Handler>
}
 800442e:	bf00      	nop
 8004430:	37a8      	adds	r7, #168	; 0xa8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20004d98 	.word	0x20004d98
 800443c:	40028000 	.word	0x40028000
 8004440:	20000130 	.word	0x20000130
 8004444:	20000090 	.word	0x20000090
 8004448:	20004e48 	.word	0x20004e48
 800444c:	0801a330 	.word	0x0801a330
 8004450:	20004d90 	.word	0x20004d90
 8004454:	20004d94 	.word	0x20004d94
 8004458:	0801713c 	.word	0x0801713c
 800445c:	080045c5 	.word	0x080045c5
 8004460:	2000000c 	.word	0x2000000c
 8004464:	20004e80 	.word	0x20004e80

08004468 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b092      	sub	sp, #72	; 0x48
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	2230      	movs	r2, #48	; 0x30
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f011 fc88 	bl	8015d9e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	2230      	movs	r2, #48	; 0x30
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f011 fc81 	bl	8015d9e <memset>

  for(q = p; q != NULL; q = q->next)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	643b      	str	r3, [r7, #64]	; 0x40
 80044a0:	e045      	b.n	800452e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80044a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d902      	bls.n	80044ae <low_level_output+0x46>
      return ERR_IF;
 80044a8:	f06f 030b 	mvn.w	r3, #11
 80044ac:	e065      	b.n	800457a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	6859      	ldr	r1, [r3, #4]
 80044b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	3348      	adds	r3, #72	; 0x48
 80044be:	443b      	add	r3, r7
 80044c0:	3b3c      	subs	r3, #60	; 0x3c
 80044c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c6:	895b      	ldrh	r3, [r3, #10]
 80044c8:	4619      	mov	r1, r3
 80044ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	3348      	adds	r3, #72	; 0x48
 80044d6:	443b      	add	r3, r7
 80044d8:	3b38      	subs	r3, #56	; 0x38
 80044da:	6019      	str	r1, [r3, #0]

    if(i>0)
 80044dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d011      	beq.n	8004506 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80044e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	f107 000c 	add.w	r0, r7, #12
 80044ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044ec:	460b      	mov	r3, r1
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	440b      	add	r3, r1
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18c1      	adds	r1, r0, r3
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	3348      	adds	r3, #72	; 0x48
 8004500:	443b      	add	r3, r7
 8004502:	3b34      	subs	r3, #52	; 0x34
 8004504:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800450e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	3348      	adds	r3, #72	; 0x48
 800451a:	443b      	add	r3, r7
 800451c:	3b34      	subs	r3, #52	; 0x34
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004524:	3301      	adds	r3, #1
 8004526:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	643b      	str	r3, [r7, #64]	; 0x40
 800452e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1b6      	bne.n	80044a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	891b      	ldrh	r3, [r3, #8]
 8004538:	461a      	mov	r2, r3
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <low_level_output+0x11c>)
 800453c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800453e:	4a11      	ldr	r2, [pc, #68]	; (8004584 <low_level_output+0x11c>)
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004546:	4a0f      	ldr	r2, [pc, #60]	; (8004584 <low_level_output+0x11c>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800454c:	6838      	ldr	r0, [r7, #0]
 800454e:	f008 f9fb 	bl	800c948 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004552:	490c      	ldr	r1, [pc, #48]	; (8004584 <low_level_output+0x11c>)
 8004554:	480c      	ldr	r0, [pc, #48]	; (8004588 <low_level_output+0x120>)
 8004556:	f7fd fa0d 	bl	8001974 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800455a:	bf00      	nop
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <low_level_output+0x124>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fe17 	bl	8005198 <osSemaphoreAcquire>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f5      	bne.n	800455c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004570:	4805      	ldr	r0, [pc, #20]	; (8004588 <low_level_output+0x120>)
 8004572:	f7fd fb93 	bl	8001c9c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004576:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800457a:	4618      	mov	r0, r3
 800457c:	3748      	adds	r7, #72	; 0x48
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20004e48 	.word	0x20004e48
 8004588:	20004d98 	.word	0x20004d98
 800458c:	20004d94 	.word	0x20004d94

08004590 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800459c:	4b07      	ldr	r3, [pc, #28]	; (80045bc <low_level_input+0x2c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	4619      	mov	r1, r3
 80045aa:	4805      	ldr	r0, [pc, #20]	; (80045c0 <low_level_input+0x30>)
 80045ac:	f7fd fa3e 	bl	8001a2c <HAL_ETH_ReadData>
  }

  return p;
 80045b0:	68fb      	ldr	r3, [r7, #12]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20004d8c 	.word	0x20004d8c
 80045c0:	20004d98 	.word	0x20004d98

080045c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <ethernetif_input+0x50>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fddb 	bl	8005198 <osSemaphoreAcquire>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f5      	bne.n	80045d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80045e8:	68b8      	ldr	r0, [r7, #8]
 80045ea:	f7ff ffd1 	bl	8004590 <low_level_input>
 80045ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	4798      	blx	r3
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f008 f8f8 	bl	800c7fc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ea      	bne.n	80045e8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004612:	e7df      	b.n	80045d4 <ethernetif_input+0x10>
 8004614:	20004d90 	.word	0x20004d90

08004618 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <ethernetif_init+0x1c>
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <ethernetif_init+0x48>)
 8004628:	f44f 720d 	mov.w	r2, #564	; 0x234
 800462c:	490d      	ldr	r1, [pc, #52]	; (8004664 <ethernetif_init+0x4c>)
 800462e:	480e      	ldr	r0, [pc, #56]	; (8004668 <ethernetif_init+0x50>)
 8004630:	f011 fc52 	bl	8015ed8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2273      	movs	r2, #115	; 0x73
 8004638:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2274      	movs	r2, #116	; 0x74
 8004640:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <ethernetif_init+0x54>)
 8004648:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <ethernetif_init+0x58>)
 800464e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff fdd1 	bl	80041f8 <low_level_init>

  return ERR_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08017144 	.word	0x08017144
 8004664:	08017160 	.word	0x08017160
 8004668:	08017170 	.word	0x08017170
 800466c:	08013aa9 	.word	0x08013aa9
 8004670:	08004469 	.word	0x08004469

08004674 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	4809      	ldr	r0, [pc, #36]	; (80046a8 <pbuf_free_custom+0x34>)
 8004684:	f007 f9f6 	bl	800ba74 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <pbuf_free_custom+0x38>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <pbuf_free_custom+0x38>)
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <pbuf_free_custom+0x3c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fde2 	bl	8005264 <osSemaphoreRelease>
  }
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	0801a330 	.word	0x0801a330
 80046ac:	20004d8c 	.word	0x20004d8c
 80046b0:	20004d90 	.word	0x20004d90

080046b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80046b8:	f7fc fde4 	bl	8001284 <HAL_GetTick>
 80046bc:	4603      	mov	r3, r0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08e      	sub	sp, #56	; 0x38
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a52      	ldr	r2, [pc, #328]	; (800482c <HAL_ETH_MspInit+0x168>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	f040 809e 	bne.w	8004824 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046e8:	4b51      	ldr	r3, [pc, #324]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	4a50      	ldr	r2, [pc, #320]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 80046ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046f2:	6313      	str	r3, [r2, #48]	; 0x30
 80046f4:	4b4e      	ldr	r3, [pc, #312]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	4a4a      	ldr	r2, [pc, #296]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004706:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800470a:	6313      	str	r3, [r2, #48]	; 0x30
 800470c:	4b48      	ldr	r3, [pc, #288]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4b45      	ldr	r3, [pc, #276]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4a44      	ldr	r2, [pc, #272]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800471e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004722:	6313      	str	r3, [r2, #48]	; 0x30
 8004724:	4b42      	ldr	r3, [pc, #264]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004730:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	4a3e      	ldr	r2, [pc, #248]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004736:	f043 0304 	orr.w	r3, r3, #4
 800473a:	6313      	str	r3, [r2, #48]	; 0x30
 800473c:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004748:	4b39      	ldr	r3, [pc, #228]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	4a38      	ldr	r2, [pc, #224]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6313      	str	r3, [r2, #48]	; 0x30
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004760:	4b33      	ldr	r3, [pc, #204]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	4a32      	ldr	r2, [pc, #200]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004766:	f043 0302 	orr.w	r3, r3, #2
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
 800476c:	4b30      	ldr	r3, [pc, #192]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	6313      	str	r3, [r2, #48]	; 0x30
 8004784:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <HAL_ETH_MspInit+0x16c>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004790:	2332      	movs	r3, #50	; 0x32
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800479c:	2303      	movs	r3, #3
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047a0:	230b      	movs	r3, #11
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a8:	4619      	mov	r1, r3
 80047aa:	4822      	ldr	r0, [pc, #136]	; (8004834 <HAL_ETH_MspInit+0x170>)
 80047ac:	f7fe f9a6 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80047b0:	2386      	movs	r3, #134	; 0x86
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	2302      	movs	r3, #2
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047bc:	2303      	movs	r3, #3
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047c0:	230b      	movs	r3, #11
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c8:	4619      	mov	r1, r3
 80047ca:	481b      	ldr	r0, [pc, #108]	; (8004838 <HAL_ETH_MspInit+0x174>)
 80047cc:	f7fe f996 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80047d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	2302      	movs	r3, #2
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047de:	2303      	movs	r3, #3
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047e2:	230b      	movs	r3, #11
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ea:	4619      	mov	r1, r3
 80047ec:	4813      	ldr	r0, [pc, #76]	; (800483c <HAL_ETH_MspInit+0x178>)
 80047ee:	f7fe f985 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80047f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004800:	2303      	movs	r3, #3
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004804:	230b      	movs	r3, #11
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480c:	4619      	mov	r1, r3
 800480e:	480c      	ldr	r0, [pc, #48]	; (8004840 <HAL_ETH_MspInit+0x17c>)
 8004810:	f7fe f974 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004814:	2200      	movs	r2, #0
 8004816:	2105      	movs	r1, #5
 8004818:	203d      	movs	r0, #61	; 0x3d
 800481a:	f7fc fe1b 	bl	8001454 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800481e:	203d      	movs	r0, #61	; 0x3d
 8004820:	f7fc fe34 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004824:	bf00      	nop
 8004826:	3738      	adds	r7, #56	; 0x38
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40028000 	.word	0x40028000
 8004830:	40023800 	.word	0x40023800
 8004834:	40020800 	.word	0x40020800
 8004838:	40020000 	.word	0x40020000
 800483c:	40020400 	.word	0x40020400
 8004840:	40021800 	.word	0x40021800

08004844 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004848:	4802      	ldr	r0, [pc, #8]	; (8004854 <ETH_PHY_IO_Init+0x10>)
 800484a:	f7fd fcf1 	bl	8002230 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20004d98 	.word	0x20004d98

08004858 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return 0;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	4807      	ldr	r0, [pc, #28]	; (8004898 <ETH_PHY_IO_ReadReg+0x30>)
 800487c:	f7fd fb40 	bl	8001f00 <HAL_ETH_ReadPHYRegister>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800488a:	e000      	b.n	800488e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20004d98 	.word	0x20004d98

0800489c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	68f9      	ldr	r1, [r7, #12]
 80048ae:	4807      	ldr	r0, [pc, #28]	; (80048cc <ETH_PHY_IO_WriteReg+0x30>)
 80048b0:	f7fd fb71 	bl	8001f96 <HAL_ETH_WritePHYRegister>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048be:	e000      	b.n	80048c2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20004d98 	.word	0x20004d98

080048d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80048d4:	f7fc fcd6 	bl	8001284 <HAL_GetTick>
 80048d8:	4603      	mov	r3, r0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b0a0      	sub	sp, #128	; 0x80
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80048e8:	f107 0308 	add.w	r3, r7, #8
 80048ec:	2264      	movs	r2, #100	; 0x64
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f011 fa54 	bl	8015d9e <memset>
  int32_t PHYLinkState = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048fe:	2300      	movs	r3, #0
 8004900:	67bb      	str	r3, [r7, #120]	; 0x78
 8004902:	2300      	movs	r3, #0
 8004904:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800490a:	483a      	ldr	r0, [pc, #232]	; (80049f4 <ethernet_link_thread+0x114>)
 800490c:	f7fc fc09 	bl	8001122 <LAN8742_GetLinkState>
 8004910:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004914:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <ethernet_link_thread+0x5e>
 8004924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004926:	2b01      	cmp	r3, #1
 8004928:	dc09      	bgt.n	800493e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800492a:	4833      	ldr	r0, [pc, #204]	; (80049f8 <ethernet_link_thread+0x118>)
 800492c:	f7fc ffa2 	bl	8001874 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004930:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004932:	f007 fb1f 	bl	800bf74 <netif_set_down>
    netif_set_link_down(netif);
 8004936:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004938:	f007 fb82 	bl	800c040 <netif_set_link_down>
 800493c:	e055      	b.n	80049ea <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d14e      	bne.n	80049ea <ethernet_link_thread+0x10a>
 800494c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800494e:	2b01      	cmp	r3, #1
 8004950:	dd4b      	ble.n	80049ea <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004954:	3b02      	subs	r3, #2
 8004956:	2b03      	cmp	r3, #3
 8004958:	d82a      	bhi.n	80049b0 <ethernet_link_thread+0xd0>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <ethernet_link_thread+0x80>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004971 	.word	0x08004971
 8004964:	08004983 	.word	0x08004983
 8004968:	08004993 	.word	0x08004993
 800496c:	080049a3 	.word	0x080049a3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004970:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004974:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800497a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800497c:	2301      	movs	r3, #1
 800497e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004980:	e017      	b.n	80049b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004982:	2300      	movs	r3, #0
 8004984:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800498a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800498c:	2301      	movs	r3, #1
 800498e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004990:	e00f      	b.n	80049b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004996:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004998:	2300      	movs	r3, #0
 800499a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800499c:	2301      	movs	r3, #1
 800499e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049a0:	e007      	b.n	80049b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80049a6:	2300      	movs	r3, #0
 80049a8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049ae:	e000      	b.n	80049b2 <ethernet_link_thread+0xd2>
    default:
      break;
 80049b0:	bf00      	nop
    }

    if(linkchanged)
 80049b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d018      	beq.n	80049ea <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80049b8:	f107 0308 	add.w	r3, r7, #8
 80049bc:	4619      	mov	r1, r3
 80049be:	480e      	ldr	r0, [pc, #56]	; (80049f8 <ethernet_link_thread+0x118>)
 80049c0:	f7fd fb32 	bl	8002028 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80049c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80049c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ca:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80049cc:	f107 0308 	add.w	r3, r7, #8
 80049d0:	4619      	mov	r1, r3
 80049d2:	4809      	ldr	r0, [pc, #36]	; (80049f8 <ethernet_link_thread+0x118>)
 80049d4:	f7fd fc12 	bl	80021fc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80049d8:	4807      	ldr	r0, [pc, #28]	; (80049f8 <ethernet_link_thread+0x118>)
 80049da:	f7fc fe5d 	bl	8001698 <HAL_ETH_Start>
      netif_set_up(netif);
 80049de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049e0:	f007 fa5c 	bl	800be9c <netif_set_up>
      netif_set_link_up(netif);
 80049e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049e6:	f007 faf7 	bl	800bfd8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80049ea:	2064      	movs	r0, #100	; 0x64
 80049ec:	f000 f9c2 	bl	8004d74 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80049f0:	e78b      	b.n	800490a <ethernet_link_thread+0x2a>
 80049f2:	bf00      	nop
 80049f4:	20004e80 	.word	0x20004e80
 80049f8:	20004d98 	.word	0x20004d98

080049fc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004a04:	4812      	ldr	r0, [pc, #72]	; (8004a50 <HAL_ETH_RxAllocateCallback+0x54>)
 8004a06:	f006 ffc1 	bl	800b98c <memp_malloc_pool>
 8004a0a:	60f8      	str	r0, [r7, #12]
  if (p)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f103 0220 	add.w	r2, r3, #32
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <HAL_ETH_RxAllocateCallback+0x58>)
 8004a20:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a2a:	9201      	str	r2, [sp, #4]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2241      	movs	r2, #65	; 0x41
 8004a32:	2100      	movs	r1, #0
 8004a34:	2000      	movs	r0, #0
 8004a36:	f007 fd27 	bl	800c488 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004a3a:	e005      	b.n	8004a48 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	0801a330 	.word	0x0801a330
 8004a54:	08004675 	.word	0x08004675
 8004a58:	20004d8c 	.word	0x20004d8c

08004a5c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3b20      	subs	r3, #32
 8004a7a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2200      	movs	r2, #0
 8004a86:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e003      	b.n	8004aa6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e009      	b.n	8004ac8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	891a      	ldrh	r2, [r3, #8]
 8004ab8:	887b      	ldrh	r3, [r7, #2]
 8004aba:	4413      	add	r3, r2
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f2      	bne.n	8004ab4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fb2c 	bl	8004130 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004ad8:	bf00      	nop
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f007 fe87 	bl	800c7fc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004af6:	b480      	push	{r7}
 8004af8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b0a:	f3ef 8305 	mrs	r3, IPSR
 8004b0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10f      	bne.n	8004b36 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b16:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1a:	607b      	str	r3, [r7, #4]
  return(result);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b22:	f3ef 8311 	mrs	r3, BASEPRI
 8004b26:	603b      	str	r3, [r7, #0]
  return(result);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <osKernelInitialize+0x3a>
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <osKernelInitialize+0x64>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d103      	bne.n	8004b3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004b36:	f06f 0305 	mvn.w	r3, #5
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e00c      	b.n	8004b58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <osKernelInitialize+0x64>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <osKernelInitialize+0x64>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e002      	b.n	8004b58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b58:	68fb      	ldr	r3, [r7, #12]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20004ea0 	.word	0x20004ea0

08004b6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b72:	f3ef 8305 	mrs	r3, IPSR
 8004b76:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10f      	bne.n	8004b9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b82:	607b      	str	r3, [r7, #4]
  return(result);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d105      	bne.n	8004b96 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <osKernelStart+0x3a>
 8004b96:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <osKernelStart+0x68>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d103      	bne.n	8004ba6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b9e:	f06f 0305 	mvn.w	r3, #5
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e010      	b.n	8004bc8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <osKernelStart+0x68>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d109      	bne.n	8004bc2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bae:	f7ff ffa2 	bl	8004af6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <osKernelStart+0x68>)
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bb8:	f002 f9e4 	bl	8006f84 <vTaskStartScheduler>
      stat = osOK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e002      	b.n	8004bc8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bc6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20004ea0 	.word	0x20004ea0

08004bd8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bde:	f3ef 8305 	mrs	r3, IPSR
 8004be2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bea:	f3ef 8310 	mrs	r3, PRIMASK
 8004bee:	607b      	str	r3, [r7, #4]
  return(result);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d105      	bne.n	8004c02 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bfa:	603b      	str	r3, [r7, #0]
  return(result);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <osKernelGetTickCount+0x3a>
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <osKernelGetTickCount+0x4c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d103      	bne.n	8004c12 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004c0a:	f002 faed 	bl	80071e8 <xTaskGetTickCountFromISR>
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	e002      	b.n	8004c18 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004c12:	f002 fad9 	bl	80071c8 <xTaskGetTickCount>
 8004c16:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20004ea0 	.word	0x20004ea0

08004c28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b090      	sub	sp, #64	; 0x40
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c38:	f3ef 8305 	mrs	r3, IPSR
 8004c3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 808f 	bne.w	8004d64 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c46:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c52:	f3ef 8311 	mrs	r3, BASEPRI
 8004c56:	617b      	str	r3, [r7, #20]
  return(result);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <osThreadNew+0x3e>
 8004c5e:	4b44      	ldr	r3, [pc, #272]	; (8004d70 <osThreadNew+0x148>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d07e      	beq.n	8004d64 <osThreadNew+0x13c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d07b      	beq.n	8004d64 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004c70:	2318      	movs	r3, #24
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d045      	beq.n	8004d10 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <osThreadNew+0x6a>
        name = attr->name;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <osThreadNew+0x90>
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	2b38      	cmp	r3, #56	; 0x38
 8004caa:	d805      	bhi.n	8004cb8 <osThreadNew+0x90>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <osThreadNew+0x94>
        return (NULL);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e054      	b.n	8004d66 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	089b      	lsrs	r3, r3, #2
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00e      	beq.n	8004cf2 <osThreadNew+0xca>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2bbb      	cmp	r3, #187	; 0xbb
 8004cda:	d90a      	bls.n	8004cf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <osThreadNew+0xca>
        mem = 1;
 8004cec:	2301      	movs	r3, #1
 8004cee:	623b      	str	r3, [r7, #32]
 8004cf0:	e010      	b.n	8004d14 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <osThreadNew+0xec>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <osThreadNew+0xec>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <osThreadNew+0xec>
          mem = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	e001      	b.n	8004d14 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d110      	bne.n	8004d3c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d22:	9202      	str	r2, [sp, #8]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f001 ff31 	bl	8006b98 <xTaskCreateStatic>
 8004d36:	4603      	mov	r3, r0
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e013      	b.n	8004d64 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d110      	bne.n	8004d64 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	f107 0310 	add.w	r3, r7, #16
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f001 ff82 	bl	8006c5e <xTaskCreate>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d001      	beq.n	8004d64 <osThreadNew+0x13c>
          hTask = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d64:	693b      	ldr	r3, [r7, #16]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3730      	adds	r7, #48	; 0x30
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20004ea0 	.word	0x20004ea0

08004d74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7c:	f3ef 8305 	mrs	r3, IPSR
 8004d80:	613b      	str	r3, [r7, #16]
  return(result);
 8004d82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10f      	bne.n	8004da8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d88:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d94:	f3ef 8311 	mrs	r3, BASEPRI
 8004d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <osDelay+0x3c>
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <osDelay+0x58>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d103      	bne.n	8004db0 <osDelay+0x3c>
    stat = osErrorISR;
 8004da8:	f06f 0305 	mvn.w	r3, #5
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e007      	b.n	8004dc0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f002 f8ac 	bl	8006f18 <vTaskDelay>
    }
  }

  return (stat);
 8004dc0:	697b      	ldr	r3, [r7, #20]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20004ea0 	.word	0x20004ea0

08004dd0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ddc:	f3ef 8305 	mrs	r3, IPSR
 8004de0:	613b      	str	r3, [r7, #16]
  return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f040 8085 	bne.w	8004ef4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dea:	f3ef 8310 	mrs	r3, PRIMASK
 8004dee:	60fb      	str	r3, [r7, #12]
  return(result);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004df6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <osMutexNew+0x3a>
 8004e02:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <osMutexNew+0x130>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d074      	beq.n	8004ef4 <osMutexNew+0x124>
    if (attr != NULL) {
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	e001      	b.n	8004e1c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <osMutexNew+0x5c>
      rmtx = 1U;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	e001      	b.n	8004e30 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d15c      	bne.n	8004ef4 <osMutexNew+0x124>
      mem = -1;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e3e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d015      	beq.n	8004e72 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <osMutexNew+0x8c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b4f      	cmp	r3, #79	; 0x4f
 8004e54:	d902      	bls.n	8004e5c <osMutexNew+0x8c>
          mem = 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e00c      	b.n	8004e76 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d108      	bne.n	8004e76 <osMutexNew+0xa6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <osMutexNew+0xa6>
            mem = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e001      	b.n	8004e76 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d112      	bne.n	8004ea2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4619      	mov	r1, r3
 8004e88:	2004      	movs	r0, #4
 8004e8a:	f000 feb8 	bl	8005bfe <xQueueCreateMutexStatic>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24
 8004e90:	e016      	b.n	8004ec0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	4619      	mov	r1, r3
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f000 feb0 	bl	8005bfe <xQueueCreateMutexStatic>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8004ea0:	e00e      	b.n	8004ec0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10b      	bne.n	8004ec0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004eae:	2004      	movs	r0, #4
 8004eb0:	f000 fe8d 	bl	8005bce <xQueueCreateMutex>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24
 8004eb6:	e003      	b.n	8004ec0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f000 fe88 	bl	8005bce <xQueueCreateMutex>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <osMutexNew+0x110>
        if (attr != NULL) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <osMutexNew+0x104>
          name = attr->name;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e001      	b.n	8004ed8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ed8:	6979      	ldr	r1, [r7, #20]
 8004eda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004edc:	f001 fdd4 	bl	8006a88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d006      	beq.n	8004ef4 <osMutexNew+0x124>
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3728      	adds	r7, #40	; 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20004ea0 	.word	0x20004ea0

08004f04 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f22:	f3ef 8305 	mrs	r3, IPSR
 8004f26:	613b      	str	r3, [r7, #16]
  return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <osMutexAcquire+0x52>
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <osMutexAcquire+0xb8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d103      	bne.n	8004f56 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004f4e:	f06f 0305 	mvn.w	r3, #5
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	e02c      	b.n	8004fb0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004f5c:	f06f 0303 	mvn.w	r3, #3
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e025      	b.n	8004fb0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004f6a:	6839      	ldr	r1, [r7, #0]
 8004f6c:	69b8      	ldr	r0, [r7, #24]
 8004f6e:	f000 fe97 	bl	8005ca0 <xQueueTakeMutexRecursive>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d01b      	beq.n	8004fb0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004f7e:	f06f 0301 	mvn.w	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e014      	b.n	8004fb0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004f86:	f06f 0302 	mvn.w	r3, #2
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e010      	b.n	8004fb0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	69b8      	ldr	r0, [r7, #24]
 8004f92:	f001 fa51 	bl	8006438 <xQueueSemaphoreTake>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d009      	beq.n	8004fb0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004fa2:	f06f 0301 	mvn.w	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e002      	b.n	8004fb0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004faa:	f06f 0302 	mvn.w	r3, #2
 8004fae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20004ea0 	.word	0x20004ea0

08004fc0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fdc:	f3ef 8305 	mrs	r3, IPSR
 8004fe0:	613b      	str	r3, [r7, #16]
  return(result);
 8004fe2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fec:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <osMutexRelease+0x50>
 8005000:	4b16      	ldr	r3, [pc, #88]	; (800505c <osMutexRelease+0x9c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d103      	bne.n	8005010 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005008:	f06f 0305 	mvn.w	r3, #5
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	e01f      	b.n	8005050 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005016:	f06f 0303 	mvn.w	r3, #3
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e018      	b.n	8005050 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005024:	69b8      	ldr	r0, [r7, #24]
 8005026:	f000 fe05 	bl	8005c34 <xQueueGiveMutexRecursive>
 800502a:	4603      	mov	r3, r0
 800502c:	2b01      	cmp	r3, #1
 800502e:	d00f      	beq.n	8005050 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005030:	f06f 0302 	mvn.w	r3, #2
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	e00b      	b.n	8005050 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005038:	2300      	movs	r3, #0
 800503a:	2200      	movs	r2, #0
 800503c:	2100      	movs	r1, #0
 800503e:	69b8      	ldr	r0, [r7, #24]
 8005040:	f000 fed8 	bl	8005df4 <xQueueGenericSend>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d002      	beq.n	8005050 <osMutexRelease+0x90>
        stat = osErrorResource;
 800504a:	f06f 0302 	mvn.w	r3, #2
 800504e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005050:	69fb      	ldr	r3, [r7, #28]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20004ea0 	.word	0x20004ea0

08005060 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005070:	f3ef 8305 	mrs	r3, IPSR
 8005074:	61bb      	str	r3, [r7, #24]
  return(result);
 8005076:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 8086 	bne.w	800518a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507e:	f3ef 8310 	mrs	r3, PRIMASK
 8005082:	617b      	str	r3, [r7, #20]
  return(result);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d105      	bne.n	8005096 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800508a:	f3ef 8311 	mrs	r3, BASEPRI
 800508e:	613b      	str	r3, [r7, #16]
  return(result);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <osSemaphoreNew+0x3e>
 8005096:	4b3f      	ldr	r3, [pc, #252]	; (8005194 <osSemaphoreNew+0x134>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d075      	beq.n	800518a <osSemaphoreNew+0x12a>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d072      	beq.n	800518a <osSemaphoreNew+0x12a>
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d86e      	bhi.n	800518a <osSemaphoreNew+0x12a>
    mem = -1;
 80050ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <osSemaphoreNew+0x6e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b4f      	cmp	r3, #79	; 0x4f
 80050c6:	d902      	bls.n	80050ce <osSemaphoreNew+0x6e>
        mem = 1;
 80050c8:	2301      	movs	r3, #1
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	e00c      	b.n	80050e8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d108      	bne.n	80050e8 <osSemaphoreNew+0x88>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <osSemaphoreNew+0x88>
          mem = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e001      	b.n	80050e8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ee:	d04c      	beq.n	800518a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d128      	bne.n	8005148 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d10a      	bne.n	8005112 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2203      	movs	r2, #3
 8005102:	9200      	str	r2, [sp, #0]
 8005104:	2200      	movs	r2, #0
 8005106:	2100      	movs	r1, #0
 8005108:	2001      	movs	r0, #1
 800510a:	f000 fc5f 	bl	80059cc <xQueueGenericCreateStatic>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24
 8005110:	e005      	b.n	800511e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005112:	2203      	movs	r2, #3
 8005114:	2100      	movs	r1, #0
 8005116:	2001      	movs	r0, #1
 8005118:	f000 fcda 	bl	8005ad0 <xQueueGenericCreate>
 800511c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d022      	beq.n	800516a <osSemaphoreNew+0x10a>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01f      	beq.n	800516a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800512a:	2300      	movs	r3, #0
 800512c:	2200      	movs	r2, #0
 800512e:	2100      	movs	r1, #0
 8005130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005132:	f000 fe5f 	bl	8005df4 <xQueueGenericSend>
 8005136:	4603      	mov	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d016      	beq.n	800516a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800513c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800513e:	f001 fb55 	bl	80067ec <vQueueDelete>
            hSemaphore = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	e010      	b.n	800516a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d108      	bne.n	8005160 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	461a      	mov	r2, r3
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fdda 	bl	8005d10 <xQueueCreateCountingSemaphoreStatic>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24
 800515e:	e004      	b.n	800516a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fe0f 	bl	8005d86 <xQueueCreateCountingSemaphore>
 8005168:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00c      	beq.n	800518a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <osSemaphoreNew+0x11e>
          name = attr->name;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e001      	b.n	8005182 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005182:	69f9      	ldr	r1, [r7, #28]
 8005184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005186:	f001 fc7f 	bl	8006a88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800518c:	4618      	mov	r0, r3
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20004ea0 	.word	0x20004ea0

08005198 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80051b0:	f06f 0303 	mvn.w	r3, #3
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	e04b      	b.n	8005250 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b8:	f3ef 8305 	mrs	r3, IPSR
 80051bc:	617b      	str	r3, [r7, #20]
  return(result);
 80051be:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	613b      	str	r3, [r7, #16]
  return(result);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051d0:	f3ef 8311 	mrs	r3, BASEPRI
 80051d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d026      	beq.n	800522a <osSemaphoreAcquire+0x92>
 80051dc:	4b1f      	ldr	r3, [pc, #124]	; (800525c <osSemaphoreAcquire+0xc4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d122      	bne.n	800522a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80051ea:	f06f 0303 	mvn.w	r3, #3
 80051ee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80051f0:	e02d      	b.n	800524e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	461a      	mov	r2, r3
 80051fc:	2100      	movs	r1, #0
 80051fe:	69b8      	ldr	r0, [r7, #24]
 8005200:	f001 fa2e 	bl	8006660 <xQueueReceiveFromISR>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d003      	beq.n	8005212 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800520a:	f06f 0302 	mvn.w	r3, #2
 800520e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005210:	e01d      	b.n	800524e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01a      	beq.n	800524e <osSemaphoreAcquire+0xb6>
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <osSemaphoreAcquire+0xc8>)
 800521a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005228:	e011      	b.n	800524e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	69b8      	ldr	r0, [r7, #24]
 800522e:	f001 f903 	bl	8006438 <xQueueSemaphoreTake>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d00b      	beq.n	8005250 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800523e:	f06f 0301 	mvn.w	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	e004      	b.n	8005250 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005246:	f06f 0302 	mvn.w	r3, #2
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	e000      	b.n	8005250 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800524e:	bf00      	nop
      }
    }
  }

  return (stat);
 8005250:	69fb      	ldr	r3, [r7, #28]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20004ea0 	.word	0x20004ea0
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800527a:	f06f 0303 	mvn.w	r3, #3
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e03e      	b.n	8005300 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005282:	f3ef 8305 	mrs	r3, IPSR
 8005286:	617b      	str	r3, [r7, #20]
  return(result);
 8005288:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528e:	f3ef 8310 	mrs	r3, PRIMASK
 8005292:	613b      	str	r3, [r7, #16]
  return(result);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800529a:	f3ef 8311 	mrs	r3, BASEPRI
 800529e:	60fb      	str	r3, [r7, #12]
  return(result);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01e      	beq.n	80052e4 <osSemaphoreRelease+0x80>
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <osSemaphoreRelease+0xa8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d11a      	bne.n	80052e4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052b2:	f107 0308 	add.w	r3, r7, #8
 80052b6:	4619      	mov	r1, r3
 80052b8:	69b8      	ldr	r0, [r7, #24]
 80052ba:	f000 ff41 	bl	8006140 <xQueueGiveFromISR>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d003      	beq.n	80052cc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80052c4:	f06f 0302 	mvn.w	r3, #2
 80052c8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052ca:	e018      	b.n	80052fe <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d015      	beq.n	80052fe <osSemaphoreRelease+0x9a>
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <osSemaphoreRelease+0xac>)
 80052d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052e2:	e00c      	b.n	80052fe <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80052e4:	2300      	movs	r3, #0
 80052e6:	2200      	movs	r2, #0
 80052e8:	2100      	movs	r1, #0
 80052ea:	69b8      	ldr	r0, [r7, #24]
 80052ec:	f000 fd82 	bl	8005df4 <xQueueGenericSend>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d004      	beq.n	8005300 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80052f6:	f06f 0302 	mvn.w	r3, #2
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e000      	b.n	8005300 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052fe:	bf00      	nop
    }
  }

  return (stat);
 8005300:	69fb      	ldr	r3, [r7, #28]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20004ea0 	.word	0x20004ea0
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005320:	f3ef 8305 	mrs	r3, IPSR
 8005324:	617b      	str	r3, [r7, #20]
  return(result);
 8005326:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10f      	bne.n	800534c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800532c:	f3ef 8310 	mrs	r3, PRIMASK
 8005330:	613b      	str	r3, [r7, #16]
  return(result);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005338:	f3ef 8311 	mrs	r3, BASEPRI
 800533c:	60fb      	str	r3, [r7, #12]
  return(result);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <osSemaphoreDelete+0x40>
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <osSemaphoreDelete+0x68>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d103      	bne.n	8005354 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800534c:	f06f 0305 	mvn.w	r3, #5
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	e00e      	b.n	8005372 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800535a:	f06f 0303 	mvn.w	r3, #3
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e007      	b.n	8005372 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005362:	69b8      	ldr	r0, [r7, #24]
 8005364:	f001 fbba 	bl	8006adc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005368:	2300      	movs	r3, #0
 800536a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800536c:	69b8      	ldr	r0, [r7, #24]
 800536e:	f001 fa3d 	bl	80067ec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005372:	69fb      	ldr	r3, [r7, #28]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20004ea0 	.word	0x20004ea0

08005380 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	; 0x30
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005390:	f3ef 8305 	mrs	r3, IPSR
 8005394:	61bb      	str	r3, [r7, #24]
  return(result);
 8005396:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005398:	2b00      	cmp	r3, #0
 800539a:	d16f      	bne.n	800547c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539c:	f3ef 8310 	mrs	r3, PRIMASK
 80053a0:	617b      	str	r3, [r7, #20]
  return(result);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053a8:	f3ef 8311 	mrs	r3, BASEPRI
 80053ac:	613b      	str	r3, [r7, #16]
  return(result);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <osMessageQueueNew+0x3c>
 80053b4:	4b34      	ldr	r3, [pc, #208]	; (8005488 <osMessageQueueNew+0x108>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d05f      	beq.n	800547c <osMessageQueueNew+0xfc>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d05c      	beq.n	800547c <osMessageQueueNew+0xfc>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d059      	beq.n	800547c <osMessageQueueNew+0xfc>
    mem = -1;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d029      	beq.n	8005428 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d012      	beq.n	8005402 <osMessageQueueNew+0x82>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b4f      	cmp	r3, #79	; 0x4f
 80053e2:	d90e      	bls.n	8005402 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d302      	bcc.n	8005402 <osMessageQueueNew+0x82>
        mem = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	e014      	b.n	800542c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d110      	bne.n	800542c <osMessageQueueNew+0xac>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10c      	bne.n	800542c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <osMessageQueueNew+0xac>
          mem = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	e001      	b.n	800542c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10b      	bne.n	800544a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2100      	movs	r1, #0
 800543c:	9100      	str	r1, [sp, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fac3 	bl	80059cc <xQueueGenericCreateStatic>
 8005446:	6278      	str	r0, [r7, #36]	; 0x24
 8005448:	e008      	b.n	800545c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005450:	2200      	movs	r2, #0
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fb3b 	bl	8005ad0 <xQueueGenericCreate>
 800545a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00c      	beq.n	800547c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e001      	b.n	8005474 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005474:	69f9      	ldr	r1, [r7, #28]
 8005476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005478:	f001 fb06 	bl	8006a88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800547e:	4618      	mov	r0, r3
 8005480:	3728      	adds	r7, #40	; 0x28
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20004ea0 	.word	0x20004ea0

0800548c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054a4:	f3ef 8305 	mrs	r3, IPSR
 80054a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80054aa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10f      	bne.n	80054d0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b0:	f3ef 8310 	mrs	r3, PRIMASK
 80054b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054bc:	f3ef 8311 	mrs	r3, BASEPRI
 80054c0:	617b      	str	r3, [r7, #20]
  return(result);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02c      	beq.n	8005522 <osMessageQueuePut+0x96>
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <osMessageQueuePut+0xe0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d128      	bne.n	8005522 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <osMessageQueuePut+0x56>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <osMessageQueuePut+0x56>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80054e2:	f06f 0303 	mvn.w	r3, #3
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054e8:	e039      	b.n	800555e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80054ee:	f107 0210 	add.w	r2, r7, #16
 80054f2:	2300      	movs	r3, #0
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	6a38      	ldr	r0, [r7, #32]
 80054f8:	f000 fd82 	bl	8006000 <xQueueGenericSendFromISR>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d003      	beq.n	800550a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005502:	f06f 0302 	mvn.w	r3, #2
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005508:	e029      	b.n	800555e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d026      	beq.n	800555e <osMessageQueuePut+0xd2>
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <osMessageQueuePut+0xe4>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005520:	e01d      	b.n	800555e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <osMessageQueuePut+0xa2>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800552e:	f06f 0303 	mvn.w	r3, #3
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
 8005534:	e014      	b.n	8005560 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005536:	2300      	movs	r3, #0
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	6a38      	ldr	r0, [r7, #32]
 800553e:	f000 fc59 	bl	8005df4 <xQueueGenericSend>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d00b      	beq.n	8005560 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800554e:	f06f 0301 	mvn.w	r3, #1
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
 8005554:	e004      	b.n	8005560 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005556:	f06f 0302 	mvn.w	r3, #2
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
 800555c:	e000      	b.n	8005560 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800555e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005562:	4618      	mov	r0, r3
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20004ea0 	.word	0x20004ea0
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b08a      	sub	sp, #40	; 0x28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558a:	f3ef 8305 	mrs	r3, IPSR
 800558e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005590:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005596:	f3ef 8310 	mrs	r3, PRIMASK
 800559a:	61bb      	str	r3, [r7, #24]
  return(result);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	617b      	str	r3, [r7, #20]
  return(result);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d02c      	beq.n	8005608 <osMessageQueueGet+0x94>
 80055ae:	4b28      	ldr	r3, [pc, #160]	; (8005650 <osMessageQueueGet+0xdc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d128      	bne.n	8005608 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <osMessageQueueGet+0x54>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <osMessageQueueGet+0x54>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80055c8:	f06f 0303 	mvn.w	r3, #3
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ce:	e038      	b.n	8005642 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	461a      	mov	r2, r3
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	6a38      	ldr	r0, [r7, #32]
 80055de:	f001 f83f 	bl	8006660 <xQueueReceiveFromISR>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d003      	beq.n	80055f0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80055e8:	f06f 0302 	mvn.w	r3, #2
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ee:	e028      	b.n	8005642 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d025      	beq.n	8005642 <osMessageQueueGet+0xce>
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <osMessageQueueGet+0xe0>)
 80055f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005606:	e01c      	b.n	8005642 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <osMessageQueueGet+0xa0>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005614:	f06f 0303 	mvn.w	r3, #3
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
 800561a:	e013      	b.n	8005644 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	6a38      	ldr	r0, [r7, #32]
 8005622:	f000 fe23 	bl	800626c <xQueueReceive>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d00b      	beq.n	8005644 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005632:	f06f 0301 	mvn.w	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
 8005638:	e004      	b.n	8005644 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800563a:	f06f 0302 	mvn.w	r3, #2
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	e000      	b.n	8005644 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005642:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20004ea0 	.word	0x20004ea0
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <osMessageQueueGetCount+0x18>
    count = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e01e      	b.n	80056ae <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005670:	f3ef 8305 	mrs	r3, IPSR
 8005674:	617b      	str	r3, [r7, #20]
  return(result);
 8005676:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567c:	f3ef 8310 	mrs	r3, PRIMASK
 8005680:	613b      	str	r3, [r7, #16]
  return(result);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005688:	f3ef 8311 	mrs	r3, BASEPRI
 800568c:	60fb      	str	r3, [r7, #12]
  return(result);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <osMessageQueueGetCount+0x4e>
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <osMessageQueueGetCount+0x60>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d104      	bne.n	80056a6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800569c:	69b8      	ldr	r0, [r7, #24]
 800569e:	f001 f885 	bl	80067ac <uxQueueMessagesWaitingFromISR>
 80056a2:	61f8      	str	r0, [r7, #28]
 80056a4:	e003      	b.n	80056ae <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80056a6:	69b8      	ldr	r0, [r7, #24]
 80056a8:	f001 f860 	bl	800676c <uxQueueMessagesWaiting>
 80056ac:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80056ae:	69fb      	ldr	r3, [r7, #28]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20004ea0 	.word	0x20004ea0

080056bc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c8:	f3ef 8305 	mrs	r3, IPSR
 80056cc:	617b      	str	r3, [r7, #20]
  return(result);
 80056ce:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10f      	bne.n	80056f4 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d4:	f3ef 8310 	mrs	r3, PRIMASK
 80056d8:	613b      	str	r3, [r7, #16]
  return(result);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056e0:	f3ef 8311 	mrs	r3, BASEPRI
 80056e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <osMessageQueueDelete+0x40>
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <osMessageQueueDelete+0x68>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d103      	bne.n	80056fc <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80056f4:	f06f 0305 	mvn.w	r3, #5
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	e00e      	b.n	800571a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8005702:	f06f 0303 	mvn.w	r3, #3
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	e007      	b.n	800571a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800570a:	69b8      	ldr	r0, [r7, #24]
 800570c:	f001 f9e6 	bl	8006adc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005710:	2300      	movs	r3, #0
 8005712:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8005714:	69b8      	ldr	r0, [r7, #24]
 8005716:	f001 f869 	bl	80067ec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800571a:	69fb      	ldr	r3, [r7, #28]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20004ea0 	.word	0x20004ea0

08005728 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a07      	ldr	r2, [pc, #28]	; (8005754 <vApplicationGetIdleTaskMemory+0x2c>)
 8005738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a06      	ldr	r2, [pc, #24]	; (8005758 <vApplicationGetIdleTaskMemory+0x30>)
 800573e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	601a      	str	r2, [r3, #0]
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20004ea4 	.word	0x20004ea4
 8005758:	20004f60 	.word	0x20004f60

0800575c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a07      	ldr	r2, [pc, #28]	; (8005788 <vApplicationGetTimerTaskMemory+0x2c>)
 800576c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4a06      	ldr	r2, [pc, #24]	; (800578c <vApplicationGetTimerTaskMemory+0x30>)
 8005772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20005160 	.word	0x20005160
 800578c:	2000521c 	.word	0x2000521c

08005790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f103 0208 	add.w	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f103 0208 	add.w	r2, r3, #8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f103 0208 	add.w	r2, r3, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	601a      	str	r2, [r3, #0]
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005848:	d103      	bne.n	8005852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e00c      	b.n	800586c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3308      	adds	r3, #8
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e002      	b.n	8005860 <vListInsert+0x2e>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	d2f6      	bcs.n	800585a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6892      	ldr	r2, [r2, #8]
 80058ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6852      	ldr	r2, [r2, #4]
 80058c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d103      	bne.n	80058d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1e5a      	subs	r2, r3, #1
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10c      	bne.n	8005926 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	b672      	cpsid	i
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	b662      	cpsie	i
 8005920:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005926:	f002 fe11 	bl	800854c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	441a      	add	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	3b01      	subs	r3, #1
 8005958:	68f9      	ldr	r1, [r7, #12]
 800595a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d114      	bne.n	80059a6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3310      	adds	r3, #16
 8005988:	4618      	mov	r0, r3
 800598a:	f001 fdb5 	bl	80074f8 <xTaskRemoveFromEventList>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d012      	beq.n	80059ba <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <xQueueGenericReset+0xd0>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	e009      	b.n	80059ba <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3310      	adds	r3, #16
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fef0 	bl	8005790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3324      	adds	r3, #36	; 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff feeb 	bl	8005790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ba:	f002 fdfb 	bl	80085b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059be:	2301      	movs	r3, #1
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08e      	sub	sp, #56	; 0x38
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10c      	bne.n	80059fa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	b672      	cpsid	i
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	b662      	cpsie	i
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10c      	bne.n	8005a1a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	b672      	cpsid	i
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	b662      	cpsie	i
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <xQueueGenericCreateStatic+0x5a>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <xQueueGenericCreateStatic+0x5e>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericCreateStatic+0x60>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10c      	bne.n	8005a4a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	b672      	cpsid	i
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	b662      	cpsie	i
 8005a44:	623b      	str	r3, [r7, #32]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <xQueueGenericCreateStatic+0x8a>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueGenericCreateStatic+0x8e>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueGenericCreateStatic+0x90>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10c      	bne.n	8005a7a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	b672      	cpsid	i
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	b662      	cpsie	i
 8005a74:	61fb      	str	r3, [r7, #28]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a7a:	2350      	movs	r3, #80	; 0x50
 8005a7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b50      	cmp	r3, #80	; 0x50
 8005a82:	d00c      	beq.n	8005a9e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	b672      	cpsid	i
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	b662      	cpsie	i
 8005a98:	61bb      	str	r3, [r7, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ab2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f847 	bl	8005b54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3730      	adds	r7, #48	; 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10c      	bne.n	8005afe <xQueueGenericCreate+0x2e>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	b672      	cpsid	i
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	b662      	cpsie	i
 8005af8:	613b      	str	r3, [r7, #16]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e004      	b.n	8005b14 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3350      	adds	r3, #80	; 0x50
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f002 fe43 	bl	80087a4 <pvPortMalloc>
 8005b1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d011      	beq.n	8005b4a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	3350      	adds	r3, #80	; 0x50
 8005b2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b38:	79fa      	ldrb	r2, [r7, #7]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f805 	bl	8005b54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3720      	adds	r7, #32
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b82:	2101      	movs	r1, #1
 8005b84:	69b8      	ldr	r0, [r7, #24]
 8005b86:	f7ff feb7 	bl	80058f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00e      	beq.n	8005bc6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f917 	bl	8005df4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6939      	ldr	r1, [r7, #16]
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f7ff ff72 	bl	8005ad0 <xQueueGenericCreate>
 8005bec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff ffd3 	bl	8005b9a <prvInitialiseMutex>

		return xNewQueue;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
	}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b088      	sub	sp, #32
 8005c02:	af02      	add	r7, sp, #8
 8005c04:	4603      	mov	r3, r0
 8005c06:	6039      	str	r1, [r7, #0]
 8005c08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	6939      	ldr	r1, [r7, #16]
 8005c1c:	6978      	ldr	r0, [r7, #20]
 8005c1e:	f7ff fed5 	bl	80059cc <xQueueGenericCreateStatic>
 8005c22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff ffb8 	bl	8005b9a <prvInitialiseMutex>

		return xNewQueue;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
	}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10c      	bne.n	8005c60 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	b672      	cpsid	i
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	b662      	cpsie	i
 8005c5a:	60fb      	str	r3, [r7, #12]
}
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	689c      	ldr	r4, [r3, #8]
 8005c64:	f001 fe12 	bl	800788c <xTaskGetCurrentTaskHandle>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	429c      	cmp	r4, r3
 8005c6c:	d111      	bne.n	8005c92 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005c80:	2300      	movs	r3, #0
 8005c82:	2200      	movs	r2, #0
 8005c84:	2100      	movs	r1, #0
 8005c86:	6938      	ldr	r0, [r7, #16]
 8005c88:	f000 f8b4 	bl	8005df4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e001      	b.n	8005c96 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005c96:	697b      	ldr	r3, [r7, #20]
	}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd90      	pop	{r4, r7, pc}

08005ca0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10c      	bne.n	8005cce <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	b672      	cpsid	i
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	b662      	cpsie	i
 8005cc8:	60fb      	str	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	689c      	ldr	r4, [r3, #8]
 8005cd2:	f001 fddb 	bl	800788c <xTaskGetCurrentTaskHandle>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	d107      	bne.n	8005cec <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e00c      	b.n	8005d06 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6938      	ldr	r0, [r7, #16]
 8005cf0:	f000 fba2 	bl	8006438 <xQueueSemaphoreTake>
 8005cf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005d06:	697b      	ldr	r3, [r7, #20]
	}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd90      	pop	{r4, r7, pc}

08005d10 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10c      	bne.n	8005d3c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	b672      	cpsid	i
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	b662      	cpsie	i
 8005d36:	61bb      	str	r3, [r7, #24]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d90c      	bls.n	8005d5e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	617b      	str	r3, [r7, #20]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d5e:	2302      	movs	r3, #2
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2100      	movs	r1, #0
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fe2f 	bl	80059cc <xQueueGenericCreateStatic>
 8005d6e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
	}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b086      	sub	sp, #24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
 8005daa:	613b      	str	r3, [r7, #16]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d90c      	bls.n	8005dd2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	b672      	cpsid	i
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	b662      	cpsie	i
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fe7a 	bl	8005ad0 <xQueueGenericCreate>
 8005ddc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005dea:	697b      	ldr	r3, [r7, #20]
	}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	; 0x38
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10c      	bne.n	8005e2a <xQueueGenericSend+0x36>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	b672      	cpsid	i
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	b662      	cpsie	i
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <xQueueGenericSend+0x44>
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <xQueueGenericSend+0x48>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <xQueueGenericSend+0x4a>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10c      	bne.n	8005e5c <xQueueGenericSend+0x68>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	b672      	cpsid	i
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	b662      	cpsie	i
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d103      	bne.n	8005e6a <xQueueGenericSend+0x76>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <xQueueGenericSend+0x7a>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueGenericSend+0x7c>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10c      	bne.n	8005e8e <xQueueGenericSend+0x9a>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	b672      	cpsid	i
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	b662      	cpsie	i
 8005e88:	623b      	str	r3, [r7, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e8e:	f001 fd0d 	bl	80078ac <xTaskGetSchedulerState>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <xQueueGenericSend+0xaa>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <xQueueGenericSend+0xae>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <xQueueGenericSend+0xb0>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10c      	bne.n	8005ec2 <xQueueGenericSend+0xce>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	b672      	cpsid	i
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	b662      	cpsie	i
 8005ebc:	61fb      	str	r3, [r7, #28]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ec2:	f002 fb43 	bl	800854c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <xQueueGenericSend+0xe4>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d129      	bne.n	8005f2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ede:	f000 fcc2 	bl	8006866 <prvCopyDataToQueue>
 8005ee2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d010      	beq.n	8005f0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	3324      	adds	r3, #36	; 0x24
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fb01 	bl	80074f8 <xTaskRemoveFromEventList>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d013      	beq.n	8005f24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005efc:	4b3f      	ldr	r3, [pc, #252]	; (8005ffc <xQueueGenericSend+0x208>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	e00a      	b.n	8005f24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f14:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <xQueueGenericSend+0x208>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f24:	f002 fb46 	bl	80085b4 <vPortExitCritical>
				return pdPASS;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e063      	b.n	8005ff4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f32:	f002 fb3f 	bl	80085b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e05c      	b.n	8005ff4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f40:	f107 0314 	add.w	r3, r7, #20
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fb3d 	bl	80075c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f4e:	f002 fb31 	bl	80085b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f52:	f001 f88b 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f56:	f002 faf9 	bl	800854c <vPortEnterCritical>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f66:	d103      	bne.n	8005f70 <xQueueGenericSend+0x17c>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f76:	b25b      	sxtb	r3, r3
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7c:	d103      	bne.n	8005f86 <xQueueGenericSend+0x192>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f86:	f002 fb15 	bl	80085b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f8a:	1d3a      	adds	r2, r7, #4
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 fb2c 	bl	80075f0 <xTaskCheckForTimeOut>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d124      	bne.n	8005fe8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa0:	f000 fd59 	bl	8006a56 <prvIsQueueFull>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d018      	beq.n	8005fdc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	3310      	adds	r3, #16
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 fa4c 	bl	8007450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fba:	f000 fce4 	bl	8006986 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fbe:	f001 f863 	bl	8007088 <xTaskResumeAll>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f47f af7c 	bne.w	8005ec2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005fca:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <xQueueGenericSend+0x208>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	e772      	b.n	8005ec2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fde:	f000 fcd2 	bl	8006986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fe2:	f001 f851 	bl	8007088 <xTaskResumeAll>
 8005fe6:	e76c      	b.n	8005ec2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fea:	f000 fccc 	bl	8006986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fee:	f001 f84b 	bl	8007088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ff2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3738      	adds	r7, #56	; 0x38
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08e      	sub	sp, #56	; 0x38
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10c      	bne.n	8006032 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	b672      	cpsid	i
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	b662      	cpsie	i
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <xQueueGenericSendFromISR+0x40>
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <xQueueGenericSendFromISR+0x44>
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <xQueueGenericSendFromISR+0x46>
 8006044:	2300      	movs	r3, #0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10c      	bne.n	8006064 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	b672      	cpsid	i
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	b662      	cpsie	i
 800605e:	623b      	str	r3, [r7, #32]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d103      	bne.n	8006072 <xQueueGenericSendFromISR+0x72>
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <xQueueGenericSendFromISR+0x76>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <xQueueGenericSendFromISR+0x78>
 8006076:	2300      	movs	r3, #0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10c      	bne.n	8006096 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	b672      	cpsid	i
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	b662      	cpsie	i
 8006090:	61fb      	str	r3, [r7, #28]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006096:	f002 fb41 	bl	800871c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800609a:	f3ef 8211 	mrs	r2, BASEPRI
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	b672      	cpsid	i
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	b662      	cpsie	i
 80060b2:	61ba      	str	r2, [r7, #24]
 80060b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <xQueueGenericSendFromISR+0xcc>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d12c      	bne.n	8006126 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060dc:	f000 fbc3 	bl	8006866 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e8:	d112      	bne.n	8006110 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	3324      	adds	r3, #36	; 0x24
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f9fe 	bl	80074f8 <xTaskRemoveFromEventList>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e007      	b.n	8006120 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006114:	3301      	adds	r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	b25a      	sxtb	r2, r3
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006120:	2301      	movs	r3, #1
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006124:	e001      	b.n	800612a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006126:	2300      	movs	r3, #0
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006134:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006138:	4618      	mov	r0, r3
 800613a:	3738      	adds	r7, #56	; 0x38
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10c      	bne.n	800616e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	b672      	cpsid	i
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	b662      	cpsie	i
 8006168:	623b      	str	r3, [r7, #32]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	b672      	cpsid	i
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	b662      	cpsie	i
 800618a:	61fb      	str	r3, [r7, #28]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d103      	bne.n	80061a0 <xQueueGiveFromISR+0x60>
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <xQueueGiveFromISR+0x64>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <xQueueGiveFromISR+0x66>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10c      	bne.n	80061c4 <xQueueGiveFromISR+0x84>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	b672      	cpsid	i
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	b662      	cpsie	i
 80061be:	61bb      	str	r3, [r7, #24]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061c4:	f002 faaa 	bl	800871c <vPortValidateInterruptPriority>
	__asm volatile
 80061c8:	f3ef 8211 	mrs	r2, BASEPRI
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	b672      	cpsid	i
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	b662      	cpsie	i
 80061e0:	617a      	str	r2, [r7, #20]
 80061e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80061e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d22b      	bcs.n	8006250 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800620a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006212:	d112      	bne.n	800623a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	d016      	beq.n	800624a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f969 	bl	80074f8 <xTaskRemoveFromEventList>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e007      	b.n	800624a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800623a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800623e:	3301      	adds	r3, #1
 8006240:	b2db      	uxtb	r3, r3
 8006242:	b25a      	sxtb	r2, r3
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800624a:	2301      	movs	r3, #1
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
 800624e:	e001      	b.n	8006254 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006250:	2300      	movs	r3, #0
 8006252:	637b      	str	r3, [r7, #52]	; 0x34
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f383 8811 	msr	BASEPRI, r3
}
 800625e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006262:	4618      	mov	r0, r3
 8006264:	3738      	adds	r7, #56	; 0x38
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08c      	sub	sp, #48	; 0x30
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006278:	2300      	movs	r3, #0
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10c      	bne.n	80062a0 <xQueueReceive+0x34>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	b672      	cpsid	i
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	b662      	cpsie	i
 800629a:	623b      	str	r3, [r7, #32]
}
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d103      	bne.n	80062ae <xQueueReceive+0x42>
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <xQueueReceive+0x46>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <xQueueReceive+0x48>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10c      	bne.n	80062d2 <xQueueReceive+0x66>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	b672      	cpsid	i
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	b662      	cpsie	i
 80062cc:	61fb      	str	r3, [r7, #28]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062d2:	f001 faeb 	bl	80078ac <xTaskGetSchedulerState>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <xQueueReceive+0x76>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <xQueueReceive+0x7a>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <xQueueReceive+0x7c>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10c      	bne.n	8006306 <xQueueReceive+0x9a>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	b672      	cpsid	i
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	b662      	cpsie	i
 8006300:	61bb      	str	r3, [r7, #24]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006306:	f002 f921 	bl	800854c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01f      	beq.n	8006356 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631a:	f000 fb0e 	bl	800693a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	1e5a      	subs	r2, r3, #1
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	3310      	adds	r3, #16
 8006332:	4618      	mov	r0, r3
 8006334:	f001 f8e0 	bl	80074f8 <xTaskRemoveFromEventList>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800633e:	4b3d      	ldr	r3, [pc, #244]	; (8006434 <xQueueReceive+0x1c8>)
 8006340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800634e:	f002 f931 	bl	80085b4 <vPortExitCritical>
				return pdPASS;
 8006352:	2301      	movs	r3, #1
 8006354:	e069      	b.n	800642a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800635c:	f002 f92a 	bl	80085b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006360:	2300      	movs	r3, #0
 8006362:	e062      	b.n	800642a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800636a:	f107 0310 	add.w	r3, r7, #16
 800636e:	4618      	mov	r0, r3
 8006370:	f001 f928 	bl	80075c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006378:	f002 f91c 	bl	80085b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800637c:	f000 fe76 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006380:	f002 f8e4 	bl	800854c <vPortEnterCritical>
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800638a:	b25b      	sxtb	r3, r3
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006390:	d103      	bne.n	800639a <xQueueReceive+0x12e>
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a0:	b25b      	sxtb	r3, r3
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a6:	d103      	bne.n	80063b0 <xQueueReceive+0x144>
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b0:	f002 f900 	bl	80085b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063b4:	1d3a      	adds	r2, r7, #4
 80063b6:	f107 0310 	add.w	r3, r7, #16
 80063ba:	4611      	mov	r1, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f917 	bl	80075f0 <xTaskCheckForTimeOut>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d123      	bne.n	8006410 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ca:	f000 fb2e 	bl	8006a2a <prvIsQueueEmpty>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d017      	beq.n	8006404 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	3324      	adds	r3, #36	; 0x24
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 f837 	bl	8007450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e4:	f000 facf 	bl	8006986 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063e8:	f000 fe4e 	bl	8007088 <xTaskResumeAll>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d189      	bne.n	8006306 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80063f2:	4b10      	ldr	r3, [pc, #64]	; (8006434 <xQueueReceive+0x1c8>)
 80063f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	e780      	b.n	8006306 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006406:	f000 fabe 	bl	8006986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800640a:	f000 fe3d 	bl	8007088 <xTaskResumeAll>
 800640e:	e77a      	b.n	8006306 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006412:	f000 fab8 	bl	8006986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006416:	f000 fe37 	bl	8007088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800641a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641c:	f000 fb05 	bl	8006a2a <prvIsQueueEmpty>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	f43f af6f 	beq.w	8006306 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006428:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800642a:	4618      	mov	r0, r3
 800642c:	3730      	adds	r7, #48	; 0x30
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	; 0x38
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10c      	bne.n	800646e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	623b      	str	r3, [r7, #32]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	b672      	cpsid	i
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	b662      	cpsie	i
 800648a:	61fb      	str	r3, [r7, #28]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006490:	f001 fa0c 	bl	80078ac <xTaskGetSchedulerState>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <xQueueSemaphoreTake+0x68>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xQueueSemaphoreTake+0x6c>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <xQueueSemaphoreTake+0x6e>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	b672      	cpsid	i
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	b662      	cpsie	i
 80064be:	61bb      	str	r3, [r7, #24]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064c4:	f002 f842 	bl	800854c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d024      	beq.n	800651e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	1e5a      	subs	r2, r3, #1
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80064e4:	f001 fb60 	bl	8007ba8 <pvTaskIncrementMutexHeldCount>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00f      	beq.n	8006516 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	3310      	adds	r3, #16
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fffc 	bl	80074f8 <xTaskRemoveFromEventList>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006506:	4b55      	ldr	r3, [pc, #340]	; (800665c <xQueueSemaphoreTake+0x224>)
 8006508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006516:	f002 f84d 	bl	80085b4 <vPortExitCritical>
				return pdPASS;
 800651a:	2301      	movs	r3, #1
 800651c:	e099      	b.n	8006652 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d113      	bne.n	800654c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	b672      	cpsid	i
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	b662      	cpsie	i
 800653e:	617b      	str	r3, [r7, #20]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006544:	f002 f836 	bl	80085b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006548:	2300      	movs	r3, #0
 800654a:	e082      	b.n	8006652 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006552:	f107 030c 	add.w	r3, r7, #12
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f834 	bl	80075c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800655c:	2301      	movs	r3, #1
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006560:	f002 f828 	bl	80085b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006564:	f000 fd82 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006568:	f001 fff0 	bl	800854c <vPortEnterCritical>
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006572:	b25b      	sxtb	r3, r3
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006578:	d103      	bne.n	8006582 <xQueueSemaphoreTake+0x14a>
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006588:	b25b      	sxtb	r3, r3
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800658e:	d103      	bne.n	8006598 <xQueueSemaphoreTake+0x160>
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006598:	f002 f80c 	bl	80085b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800659c:	463a      	mov	r2, r7
 800659e:	f107 030c 	add.w	r3, r7, #12
 80065a2:	4611      	mov	r1, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 f823 	bl	80075f0 <xTaskCheckForTimeOut>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d132      	bne.n	8006616 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065b2:	f000 fa3a 	bl	8006a2a <prvIsQueueEmpty>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d026      	beq.n	800660a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80065c4:	f001 ffc2 	bl	800854c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 f98b 	bl	80078e8 <xTaskPriorityInherit>
 80065d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80065d4:	f001 ffee 	bl	80085b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	3324      	adds	r3, #36	; 0x24
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 ff35 	bl	8007450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065e8:	f000 f9cd 	bl	8006986 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065ec:	f000 fd4c 	bl	8007088 <xTaskResumeAll>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f47f af66 	bne.w	80064c4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80065f8:	4b18      	ldr	r3, [pc, #96]	; (800665c <xQueueSemaphoreTake+0x224>)
 80065fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	e75c      	b.n	80064c4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800660a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800660c:	f000 f9bb 	bl	8006986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006610:	f000 fd3a 	bl	8007088 <xTaskResumeAll>
 8006614:	e756      	b.n	80064c4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006618:	f000 f9b5 	bl	8006986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800661c:	f000 fd34 	bl	8007088 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006622:	f000 fa02 	bl	8006a2a <prvIsQueueEmpty>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	f43f af4b 	beq.w	80064c4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00d      	beq.n	8006650 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006634:	f001 ff8a 	bl	800854c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800663a:	f000 f8fc 	bl	8006836 <prvGetDisinheritPriorityAfterTimeout>
 800663e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006646:	4618      	mov	r0, r3
 8006648:	f001 fa28 	bl	8007a9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800664c:	f001 ffb2 	bl	80085b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006650:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006652:	4618      	mov	r0, r3
 8006654:	3738      	adds	r7, #56	; 0x38
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	e000ed04 	.word	0xe000ed04

08006660 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08e      	sub	sp, #56	; 0x38
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10c      	bne.n	8006690 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	b672      	cpsid	i
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	b662      	cpsie	i
 800668a:	623b      	str	r3, [r7, #32]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <xQueueReceiveFromISR+0x3e>
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <xQueueReceiveFromISR+0x42>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <xQueueReceiveFromISR+0x44>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10c      	bne.n	80066c2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	b672      	cpsid	i
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	b662      	cpsie	i
 80066bc:	61fb      	str	r3, [r7, #28]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066c2:	f002 f82b 	bl	800871c <vPortValidateInterruptPriority>
	__asm volatile
 80066c6:	f3ef 8211 	mrs	r2, BASEPRI
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	b672      	cpsid	i
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	b662      	cpsie	i
 80066de:	61ba      	str	r2, [r7, #24]
 80066e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80066e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02f      	beq.n	8006752 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006700:	f000 f91b 	bl	800693a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800670c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006714:	d112      	bne.n	800673c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d016      	beq.n	800674c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	3310      	adds	r3, #16
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fee8 	bl	80074f8 <xTaskRemoveFromEventList>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00e      	beq.n	800674c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e007      	b.n	800674c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800673c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006740:	3301      	adds	r3, #1
 8006742:	b2db      	uxtb	r3, r3
 8006744:	b25a      	sxtb	r2, r3
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800674c:	2301      	movs	r3, #1
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
 8006750:	e001      	b.n	8006756 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006752:	2300      	movs	r3, #0
 8006754:	637b      	str	r3, [r7, #52]	; 0x34
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	613b      	str	r3, [r7, #16]
	__asm volatile
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f383 8811 	msr	BASEPRI, r3
}
 8006760:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006764:	4618      	mov	r0, r3
 8006766:	3738      	adds	r7, #56	; 0x38
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	b672      	cpsid	i
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	b662      	cpsie	i
 800678e:	60bb      	str	r3, [r7, #8]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8006794:	f001 feda 	bl	800854c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800679e:	f001 ff09 	bl	80085b4 <vPortExitCritical>

	return uxReturn;
 80067a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10c      	bne.n	80067d8 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	b672      	cpsid	i
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	b662      	cpsie	i
 80067d2:	60fb      	str	r3, [r7, #12]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80067de:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80067e0:	4618      	mov	r0, r3
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10c      	bne.n	8006818 <vQueueDelete+0x2c>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	b672      	cpsid	i
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	b662      	cpsie	i
 8006812:	60bb      	str	r3, [r7, #8]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f95f 	bl	8006adc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f002 f885 	bl	8008938 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d006      	beq.n	8006854 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e001      	b.n	8006858 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006858:	68fb      	ldr	r3, [r7, #12]
	}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10d      	bne.n	80068a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d14d      	bne.n	8006928 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f891 	bl	80079b8 <xTaskPriorityDisinherit>
 8006896:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	609a      	str	r2, [r3, #8]
 800689e:	e043      	b.n	8006928 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d119      	bne.n	80068da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6858      	ldr	r0, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	461a      	mov	r2, r3
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	f00f fa4c 	bl	8015d4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	441a      	add	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d32b      	bcc.n	8006928 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	e026      	b.n	8006928 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68d8      	ldr	r0, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	461a      	mov	r2, r3
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	f00f fa32 	bl	8015d4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	425b      	negs	r3, r3
 80068f4:	441a      	add	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d207      	bcs.n	8006916 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	425b      	negs	r3, r3
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d105      	bne.n	8006928 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3b01      	subs	r3, #1
 8006926:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006930:	697b      	ldr	r3, [r7, #20]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d018      	beq.n	800697e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	441a      	add	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	d303      	bcc.n	800696e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68d9      	ldr	r1, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	461a      	mov	r2, r3
 8006978:	6838      	ldr	r0, [r7, #0]
 800697a:	f00f f9e8 	bl	8015d4e <memcpy>
	}
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800698e:	f001 fddd 	bl	800854c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006998:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800699a:	e011      	b.n	80069c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d012      	beq.n	80069ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3324      	adds	r3, #36	; 0x24
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fda5 	bl	80074f8 <xTaskRemoveFromEventList>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069b4:	f000 fe82 	bl	80076bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dce9      	bgt.n	800699c <prvUnlockQueue+0x16>
 80069c8:	e000      	b.n	80069cc <prvUnlockQueue+0x46>
					break;
 80069ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069d4:	f001 fdee 	bl	80085b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069d8:	f001 fdb8 	bl	800854c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e4:	e011      	b.n	8006a0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d012      	beq.n	8006a14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3310      	adds	r3, #16
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fd80 	bl	80074f8 <xTaskRemoveFromEventList>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069fe:	f000 fe5d 	bl	80076bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a02:	7bbb      	ldrb	r3, [r7, #14]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dce9      	bgt.n	80069e6 <prvUnlockQueue+0x60>
 8006a12:	e000      	b.n	8006a16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	22ff      	movs	r2, #255	; 0xff
 8006a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a1e:	f001 fdc9 	bl	80085b4 <vPortExitCritical>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a32:	f001 fd8b 	bl	800854c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d102      	bne.n	8006a44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e001      	b.n	8006a48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a48:	f001 fdb4 	bl	80085b4 <vPortExitCritical>

	return xReturn;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a5e:	f001 fd75 	bl	800854c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d102      	bne.n	8006a74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e001      	b.n	8006a78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a78:	f001 fd9c 	bl	80085b4 <vPortExitCritical>

	return xReturn;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e014      	b.n	8006ac2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a98:	4a0f      	ldr	r2, [pc, #60]	; (8006ad8 <vQueueAddToRegistry+0x50>)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aa4:	490c      	ldr	r1, [pc, #48]	; (8006ad8 <vQueueAddToRegistry+0x50>)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <vQueueAddToRegistry+0x50>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006aba:	e006      	b.n	8006aca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b07      	cmp	r3, #7
 8006ac6:	d9e7      	bls.n	8006a98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000561c 	.word	0x2000561c

08006adc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e016      	b.n	8006b18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006aea:	4a10      	ldr	r2, [pc, #64]	; (8006b2c <vQueueUnregisterQueue+0x50>)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	4413      	add	r3, r2
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d10b      	bne.n	8006b12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006afa:	4a0c      	ldr	r2, [pc, #48]	; (8006b2c <vQueueUnregisterQueue+0x50>)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2100      	movs	r1, #0
 8006b00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b04:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <vQueueUnregisterQueue+0x50>)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	605a      	str	r2, [r3, #4]
				break;
 8006b10:	e006      	b.n	8006b20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3301      	adds	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b07      	cmp	r3, #7
 8006b1c:	d9e5      	bls.n	8006aea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	2000561c 	.word	0x2000561c

08006b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b40:	f001 fd04 	bl	800854c <vPortEnterCritical>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b4a:	b25b      	sxtb	r3, r3
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b50:	d103      	bne.n	8006b5a <vQueueWaitForMessageRestricted+0x2a>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b60:	b25b      	sxtb	r3, r3
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b66:	d103      	bne.n	8006b70 <vQueueWaitForMessageRestricted+0x40>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b70:	f001 fd20 	bl	80085b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d106      	bne.n	8006b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	3324      	adds	r3, #36	; 0x24
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fc89 	bl	800749c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b8a:	6978      	ldr	r0, [r7, #20]
 8006b8c:	f7ff fefb 	bl	8006986 <prvUnlockQueue>
	}
 8006b90:	bf00      	nop
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08e      	sub	sp, #56	; 0x38
 8006b9c:	af04      	add	r7, sp, #16
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10c      	bne.n	8006bc6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	b672      	cpsid	i
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	b662      	cpsie	i
 8006bc0:	623b      	str	r3, [r7, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	e7fe      	b.n	8006bc4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10c      	bne.n	8006be6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	b672      	cpsid	i
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	b662      	cpsie	i
 8006be0:	61fb      	str	r3, [r7, #28]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006be6:	23bc      	movs	r3, #188	; 0xbc
 8006be8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2bbc      	cmp	r3, #188	; 0xbc
 8006bee:	d00c      	beq.n	8006c0a <xTaskCreateStatic+0x72>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	b672      	cpsid	i
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	b662      	cpsie	i
 8006c04:	61bb      	str	r3, [r7, #24]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01e      	beq.n	8006c50 <xTaskCreateStatic+0xb8>
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01b      	beq.n	8006c50 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	2202      	movs	r2, #2
 8006c26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9303      	str	r3, [sp, #12]
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	f107 0314 	add.w	r3, r7, #20
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f850 	bl	8006ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c4a:	f000 f8f5 	bl	8006e38 <prvAddNewTaskToReadyList>
 8006c4e:	e001      	b.n	8006c54 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c54:	697b      	ldr	r3, [r7, #20]
	}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3728      	adds	r7, #40	; 0x28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b08c      	sub	sp, #48	; 0x30
 8006c62:	af04      	add	r7, sp, #16
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 fd96 	bl	80087a4 <pvPortMalloc>
 8006c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c80:	20bc      	movs	r0, #188	; 0xbc
 8006c82:	f001 fd8f 	bl	80087a4 <pvPortMalloc>
 8006c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
 8006c94:	e005      	b.n	8006ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c96:	6978      	ldr	r0, [r7, #20]
 8006c98:	f001 fe4e 	bl	8008938 <vPortFree>
 8006c9c:	e001      	b.n	8006ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d017      	beq.n	8006cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9303      	str	r3, [sp, #12]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	9302      	str	r3, [sp, #8]
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f80e 	bl	8006ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ccc:	69f8      	ldr	r0, [r7, #28]
 8006cce:	f000 f8b3 	bl	8006e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	e002      	b.n	8006cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cde:	69bb      	ldr	r3, [r7, #24]
	}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	461a      	mov	r2, r3
 8006d00:	21a5      	movs	r1, #165	; 0xa5
 8006d02:	f00f f84c 	bl	8015d9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006d10:	440b      	add	r3, r1
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	b672      	cpsid	i
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	b662      	cpsie	i
 8006d3e:	617b      	str	r3, [r7, #20]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01f      	beq.n	8006d8a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	e012      	b.n	8006d76 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	7819      	ldrb	r1, [r3, #0]
 8006d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3334      	adds	r3, #52	; 0x34
 8006d60:	460a      	mov	r2, r1
 8006d62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	4413      	add	r3, r2
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	3301      	adds	r3, #1
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	2b0f      	cmp	r3, #15
 8006d7a:	d9e9      	bls.n	8006d50 <prvInitialiseNewTask+0x68>
 8006d7c:	e000      	b.n	8006d80 <prvInitialiseNewTask+0x98>
			{
				break;
 8006d7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d88:	e003      	b.n	8006d92 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	2b37      	cmp	r3, #55	; 0x37
 8006d96:	d901      	bls.n	8006d9c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d98:	2337      	movs	r3, #55	; 0x37
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	2200      	movs	r2, #0
 8006dac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	3304      	adds	r3, #4
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fd0c 	bl	80057d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	3318      	adds	r3, #24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fd07 	bl	80057d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	3354      	adds	r3, #84	; 0x54
 8006dec:	2260      	movs	r2, #96	; 0x60
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f00e ffd4 	bl	8015d9e <memset>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <prvInitialiseNewTask+0x144>)
 8006dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	4a0c      	ldr	r2, [pc, #48]	; (8006e30 <prvInitialiseNewTask+0x148>)
 8006e00:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <prvInitialiseNewTask+0x14c>)
 8006e06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	68f9      	ldr	r1, [r7, #12]
 8006e0c:	69b8      	ldr	r0, [r7, #24]
 8006e0e:	f001 fa8f 	bl	8008330 <pxPortInitialiseStack>
 8006e12:	4602      	mov	r2, r0
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e24:	bf00      	nop
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	0801a474 	.word	0x0801a474
 8006e30:	0801a494 	.word	0x0801a494
 8006e34:	0801a454 	.word	0x0801a454

08006e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e40:	f001 fb84 	bl	800854c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e44:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <prvAddNewTaskToReadyList+0xc4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a2c      	ldr	r2, [pc, #176]	; (8006efc <prvAddNewTaskToReadyList+0xc4>)
 8006e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e4e:	4b2c      	ldr	r3, [pc, #176]	; (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e56:	4a2a      	ldr	r2, [pc, #168]	; (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e5c:	4b27      	ldr	r3, [pc, #156]	; (8006efc <prvAddNewTaskToReadyList+0xc4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d110      	bne.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e64:	f000 fc4e 	bl	8007704 <prvInitialiseTaskLists>
 8006e68:	e00d      	b.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e6a:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <prvAddNewTaskToReadyList+0xcc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e72:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d802      	bhi.n	8006e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e80:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e86:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <prvAddNewTaskToReadyList+0xd0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <prvAddNewTaskToReadyList+0xd0>)
 8006e8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e90:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <prvAddNewTaskToReadyList+0xd0>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9c:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <prvAddNewTaskToReadyList+0xd4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d903      	bls.n	8006eac <prvAddNewTaskToReadyList+0x74>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <prvAddNewTaskToReadyList+0xd4>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <prvAddNewTaskToReadyList+0xd8>)
 8006eba:	441a      	add	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7fe fc91 	bl	80057ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ec8:	f001 fb74 	bl	80085b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <prvAddNewTaskToReadyList+0xcc>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00e      	beq.n	8006ef2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <prvAddNewTaskToReadyList+0xc8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d207      	bcs.n	8006ef2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <prvAddNewTaskToReadyList+0xdc>)
 8006ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20005b30 	.word	0x20005b30
 8006f00:	2000565c 	.word	0x2000565c
 8006f04:	20005b3c 	.word	0x20005b3c
 8006f08:	20005b4c 	.word	0x20005b4c
 8006f0c:	20005b38 	.word	0x20005b38
 8006f10:	20005660 	.word	0x20005660
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d019      	beq.n	8006f5e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <vTaskDelay+0x64>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00c      	beq.n	8006f4c <vTaskDelay+0x34>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	b672      	cpsid	i
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	b662      	cpsie	i
 8006f46:	60bb      	str	r3, [r7, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006f4c:	f000 f88e 	bl	800706c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f50:	2100      	movs	r1, #0
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fe3c 	bl	8007bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f58:	f000 f896 	bl	8007088 <xTaskResumeAll>
 8006f5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <vTaskDelay+0x68>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20005b58 	.word	0x20005b58
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f92:	463a      	mov	r2, r7
 8006f94:	1d39      	adds	r1, r7, #4
 8006f96:	f107 0308 	add.w	r3, r7, #8
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fbc4 	bl	8005728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	2300      	movs	r3, #0
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	4926      	ldr	r1, [pc, #152]	; (800704c <vTaskStartScheduler+0xc8>)
 8006fb4:	4826      	ldr	r0, [pc, #152]	; (8007050 <vTaskStartScheduler+0xcc>)
 8006fb6:	f7ff fdef 	bl	8006b98 <xTaskCreateStatic>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4a25      	ldr	r2, [pc, #148]	; (8007054 <vTaskStartScheduler+0xd0>)
 8006fbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fc0:	4b24      	ldr	r3, [pc, #144]	; (8007054 <vTaskStartScheduler+0xd0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e001      	b.n	8006fd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d102      	bne.n	8006fde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fd8:	f000 fe4e 	bl	8007c78 <xTimerCreateTimerTask>
 8006fdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d11d      	bne.n	8007020 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	b672      	cpsid	i
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	b662      	cpsie	i
 8006ff8:	613b      	str	r3, [r7, #16]
}
 8006ffa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ffc:	4b16      	ldr	r3, [pc, #88]	; (8007058 <vTaskStartScheduler+0xd4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3354      	adds	r3, #84	; 0x54
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <vTaskStartScheduler+0xd8>)
 8007004:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007006:	4b16      	ldr	r3, [pc, #88]	; (8007060 <vTaskStartScheduler+0xdc>)
 8007008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800700c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800700e:	4b15      	ldr	r3, [pc, #84]	; (8007064 <vTaskStartScheduler+0xe0>)
 8007010:	2201      	movs	r2, #1
 8007012:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007014:	4b14      	ldr	r3, [pc, #80]	; (8007068 <vTaskStartScheduler+0xe4>)
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800701a:	f001 fa19 	bl	8008450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800701e:	e010      	b.n	8007042 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007026:	d10c      	bne.n	8007042 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	b672      	cpsid	i
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	b662      	cpsie	i
 800703c:	60fb      	str	r3, [r7, #12]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <vTaskStartScheduler+0xbc>
}
 8007042:	bf00      	nop
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	08017198 	.word	0x08017198
 8007050:	080076d5 	.word	0x080076d5
 8007054:	20005b54 	.word	0x20005b54
 8007058:	2000565c 	.word	0x2000565c
 800705c:	2000002c 	.word	0x2000002c
 8007060:	20005b50 	.word	0x20005b50
 8007064:	20005b3c 	.word	0x20005b3c
 8007068:	20005b34 	.word	0x20005b34

0800706c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <vTaskSuspendAll+0x18>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	4a03      	ldr	r2, [pc, #12]	; (8007084 <vTaskSuspendAll+0x18>)
 8007078:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800707a:	bf00      	nop
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	20005b58 	.word	0x20005b58

08007088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007096:	4b43      	ldr	r3, [pc, #268]	; (80071a4 <xTaskResumeAll+0x11c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10c      	bne.n	80070b8 <xTaskResumeAll+0x30>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	b672      	cpsid	i
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	b662      	cpsie	i
 80070b2:	603b      	str	r3, [r7, #0]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070b8:	f001 fa48 	bl	800854c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070bc:	4b39      	ldr	r3, [pc, #228]	; (80071a4 <xTaskResumeAll+0x11c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	4a38      	ldr	r2, [pc, #224]	; (80071a4 <xTaskResumeAll+0x11c>)
 80070c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c6:	4b37      	ldr	r3, [pc, #220]	; (80071a4 <xTaskResumeAll+0x11c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d162      	bne.n	8007194 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ce:	4b36      	ldr	r3, [pc, #216]	; (80071a8 <xTaskResumeAll+0x120>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d05e      	beq.n	8007194 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070d6:	e02f      	b.n	8007138 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d8:	4b34      	ldr	r3, [pc, #208]	; (80071ac <xTaskResumeAll+0x124>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3318      	adds	r3, #24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fbdd 	bl	80058a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fbd8 	bl	80058a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b2d      	ldr	r3, [pc, #180]	; (80071b0 <xTaskResumeAll+0x128>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d903      	bls.n	8007108 <xTaskResumeAll+0x80>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <xTaskResumeAll+0x128>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4a27      	ldr	r2, [pc, #156]	; (80071b4 <xTaskResumeAll+0x12c>)
 8007116:	441a      	add	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe fb63 	bl	80057ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b23      	ldr	r3, [pc, #140]	; (80071b8 <xTaskResumeAll+0x130>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007132:	4b22      	ldr	r3, [pc, #136]	; (80071bc <xTaskResumeAll+0x134>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007138:	4b1c      	ldr	r3, [pc, #112]	; (80071ac <xTaskResumeAll+0x124>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1cb      	bne.n	80070d8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007146:	f000 fb81 	bl	800784c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800714a:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <xTaskResumeAll+0x138>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d010      	beq.n	8007178 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007156:	f000 f859 	bl	800720c <xTaskIncrementTick>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007160:	4b16      	ldr	r3, [pc, #88]	; (80071bc <xTaskResumeAll+0x134>)
 8007162:	2201      	movs	r2, #1
 8007164:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3b01      	subs	r3, #1
 800716a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f1      	bne.n	8007156 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <xTaskResumeAll+0x138>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007178:	4b10      	ldr	r3, [pc, #64]	; (80071bc <xTaskResumeAll+0x134>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <xTaskResumeAll+0x13c>)
 8007186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007194:	f001 fa0e 	bl	80085b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007198:	68bb      	ldr	r3, [r7, #8]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20005b58 	.word	0x20005b58
 80071a8:	20005b30 	.word	0x20005b30
 80071ac:	20005af0 	.word	0x20005af0
 80071b0:	20005b38 	.word	0x20005b38
 80071b4:	20005660 	.word	0x20005660
 80071b8:	2000565c 	.word	0x2000565c
 80071bc:	20005b44 	.word	0x20005b44
 80071c0:	20005b40 	.word	0x20005b40
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <xTaskGetTickCount+0x1c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071d4:	687b      	ldr	r3, [r7, #4]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20005b34 	.word	0x20005b34

080071e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071ee:	f001 fa95 	bl	800871c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80071f2:	2300      	movs	r3, #0
 80071f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <xTaskGetTickCountFromISR+0x20>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071fc:	683b      	ldr	r3, [r7, #0]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20005b34 	.word	0x20005b34

0800720c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007216:	4b50      	ldr	r3, [pc, #320]	; (8007358 <xTaskIncrementTick+0x14c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 808b 	bne.w	8007336 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007220:	4b4e      	ldr	r3, [pc, #312]	; (800735c <xTaskIncrementTick+0x150>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007228:	4a4c      	ldr	r2, [pc, #304]	; (800735c <xTaskIncrementTick+0x150>)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d122      	bne.n	800727a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007234:	4b4a      	ldr	r3, [pc, #296]	; (8007360 <xTaskIncrementTick+0x154>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00c      	beq.n	8007258 <xTaskIncrementTick+0x4c>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	b672      	cpsid	i
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	b662      	cpsie	i
 8007252:	603b      	str	r3, [r7, #0]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <xTaskIncrementTick+0x4a>
 8007258:	4b41      	ldr	r3, [pc, #260]	; (8007360 <xTaskIncrementTick+0x154>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b41      	ldr	r3, [pc, #260]	; (8007364 <xTaskIncrementTick+0x158>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a3f      	ldr	r2, [pc, #252]	; (8007360 <xTaskIncrementTick+0x154>)
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	4a3f      	ldr	r2, [pc, #252]	; (8007364 <xTaskIncrementTick+0x158>)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <xTaskIncrementTick+0x15c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	4a3d      	ldr	r2, [pc, #244]	; (8007368 <xTaskIncrementTick+0x15c>)
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	f000 fae9 	bl	800784c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800727a:	4b3c      	ldr	r3, [pc, #240]	; (800736c <xTaskIncrementTick+0x160>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d349      	bcc.n	8007318 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007284:	4b36      	ldr	r3, [pc, #216]	; (8007360 <xTaskIncrementTick+0x154>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728e:	4b37      	ldr	r3, [pc, #220]	; (800736c <xTaskIncrementTick+0x160>)
 8007290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007294:	601a      	str	r2, [r3, #0]
					break;
 8007296:	e03f      	b.n	8007318 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007298:	4b31      	ldr	r3, [pc, #196]	; (8007360 <xTaskIncrementTick+0x154>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d203      	bcs.n	80072b8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072b0:	4a2e      	ldr	r2, [pc, #184]	; (800736c <xTaskIncrementTick+0x160>)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072b6:	e02f      	b.n	8007318 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe faf1 	bl	80058a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d004      	beq.n	80072d4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	3318      	adds	r3, #24
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fae8 	bl	80058a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <xTaskIncrementTick+0x164>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d903      	bls.n	80072e8 <xTaskIncrementTick+0xdc>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	4a22      	ldr	r2, [pc, #136]	; (8007370 <xTaskIncrementTick+0x164>)
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <xTaskIncrementTick+0x168>)
 80072f6:	441a      	add	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	f7fe fa73 	bl	80057ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007308:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <xTaskIncrementTick+0x16c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	429a      	cmp	r2, r3
 8007310:	d3b8      	bcc.n	8007284 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007312:	2301      	movs	r3, #1
 8007314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007316:	e7b5      	b.n	8007284 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007318:	4b17      	ldr	r3, [pc, #92]	; (8007378 <xTaskIncrementTick+0x16c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731e:	4915      	ldr	r1, [pc, #84]	; (8007374 <xTaskIncrementTick+0x168>)
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d907      	bls.n	8007340 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007330:	2301      	movs	r3, #1
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e004      	b.n	8007340 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007336:	4b11      	ldr	r3, [pc, #68]	; (800737c <xTaskIncrementTick+0x170>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	4a0f      	ldr	r2, [pc, #60]	; (800737c <xTaskIncrementTick+0x170>)
 800733e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <xTaskIncrementTick+0x174>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007348:	2301      	movs	r3, #1
 800734a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800734c:	697b      	ldr	r3, [r7, #20]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20005b58 	.word	0x20005b58
 800735c:	20005b34 	.word	0x20005b34
 8007360:	20005ae8 	.word	0x20005ae8
 8007364:	20005aec 	.word	0x20005aec
 8007368:	20005b48 	.word	0x20005b48
 800736c:	20005b50 	.word	0x20005b50
 8007370:	20005b38 	.word	0x20005b38
 8007374:	20005660 	.word	0x20005660
 8007378:	2000565c 	.word	0x2000565c
 800737c:	20005b40 	.word	0x20005b40
 8007380:	20005b44 	.word	0x20005b44

08007384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800738a:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <vTaskSwitchContext+0xb4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007392:	4b2a      	ldr	r3, [pc, #168]	; (800743c <vTaskSwitchContext+0xb8>)
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007398:	e048      	b.n	800742c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800739a:	4b28      	ldr	r3, [pc, #160]	; (800743c <vTaskSwitchContext+0xb8>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a0:	4b27      	ldr	r3, [pc, #156]	; (8007440 <vTaskSwitchContext+0xbc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e012      	b.n	80073ce <vTaskSwitchContext+0x4a>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10c      	bne.n	80073c8 <vTaskSwitchContext+0x44>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	b672      	cpsid	i
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	b662      	cpsie	i
 80073c2:	607b      	str	r3, [r7, #4]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <vTaskSwitchContext+0x42>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	491d      	ldr	r1, [pc, #116]	; (8007444 <vTaskSwitchContext+0xc0>)
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	440b      	add	r3, r1
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0e2      	beq.n	80073a8 <vTaskSwitchContext+0x24>
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4a15      	ldr	r2, [pc, #84]	; (8007444 <vTaskSwitchContext+0xc0>)
 80073ee:	4413      	add	r3, r2
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3308      	adds	r3, #8
 8007404:	429a      	cmp	r2, r3
 8007406:	d104      	bne.n	8007412 <vTaskSwitchContext+0x8e>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	4a0b      	ldr	r2, [pc, #44]	; (8007448 <vTaskSwitchContext+0xc4>)
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	4a08      	ldr	r2, [pc, #32]	; (8007440 <vTaskSwitchContext+0xbc>)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <vTaskSwitchContext+0xc4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3354      	adds	r3, #84	; 0x54
 8007428:	4a08      	ldr	r2, [pc, #32]	; (800744c <vTaskSwitchContext+0xc8>)
 800742a:	6013      	str	r3, [r2, #0]
}
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20005b58 	.word	0x20005b58
 800743c:	20005b44 	.word	0x20005b44
 8007440:	20005b38 	.word	0x20005b38
 8007444:	20005660 	.word	0x20005660
 8007448:	2000565c 	.word	0x2000565c
 800744c:	2000002c 	.word	0x2000002c

08007450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10c      	bne.n	800747a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	60fb      	str	r3, [r7, #12]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <vTaskPlaceOnEventList+0x48>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3318      	adds	r3, #24
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fe f9d5 	bl	8005832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007488:	2101      	movs	r1, #1
 800748a:	6838      	ldr	r0, [r7, #0]
 800748c:	f000 fba0 	bl	8007bd0 <prvAddCurrentTaskToDelayedList>
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	2000565c 	.word	0x2000565c

0800749c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10c      	bne.n	80074c8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	b672      	cpsid	i
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	b662      	cpsie	i
 80074c2:	617b      	str	r3, [r7, #20]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <vTaskPlaceOnEventListRestricted+0x58>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3318      	adds	r3, #24
 80074ce:	4619      	mov	r1, r3
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7fe f98a 	bl	80057ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80074dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	68b8      	ldr	r0, [r7, #8]
 80074e6:	f000 fb73 	bl	8007bd0 <prvAddCurrentTaskToDelayedList>
	}
 80074ea:	bf00      	nop
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	2000565c 	.word	0x2000565c

080074f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10c      	bne.n	8007528 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	b672      	cpsid	i
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	b662      	cpsie	i
 8007522:	60fb      	str	r3, [r7, #12]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3318      	adds	r3, #24
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe f9b9 	bl	80058a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007532:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <xTaskRemoveFromEventList+0xb4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11d      	bne.n	8007576 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe f9b0 	bl	80058a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <xTaskRemoveFromEventList+0xb8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d903      	bls.n	8007558 <xTaskRemoveFromEventList+0x60>
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <xTaskRemoveFromEventList+0xb8>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <xTaskRemoveFromEventList+0xbc>)
 8007566:	441a      	add	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7fe f93b 	bl	80057ea <vListInsertEnd>
 8007574:	e005      	b.n	8007582 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3318      	adds	r3, #24
 800757a:	4619      	mov	r1, r3
 800757c:	480e      	ldr	r0, [pc, #56]	; (80075b8 <xTaskRemoveFromEventList+0xc0>)
 800757e:	f7fe f934 	bl	80057ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <xTaskRemoveFromEventList+0xc4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	429a      	cmp	r2, r3
 800758e:	d905      	bls.n	800759c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007594:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <xTaskRemoveFromEventList+0xc8>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e001      	b.n	80075a0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075a0:	697b      	ldr	r3, [r7, #20]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20005b58 	.word	0x20005b58
 80075b0:	20005b38 	.word	0x20005b38
 80075b4:	20005660 	.word	0x20005660
 80075b8:	20005af0 	.word	0x20005af0
 80075bc:	2000565c 	.word	0x2000565c
 80075c0:	20005b44 	.word	0x20005b44

080075c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <vTaskInternalSetTimeOutState+0x24>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <vTaskInternalSetTimeOutState+0x28>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	605a      	str	r2, [r3, #4]
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	20005b48 	.word	0x20005b48
 80075ec:	20005b34 	.word	0x20005b34

080075f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10c      	bne.n	800761a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	b672      	cpsid	i
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	b662      	cpsie	i
 8007614:	613b      	str	r3, [r7, #16]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10c      	bne.n	800763a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	b672      	cpsid	i
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	b662      	cpsie	i
 8007634:	60fb      	str	r3, [r7, #12]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800763a:	f000 ff87 	bl	800854c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800763e:	4b1d      	ldr	r3, [pc, #116]	; (80076b4 <xTaskCheckForTimeOut+0xc4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007656:	d102      	bne.n	800765e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007658:	2300      	movs	r3, #0
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	e023      	b.n	80076a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <xTaskCheckForTimeOut+0xc8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d007      	beq.n	800767a <xTaskCheckForTimeOut+0x8a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	429a      	cmp	r2, r3
 8007672:	d302      	bcc.n	800767a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007674:	2301      	movs	r3, #1
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	e015      	b.n	80076a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	429a      	cmp	r2, r3
 8007682:	d20b      	bcs.n	800769c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	1ad2      	subs	r2, r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff ff97 	bl	80075c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e004      	b.n	80076a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076a6:	f000 ff85 	bl	80085b4 <vPortExitCritical>

	return xReturn;
 80076aa:	69fb      	ldr	r3, [r7, #28]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20005b34 	.word	0x20005b34
 80076b8:	20005b48 	.word	0x20005b48

080076bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076c0:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <vTaskMissedYield+0x14>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
}
 80076c6:	bf00      	nop
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20005b44 	.word	0x20005b44

080076d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076dc:	f000 f852 	bl	8007784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076e0:	4b06      	ldr	r3, [pc, #24]	; (80076fc <prvIdleTask+0x28>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d9f9      	bls.n	80076dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <prvIdleTask+0x2c>)
 80076ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076f8:	e7f0      	b.n	80076dc <prvIdleTask+0x8>
 80076fa:	bf00      	nop
 80076fc:	20005660 	.word	0x20005660
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800770a:	2300      	movs	r3, #0
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	e00c      	b.n	800772a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4a12      	ldr	r2, [pc, #72]	; (8007764 <prvInitialiseTaskLists+0x60>)
 800771c:	4413      	add	r3, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe f836 	bl	8005790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3301      	adds	r3, #1
 8007728:	607b      	str	r3, [r7, #4]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b37      	cmp	r3, #55	; 0x37
 800772e:	d9ef      	bls.n	8007710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007730:	480d      	ldr	r0, [pc, #52]	; (8007768 <prvInitialiseTaskLists+0x64>)
 8007732:	f7fe f82d 	bl	8005790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007736:	480d      	ldr	r0, [pc, #52]	; (800776c <prvInitialiseTaskLists+0x68>)
 8007738:	f7fe f82a 	bl	8005790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800773c:	480c      	ldr	r0, [pc, #48]	; (8007770 <prvInitialiseTaskLists+0x6c>)
 800773e:	f7fe f827 	bl	8005790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007742:	480c      	ldr	r0, [pc, #48]	; (8007774 <prvInitialiseTaskLists+0x70>)
 8007744:	f7fe f824 	bl	8005790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007748:	480b      	ldr	r0, [pc, #44]	; (8007778 <prvInitialiseTaskLists+0x74>)
 800774a:	f7fe f821 	bl	8005790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800774e:	4b0b      	ldr	r3, [pc, #44]	; (800777c <prvInitialiseTaskLists+0x78>)
 8007750:	4a05      	ldr	r2, [pc, #20]	; (8007768 <prvInitialiseTaskLists+0x64>)
 8007752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <prvInitialiseTaskLists+0x7c>)
 8007756:	4a05      	ldr	r2, [pc, #20]	; (800776c <prvInitialiseTaskLists+0x68>)
 8007758:	601a      	str	r2, [r3, #0]
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20005660 	.word	0x20005660
 8007768:	20005ac0 	.word	0x20005ac0
 800776c:	20005ad4 	.word	0x20005ad4
 8007770:	20005af0 	.word	0x20005af0
 8007774:	20005b04 	.word	0x20005b04
 8007778:	20005b1c 	.word	0x20005b1c
 800777c:	20005ae8 	.word	0x20005ae8
 8007780:	20005aec 	.word	0x20005aec

08007784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800778a:	e019      	b.n	80077c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800778c:	f000 fede 	bl	800854c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007790:	4b10      	ldr	r3, [pc, #64]	; (80077d4 <prvCheckTasksWaitingTermination+0x50>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe f881 	bl	80058a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077a2:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <prvCheckTasksWaitingTermination+0x54>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	4a0b      	ldr	r2, [pc, #44]	; (80077d8 <prvCheckTasksWaitingTermination+0x54>)
 80077aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <prvCheckTasksWaitingTermination+0x58>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <prvCheckTasksWaitingTermination+0x58>)
 80077b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077b6:	f000 fefd 	bl	80085b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f810 	bl	80077e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077c0:	4b06      	ldr	r3, [pc, #24]	; (80077dc <prvCheckTasksWaitingTermination+0x58>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e1      	bne.n	800778c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20005b04 	.word	0x20005b04
 80077d8:	20005b30 	.word	0x20005b30
 80077dc:	20005b18 	.word	0x20005b18

080077e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3354      	adds	r3, #84	; 0x54
 80077ec:	4618      	mov	r0, r3
 80077ee:	f00e fbd7 	bl	8015fa0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d108      	bne.n	800780e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	4618      	mov	r0, r3
 8007802:	f001 f899 	bl	8008938 <vPortFree>
				vPortFree( pxTCB );
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 f896 	bl	8008938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800780c:	e01a      	b.n	8007844 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007814:	2b01      	cmp	r3, #1
 8007816:	d103      	bne.n	8007820 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f88d 	bl	8008938 <vPortFree>
	}
 800781e:	e011      	b.n	8007844 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007826:	2b02      	cmp	r3, #2
 8007828:	d00c      	beq.n	8007844 <prvDeleteTCB+0x64>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	b672      	cpsid	i
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	b662      	cpsie	i
 800783e:	60fb      	str	r3, [r7, #12]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <prvDeleteTCB+0x62>
	}
 8007844:	bf00      	nop
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007852:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <prvResetNextTaskUnblockTime+0x38>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <prvResetNextTaskUnblockTime+0x3c>)
 800785e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007862:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007864:	e008      	b.n	8007878 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007866:	4b07      	ldr	r3, [pc, #28]	; (8007884 <prvResetNextTaskUnblockTime+0x38>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	4a04      	ldr	r2, [pc, #16]	; (8007888 <prvResetNextTaskUnblockTime+0x3c>)
 8007876:	6013      	str	r3, [r2, #0]
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	20005ae8 	.word	0x20005ae8
 8007888:	20005b50 	.word	0x20005b50

0800788c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007898:	687b      	ldr	r3, [r7, #4]
	}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	2000565c 	.word	0x2000565c

080078ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <xTaskGetSchedulerState+0x34>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078ba:	2301      	movs	r3, #1
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	e008      	b.n	80078d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c0:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <xTaskGetSchedulerState+0x38>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078c8:	2302      	movs	r3, #2
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	e001      	b.n	80078d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078d2:	687b      	ldr	r3, [r7, #4]
	}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20005b3c 	.word	0x20005b3c
 80078e4:	20005b58 	.word	0x20005b58

080078e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d051      	beq.n	80079a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	429a      	cmp	r2, r3
 800790a:	d241      	bcs.n	8007990 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	db06      	blt.n	8007922 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007914:	4b25      	ldr	r3, [pc, #148]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6959      	ldr	r1, [r3, #20]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <xTaskPriorityInherit+0xc8>)
 8007934:	4413      	add	r3, r2
 8007936:	4299      	cmp	r1, r3
 8007938:	d122      	bne.n	8007980 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f7fd ffb0 	bl	80058a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <xTaskPriorityInherit+0xcc>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <xTaskPriorityInherit+0x7a>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <xTaskPriorityInherit+0xcc>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a10      	ldr	r2, [pc, #64]	; (80079b0 <xTaskPriorityInherit+0xc8>)
 8007970:	441a      	add	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7fd ff36 	bl	80057ea <vListInsertEnd>
 800797e:	e004      	b.n	800798a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	e008      	b.n	80079a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	429a      	cmp	r2, r3
 800799c:	d201      	bcs.n	80079a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800799e:	2301      	movs	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079a2:	68fb      	ldr	r3, [r7, #12]
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	2000565c 	.word	0x2000565c
 80079b0:	20005660 	.word	0x20005660
 80079b4:	20005b38 	.word	0x20005b38

080079b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d05a      	beq.n	8007a84 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ce:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <xTaskPriorityDisinherit+0xd8>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d00c      	beq.n	80079f2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	b672      	cpsid	i
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	b662      	cpsie	i
 80079ec:	60fb      	str	r3, [r7, #12]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10c      	bne.n	8007a14 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	b672      	cpsid	i
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	b662      	cpsie	i
 8007a0e:	60bb      	str	r3, [r7, #8]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a18:	1e5a      	subs	r2, r3, #1
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d02c      	beq.n	8007a84 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d128      	bne.n	8007a84 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd ff34 	bl	80058a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <xTaskPriorityDisinherit+0xdc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d903      	bls.n	8007a64 <xTaskPriorityDisinherit+0xac>
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4a0c      	ldr	r2, [pc, #48]	; (8007a94 <xTaskPriorityDisinherit+0xdc>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a09      	ldr	r2, [pc, #36]	; (8007a98 <xTaskPriorityDisinherit+0xe0>)
 8007a72:	441a      	add	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fd feb5 	bl	80057ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a84:	697b      	ldr	r3, [r7, #20]
	}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	2000565c 	.word	0x2000565c
 8007a94:	20005b38 	.word	0x20005b38
 8007a98:	20005660 	.word	0x20005660

08007a9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d06e      	beq.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10c      	bne.n	8007ad6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	b672      	cpsid	i
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	b662      	cpsie	i
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d902      	bls.n	8007ae6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	e002      	b.n	8007aec <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d04d      	beq.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d148      	bne.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b00:	4b26      	ldr	r3, [pc, #152]	; (8007b9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d10c      	bne.n	8007b24 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	b672      	cpsid	i
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	b662      	cpsie	i
 8007b1e:	60bb      	str	r3, [r7, #8]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	db04      	blt.n	8007b42 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	6959      	ldr	r1, [r3, #20]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b52:	4413      	add	r3, r2
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d11c      	bne.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fd fea1 	bl	80058a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d903      	bls.n	8007b76 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4a07      	ldr	r2, [pc, #28]	; (8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b84:	441a      	add	r2, r3
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7fd fe2c 	bl	80057ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b92:	bf00      	nop
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	2000565c 	.word	0x2000565c
 8007ba0:	20005660 	.word	0x20005660
 8007ba4:	20005b38 	.word	0x20005b38

08007ba8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bac:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bba:	3201      	adds	r2, #1
 8007bbc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007bbe:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
	}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	2000565c 	.word	0x2000565c

08007bd0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bda:	4b21      	ldr	r3, [pc, #132]	; (8007c60 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007be0:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fd fe5c 	bl	80058a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf2:	d10a      	bne.n	8007c0a <prvAddCurrentTaskToDelayedList+0x3a>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4619      	mov	r1, r3
 8007c02:	4819      	ldr	r0, [pc, #100]	; (8007c68 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c04:	f7fd fdf1 	bl	80057ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c08:	e026      	b.n	8007c58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4413      	add	r3, r2
 8007c10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c12:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d209      	bcs.n	8007c36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c22:	4b12      	ldr	r3, [pc, #72]	; (8007c6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f7fd fdff 	bl	8005832 <vListInsert>
}
 8007c34:	e010      	b.n	8007c58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f7fd fdf5 	bl	8005832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d202      	bcs.n	8007c58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c52:	4a08      	ldr	r2, [pc, #32]	; (8007c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	6013      	str	r3, [r2, #0]
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20005b34 	.word	0x20005b34
 8007c64:	2000565c 	.word	0x2000565c
 8007c68:	20005b1c 	.word	0x20005b1c
 8007c6c:	20005aec 	.word	0x20005aec
 8007c70:	20005ae8 	.word	0x20005ae8
 8007c74:	20005b50 	.word	0x20005b50

08007c78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c82:	f000 fb15 	bl	80082b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c86:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <xTimerCreateTimerTask+0x84>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d021      	beq.n	8007cd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c96:	1d3a      	adds	r2, r7, #4
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	f107 030c 	add.w	r3, r7, #12
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fd fd5b 	bl	800575c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	9202      	str	r2, [sp, #8]
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	460a      	mov	r2, r1
 8007cb8:	4911      	ldr	r1, [pc, #68]	; (8007d00 <xTimerCreateTimerTask+0x88>)
 8007cba:	4812      	ldr	r0, [pc, #72]	; (8007d04 <xTimerCreateTimerTask+0x8c>)
 8007cbc:	f7fe ff6c 	bl	8006b98 <xTaskCreateStatic>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4a11      	ldr	r2, [pc, #68]	; (8007d08 <xTimerCreateTimerTask+0x90>)
 8007cc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <xTimerCreateTimerTask+0x90>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10c      	bne.n	8007cf2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	613b      	str	r3, [r7, #16]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007cf2:	697b      	ldr	r3, [r7, #20]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20005b8c 	.word	0x20005b8c
 8007d00:	080171a0 	.word	0x080171a0
 8007d04:	08007e49 	.word	0x08007e49
 8007d08:	20005b90 	.word	0x20005b90

08007d0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	; 0x28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10c      	bne.n	8007d3e <xTimerGenericCommand+0x32>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	b672      	cpsid	i
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	b662      	cpsie	i
 8007d38:	623b      	str	r3, [r7, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d3e:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <xTimerGenericCommand+0x9c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02a      	beq.n	8007d9c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	dc18      	bgt.n	8007d8a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d58:	f7ff fda8 	bl	80078ac <xTaskGetSchedulerState>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d109      	bne.n	8007d76 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d62:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <xTimerGenericCommand+0x9c>)
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	f107 0110 	add.w	r1, r7, #16
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	f7fe f841 	bl	8005df4 <xQueueGenericSend>
 8007d72:	6278      	str	r0, [r7, #36]	; 0x24
 8007d74:	e012      	b.n	8007d9c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <xTimerGenericCommand+0x9c>)
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	f107 0110 	add.w	r1, r7, #16
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2200      	movs	r2, #0
 8007d82:	f7fe f837 	bl	8005df4 <xQueueGenericSend>
 8007d86:	6278      	str	r0, [r7, #36]	; 0x24
 8007d88:	e008      	b.n	8007d9c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <xTimerGenericCommand+0x9c>)
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f107 0110 	add.w	r1, r7, #16
 8007d92:	2300      	movs	r3, #0
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	f7fe f933 	bl	8006000 <xQueueGenericSendFromISR>
 8007d9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3728      	adds	r7, #40	; 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20005b8c 	.word	0x20005b8c

08007dac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db6:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <prvProcessExpiredTimer+0x98>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fd6d 	bl	80058a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d024      	beq.n	8007e22 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	18d1      	adds	r1, r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	6978      	ldr	r0, [r7, #20]
 8007de6:	f000 f8d3 	bl	8007f90 <prvInsertTimerInActiveList>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d021      	beq.n	8007e34 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6978      	ldr	r0, [r7, #20]
 8007dfc:	f7ff ff86 	bl	8007d0c <xTimerGenericCommand>
 8007e00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d115      	bne.n	8007e34 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	b672      	cpsid	i
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	b662      	cpsie	i
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	6978      	ldr	r0, [r7, #20]
 8007e3a:	4798      	blx	r3
}
 8007e3c:	bf00      	nop
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20005b84 	.word	0x20005b84

08007e48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e50:	f107 0308 	add.w	r3, r7, #8
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f857 	bl	8007f08 <prvGetNextExpireTime>
 8007e5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f803 	bl	8007e6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e66:	f000 f8d5 	bl	8008014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e6a:	e7f1      	b.n	8007e50 <prvTimerTask+0x8>

08007e6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e76:	f7ff f8f9 	bl	800706c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f866 	bl	8007f50 <prvSampleTimeNow>
 8007e84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d130      	bne.n	8007eee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <prvProcessTimerOrBlockTask+0x3c>
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d806      	bhi.n	8007ea8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e9a:	f7ff f8f5 	bl	8007088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ff83 	bl	8007dac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ea6:	e024      	b.n	8007ef2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <prvProcessTimerOrBlockTask+0x90>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <prvProcessTimerOrBlockTask+0x50>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <prvProcessTimerOrBlockTask+0x52>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <prvProcessTimerOrBlockTask+0x94>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	f7fe fe2f 	bl	8006b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ed2:	f7ff f8d9 	bl	8007088 <xTaskResumeAll>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <prvProcessTimerOrBlockTask+0x98>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
}
 8007eec:	e001      	b.n	8007ef2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007eee:	f7ff f8cb 	bl	8007088 <xTaskResumeAll>
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20005b88 	.word	0x20005b88
 8007f00:	20005b8c 	.word	0x20005b8c
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f10:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <prvGetNextExpireTime+0x44>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <prvGetNextExpireTime+0x16>
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	e000      	b.n	8007f20 <prvGetNextExpireTime+0x18>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d105      	bne.n	8007f38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <prvGetNextExpireTime+0x44>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e001      	b.n	8007f3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20005b84 	.word	0x20005b84

08007f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f58:	f7ff f936 	bl	80071c8 <xTaskGetTickCount>
 8007f5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f5e:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <prvSampleTimeNow+0x3c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d205      	bcs.n	8007f74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f68:	f000 f93c 	bl	80081e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f7a:	4a04      	ldr	r2, [pc, #16]	; (8007f8c <prvSampleTimeNow+0x3c>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f80:	68fb      	ldr	r3, [r7, #12]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20005b94 	.word	0x20005b94

08007f90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d812      	bhi.n	8007fdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	e01b      	b.n	8008002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fca:	4b10      	ldr	r3, [pc, #64]	; (800800c <prvInsertTimerInActiveList+0x7c>)
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f7fd fc2c 	bl	8005832 <vListInsert>
 8007fda:	e012      	b.n	8008002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d206      	bcs.n	8007ff2 <prvInsertTimerInActiveList+0x62>
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d302      	bcc.n	8007ff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e007      	b.n	8008002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ff2:	4b07      	ldr	r3, [pc, #28]	; (8008010 <prvInsertTimerInActiveList+0x80>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7fd fc18 	bl	8005832 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008002:	697b      	ldr	r3, [r7, #20]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20005b88 	.word	0x20005b88
 8008010:	20005b84 	.word	0x20005b84

08008014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08e      	sub	sp, #56	; 0x38
 8008018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800801a:	e0d0      	b.n	80081be <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	da1a      	bge.n	8008058 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008022:	1d3b      	adds	r3, r7, #4
 8008024:	3304      	adds	r3, #4
 8008026:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10c      	bne.n	8008048 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	b672      	cpsid	i
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	b662      	cpsie	i
 8008042:	61fb      	str	r3, [r7, #28]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804e:	6850      	ldr	r0, [r2, #4]
 8008050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008052:	6892      	ldr	r2, [r2, #8]
 8008054:	4611      	mov	r1, r2
 8008056:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f2c0 80ae 	blt.w	80081bc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	3304      	adds	r3, #4
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd fc17 	bl	80058a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008076:	463b      	mov	r3, r7
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff ff69 	bl	8007f50 <prvSampleTimeNow>
 800807e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b09      	cmp	r3, #9
 8008084:	f200 809b 	bhi.w	80081be <prvProcessReceivedCommands+0x1aa>
 8008088:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <prvProcessReceivedCommands+0x7c>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080b9 	.word	0x080080b9
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080b9 	.word	0x080080b9
 800809c:	08008131 	.word	0x08008131
 80080a0:	08008145 	.word	0x08008145
 80080a4:	08008193 	.word	0x08008193
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080b9 	.word	0x080080b9
 80080b0:	08008131 	.word	0x08008131
 80080b4:	08008145 	.word	0x08008145
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	18d1      	adds	r1, r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d8:	f7ff ff5a 	bl	8007f90 <prvInsertTimerInActiveList>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d06d      	beq.n	80081be <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d062      	beq.n	80081be <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	441a      	add	r2, r3
 8008100:	2300      	movs	r3, #0
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	2100      	movs	r1, #0
 8008108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810a:	f7ff fdff 	bl	8007d0c <xTimerGenericCommand>
 800810e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d153      	bne.n	80081be <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	b672      	cpsid	i
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	b662      	cpsie	i
 800812a:	61bb      	str	r3, [r7, #24]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008142:	e03c      	b.n	80081be <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10c      	bne.n	800817e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	b672      	cpsid	i
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	b662      	cpsie	i
 8008178:	617b      	str	r3, [r7, #20]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	18d1      	adds	r1, r2, r3
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800818c:	f7ff ff00 	bl	8007f90 <prvInsertTimerInActiveList>
					break;
 8008190:	e015      	b.n	80081be <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80081a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a2:	f000 fbc9 	bl	8008938 <vPortFree>
 80081a6:	e00a      	b.n	80081be <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081ba:	e000      	b.n	80081be <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80081bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081be:	4b08      	ldr	r3, [pc, #32]	; (80081e0 <prvProcessReceivedCommands+0x1cc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	1d39      	adds	r1, r7, #4
 80081c4:	2200      	movs	r2, #0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe f850 	bl	800626c <xQueueReceive>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f47f af24 	bne.w	800801c <prvProcessReceivedCommands+0x8>
	}
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	3730      	adds	r7, #48	; 0x30
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20005b8c 	.word	0x20005b8c

080081e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ea:	e04a      	b.n	8008282 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081ec:	4b2e      	ldr	r3, [pc, #184]	; (80082a8 <prvSwitchTimerLists+0xc4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f6:	4b2c      	ldr	r3, [pc, #176]	; (80082a8 <prvSwitchTimerLists+0xc4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3304      	adds	r3, #4
 8008204:	4618      	mov	r0, r3
 8008206:	f7fd fb4d 	bl	80058a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d030      	beq.n	8008282 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4413      	add	r3, r2
 8008228:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	429a      	cmp	r2, r3
 8008230:	d90e      	bls.n	8008250 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800823e:	4b1a      	ldr	r3, [pc, #104]	; (80082a8 <prvSwitchTimerLists+0xc4>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fd faf2 	bl	8005832 <vListInsert>
 800824e:	e018      	b.n	8008282 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008250:	2300      	movs	r3, #0
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	2100      	movs	r1, #0
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff fd56 	bl	8007d0c <xTimerGenericCommand>
 8008260:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10c      	bne.n	8008282 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	b672      	cpsid	i
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	b662      	cpsie	i
 800827c:	603b      	str	r3, [r7, #0]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <prvSwitchTimerLists+0xc4>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1af      	bne.n	80081ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <prvSwitchTimerLists+0xc4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008292:	4b06      	ldr	r3, [pc, #24]	; (80082ac <prvSwitchTimerLists+0xc8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a04      	ldr	r2, [pc, #16]	; (80082a8 <prvSwitchTimerLists+0xc4>)
 8008298:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800829a:	4a04      	ldr	r2, [pc, #16]	; (80082ac <prvSwitchTimerLists+0xc8>)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20005b84 	.word	0x20005b84
 80082ac:	20005b88 	.word	0x20005b88

080082b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082b6:	f000 f949 	bl	800854c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082ba:	4b15      	ldr	r3, [pc, #84]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d120      	bne.n	8008304 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082c2:	4814      	ldr	r0, [pc, #80]	; (8008314 <prvCheckForValidListAndQueue+0x64>)
 80082c4:	f7fd fa64 	bl	8005790 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082c8:	4813      	ldr	r0, [pc, #76]	; (8008318 <prvCheckForValidListAndQueue+0x68>)
 80082ca:	f7fd fa61 	bl	8005790 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <prvCheckForValidListAndQueue+0x6c>)
 80082d0:	4a10      	ldr	r2, [pc, #64]	; (8008314 <prvCheckForValidListAndQueue+0x64>)
 80082d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082d4:	4b12      	ldr	r3, [pc, #72]	; (8008320 <prvCheckForValidListAndQueue+0x70>)
 80082d6:	4a10      	ldr	r2, [pc, #64]	; (8008318 <prvCheckForValidListAndQueue+0x68>)
 80082d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082da:	2300      	movs	r3, #0
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <prvCheckForValidListAndQueue+0x74>)
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <prvCheckForValidListAndQueue+0x78>)
 80082e2:	2110      	movs	r1, #16
 80082e4:	200a      	movs	r0, #10
 80082e6:	f7fd fb71 	bl	80059cc <xQueueGenericCreateStatic>
 80082ea:	4603      	mov	r3, r0
 80082ec:	4a08      	ldr	r2, [pc, #32]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082f0:	4b07      	ldr	r3, [pc, #28]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	490b      	ldr	r1, [pc, #44]	; (800832c <prvCheckForValidListAndQueue+0x7c>)
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fbc2 	bl	8006a88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008304:	f000 f956 	bl	80085b4 <vPortExitCritical>
}
 8008308:	bf00      	nop
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20005b8c 	.word	0x20005b8c
 8008314:	20005b5c 	.word	0x20005b5c
 8008318:	20005b70 	.word	0x20005b70
 800831c:	20005b84 	.word	0x20005b84
 8008320:	20005b88 	.word	0x20005b88
 8008324:	20005c38 	.word	0x20005c38
 8008328:	20005b98 	.word	0x20005b98
 800832c:	080171a8 	.word	0x080171a8

08008330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3b04      	subs	r3, #4
 8008340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3b04      	subs	r3, #4
 800834e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f023 0201 	bic.w	r2, r3, #1
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3b04      	subs	r3, #4
 800835e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008360:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <pxPortInitialiseStack+0x64>)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3b14      	subs	r3, #20
 800836a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3b04      	subs	r3, #4
 8008376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f06f 0202 	mvn.w	r2, #2
 800837e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3b20      	subs	r3, #32
 8008384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008386:	68fb      	ldr	r3, [r7, #12]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	08008399 	.word	0x08008399

08008398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083a2:	4b14      	ldr	r3, [pc, #80]	; (80083f4 <prvTaskExitError+0x5c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083aa:	d00c      	beq.n	80083c6 <prvTaskExitError+0x2e>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	b672      	cpsid	i
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	b662      	cpsie	i
 80083c0:	60fb      	str	r3, [r7, #12]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <prvTaskExitError+0x2c>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	b672      	cpsid	i
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	b662      	cpsie	i
 80083da:	60bb      	str	r3, [r7, #8]
}
 80083dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083de:	bf00      	nop
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0fc      	beq.n	80083e0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083e6:	bf00      	nop
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	20000020 	.word	0x20000020
	...

08008400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <pxCurrentTCBConst2>)
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6808      	ldr	r0, [r1, #0]
 8008406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	f380 8809 	msr	PSP, r0
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8811 	msr	BASEPRI, r0
 800841a:	4770      	bx	lr
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst2>:
 8008420:	2000565c 	.word	0x2000565c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008428:	4808      	ldr	r0, [pc, #32]	; (800844c <prvPortStartFirstTask+0x24>)
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	6800      	ldr	r0, [r0, #0]
 800842e:	f380 8808 	msr	MSP, r0
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f380 8814 	msr	CONTROL, r0
 800843a:	b662      	cpsie	i
 800843c:	b661      	cpsie	f
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	df00      	svc	0
 8008448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800844a:	bf00      	nop
 800844c:	e000ed08 	.word	0xe000ed08

08008450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008456:	4b37      	ldr	r3, [pc, #220]	; (8008534 <xPortStartScheduler+0xe4>)
 8008458:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	22ff      	movs	r2, #255	; 0xff
 8008466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008478:	b2da      	uxtb	r2, r3
 800847a:	4b2f      	ldr	r3, [pc, #188]	; (8008538 <xPortStartScheduler+0xe8>)
 800847c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800847e:	4b2f      	ldr	r3, [pc, #188]	; (800853c <xPortStartScheduler+0xec>)
 8008480:	2207      	movs	r2, #7
 8008482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008484:	e009      	b.n	800849a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008486:	4b2d      	ldr	r3, [pc, #180]	; (800853c <xPortStartScheduler+0xec>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3b01      	subs	r3, #1
 800848c:	4a2b      	ldr	r2, [pc, #172]	; (800853c <xPortStartScheduler+0xec>)
 800848e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d0ef      	beq.n	8008486 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084a6:	4b25      	ldr	r3, [pc, #148]	; (800853c <xPortStartScheduler+0xec>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f1c3 0307 	rsb	r3, r3, #7
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d00c      	beq.n	80084cc <xPortStartScheduler+0x7c>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	b672      	cpsid	i
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	b662      	cpsie	i
 80084c6:	60bb      	str	r3, [r7, #8]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <xPortStartScheduler+0xec>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	4a1a      	ldr	r2, [pc, #104]	; (800853c <xPortStartScheduler+0xec>)
 80084d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084d6:	4b19      	ldr	r3, [pc, #100]	; (800853c <xPortStartScheduler+0xec>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084de:	4a17      	ldr	r2, [pc, #92]	; (800853c <xPortStartScheduler+0xec>)
 80084e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084ea:	4b15      	ldr	r3, [pc, #84]	; (8008540 <xPortStartScheduler+0xf0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a14      	ldr	r2, [pc, #80]	; (8008540 <xPortStartScheduler+0xf0>)
 80084f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <xPortStartScheduler+0xf0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a11      	ldr	r2, [pc, #68]	; (8008540 <xPortStartScheduler+0xf0>)
 80084fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008500:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008502:	f000 f8dd 	bl	80086c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <xPortStartScheduler+0xf4>)
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800850c:	f000 f8fc 	bl	8008708 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008510:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <xPortStartScheduler+0xf8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <xPortStartScheduler+0xf8>)
 8008516:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800851a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800851c:	f7ff ff84 	bl	8008428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008520:	f7fe ff30 	bl	8007384 <vTaskSwitchContext>
	prvTaskExitError();
 8008524:	f7ff ff38 	bl	8008398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	e000e400 	.word	0xe000e400
 8008538:	20005c88 	.word	0x20005c88
 800853c:	20005c8c 	.word	0x20005c8c
 8008540:	e000ed20 	.word	0xe000ed20
 8008544:	20000020 	.word	0x20000020
 8008548:	e000ef34 	.word	0xe000ef34

0800854c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	b672      	cpsid	i
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	b662      	cpsie	i
 8008566:	607b      	str	r3, [r7, #4]
}
 8008568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <vPortEnterCritical+0x60>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	4a0e      	ldr	r2, [pc, #56]	; (80085ac <vPortEnterCritical+0x60>)
 8008572:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008574:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <vPortEnterCritical+0x60>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d111      	bne.n	80085a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800857c:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <vPortEnterCritical+0x64>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <vPortEnterCritical+0x54>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	b672      	cpsid	i
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	b662      	cpsie	i
 800859a:	603b      	str	r3, [r7, #0]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <vPortEnterCritical+0x52>
	}
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	20000020 	.word	0x20000020
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085ba:	4b13      	ldr	r3, [pc, #76]	; (8008608 <vPortExitCritical+0x54>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10c      	bne.n	80085dc <vPortExitCritical+0x28>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	607b      	str	r3, [r7, #4]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80085dc:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <vPortExitCritical+0x54>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	4a09      	ldr	r2, [pc, #36]	; (8008608 <vPortExitCritical+0x54>)
 80085e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085e6:	4b08      	ldr	r3, [pc, #32]	; (8008608 <vPortExitCritical+0x54>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d105      	bne.n	80085fa <vPortExitCritical+0x46>
 80085ee:	2300      	movs	r3, #0
 80085f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	f383 8811 	msr	BASEPRI, r3
}
 80085f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	20000020 	.word	0x20000020
 800860c:	00000000 	.word	0x00000000

08008610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008610:	f3ef 8009 	mrs	r0, PSP
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	4b15      	ldr	r3, [pc, #84]	; (8008670 <pxCurrentTCBConst>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	f01e 0f10 	tst.w	lr, #16
 8008620:	bf08      	it	eq
 8008622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	6010      	str	r0, [r2, #0]
 800862c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008634:	b672      	cpsid	i
 8008636:	f380 8811 	msr	BASEPRI, r0
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	b662      	cpsie	i
 8008644:	f7fe fe9e 	bl	8007384 <vTaskSwitchContext>
 8008648:	f04f 0000 	mov.w	r0, #0
 800864c:	f380 8811 	msr	BASEPRI, r0
 8008650:	bc09      	pop	{r0, r3}
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	6808      	ldr	r0, [r1, #0]
 8008656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	f01e 0f10 	tst.w	lr, #16
 800865e:	bf08      	it	eq
 8008660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008664:	f380 8809 	msr	PSP, r0
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop

08008670 <pxCurrentTCBConst>:
 8008670:	2000565c 	.word	0x2000565c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop

08008678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	b672      	cpsid	i
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	b662      	cpsie	i
 8008692:	607b      	str	r3, [r7, #4]
}
 8008694:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008696:	f7fe fdb9 	bl	800720c <xTaskIncrementTick>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086a0:	4b06      	ldr	r3, [pc, #24]	; (80086bc <SysTick_Handler+0x44>)
 80086a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	2300      	movs	r3, #0
 80086aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	f383 8811 	msr	BASEPRI, r3
}
 80086b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086c4:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <vPortSetupTimerInterrupt+0x34>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086ca:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <vPortSetupTimerInterrupt+0x38>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <vPortSetupTimerInterrupt+0x3c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <vPortSetupTimerInterrupt+0x40>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	099b      	lsrs	r3, r3, #6
 80086dc:	4a09      	ldr	r2, [pc, #36]	; (8008704 <vPortSetupTimerInterrupt+0x44>)
 80086de:	3b01      	subs	r3, #1
 80086e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <vPortSetupTimerInterrupt+0x34>)
 80086e4:	2207      	movs	r2, #7
 80086e6:	601a      	str	r2, [r3, #0]
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	e000e010 	.word	0xe000e010
 80086f8:	e000e018 	.word	0xe000e018
 80086fc:	20000000 	.word	0x20000000
 8008700:	10624dd3 	.word	0x10624dd3
 8008704:	e000e014 	.word	0xe000e014

08008708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008708:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008718 <vPortEnableVFP+0x10>
 800870c:	6801      	ldr	r1, [r0, #0]
 800870e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008712:	6001      	str	r1, [r0, #0]
 8008714:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008716:	bf00      	nop
 8008718:	e000ed88 	.word	0xe000ed88

0800871c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008722:	f3ef 8305 	mrs	r3, IPSR
 8008726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b0f      	cmp	r3, #15
 800872c:	d916      	bls.n	800875c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800872e:	4a19      	ldr	r2, [pc, #100]	; (8008794 <vPortValidateInterruptPriority+0x78>)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008738:	4b17      	ldr	r3, [pc, #92]	; (8008798 <vPortValidateInterruptPriority+0x7c>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	7afa      	ldrb	r2, [r7, #11]
 800873e:	429a      	cmp	r2, r3
 8008740:	d20c      	bcs.n	800875c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	b672      	cpsid	i
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	b662      	cpsie	i
 8008756:	607b      	str	r3, [r7, #4]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800875c:	4b0f      	ldr	r3, [pc, #60]	; (800879c <vPortValidateInterruptPriority+0x80>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <vPortValidateInterruptPriority+0x84>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d90c      	bls.n	8008786 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	b672      	cpsid	i
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	b662      	cpsie	i
 8008780:	603b      	str	r3, [r7, #0]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <vPortValidateInterruptPriority+0x68>
	}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	e000e3f0 	.word	0xe000e3f0
 8008798:	20005c88 	.word	0x20005c88
 800879c:	e000ed0c 	.word	0xe000ed0c
 80087a0:	20005c8c 	.word	0x20005c8c

080087a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087b0:	f7fe fc5c 	bl	800706c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087b4:	4b5b      	ldr	r3, [pc, #364]	; (8008924 <pvPortMalloc+0x180>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087bc:	f000 f91a 	bl	80089f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087c0:	4b59      	ldr	r3, [pc, #356]	; (8008928 <pvPortMalloc+0x184>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4013      	ands	r3, r2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 8092 	bne.w	80088f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01f      	beq.n	8008814 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80087d4:	2208      	movs	r2, #8
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d016      	beq.n	8008814 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f023 0307 	bic.w	r3, r3, #7
 80087ec:	3308      	adds	r3, #8
 80087ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00c      	beq.n	8008814 <pvPortMalloc+0x70>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	b672      	cpsid	i
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	b662      	cpsie	i
 800880e:	617b      	str	r3, [r7, #20]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d06b      	beq.n	80088f2 <pvPortMalloc+0x14e>
 800881a:	4b44      	ldr	r3, [pc, #272]	; (800892c <pvPortMalloc+0x188>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d866      	bhi.n	80088f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008824:	4b42      	ldr	r3, [pc, #264]	; (8008930 <pvPortMalloc+0x18c>)
 8008826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008828:	4b41      	ldr	r3, [pc, #260]	; (8008930 <pvPortMalloc+0x18c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800882e:	e004      	b.n	800883a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d903      	bls.n	800884c <pvPortMalloc+0xa8>
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1f1      	bne.n	8008830 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800884c:	4b35      	ldr	r3, [pc, #212]	; (8008924 <pvPortMalloc+0x180>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	429a      	cmp	r2, r3
 8008854:	d04d      	beq.n	80088f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2208      	movs	r2, #8
 800885c:	4413      	add	r3, r2
 800885e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	2308      	movs	r3, #8
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	429a      	cmp	r2, r3
 8008876:	d921      	bls.n	80088bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00c      	beq.n	80088a4 <pvPortMalloc+0x100>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	b672      	cpsid	i
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	b662      	cpsie	i
 800889e:	613b      	str	r3, [r7, #16]
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088b6:	69b8      	ldr	r0, [r7, #24]
 80088b8:	f000 f8fe 	bl	8008ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088bc:	4b1b      	ldr	r3, [pc, #108]	; (800892c <pvPortMalloc+0x188>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	4a19      	ldr	r2, [pc, #100]	; (800892c <pvPortMalloc+0x188>)
 80088c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088ca:	4b18      	ldr	r3, [pc, #96]	; (800892c <pvPortMalloc+0x188>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4b19      	ldr	r3, [pc, #100]	; (8008934 <pvPortMalloc+0x190>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d203      	bcs.n	80088de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088d6:	4b15      	ldr	r3, [pc, #84]	; (800892c <pvPortMalloc+0x188>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a16      	ldr	r2, [pc, #88]	; (8008934 <pvPortMalloc+0x190>)
 80088dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	4b11      	ldr	r3, [pc, #68]	; (8008928 <pvPortMalloc+0x184>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088f2:	f7fe fbc9 	bl	8007088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00c      	beq.n	800891a <pvPortMalloc+0x176>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	60fb      	str	r3, [r7, #12]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <pvPortMalloc+0x174>
	return pvReturn;
 800891a:	69fb      	ldr	r3, [r7, #28]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3728      	adds	r7, #40	; 0x28
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20009898 	.word	0x20009898
 8008928:	200098a4 	.word	0x200098a4
 800892c:	2000989c 	.word	0x2000989c
 8008930:	20009890 	.word	0x20009890
 8008934:	200098a0 	.word	0x200098a0

08008938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d04c      	beq.n	80089e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800894a:	2308      	movs	r3, #8
 800894c:	425b      	negs	r3, r3
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4413      	add	r3, r2
 8008952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	4b23      	ldr	r3, [pc, #140]	; (80089ec <vPortFree+0xb4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4013      	ands	r3, r2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10c      	bne.n	8008980 <vPortFree+0x48>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	b672      	cpsid	i
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	b662      	cpsie	i
 800897a:	60fb      	str	r3, [r7, #12]
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00c      	beq.n	80089a2 <vPortFree+0x6a>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	b672      	cpsid	i
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	b662      	cpsie	i
 800899c:	60bb      	str	r3, [r7, #8]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <vPortFree+0xb4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d019      	beq.n	80089e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d115      	bne.n	80089e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <vPortFree+0xb4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	43db      	mvns	r3, r3
 80089c2:	401a      	ands	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089c8:	f7fe fb50 	bl	800706c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <vPortFree+0xb8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4413      	add	r3, r2
 80089d6:	4a06      	ldr	r2, [pc, #24]	; (80089f0 <vPortFree+0xb8>)
 80089d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089da:	6938      	ldr	r0, [r7, #16]
 80089dc:	f000 f86c 	bl	8008ab8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089e0:	f7fe fb52 	bl	8007088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089e4:	bf00      	nop
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200098a4 	.word	0x200098a4
 80089f0:	2000989c 	.word	0x2000989c

080089f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80089fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a00:	4b27      	ldr	r3, [pc, #156]	; (8008aa0 <prvHeapInit+0xac>)
 8008a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00c      	beq.n	8008a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3307      	adds	r3, #7
 8008a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0307 	bic.w	r3, r3, #7
 8008a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	4a1f      	ldr	r2, [pc, #124]	; (8008aa0 <prvHeapInit+0xac>)
 8008a24:	4413      	add	r3, r2
 8008a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a32:	4b1c      	ldr	r3, [pc, #112]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a40:	2208      	movs	r2, #8
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0307 	bic.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <prvHeapInit+0xb8>)
 8008a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <prvHeapInit+0xbc>)
 8008a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a8c:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <prvHeapInit+0xc0>)
 8008a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20005c90 	.word	0x20005c90
 8008aa4:	20009890 	.word	0x20009890
 8008aa8:	20009898 	.word	0x20009898
 8008aac:	200098a0 	.word	0x200098a0
 8008ab0:	2000989c 	.word	0x2000989c
 8008ab4:	200098a4 	.word	0x200098a4

08008ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ac0:	4b28      	ldr	r3, [pc, #160]	; (8008b64 <prvInsertBlockIntoFreeList+0xac>)
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e002      	b.n	8008acc <prvInsertBlockIntoFreeList+0x14>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d8f7      	bhi.n	8008ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d108      	bne.n	8008afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	441a      	add	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	441a      	add	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d118      	bne.n	8008b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d00d      	beq.n	8008b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	441a      	add	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e008      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	e003      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d002      	beq.n	8008b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20009890 	.word	0x20009890
 8008b68:	20009898 	.word	0x20009898

08008b6c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f002 f8d5 	bl	800ad30 <tcpip_send_msg_wait_sem>
 8008b86:	4603      	mov	r3, r0
 8008b88:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d103      	bne.n	8008b9a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008b98:	e001      	b.n	8008b9e <netconn_apimsg+0x32>
  }
  return err;
 8008b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08c      	sub	sp, #48	; 0x30
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	603a      	str	r2, [r7, #0]
 8008bb2:	71fb      	strb	r3, [r7, #7]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008bb8:	79fb      	ldrb	r3, [r7, #7]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 ff1b 	bl	80099f8 <netconn_alloc>
 8008bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d054      	beq.n	8008c74 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008bca:	79bb      	ldrb	r3, [r7, #6]
 8008bcc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008bd2:	f107 0308 	add.w	r3, r7, #8
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4829      	ldr	r0, [pc, #164]	; (8008c80 <netconn_new_with_proto_and_callback+0xd8>)
 8008bda:	f7ff ffc7 	bl	8008b6c <netconn_apimsg>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008be4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d043      	beq.n	8008c74 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <netconn_new_with_proto_and_callback+0x58>
 8008bf4:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <netconn_new_with_proto_and_callback+0xdc>)
 8008bf6:	22a3      	movs	r2, #163	; 0xa3
 8008bf8:	4923      	ldr	r1, [pc, #140]	; (8008c88 <netconn_new_with_proto_and_callback+0xe0>)
 8008bfa:	4824      	ldr	r0, [pc, #144]	; (8008c8c <netconn_new_with_proto_and_callback+0xe4>)
 8008bfc:	f00d f96c 	bl	8015ed8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	3310      	adds	r3, #16
 8008c04:	4618      	mov	r0, r3
 8008c06:	f00c fe4d 	bl	80158a4 <sys_mbox_valid>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d105      	bne.n	8008c1c <netconn_new_with_proto_and_callback+0x74>
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <netconn_new_with_proto_and_callback+0xdc>)
 8008c12:	22a4      	movs	r2, #164	; 0xa4
 8008c14:	491e      	ldr	r1, [pc, #120]	; (8008c90 <netconn_new_with_proto_and_callback+0xe8>)
 8008c16:	481d      	ldr	r0, [pc, #116]	; (8008c8c <netconn_new_with_proto_and_callback+0xe4>)
 8008c18:	f00d f95e 	bl	8015ed8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	3314      	adds	r3, #20
 8008c20:	4618      	mov	r0, r3
 8008c22:	f00c fe3f 	bl	80158a4 <sys_mbox_valid>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <netconn_new_with_proto_and_callback+0x90>
 8008c2c:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <netconn_new_with_proto_and_callback+0xdc>)
 8008c2e:	22a6      	movs	r2, #166	; 0xa6
 8008c30:	4918      	ldr	r1, [pc, #96]	; (8008c94 <netconn_new_with_proto_and_callback+0xec>)
 8008c32:	4816      	ldr	r0, [pc, #88]	; (8008c8c <netconn_new_with_proto_and_callback+0xe4>)
 8008c34:	f00d f950 	bl	8015ed8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f00c febf 	bl	80159c0 <sys_sem_valid>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <netconn_new_with_proto_and_callback+0xac>
 8008c48:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <netconn_new_with_proto_and_callback+0xdc>)
 8008c4a:	22a9      	movs	r2, #169	; 0xa9
 8008c4c:	4912      	ldr	r1, [pc, #72]	; (8008c98 <netconn_new_with_proto_and_callback+0xf0>)
 8008c4e:	480f      	ldr	r0, [pc, #60]	; (8008c8c <netconn_new_with_proto_and_callback+0xe4>)
 8008c50:	f00d f942 	bl	8015ed8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	330c      	adds	r3, #12
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f00c fea4 	bl	80159a6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	3310      	adds	r3, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f00c fdaa 	bl	80157bc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c6a:	2006      	movs	r0, #6
 8008c6c:	f002 ff26 	bl	800babc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	e000      	b.n	8008c76 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3730      	adds	r7, #48	; 0x30
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	080099cd 	.word	0x080099cd
 8008c84:	080171b0 	.word	0x080171b0
 8008c88:	080171e4 	.word	0x080171e4
 8008c8c:	08017208 	.word	0x08017208
 8008c90:	08017230 	.word	0x08017230
 8008c94:	08017248 	.word	0x08017248
 8008c98:	0801726c 	.word	0x0801726c

08008c9c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08c      	sub	sp, #48	; 0x30
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e014      	b.n	8008cd8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008cb2:	2329      	movs	r3, #41	; 0x29
 8008cb4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008cb6:	f107 030c 	add.w	r3, r7, #12
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4808      	ldr	r0, [pc, #32]	; (8008ce0 <netconn_prepare_delete+0x44>)
 8008cbe:	f7ff ff55 	bl	8008b6c <netconn_apimsg>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008cc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <netconn_prepare_delete+0x3a>
    return err;
 8008cd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cd4:	e000      	b.n	8008cd8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3730      	adds	r7, #48	; 0x30
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	08009f31 	.word	0x08009f31

08008ce4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <netconn_delete+0x12>
    return ERR_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e00d      	b.n	8008d12 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff ffd0 	bl	8008c9c <netconn_prepare_delete>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <netconn_delete+0x2a>
    netconn_free(conn);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fedf 	bl	8009acc <netconn_free>
  }
  return err;
 8008d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08e      	sub	sp, #56	; 0x38
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	4613      	mov	r3, r2
 8008d28:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <netconn_bind+0x28>
 8008d30:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <netconn_bind+0x5c>)
 8008d32:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008d36:	4911      	ldr	r1, [pc, #68]	; (8008d7c <netconn_bind+0x60>)
 8008d38:	4811      	ldr	r0, [pc, #68]	; (8008d80 <netconn_bind+0x64>)
 8008d3a:	f00d f8cd 	bl	8015ed8 <iprintf>
 8008d3e:	f06f 030f 	mvn.w	r3, #15
 8008d42:	e015      	b.n	8008d70 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <netconn_bind+0x68>)
 8008d4c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008d5a:	f107 0314 	add.w	r3, r7, #20
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4809      	ldr	r0, [pc, #36]	; (8008d88 <netconn_bind+0x6c>)
 8008d62:	f7ff ff03 	bl	8008b6c <netconn_apimsg>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008d6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3738      	adds	r7, #56	; 0x38
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	080171b0 	.word	0x080171b0
 8008d7c:	080172e8 	.word	0x080172e8
 8008d80:	08017208 	.word	0x08017208
 8008d84:	0801a440 	.word	0x0801a440
 8008d88:	0800a0dd 	.word	0x0800a0dd

08008d8c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08e      	sub	sp, #56	; 0x38
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <netconn_connect+0x28>
 8008da0:	4b11      	ldr	r3, [pc, #68]	; (8008de8 <netconn_connect+0x5c>)
 8008da2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008da6:	4911      	ldr	r1, [pc, #68]	; (8008dec <netconn_connect+0x60>)
 8008da8:	4811      	ldr	r0, [pc, #68]	; (8008df0 <netconn_connect+0x64>)
 8008daa:	f00d f895 	bl	8015ed8 <iprintf>
 8008dae:	f06f 030f 	mvn.w	r3, #15
 8008db2:	e015      	b.n	8008de0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008dba:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <netconn_connect+0x68>)
 8008dbc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008dc6:	88fb      	ldrh	r3, [r7, #6]
 8008dc8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008dca:	f107 0314 	add.w	r3, r7, #20
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4809      	ldr	r0, [pc, #36]	; (8008df8 <netconn_connect+0x6c>)
 8008dd2:	f7ff fecb 	bl	8008b6c <netconn_apimsg>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008ddc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3738      	adds	r7, #56	; 0x38
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	080171b0 	.word	0x080171b0
 8008dec:	08017324 	.word	0x08017324
 8008df0:	08017208 	.word	0x08017208
 8008df4:	0801a440 	.word	0x0801a440
 8008df8:	0800a255 	.word	0x0800a255

08008dfc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d109      	bne.n	8008e28 <netconn_recv_data+0x2c>
 8008e14:	4b4d      	ldr	r3, [pc, #308]	; (8008f4c <netconn_recv_data+0x150>)
 8008e16:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008e1a:	494d      	ldr	r1, [pc, #308]	; (8008f50 <netconn_recv_data+0x154>)
 8008e1c:	484d      	ldr	r0, [pc, #308]	; (8008f54 <netconn_recv_data+0x158>)
 8008e1e:	f00d f85b 	bl	8015ed8 <iprintf>
 8008e22:	f06f 030f 	mvn.w	r3, #15
 8008e26:	e08d      	b.n	8008f44 <netconn_recv_data+0x148>
  *new_buf = NULL;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <netconn_recv_data+0x4c>
 8008e34:	4b45      	ldr	r3, [pc, #276]	; (8008f4c <netconn_recv_data+0x150>)
 8008e36:	f240 224a 	movw	r2, #586	; 0x24a
 8008e3a:	4947      	ldr	r1, [pc, #284]	; (8008f58 <netconn_recv_data+0x15c>)
 8008e3c:	4845      	ldr	r0, [pc, #276]	; (8008f54 <netconn_recv_data+0x158>)
 8008e3e:	f00d f84b 	bl	8015ed8 <iprintf>
 8008e42:	f06f 030f 	mvn.w	r3, #15
 8008e46:	e07d      	b.n	8008f44 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3310      	adds	r3, #16
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f00c fd29 	bl	80158a4 <sys_mbox_valid>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10e      	bne.n	8008e76 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 faae 	bl	80093ba <netconn_err>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8008e62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008e6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008e6e:	e069      	b.n	8008f44 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 8008e70:	f06f 030a 	mvn.w	r3, #10
 8008e74:	e066      	b.n	8008f44 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	7f1b      	ldrb	r3, [r3, #28]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10f      	bne.n	8008ea2 <netconn_recv_data+0xa6>
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	7f1b      	ldrb	r3, [r3, #28]
 8008e90:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d104      	bne.n	8008ea2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d023      	beq.n	8008eea <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	f107 0214 	add.w	r2, r7, #20
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f00c fce2 	bl	8015876 <sys_arch_mbox_tryfetch>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb8:	d11f      	bne.n	8008efa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fa7d 	bl	80093ba <netconn_err>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 8008ec4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008ecc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ed0:	e038      	b.n	8008f44 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	7f1b      	ldrb	r3, [r3, #28]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008ede:	f06f 030a 	mvn.w	r3, #10
 8008ee2:	e02f      	b.n	8008f44 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 8008ee4:	f06f 0306 	mvn.w	r3, #6
 8008ee8:	e02c      	b.n	8008f44 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3310      	adds	r3, #16
 8008eee:	f107 0114 	add.w	r1, r7, #20
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f00c fc8d 	bl	8015814 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f107 0213 	add.w	r2, r7, #19
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 faaa 	bl	800945c <lwip_netconn_is_err_msg>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008f0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f12:	f113 0f0f 	cmn.w	r3, #15
 8008f16:	d101      	bne.n	8008f1c <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e013      	b.n	8008f44 <netconn_recv_data+0x148>
      }
      return err;
 8008f1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f20:	e010      	b.n	8008f44 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	891b      	ldrh	r3, [r3, #8]
 8008f26:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d005      	beq.n	8008f3c <netconn_recv_data+0x140>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	8bba      	ldrh	r2, [r7, #28]
 8008f36:	2101      	movs	r1, #1
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	080171b0 	.word	0x080171b0
 8008f50:	080173c8 	.word	0x080173c8
 8008f54:	08017208 	.word	0x08017208
 8008f58:	080173e8 	.word	0x080173e8

08008f5c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <netconn_tcp_recvd_msg+0x1e>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d009      	beq.n	8008f8e <netconn_tcp_recvd_msg+0x32>
 8008f7a:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <netconn_tcp_recvd_msg+0x50>)
 8008f7c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008f80:	490b      	ldr	r1, [pc, #44]	; (8008fb0 <netconn_tcp_recvd_msg+0x54>)
 8008f82:	480c      	ldr	r0, [pc, #48]	; (8008fb4 <netconn_tcp_recvd_msg+0x58>)
 8008f84:	f00c ffa8 	bl	8015ed8 <iprintf>
 8008f88:	f06f 030f 	mvn.w	r3, #15
 8008f8c:	e00a      	b.n	8008fa4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4806      	ldr	r0, [pc, #24]	; (8008fb8 <netconn_tcp_recvd_msg+0x5c>)
 8008f9e:	f7ff fde5 	bl	8008b6c <netconn_apimsg>
 8008fa2:	4603      	mov	r3, r0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	080171b0 	.word	0x080171b0
 8008fb0:	08017404 	.word	0x08017404
 8008fb4:	08017208 	.word	0x08017208
 8008fb8:	0800a3b1 	.word	0x0800a3b1

08008fbc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b090      	sub	sp, #64	; 0x40
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3310      	adds	r3, #16
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f00c fc68 	bl	80158a4 <sys_mbox_valid>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008fda:	f06f 030a 	mvn.w	r3, #10
 8008fde:	e06d      	b.n	80090bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	7f1b      	ldrb	r3, [r3, #28]
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	da07      	bge.n	8008ffa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	7f1b      	ldrb	r3, [r3, #28]
 8008fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008ff8:	e039      	b.n	800906e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff fefb 	bl	8008dfc <netconn_recv_data>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800900c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009018:	e050      	b.n	80090bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	f003 0308 	and.w	r3, r3, #8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10e      	bne.n	8009048 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <netconn_recv_data_tcp+0x7a>
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	891b      	ldrh	r3, [r3, #8]
 8009034:	e000      	b.n	8009038 <netconn_recv_data_tcp+0x7c>
 8009036:	2301      	movs	r3, #1
 8009038:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800903a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800903c:	f107 0214 	add.w	r2, r7, #20
 8009040:	4619      	mov	r1, r3
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff ff8a 	bl	8008f5c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	2b00      	cmp	r3, #0
 800904c:	d134      	bne.n	80090b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	f003 0310 	and.w	r3, r3, #16
 8009054:	2b00      	cmp	r3, #0
 8009056:	d009      	beq.n	800906c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	7f1b      	ldrb	r3, [r3, #28]
 800905c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009066:	f06f 0306 	mvn.w	r3, #6
 800906a:	e027      	b.n	80090bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800906c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <netconn_recv_data_tcp+0xc6>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2200      	movs	r2, #0
 800907c:	2101      	movs	r1, #1
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10f      	bne.n	80090aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 f995 	bl	80093ba <netconn_err>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009096:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <netconn_recv_data_tcp+0xe8>
          return err;
 800909e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090a2:	e00b      	b.n	80090bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80090a4:	f06f 030d 	mvn.w	r3, #13
 80090a8:	e008      	b.n	80090bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80090aa:	2101      	movs	r1, #1
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f947 	bl	8009340 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80090b2:	f06f 030e 	mvn.w	r3, #14
 80090b6:	e001      	b.n	80090bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80090b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3740      	adds	r7, #64	; 0x40
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d109      	bne.n	80090ec <netconn_recv+0x28>
 80090d8:	4b2b      	ldr	r3, [pc, #172]	; (8009188 <netconn_recv+0xc4>)
 80090da:	f240 3263 	movw	r2, #867	; 0x363
 80090de:	492b      	ldr	r1, [pc, #172]	; (800918c <netconn_recv+0xc8>)
 80090e0:	482b      	ldr	r0, [pc, #172]	; (8009190 <netconn_recv+0xcc>)
 80090e2:	f00c fef9 	bl	8015ed8 <iprintf>
 80090e6:	f06f 030f 	mvn.w	r3, #15
 80090ea:	e049      	b.n	8009180 <netconn_recv+0xbc>
  *new_buf = NULL;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <netconn_recv+0x48>
 80090f8:	4b23      	ldr	r3, [pc, #140]	; (8009188 <netconn_recv+0xc4>)
 80090fa:	f240 3265 	movw	r2, #869	; 0x365
 80090fe:	4925      	ldr	r1, [pc, #148]	; (8009194 <netconn_recv+0xd0>)
 8009100:	4823      	ldr	r0, [pc, #140]	; (8009190 <netconn_recv+0xcc>)
 8009102:	f00c fee9 	bl	8015ed8 <iprintf>
 8009106:	f06f 030f 	mvn.w	r3, #15
 800910a:	e039      	b.n	8009180 <netconn_recv+0xbc>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009110:	2005      	movs	r0, #5
 8009112:	f002 fc5d 	bl	800b9d0 <memp_malloc>
 8009116:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d102      	bne.n	8009124 <netconn_recv+0x60>
      return ERR_MEM;
 800911e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009122:	e02d      	b.n	8009180 <netconn_recv+0xbc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009124:	f107 030c 	add.w	r3, r7, #12
 8009128:	2200      	movs	r2, #0
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff ff45 	bl	8008fbc <netconn_recv_data_tcp>
 8009132:	4603      	mov	r3, r0
 8009134:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009136:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d006      	beq.n	800914c <netconn_recv+0x88>
      memp_free(MEMP_NETBUF, buf);
 800913e:	6979      	ldr	r1, [r7, #20]
 8009140:	2005      	movs	r0, #5
 8009142:	f002 fcbb 	bl	800babc <memp_free>
      return err;
 8009146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800914a:	e019      	b.n	8009180 <netconn_recv+0xbc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d106      	bne.n	8009160 <netconn_recv+0x9c>
 8009152:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <netconn_recv+0xc4>)
 8009154:	f240 3279 	movw	r2, #889	; 0x379
 8009158:	490f      	ldr	r1, [pc, #60]	; (8009198 <netconn_recv+0xd4>)
 800915a:	480d      	ldr	r0, [pc, #52]	; (8009190 <netconn_recv+0xcc>)
 800915c:	f00c febc 	bl	8015ed8 <iprintf>

    buf->p = p;
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2200      	movs	r2, #0
 8009170:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2200      	movs	r2, #0
 8009176:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800917e:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	080171b0 	.word	0x080171b0
 800918c:	080173c8 	.word	0x080173c8
 8009190:	08017208 	.word	0x08017208
 8009194:	080173e8 	.word	0x080173e8
 8009198:	08017454 	.word	0x08017454

0800919c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
 80091a8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	f107 0110 	add.w	r1, r7, #16
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	4613      	mov	r3, r2
 80091be:	2201      	movs	r2, #1
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 f805 	bl	80091d0 <netconn_write_vectors_partly>
 80091c6:	4603      	mov	r3, r0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b092      	sub	sp, #72	; 0x48
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	4611      	mov	r1, r2
 80091dc:	461a      	mov	r2, r3
 80091de:	460b      	mov	r3, r1
 80091e0:	80fb      	strh	r3, [r7, #6]
 80091e2:	4613      	mov	r3, r2
 80091e4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <netconn_write_vectors_partly+0x30>
 80091ec:	4b4e      	ldr	r3, [pc, #312]	; (8009328 <netconn_write_vectors_partly+0x158>)
 80091ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80091f2:	494e      	ldr	r1, [pc, #312]	; (800932c <netconn_write_vectors_partly+0x15c>)
 80091f4:	484e      	ldr	r0, [pc, #312]	; (8009330 <netconn_write_vectors_partly+0x160>)
 80091f6:	f00c fe6f 	bl	8015ed8 <iprintf>
 80091fa:	f06f 030f 	mvn.w	r3, #15
 80091fe:	e08e      	b.n	800931e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009208:	2b10      	cmp	r3, #16
 800920a:	d009      	beq.n	8009220 <netconn_write_vectors_partly+0x50>
 800920c:	4b46      	ldr	r3, [pc, #280]	; (8009328 <netconn_write_vectors_partly+0x158>)
 800920e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009212:	4948      	ldr	r1, [pc, #288]	; (8009334 <netconn_write_vectors_partly+0x164>)
 8009214:	4846      	ldr	r0, [pc, #280]	; (8009330 <netconn_write_vectors_partly+0x160>)
 8009216:	f00c fe5f 	bl	8015ed8 <iprintf>
 800921a:	f06f 0305 	mvn.w	r3, #5
 800921e:	e07e      	b.n	800931e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	7f1b      	ldrb	r3, [r3, #28]
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <netconn_write_vectors_partly+0x66>
 800922c:	797b      	ldrb	r3, [r7, #5]
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <netconn_write_vectors_partly+0x6a>
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <netconn_write_vectors_partly+0x6c>
 800923a:	2300      	movs	r3, #0
 800923c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009240:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <netconn_write_vectors_partly+0x84>
 8009248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800924e:	f06f 0305 	mvn.w	r3, #5
 8009252:	e064      	b.n	800931e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009258:	2300      	movs	r3, #0
 800925a:	643b      	str	r3, [r7, #64]	; 0x40
 800925c:	e015      	b.n	800928a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800925e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	4413      	add	r3, r2
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800926a:	4413      	add	r3, r2
 800926c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800926e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	4413      	add	r3, r2
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800927a:	429a      	cmp	r2, r3
 800927c:	d202      	bcs.n	8009284 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800927e:	f06f 0305 	mvn.w	r3, #5
 8009282:	e04c      	b.n	800931e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009286:	3301      	adds	r3, #1
 8009288:	643b      	str	r3, [r7, #64]	; 0x40
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800928e:	429a      	cmp	r2, r3
 8009290:	dbe5      	blt.n	800925e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e040      	b.n	800931e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800929c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929e:	2b00      	cmp	r3, #0
 80092a0:	da0a      	bge.n	80092b8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80092a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80092a8:	f06f 0305 	mvn.w	r3, #5
 80092ac:	e037      	b.n	800931e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80092ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80092b2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80092c8:	797b      	ldrb	r3, [r7, #5]
 80092ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80092ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80092d6:	f107 0314 	add.w	r3, r7, #20
 80092da:	4619      	mov	r1, r3
 80092dc:	4816      	ldr	r0, [pc, #88]	; (8009338 <netconn_write_vectors_partly+0x168>)
 80092de:	f7ff fc45 	bl	8008b6c <netconn_apimsg>
 80092e2:	4603      	mov	r3, r0
 80092e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80092e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d114      	bne.n	800931a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80092f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80092f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fa:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80092fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009308:	429a      	cmp	r2, r3
 800930a:	d006      	beq.n	800931a <netconn_write_vectors_partly+0x14a>
 800930c:	4b06      	ldr	r3, [pc, #24]	; (8009328 <netconn_write_vectors_partly+0x158>)
 800930e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009312:	490a      	ldr	r1, [pc, #40]	; (800933c <netconn_write_vectors_partly+0x16c>)
 8009314:	4806      	ldr	r0, [pc, #24]	; (8009330 <netconn_write_vectors_partly+0x160>)
 8009316:	f00c fddf 	bl	8015ed8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800931a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800931e:	4618      	mov	r0, r3
 8009320:	3748      	adds	r7, #72	; 0x48
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	080171b0 	.word	0x080171b0
 800932c:	0801747c 	.word	0x0801747c
 8009330:	08017208 	.word	0x08017208
 8009334:	08017498 	.word	0x08017498
 8009338:	0800a7b5 	.word	0x0800a7b5
 800933c:	080174bc 	.word	0x080174bc

08009340 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08c      	sub	sp, #48	; 0x30
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <netconn_close_shutdown+0x26>
 8009352:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <netconn_close_shutdown+0x50>)
 8009354:	f240 4247 	movw	r2, #1095	; 0x447
 8009358:	490e      	ldr	r1, [pc, #56]	; (8009394 <netconn_close_shutdown+0x54>)
 800935a:	480f      	ldr	r0, [pc, #60]	; (8009398 <netconn_close_shutdown+0x58>)
 800935c:	f00c fdbc 	bl	8015ed8 <iprintf>
 8009360:	f06f 030f 	mvn.w	r3, #15
 8009364:	e010      	b.n	8009388 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800936e:	2329      	movs	r3, #41	; 0x29
 8009370:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009372:	f107 030c 	add.w	r3, r7, #12
 8009376:	4619      	mov	r1, r3
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <netconn_close_shutdown+0x5c>)
 800937a:	f7ff fbf7 	bl	8008b6c <netconn_apimsg>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009384:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009388:	4618      	mov	r0, r3
 800938a:	3730      	adds	r7, #48	; 0x30
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	080171b0 	.word	0x080171b0
 8009394:	080174e0 	.word	0x080174e0
 8009398:	08017208 	.word	0x08017208
 800939c:	0800a8c9 	.word	0x0800a8c9

080093a0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80093a8:	2103      	movs	r1, #3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7ff ffc8 	bl	8009340 <netconn_close_shutdown>
 80093b0:	4603      	mov	r3, r0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <netconn_err+0x12>
    return ERR_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	e00d      	b.n	80093e8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80093cc:	f00c fb74 	bl	8015ab8 <sys_arch_protect>
 80093d0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	7a1b      	ldrb	r3, [r3, #8]
 80093d6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f00c fb78 	bl	8015ad4 <sys_arch_unprotect>
  return err;
 80093e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80093fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093fe:	f113 0f0d 	cmn.w	r3, #13
 8009402:	d009      	beq.n	8009418 <lwip_netconn_err_to_msg+0x28>
 8009404:	f113 0f0d 	cmn.w	r3, #13
 8009408:	dc0c      	bgt.n	8009424 <lwip_netconn_err_to_msg+0x34>
 800940a:	f113 0f0f 	cmn.w	r3, #15
 800940e:	d007      	beq.n	8009420 <lwip_netconn_err_to_msg+0x30>
 8009410:	f113 0f0e 	cmn.w	r3, #14
 8009414:	d002      	beq.n	800941c <lwip_netconn_err_to_msg+0x2c>
 8009416:	e005      	b.n	8009424 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009418:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <lwip_netconn_err_to_msg+0x54>)
 800941a:	e00e      	b.n	800943a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <lwip_netconn_err_to_msg+0x58>)
 800941e:	e00c      	b.n	800943a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009420:	4b0a      	ldr	r3, [pc, #40]	; (800944c <lwip_netconn_err_to_msg+0x5c>)
 8009422:	e00a      	b.n	800943a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <lwip_netconn_err_to_msg+0x48>
 800942c:	4b08      	ldr	r3, [pc, #32]	; (8009450 <lwip_netconn_err_to_msg+0x60>)
 800942e:	227d      	movs	r2, #125	; 0x7d
 8009430:	4908      	ldr	r1, [pc, #32]	; (8009454 <lwip_netconn_err_to_msg+0x64>)
 8009432:	4809      	ldr	r0, [pc, #36]	; (8009458 <lwip_netconn_err_to_msg+0x68>)
 8009434:	f00c fd50 	bl	8015ed8 <iprintf>
      return NULL;
 8009438:	2300      	movs	r3, #0
  }
}
 800943a:	4618      	mov	r0, r3
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	0801a33c 	.word	0x0801a33c
 8009448:	0801a33d 	.word	0x0801a33d
 800944c:	0801a33e 	.word	0x0801a33e
 8009450:	080174fc 	.word	0x080174fc
 8009454:	08017530 	.word	0x08017530
 8009458:	08017540 	.word	0x08017540

0800945c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d105      	bne.n	8009478 <lwip_netconn_is_err_msg+0x1c>
 800946c:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <lwip_netconn_is_err_msg+0x5c>)
 800946e:	2285      	movs	r2, #133	; 0x85
 8009470:	4912      	ldr	r1, [pc, #72]	; (80094bc <lwip_netconn_is_err_msg+0x60>)
 8009472:	4813      	ldr	r0, [pc, #76]	; (80094c0 <lwip_netconn_is_err_msg+0x64>)
 8009474:	f00c fd30 	bl	8015ed8 <iprintf>

  if (msg == &netconn_aborted) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a12      	ldr	r2, [pc, #72]	; (80094c4 <lwip_netconn_is_err_msg+0x68>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d104      	bne.n	800948a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	22f3      	movs	r2, #243	; 0xf3
 8009484:	701a      	strb	r2, [r3, #0]
    return 1;
 8009486:	2301      	movs	r3, #1
 8009488:	e012      	b.n	80094b0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a0e      	ldr	r2, [pc, #56]	; (80094c8 <lwip_netconn_is_err_msg+0x6c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d104      	bne.n	800949c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	22f2      	movs	r2, #242	; 0xf2
 8009496:	701a      	strb	r2, [r3, #0]
    return 1;
 8009498:	2301      	movs	r3, #1
 800949a:	e009      	b.n	80094b0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a0b      	ldr	r2, [pc, #44]	; (80094cc <lwip_netconn_is_err_msg+0x70>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d104      	bne.n	80094ae <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	22f1      	movs	r2, #241	; 0xf1
 80094a8:	701a      	strb	r2, [r3, #0]
    return 1;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	080174fc 	.word	0x080174fc
 80094bc:	08017568 	.word	0x08017568
 80094c0:	08017540 	.word	0x08017540
 80094c4:	0801a33c 	.word	0x0801a33c
 80094c8:	0801a33d 	.word	0x0801a33d
 80094cc:	0801a33e 	.word	0x0801a33e

080094d0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <recv_tcp+0x22>
 80094e4:	4b36      	ldr	r3, [pc, #216]	; (80095c0 <recv_tcp+0xf0>)
 80094e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094ea:	4936      	ldr	r1, [pc, #216]	; (80095c4 <recv_tcp+0xf4>)
 80094ec:	4836      	ldr	r0, [pc, #216]	; (80095c8 <recv_tcp+0xf8>)
 80094ee:	f00c fcf3 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <recv_tcp+0x36>
 80094f8:	4b31      	ldr	r3, [pc, #196]	; (80095c0 <recv_tcp+0xf0>)
 80094fa:	f240 122d 	movw	r2, #301	; 0x12d
 80094fe:	4933      	ldr	r1, [pc, #204]	; (80095cc <recv_tcp+0xfc>)
 8009500:	4831      	ldr	r0, [pc, #196]	; (80095c8 <recv_tcp+0xf8>)
 8009502:	f00c fce9 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d006      	beq.n	800951c <recv_tcp+0x4c>
 800950e:	4b2c      	ldr	r3, [pc, #176]	; (80095c0 <recv_tcp+0xf0>)
 8009510:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009514:	492e      	ldr	r1, [pc, #184]	; (80095d0 <recv_tcp+0x100>)
 8009516:	482c      	ldr	r0, [pc, #176]	; (80095c8 <recv_tcp+0xf8>)
 8009518:	f00c fcde 	bl	8015ed8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <recv_tcp+0x5c>
    return ERR_VAL;
 8009526:	f06f 0305 	mvn.w	r3, #5
 800952a:	e045      	b.n	80095b8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	429a      	cmp	r2, r3
 8009534:	d006      	beq.n	8009544 <recv_tcp+0x74>
 8009536:	4b22      	ldr	r3, [pc, #136]	; (80095c0 <recv_tcp+0xf0>)
 8009538:	f240 1235 	movw	r2, #309	; 0x135
 800953c:	4925      	ldr	r1, [pc, #148]	; (80095d4 <recv_tcp+0x104>)
 800953e:	4822      	ldr	r0, [pc, #136]	; (80095c8 <recv_tcp+0xf8>)
 8009540:	f00c fcca 	bl	8015ed8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	3310      	adds	r3, #16
 8009548:	4618      	mov	r0, r3
 800954a:	f00c f9ab 	bl	80158a4 <sys_mbox_valid>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10d      	bne.n	8009570 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d008      	beq.n	800956c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	891b      	ldrh	r3, [r3, #8]
 800955e:	4619      	mov	r1, r3
 8009560:	68b8      	ldr	r0, [r7, #8]
 8009562:	f004 f839 	bl	800d5d8 <tcp_recved>
      pbuf_free(p);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f003 f948 	bl	800c7fc <pbuf_free>
    }
    return ERR_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	e023      	b.n	80095b8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <recv_tcp+0xb2>
    msg = p;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	891b      	ldrh	r3, [r3, #8]
 800957e:	83fb      	strh	r3, [r7, #30]
 8009580:	e003      	b.n	800958a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009582:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <recv_tcp+0x108>)
 8009584:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	3310      	adds	r3, #16
 800958e:	69b9      	ldr	r1, [r7, #24]
 8009590:	4618      	mov	r0, r3
 8009592:	f00c f925 	bl	80157e0 <sys_mbox_trypost>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800959c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095a0:	e00a      	b.n	80095b8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d005      	beq.n	80095b6 <recv_tcp+0xe6>
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	8bfa      	ldrh	r2, [r7, #30]
 80095b0:	2100      	movs	r1, #0
 80095b2:	6978      	ldr	r0, [r7, #20]
 80095b4:	4798      	blx	r3
  }

  return ERR_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3720      	adds	r7, #32
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	080174fc 	.word	0x080174fc
 80095c4:	08017574 	.word	0x08017574
 80095c8:	08017540 	.word	0x08017540
 80095cc:	08017598 	.word	0x08017598
 80095d0:	080175b8 	.word	0x080175b8
 80095d4:	080175d0 	.word	0x080175d0
 80095d8:	0801a33e 	.word	0x0801a33e

080095dc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <poll_tcp+0x22>
 80095f0:	4b29      	ldr	r3, [pc, #164]	; (8009698 <poll_tcp+0xbc>)
 80095f2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80095f6:	4929      	ldr	r1, [pc, #164]	; (800969c <poll_tcp+0xc0>)
 80095f8:	4829      	ldr	r0, [pc, #164]	; (80096a0 <poll_tcp+0xc4>)
 80095fa:	f00c fc6d 	bl	8015ed8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	785b      	ldrb	r3, [r3, #1]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d104      	bne.n	8009610 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009606:	2101      	movs	r1, #1
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 ff07 	bl	800a41c <lwip_netconn_do_writemore>
 800960e:	e016      	b.n	800963e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b04      	cmp	r3, #4
 8009616:	d112      	bne.n	800963e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00a      	beq.n	8009636 <poll_tcp+0x5a>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	7a5b      	ldrb	r3, [r3, #9]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	7a5a      	ldrb	r2, [r3, #9]
 8009630:	3a01      	subs	r2, #1
 8009632:	b2d2      	uxtb	r2, r2
 8009634:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009636:	2101      	movs	r1, #1
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fb0f 	bl	8009c5c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	7f1b      	ldrb	r3, [r3, #28]
 8009642:	f003 0310 	and.w	r3, r3, #16
 8009646:	2b00      	cmp	r3, #0
 8009648:	d021      	beq.n	800968e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d01d      	beq.n	800968e <poll_tcp+0xb2>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800965a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800965e:	d316      	bcc.n	800968e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009668:	2b04      	cmp	r3, #4
 800966a:	d810      	bhi.n	800968e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	7f1b      	ldrb	r3, [r3, #28]
 8009670:	f023 0310 	bic.w	r3, r3, #16
 8009674:	b2da      	uxtb	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	2b00      	cmp	r3, #0
 8009680:	d005      	beq.n	800968e <poll_tcp+0xb2>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2200      	movs	r2, #0
 8009688:	2102      	movs	r1, #2
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	080174fc 	.word	0x080174fc
 800969c:	080175f0 	.word	0x080175f0
 80096a0:	08017540 	.word	0x08017540

080096a4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	4613      	mov	r3, r2
 80096b0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <sent_tcp+0x26>
 80096bc:	4b20      	ldr	r3, [pc, #128]	; (8009740 <sent_tcp+0x9c>)
 80096be:	f240 1293 	movw	r2, #403	; 0x193
 80096c2:	4920      	ldr	r1, [pc, #128]	; (8009744 <sent_tcp+0xa0>)
 80096c4:	4820      	ldr	r0, [pc, #128]	; (8009748 <sent_tcp+0xa4>)
 80096c6:	f00c fc07 	bl	8015ed8 <iprintf>

  if (conn) {
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d032      	beq.n	8009736 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d104      	bne.n	80096e2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80096d8:	2101      	movs	r1, #1
 80096da:	6978      	ldr	r0, [r7, #20]
 80096dc:	f000 fe9e 	bl	800a41c <lwip_netconn_do_writemore>
 80096e0:	e007      	b.n	80096f2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d103      	bne.n	80096f2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80096ea:	2101      	movs	r1, #1
 80096ec:	6978      	ldr	r0, [r7, #20]
 80096ee:	f000 fab5 	bl	8009c5c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01d      	beq.n	8009736 <sent_tcp+0x92>
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009702:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009706:	d316      	bcc.n	8009736 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009710:	2b04      	cmp	r3, #4
 8009712:	d810      	bhi.n	8009736 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	7f1b      	ldrb	r3, [r3, #28]
 8009718:	f023 0310 	bic.w	r3, r3, #16
 800971c:	b2da      	uxtb	r2, r3
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <sent_tcp+0x92>
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	88fa      	ldrh	r2, [r7, #6]
 8009730:	2102      	movs	r1, #2
 8009732:	6978      	ldr	r0, [r7, #20]
 8009734:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	080174fc 	.word	0x080174fc
 8009744:	080175f0 	.word	0x080175f0
 8009748:	08017540 	.word	0x08017540

0800974c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <err_tcp+0x24>
 8009762:	4b5f      	ldr	r3, [pc, #380]	; (80098e0 <err_tcp+0x194>)
 8009764:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009768:	495e      	ldr	r1, [pc, #376]	; (80098e4 <err_tcp+0x198>)
 800976a:	485f      	ldr	r0, [pc, #380]	; (80098e8 <err_tcp+0x19c>)
 800976c:	f00c fbb4 	bl	8015ed8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009770:	f00c f9a2 	bl	8015ab8 <sys_arch_protect>
 8009774:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	2200      	movs	r2, #0
 800977a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	78fa      	ldrb	r2, [r7, #3]
 8009780:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	7f1b      	ldrb	r3, [r3, #28]
 8009786:	f043 0301 	orr.w	r3, r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	2200      	movs	r2, #0
 800979a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800979c:	69b8      	ldr	r0, [r7, #24]
 800979e:	f00c f999 	bl	8015ad4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d005      	beq.n	80097b6 <err_tcp+0x6a>
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2200      	movs	r2, #0
 80097b0:	2104      	movs	r1, #4
 80097b2:	69f8      	ldr	r0, [r7, #28]
 80097b4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d005      	beq.n	80097ca <err_tcp+0x7e>
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	2200      	movs	r2, #0
 80097c4:	2100      	movs	r1, #0
 80097c6:	69f8      	ldr	r0, [r7, #28]
 80097c8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <err_tcp+0x92>
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	2200      	movs	r2, #0
 80097d8:	2102      	movs	r1, #2
 80097da:	69f8      	ldr	r0, [r7, #28]
 80097dc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80097de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fe04 	bl	80093f0 <lwip_netconn_err_to_msg>
 80097e8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	3310      	adds	r3, #16
 80097ee:	4618      	mov	r0, r3
 80097f0:	f00c f858 	bl	80158a4 <sys_mbox_valid>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	3310      	adds	r3, #16
 80097fe:	6939      	ldr	r1, [r7, #16]
 8009800:	4618      	mov	r0, r3
 8009802:	f00b ffed 	bl	80157e0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	3314      	adds	r3, #20
 800980a:	4618      	mov	r0, r3
 800980c:	f00c f84a 	bl	80158a4 <sys_mbox_valid>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d005      	beq.n	8009822 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	3314      	adds	r3, #20
 800981a:	6939      	ldr	r1, [r7, #16]
 800981c:	4618      	mov	r0, r3
 800981e:	f00b ffdf 	bl	80157e0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009822:	7dfb      	ldrb	r3, [r7, #23]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d005      	beq.n	8009834 <err_tcp+0xe8>
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	2b04      	cmp	r3, #4
 800982c:	d002      	beq.n	8009834 <err_tcp+0xe8>
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d143      	bne.n	80098bc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	7f1b      	ldrb	r3, [r3, #28]
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b00      	cmp	r3, #0
 800983e:	bf14      	ite	ne
 8009840:	2301      	movne	r3, #1
 8009842:	2300      	moveq	r3, #0
 8009844:	b2db      	uxtb	r3, r3
 8009846:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	7f1b      	ldrb	r3, [r3, #28]
 800984c:	f023 0304 	bic.w	r3, r3, #4
 8009850:	b2da      	uxtb	r2, r3
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d13b      	bne.n	80098d4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <err_tcp+0x126>
 8009864:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <err_tcp+0x194>)
 8009866:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800986a:	4920      	ldr	r1, [pc, #128]	; (80098ec <err_tcp+0x1a0>)
 800986c:	481e      	ldr	r0, [pc, #120]	; (80098e8 <err_tcp+0x19c>)
 800986e:	f00c fb33 	bl	8015ed8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	2b04      	cmp	r3, #4
 8009876:	d104      	bne.n	8009882 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	2200      	movs	r2, #0
 800987e:	711a      	strb	r2, [r3, #4]
 8009880:	e003      	b.n	800988a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	330c      	adds	r3, #12
 8009892:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009894:	68b8      	ldr	r0, [r7, #8]
 8009896:	f00c f893 	bl	80159c0 <sys_sem_valid>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d106      	bne.n	80098ae <err_tcp+0x162>
 80098a0:	4b0f      	ldr	r3, [pc, #60]	; (80098e0 <err_tcp+0x194>)
 80098a2:	f240 12ef 	movw	r2, #495	; 0x1ef
 80098a6:	4912      	ldr	r1, [pc, #72]	; (80098f0 <err_tcp+0x1a4>)
 80098a8:	480f      	ldr	r0, [pc, #60]	; (80098e8 <err_tcp+0x19c>)
 80098aa:	f00c fb15 	bl	8015ed8 <iprintf>
      conn->current_msg = NULL;
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	2200      	movs	r2, #0
 80098b2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80098b4:	68b8      	ldr	r0, [r7, #8]
 80098b6:	f00c f869 	bl	801598c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80098ba:	e00b      	b.n	80098d4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d008      	beq.n	80098d6 <err_tcp+0x18a>
 80098c4:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <err_tcp+0x194>)
 80098c6:	f240 12f7 	movw	r2, #503	; 0x1f7
 80098ca:	490a      	ldr	r1, [pc, #40]	; (80098f4 <err_tcp+0x1a8>)
 80098cc:	4806      	ldr	r0, [pc, #24]	; (80098e8 <err_tcp+0x19c>)
 80098ce:	f00c fb03 	bl	8015ed8 <iprintf>
  }
}
 80098d2:	e000      	b.n	80098d6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80098d4:	bf00      	nop
}
 80098d6:	bf00      	nop
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	080174fc 	.word	0x080174fc
 80098e4:	080175f0 	.word	0x080175f0
 80098e8:	08017540 	.word	0x08017540
 80098ec:	08017600 	.word	0x08017600
 80098f0:	0801761c 	.word	0x0801761c
 80098f4:	08017638 	.word	0x08017638

080098f8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f004 fe43 	bl	800e594 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800990e:	490a      	ldr	r1, [pc, #40]	; (8009938 <setup_tcp+0x40>)
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f004 fe51 	bl	800e5b8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009916:	4909      	ldr	r1, [pc, #36]	; (800993c <setup_tcp+0x44>)
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f004 fe6f 	bl	800e5fc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800991e:	2202      	movs	r2, #2
 8009920:	4907      	ldr	r1, [pc, #28]	; (8009940 <setup_tcp+0x48>)
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f004 fec6 	bl	800e6b4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009928:	4906      	ldr	r1, [pc, #24]	; (8009944 <setup_tcp+0x4c>)
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f004 fe88 	bl	800e640 <tcp_err>
}
 8009930:	bf00      	nop
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	080094d1 	.word	0x080094d1
 800993c:	080096a5 	.word	0x080096a5
 8009940:	080095dd 	.word	0x080095dd
 8009944:	0800974d 	.word	0x0800974d

08009948 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009948:	b590      	push	{r4, r7, lr}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d006      	beq.n	800996c <pcb_new+0x24>
 800995e:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <pcb_new+0x78>)
 8009960:	f240 2265 	movw	r2, #613	; 0x265
 8009964:	4917      	ldr	r1, [pc, #92]	; (80099c4 <pcb_new+0x7c>)
 8009966:	4818      	ldr	r0, [pc, #96]	; (80099c8 <pcb_new+0x80>)
 8009968:	f00c fab6 	bl	8015ed8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009976:	2b10      	cmp	r3, #16
 8009978:	d112      	bne.n	80099a0 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681c      	ldr	r4, [r3, #0]
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	4618      	mov	r0, r3
 8009982:	f004 fdf9 	bl	800e578 <tcp_new_ip_type>
 8009986:	4603      	mov	r3, r0
 8009988:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d009      	beq.n	80099a8 <pcb_new+0x60>
        setup_tcp(msg->conn);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff ffad 	bl	80098f8 <setup_tcp>
      }
      break;
 800999e:	e003      	b.n	80099a8 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	22fa      	movs	r2, #250	; 0xfa
 80099a4:	711a      	strb	r2, [r3, #4]
      return;
 80099a6:	e008      	b.n	80099ba <pcb_new+0x72>
      break;
 80099a8:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <pcb_new+0x72>
    msg->err = ERR_MEM;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	22ff      	movs	r2, #255	; 0xff
 80099b8:	711a      	strb	r2, [r3, #4]
  }
}
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd90      	pop	{r4, r7, pc}
 80099c0:	080174fc 	.word	0x080174fc
 80099c4:	0801767c 	.word	0x0801767c
 80099c8:	08017540 	.word	0x08017540

080099cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d102      	bne.n	80099ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff ffad 	bl	8009948 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009a08:	2006      	movs	r0, #6
 8009a0a:	f001 ffe1 	bl	800b9d0 <memp_malloc>
 8009a0e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <netconn_alloc+0x22>
    return NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	e04d      	b.n	8009ab6 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	79fa      	ldrb	r2, [r7, #7]
 8009a24:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a32:	2b10      	cmp	r3, #16
 8009a34:	d10c      	bne.n	8009a50 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009a36:	2306      	movs	r3, #6
 8009a38:	60fb      	str	r3, [r7, #12]
      break;
 8009a3a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	3310      	adds	r3, #16
 8009a40:	68f9      	ldr	r1, [r7, #12]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f00b fea0 	bl	8015788 <sys_mbox_new>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d008      	beq.n	8009a60 <netconn_alloc+0x68>
    goto free_and_return;
 8009a4e:	e02d      	b.n	8009aac <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009a50:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <netconn_alloc+0xc8>)
 8009a52:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009a56:	491b      	ldr	r1, [pc, #108]	; (8009ac4 <netconn_alloc+0xcc>)
 8009a58:	481b      	ldr	r0, [pc, #108]	; (8009ac8 <netconn_alloc+0xd0>)
 8009a5a:	f00c fa3d 	bl	8015ed8 <iprintf>
      goto free_and_return;
 8009a5e:	e025      	b.n	8009aac <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	330c      	adds	r3, #12
 8009a64:	2100      	movs	r1, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f00b ff3a 	bl	80158e0 <sys_sem_new>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	3310      	adds	r3, #16
 8009a76:	4618      	mov	r0, r3
 8009a78:	f00b fea0 	bl	80157bc <sys_mbox_free>
    goto free_and_return;
 8009a7c:	e016      	b.n	8009aac <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	3314      	adds	r3, #20
 8009a82:	4618      	mov	r0, r3
 8009a84:	f00b ff1f 	bl	80158c6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	7dfa      	ldrb	r2, [r7, #23]
 8009aa6:	771a      	strb	r2, [r3, #28]
  return conn;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	e004      	b.n	8009ab6 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009aac:	6939      	ldr	r1, [r7, #16]
 8009aae:	2006      	movs	r0, #6
 8009ab0:	f002 f804 	bl	800babc <memp_free>
  return NULL;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	080174fc 	.word	0x080174fc
 8009ac4:	0801769c 	.word	0x0801769c
 8009ac8:	08017540 	.word	0x08017540

08009acc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d006      	beq.n	8009aea <netconn_free+0x1e>
 8009adc:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <netconn_free+0x80>)
 8009ade:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009ae2:	491b      	ldr	r1, [pc, #108]	; (8009b50 <netconn_free+0x84>)
 8009ae4:	481b      	ldr	r0, [pc, #108]	; (8009b54 <netconn_free+0x88>)
 8009ae6:	f00c f9f7 	bl	8015ed8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3310      	adds	r3, #16
 8009aee:	4618      	mov	r0, r3
 8009af0:	f00b fed8 	bl	80158a4 <sys_mbox_valid>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d006      	beq.n	8009b08 <netconn_free+0x3c>
 8009afa:	4b14      	ldr	r3, [pc, #80]	; (8009b4c <netconn_free+0x80>)
 8009afc:	f240 3223 	movw	r2, #803	; 0x323
 8009b00:	4915      	ldr	r1, [pc, #84]	; (8009b58 <netconn_free+0x8c>)
 8009b02:	4814      	ldr	r0, [pc, #80]	; (8009b54 <netconn_free+0x88>)
 8009b04:	f00c f9e8 	bl	8015ed8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3314      	adds	r3, #20
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f00b fec9 	bl	80158a4 <sys_mbox_valid>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d006      	beq.n	8009b26 <netconn_free+0x5a>
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <netconn_free+0x80>)
 8009b1a:	f240 3226 	movw	r2, #806	; 0x326
 8009b1e:	490f      	ldr	r1, [pc, #60]	; (8009b5c <netconn_free+0x90>)
 8009b20:	480c      	ldr	r0, [pc, #48]	; (8009b54 <netconn_free+0x88>)
 8009b22:	f00c f9d9 	bl	8015ed8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f00b ff3b 	bl	80159a6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	330c      	adds	r3, #12
 8009b34:	4618      	mov	r0, r3
 8009b36:	f00b ff54 	bl	80159e2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	2006      	movs	r0, #6
 8009b3e:	f001 ffbd 	bl	800babc <memp_free>
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	080174fc 	.word	0x080174fc
 8009b50:	080176c4 	.word	0x080176c4
 8009b54:	08017540 	.word	0x08017540
 8009b58:	080176f4 	.word	0x080176f4
 8009b5c:	08017730 	.word	0x08017730

08009b60 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3310      	adds	r3, #16
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f00b fe99 	bl	80158a4 <sys_mbox_valid>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d02f      	beq.n	8009bd8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009b78:	e018      	b.n	8009bac <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b82:	2b10      	cmp	r3, #16
 8009b84:	d10e      	bne.n	8009ba4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f107 020f 	add.w	r2, r7, #15
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fc64 	bl	800945c <lwip_netconn_is_err_msg>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d108      	bne.n	8009bac <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f002 fe2d 	bl	800c7fc <pbuf_free>
 8009ba2:	e003      	b.n	8009bac <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 ff1a 	bl	800a9e0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3310      	adds	r3, #16
 8009bb0:	f107 0210 	add.w	r2, r7, #16
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f00b fe5d 	bl	8015876 <sys_arch_mbox_tryfetch>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bc2:	d1da      	bne.n	8009b7a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3310      	adds	r3, #16
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f00b fdf7 	bl	80157bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3310      	adds	r3, #16
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f00b fe77 	bl	80158c6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3314      	adds	r3, #20
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f00b fe61 	bl	80158a4 <sys_mbox_valid>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d034      	beq.n	8009c52 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009be8:	e01d      	b.n	8009c26 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f107 020e 	add.w	r2, r7, #14
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff fc32 	bl	800945c <lwip_netconn_is_err_msg>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d113      	bne.n	8009c26 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009c02:	6978      	ldr	r0, [r7, #20]
 8009c04:	f7ff ffac 	bl	8009b60 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f003 fbe1 	bl	800d3dc <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009c20:	6978      	ldr	r0, [r7, #20]
 8009c22:	f7ff ff53 	bl	8009acc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	3314      	adds	r3, #20
 8009c2a:	f107 0210 	add.w	r2, r7, #16
 8009c2e:	4611      	mov	r1, r2
 8009c30:	4618      	mov	r0, r3
 8009c32:	f00b fe20 	bl	8015876 <sys_arch_mbox_tryfetch>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c3c:	d1d5      	bne.n	8009bea <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3314      	adds	r3, #20
 8009c42:	4618      	mov	r0, r3
 8009c44:	f00b fdba 	bl	80157bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3314      	adds	r3, #20
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f00b fe3a 	bl	80158c6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009c52:	bf00      	nop
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <lwip_netconn_do_close_internal+0x24>
 8009c72:	4b87      	ldr	r3, [pc, #540]	; (8009e90 <lwip_netconn_do_close_internal+0x234>)
 8009c74:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009c78:	4986      	ldr	r1, [pc, #536]	; (8009e94 <lwip_netconn_do_close_internal+0x238>)
 8009c7a:	4887      	ldr	r0, [pc, #540]	; (8009e98 <lwip_netconn_do_close_internal+0x23c>)
 8009c7c:	f00c f92c 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c88:	2b10      	cmp	r3, #16
 8009c8a:	d006      	beq.n	8009c9a <lwip_netconn_do_close_internal+0x3e>
 8009c8c:	4b80      	ldr	r3, [pc, #512]	; (8009e90 <lwip_netconn_do_close_internal+0x234>)
 8009c8e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009c92:	4982      	ldr	r1, [pc, #520]	; (8009e9c <lwip_netconn_do_close_internal+0x240>)
 8009c94:	4880      	ldr	r0, [pc, #512]	; (8009e98 <lwip_netconn_do_close_internal+0x23c>)
 8009c96:	f00c f91f 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	785b      	ldrb	r3, [r3, #1]
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	d006      	beq.n	8009cb0 <lwip_netconn_do_close_internal+0x54>
 8009ca2:	4b7b      	ldr	r3, [pc, #492]	; (8009e90 <lwip_netconn_do_close_internal+0x234>)
 8009ca4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009ca8:	497d      	ldr	r1, [pc, #500]	; (8009ea0 <lwip_netconn_do_close_internal+0x244>)
 8009caa:	487b      	ldr	r0, [pc, #492]	; (8009e98 <lwip_netconn_do_close_internal+0x23c>)
 8009cac:	f00c f914 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <lwip_netconn_do_close_internal+0x6a>
 8009cb8:	4b75      	ldr	r3, [pc, #468]	; (8009e90 <lwip_netconn_do_close_internal+0x234>)
 8009cba:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009cbe:	4979      	ldr	r1, [pc, #484]	; (8009ea4 <lwip_netconn_do_close_internal+0x248>)
 8009cc0:	4875      	ldr	r0, [pc, #468]	; (8009e98 <lwip_netconn_do_close_internal+0x23c>)
 8009cc2:	f00c f909 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d106      	bne.n	8009cdc <lwip_netconn_do_close_internal+0x80>
 8009cce:	4b70      	ldr	r3, [pc, #448]	; (8009e90 <lwip_netconn_do_close_internal+0x234>)
 8009cd0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009cd4:	4974      	ldr	r1, [pc, #464]	; (8009ea8 <lwip_netconn_do_close_internal+0x24c>)
 8009cd6:	4870      	ldr	r0, [pc, #448]	; (8009e98 <lwip_netconn_do_close_internal+0x23c>)
 8009cd8:	f00c f8fe 	bl	8015ed8 <iprintf>

  tpcb = conn->pcb.tcp;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	7a1b      	ldrb	r3, [r3, #8]
 8009ce8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	d102      	bne.n	8009d06 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009d00:	2301      	movs	r3, #1
 8009d02:	75bb      	strb	r3, [r7, #22]
 8009d04:	e01f      	b.n	8009d46 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00e      	beq.n	8009d2a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009d10:	2b05      	cmp	r3, #5
 8009d12:	d007      	beq.n	8009d24 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009d18:	2b06      	cmp	r3, #6
 8009d1a:	d003      	beq.n	8009d24 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d102      	bne.n	8009d2a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009d24:	2301      	movs	r3, #1
 8009d26:	75bb      	strb	r3, [r7, #22]
 8009d28:	e00d      	b.n	8009d46 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009d2a:	7b7b      	ldrb	r3, [r7, #13]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d008      	beq.n	8009d42 <lwip_netconn_do_close_internal+0xe6>
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	8b5b      	ldrh	r3, [r3, #26]
 8009d34:	f003 0310 	and.w	r3, r3, #16
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	75bb      	strb	r3, [r7, #22]
 8009d40:	e001      	b.n	8009d46 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009d46:	7dbb      	ldrb	r3, [r7, #22]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	6938      	ldr	r0, [r7, #16]
 8009d50:	f004 fc20 	bl	800e594 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	7d1b      	ldrb	r3, [r3, #20]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d104      	bne.n	8009d66 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6938      	ldr	r0, [r7, #16]
 8009d60:	f004 fc90 	bl	800e684 <tcp_accept>
 8009d64:	e01d      	b.n	8009da2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d007      	beq.n	8009d7c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6938      	ldr	r0, [r7, #16]
 8009d70:	f004 fc22 	bl	800e5b8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009d74:	2100      	movs	r1, #0
 8009d76:	6938      	ldr	r0, [r7, #16]
 8009d78:	f004 fc84 	bl	800e684 <tcp_accept>
    }
    if (shut_tx) {
 8009d7c:	7b7b      	ldrb	r3, [r7, #13]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009d82:	2100      	movs	r1, #0
 8009d84:	6938      	ldr	r0, [r7, #16]
 8009d86:	f004 fc39 	bl	800e5fc <tcp_sent>
    }
    if (shut_close) {
 8009d8a:	7dbb      	ldrb	r3, [r7, #22]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d008      	beq.n	8009da2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009d90:	2200      	movs	r2, #0
 8009d92:	2100      	movs	r1, #0
 8009d94:	6938      	ldr	r0, [r7, #16]
 8009d96:	f004 fc8d 	bl	800e6b4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	6938      	ldr	r0, [r7, #16]
 8009d9e:	f004 fc4f 	bl	800e640 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009da2:	7dbb      	ldrb	r3, [r7, #22]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009da8:	6938      	ldr	r0, [r7, #16]
 8009daa:	f003 f9d1 	bl	800d150 <tcp_close>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]
 8009db2:	e007      	b.n	8009dc4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	7b7a      	ldrb	r2, [r7, #13]
 8009db8:	4619      	mov	r1, r3
 8009dba:	6938      	ldr	r0, [r7, #16]
 8009dbc:	f003 f9f4 	bl	800d1a8 <tcp_shutdown>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	757b      	strb	r3, [r7, #21]
 8009dd0:	e016      	b.n	8009e00 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dda:	d10f      	bne.n	8009dfc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	7a5b      	ldrb	r3, [r3, #9]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10c      	bne.n	8009e00 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009de6:	2301      	movs	r3, #1
 8009de8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009dea:	7dbb      	ldrb	r3, [r7, #22]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d007      	beq.n	8009e00 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009df0:	6938      	ldr	r0, [r7, #16]
 8009df2:	f003 faf3 	bl	800d3dc <tcp_abort>
          err = ERR_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	75fb      	strb	r3, [r7, #23]
 8009dfa:	e001      	b.n	8009e00 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009e00:	7d7b      	ldrb	r3, [r7, #21]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d052      	beq.n	8009eac <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	330c      	adds	r3, #12
 8009e0e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a1b      	ldr	r3, [r3, #32]
 8009e14:	7dfa      	ldrb	r2, [r7, #23]
 8009e16:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d129      	bne.n	8009e80 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009e2c:	7dbb      	ldrb	r3, [r7, #22]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00c      	beq.n	8009e4c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d005      	beq.n	8009e4c <lwip_netconn_do_close_internal+0x1f0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e44:	2200      	movs	r2, #0
 8009e46:	2104      	movs	r1, #4
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
      }
      if (shut_rx) {
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d009      	beq.n	8009e66 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <lwip_netconn_do_close_internal+0x20a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	4798      	blx	r3
      }
      if (shut_tx) {
 8009e66:	7b7b      	ldrb	r3, [r7, #13]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d009      	beq.n	8009e80 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <lwip_netconn_do_close_internal+0x224>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2102      	movs	r1, #2
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009e86:	68b8      	ldr	r0, [r7, #8]
 8009e88:	f00b fd80 	bl	801598c <sys_sem_signal>
    }
    return ERR_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e03c      	b.n	8009f0a <lwip_netconn_do_close_internal+0x2ae>
 8009e90:	080174fc 	.word	0x080174fc
 8009e94:	0801776c 	.word	0x0801776c
 8009e98:	08017540 	.word	0x08017540
 8009e9c:	0801777c 	.word	0x0801777c
 8009ea0:	0801779c 	.word	0x0801779c
 8009ea4:	080177c0 	.word	0x080177c0
 8009ea8:	08017600 	.word	0x08017600
  }
  if (!close_finished) {
 8009eac:	7d7b      	ldrb	r3, [r7, #21]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d11e      	bne.n	8009ef0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	7d1b      	ldrb	r3, [r3, #20]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d106      	bne.n	8009ec8 <lwip_netconn_do_close_internal+0x26c>
 8009eba:	4b16      	ldr	r3, [pc, #88]	; (8009f14 <lwip_netconn_do_close_internal+0x2b8>)
 8009ebc:	f240 4241 	movw	r2, #1089	; 0x441
 8009ec0:	4915      	ldr	r1, [pc, #84]	; (8009f18 <lwip_netconn_do_close_internal+0x2bc>)
 8009ec2:	4816      	ldr	r0, [pc, #88]	; (8009f1c <lwip_netconn_do_close_internal+0x2c0>)
 8009ec4:	f00c f808 	bl	8015ed8 <iprintf>
    if (shut_tx) {
 8009ec8:	7b7b      	ldrb	r3, [r7, #13]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009ece:	4914      	ldr	r1, [pc, #80]	; (8009f20 <lwip_netconn_do_close_internal+0x2c4>)
 8009ed0:	6938      	ldr	r0, [r7, #16]
 8009ed2:	f004 fb93 	bl	800e5fc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4912      	ldr	r1, [pc, #72]	; (8009f24 <lwip_netconn_do_close_internal+0x2c8>)
 8009eda:	6938      	ldr	r0, [r7, #16]
 8009edc:	f004 fbea 	bl	800e6b4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009ee0:	4911      	ldr	r1, [pc, #68]	; (8009f28 <lwip_netconn_do_close_internal+0x2cc>)
 8009ee2:	6938      	ldr	r0, [r7, #16]
 8009ee4:	f004 fbac 	bl	800e640 <tcp_err>
    tcp_arg(tpcb, conn);
 8009ee8:	6879      	ldr	r1, [r7, #4]
 8009eea:	6938      	ldr	r0, [r7, #16]
 8009eec:	f004 fb52 	bl	800e594 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d106      	bne.n	8009f06 <lwip_netconn_do_close_internal+0x2aa>
 8009ef8:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <lwip_netconn_do_close_internal+0x2b8>)
 8009efa:	f240 424d 	movw	r2, #1101	; 0x44d
 8009efe:	490b      	ldr	r1, [pc, #44]	; (8009f2c <lwip_netconn_do_close_internal+0x2d0>)
 8009f00:	4806      	ldr	r0, [pc, #24]	; (8009f1c <lwip_netconn_do_close_internal+0x2c0>)
 8009f02:	f00b ffe9 	bl	8015ed8 <iprintf>
  return err;
 8009f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	080174fc 	.word	0x080174fc
 8009f18:	080177d4 	.word	0x080177d4
 8009f1c:	08017540 	.word	0x08017540
 8009f20:	080096a5 	.word	0x080096a5
 8009f24:	080095dd 	.word	0x080095dd
 8009f28:	0800974d 	.word	0x0800974d
 8009f2c:	080177f8 	.word	0x080177f8

08009f30 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00d      	beq.n	8009f66 <lwip_netconn_do_delconn+0x36>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f54:	2b10      	cmp	r3, #16
 8009f56:	d006      	beq.n	8009f66 <lwip_netconn_do_delconn+0x36>
 8009f58:	4b59      	ldr	r3, [pc, #356]	; (800a0c0 <lwip_netconn_do_delconn+0x190>)
 8009f5a:	f240 425e 	movw	r2, #1118	; 0x45e
 8009f5e:	4959      	ldr	r1, [pc, #356]	; (800a0c4 <lwip_netconn_do_delconn+0x194>)
 8009f60:	4859      	ldr	r0, [pc, #356]	; (800a0c8 <lwip_netconn_do_delconn+0x198>)
 8009f62:	f00b ffb9 	bl	8015ed8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <lwip_netconn_do_delconn+0x48>
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d002      	beq.n	8009f78 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d109      	bne.n	8009f8c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d10a      	bne.n	8009f94 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	7f1b      	ldrb	r3, [r3, #28]
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	22fb      	movs	r2, #251	; 0xfb
 8009f90:	711a      	strb	r2, [r3, #4]
 8009f92:	e089      	b.n	800a0a8 <lwip_netconn_do_delconn+0x178>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d10d      	bne.n	8009fb6 <lwip_netconn_do_delconn+0x86>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	7f1b      	ldrb	r3, [r3, #28]
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <lwip_netconn_do_delconn+0x86>
 8009fa8:	4b45      	ldr	r3, [pc, #276]	; (800a0c0 <lwip_netconn_do_delconn+0x190>)
 8009faa:	f240 427a 	movw	r2, #1146	; 0x47a
 8009fae:	4947      	ldr	r1, [pc, #284]	; (800a0cc <lwip_netconn_do_delconn+0x19c>)
 8009fb0:	4845      	ldr	r0, [pc, #276]	; (800a0c8 <lwip_netconn_do_delconn+0x198>)
 8009fb2:	f00b ff91 	bl	8015ed8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff fdcd 	bl	8009b60 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d051      	beq.n	800a074 <lwip_netconn_do_delconn+0x144>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fda:	2b10      	cmp	r3, #16
 8009fdc:	d145      	bne.n	800a06a <lwip_netconn_do_delconn+0x13a>
          udp_remove(msg->conn->pcb.udp);
          break;
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <lwip_netconn_do_delconn+0xc6>
 8009fe8:	4b35      	ldr	r3, [pc, #212]	; (800a0c0 <lwip_netconn_do_delconn+0x190>)
 8009fea:	f240 4294 	movw	r2, #1172	; 0x494
 8009fee:	4938      	ldr	r1, [pc, #224]	; (800a0d0 <lwip_netconn_do_delconn+0x1a0>)
 8009ff0:	4835      	ldr	r0, [pc, #212]	; (800a0c8 <lwip_netconn_do_delconn+0x198>)
 8009ff2:	f00b ff71 	bl	8015ed8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2203      	movs	r2, #3
 800a002:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff fe22 	bl	8009c5c <lwip_netconn_do_close_internal>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d04b      	beq.n	800a0b6 <lwip_netconn_do_delconn+0x186>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	2b04      	cmp	r3, #4
 800a026:	d006      	beq.n	800a036 <lwip_netconn_do_delconn+0x106>
 800a028:	4b25      	ldr	r3, [pc, #148]	; (800a0c0 <lwip_netconn_do_delconn+0x190>)
 800a02a:	f240 429a 	movw	r2, #1178	; 0x49a
 800a02e:	4929      	ldr	r1, [pc, #164]	; (800a0d4 <lwip_netconn_do_delconn+0x1a4>)
 800a030:	4825      	ldr	r0, [pc, #148]	; (800a0c8 <lwip_netconn_do_delconn+0x198>)
 800a032:	f00b ff51 	bl	8015ed8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a036:	4828      	ldr	r0, [pc, #160]	; (800a0d8 <lwip_netconn_do_delconn+0x1a8>)
 800a038:	f00b fd11 	bl	8015a5e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	2100      	movs	r1, #0
 800a044:	4618      	mov	r0, r3
 800a046:	f00b fc70 	bl	801592a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a04a:	4823      	ldr	r0, [pc, #140]	; (800a0d8 <lwip_netconn_do_delconn+0x1a8>)
 800a04c:	f00b fcf8 	bl	8015a40 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	785b      	ldrb	r3, [r3, #1]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d02d      	beq.n	800a0b6 <lwip_netconn_do_delconn+0x186>
 800a05a:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <lwip_netconn_do_delconn+0x190>)
 800a05c:	f240 429e 	movw	r2, #1182	; 0x49e
 800a060:	491c      	ldr	r1, [pc, #112]	; (800a0d4 <lwip_netconn_do_delconn+0x1a4>)
 800a062:	4819      	ldr	r0, [pc, #100]	; (800a0c8 <lwip_netconn_do_delconn+0x198>)
 800a064:	f00b ff38 	bl	8015ed8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a068:	e025      	b.n	800a0b6 <lwip_netconn_do_delconn+0x186>
#endif /* LWIP_TCP */
        default:
          break;
 800a06a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2200      	movs	r2, #0
 800a072:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <lwip_netconn_do_delconn+0x15e>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	6810      	ldr	r0, [r2, #0]
 800a088:	2200      	movs	r2, #0
 800a08a:	2100      	movs	r1, #0
 800a08c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <lwip_netconn_do_delconn+0x178>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	6810      	ldr	r0, [r2, #0]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	330c      	adds	r3, #12
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f00b fc86 	bl	80159c0 <sys_sem_valid>
 800a0b4:	e000      	b.n	800a0b8 <lwip_netconn_do_delconn+0x188>
          return;
 800a0b6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	080174fc 	.word	0x080174fc
 800a0c4:	08017808 	.word	0x08017808
 800a0c8:	08017540 	.word	0x08017540
 800a0cc:	0801781c 	.word	0x0801781c
 800a0d0:	0801783c 	.word	0x0801783c
 800a0d4:	08017858 	.word	0x08017858
 800a0d8:	200098b4 	.word	0x200098b4

0800a0dc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d016      	beq.n	800a120 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0fc:	2b10      	cmp	r3, #16
 800a0fe:	d10c      	bne.n	800a11a <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6858      	ldr	r0, [r3, #4]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6899      	ldr	r1, [r3, #8]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	899b      	ldrh	r3, [r3, #12]
 800a10e:	461a      	mov	r2, r3
 800a110:	f003 f970 	bl	800d3f4 <tcp_bind>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]
        break;
 800a118:	e004      	b.n	800a124 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a11a:	23fa      	movs	r3, #250	; 0xfa
 800a11c:	73fb      	strb	r3, [r7, #15]
        break;
 800a11e:	e001      	b.n	800a124 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 800a120:	23fa      	movs	r3, #250	; 0xfa
 800a122:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	7bfa      	ldrb	r2, [r7, #15]
 800a128:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a12a:	bf00      	nop
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	4613      	mov	r3, r2
 800a140:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a150:	f06f 0305 	mvn.w	r3, #5
 800a154:	e070      	b.n	800a238 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d006      	beq.n	800a16c <lwip_netconn_do_connected+0x38>
 800a15e:	4b38      	ldr	r3, [pc, #224]	; (800a240 <lwip_netconn_do_connected+0x10c>)
 800a160:	f240 5223 	movw	r2, #1315	; 0x523
 800a164:	4937      	ldr	r1, [pc, #220]	; (800a244 <lwip_netconn_do_connected+0x110>)
 800a166:	4838      	ldr	r0, [pc, #224]	; (800a248 <lwip_netconn_do_connected+0x114>)
 800a168:	f00b feb6 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10c      	bne.n	800a18e <lwip_netconn_do_connected+0x5a>
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	7f1b      	ldrb	r3, [r3, #28]
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d106      	bne.n	800a18e <lwip_netconn_do_connected+0x5a>
 800a180:	4b2f      	ldr	r3, [pc, #188]	; (800a240 <lwip_netconn_do_connected+0x10c>)
 800a182:	f240 5224 	movw	r2, #1316	; 0x524
 800a186:	4931      	ldr	r1, [pc, #196]	; (800a24c <lwip_netconn_do_connected+0x118>)
 800a188:	482f      	ldr	r0, [pc, #188]	; (800a248 <lwip_netconn_do_connected+0x114>)
 800a18a:	f00b fea5 	bl	8015ed8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d008      	beq.n	800a1a8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	79fa      	ldrb	r2, [r7, #7]
 800a19c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	330c      	adds	r3, #12
 800a1a6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d106      	bne.n	800a1c2 <lwip_netconn_do_connected+0x8e>
 800a1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800a1bc:	69b8      	ldr	r0, [r7, #24]
 800a1be:	f7ff fb9b 	bl	80098f8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	7f1b      	ldrb	r3, [r3, #28]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bf0c      	ite	eq
 800a1ce:	2301      	moveq	r3, #1
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	7f1b      	ldrb	r3, [r3, #28]
 800a1da:	f023 0304 	bic.w	r3, r3, #4
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <lwip_netconn_do_connected+0xbc>
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10c      	bne.n	800a20a <lwip_netconn_do_connected+0xd6>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d102      	bne.n	800a1fc <lwip_netconn_do_connected+0xc8>
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d006      	beq.n	800a20a <lwip_netconn_do_connected+0xd6>
 800a1fc:	4b10      	ldr	r3, [pc, #64]	; (800a240 <lwip_netconn_do_connected+0x10c>)
 800a1fe:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800a202:	4913      	ldr	r1, [pc, #76]	; (800a250 <lwip_netconn_do_connected+0x11c>)
 800a204:	4810      	ldr	r0, [pc, #64]	; (800a248 <lwip_netconn_do_connected+0x114>)
 800a206:	f00b fe67 	bl	8015ed8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2200      	movs	r2, #0
 800a20e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	2200      	movs	r2, #0
 800a214:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <lwip_netconn_do_connected+0xf6>
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2200      	movs	r2, #0
 800a224:	2102      	movs	r1, #2
 800a226:	69b8      	ldr	r0, [r7, #24]
 800a228:	4798      	blx	r3

  if (was_blocking) {
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800a230:	69f8      	ldr	r0, [r7, #28]
 800a232:	f00b fbab 	bl	801598c <sys_sem_signal>
  }
  return ERR_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	080174fc 	.word	0x080174fc
 800a244:	08017860 	.word	0x08017860
 800a248:	08017540 	.word	0x08017540
 800a24c:	08017880 	.word	0x08017880
 800a250:	080178c0 	.word	0x080178c0

0800a254 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d102      	bne.n	800a270 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a26a:	23f1      	movs	r3, #241	; 0xf1
 800a26c:	75fb      	strb	r3, [r7, #23]
 800a26e:	e08b      	b.n	800a388 <lwip_netconn_do_connect+0x134>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d179      	bne.n	800a372 <lwip_netconn_do_connect+0x11e>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	2b03      	cmp	r3, #3
 800a286:	d102      	bne.n	800a28e <lwip_netconn_do_connect+0x3a>
          err = ERR_ALREADY;
 800a288:	23f7      	movs	r3, #247	; 0xf7
 800a28a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a28c:	e07b      	b.n	800a386 <lwip_netconn_do_connect+0x132>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <lwip_netconn_do_connect+0x4a>
          err = ERR_ISCONN;
 800a298:	23f6      	movs	r3, #246	; 0xf6
 800a29a:	75fb      	strb	r3, [r7, #23]
        break;
 800a29c:	e073      	b.n	800a386 <lwip_netconn_do_connect+0x132>
          setup_tcp(msg->conn);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff fb28 	bl	80098f8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6858      	ldr	r0, [r3, #4]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6899      	ldr	r1, [r3, #8]
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	899a      	ldrh	r2, [r3, #12]
 800a2b6:	4b38      	ldr	r3, [pc, #224]	; (800a398 <lwip_netconn_do_connect+0x144>)
 800a2b8:	f003 fa24 	bl	800d704 <tcp_connect>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d15e      	bne.n	800a386 <lwip_netconn_do_connect+0x132>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	7f1b      	ldrb	r3, [r3, #28]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	bf14      	ite	ne
 800a2d6:	2301      	movne	r3, #1
 800a2d8:	2300      	moveq	r3, #0
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <lwip_netconn_do_connect+0xac>
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	7f1a      	ldrb	r2, [r3, #28]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0204 	orr.w	r2, r2, #4
 800a2fa:	b2d2      	uxtb	r2, r2
 800a2fc:	771a      	strb	r2, [r3, #28]
 800a2fe:	e008      	b.n	800a312 <lwip_netconn_do_connect+0xbe>
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	7f1a      	ldrb	r2, [r3, #28]
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f022 0204 	bic.w	r2, r2, #4
 800a30e:	b2d2      	uxtb	r2, r2
 800a310:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <lwip_netconn_do_connect+0xca>
              err = ERR_INPROGRESS;
 800a318:	23fb      	movs	r3, #251	; 0xfb
 800a31a:	75fb      	strb	r3, [r7, #23]
        break;
 800a31c:	e033      	b.n	800a386 <lwip_netconn_do_connect+0x132>
              msg->conn->current_msg = msg;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	785b      	ldrb	r3, [r3, #1]
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d006      	beq.n	800a33e <lwip_netconn_do_connect+0xea>
 800a330:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <lwip_netconn_do_connect+0x148>)
 800a332:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a336:	491a      	ldr	r1, [pc, #104]	; (800a3a0 <lwip_netconn_do_connect+0x14c>)
 800a338:	481a      	ldr	r0, [pc, #104]	; (800a3a4 <lwip_netconn_do_connect+0x150>)
 800a33a:	f00b fdcd 	bl	8015ed8 <iprintf>
              UNLOCK_TCPIP_CORE();
 800a33e:	481a      	ldr	r0, [pc, #104]	; (800a3a8 <lwip_netconn_do_connect+0x154>)
 800a340:	f00b fb8d 	bl	8015a5e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	330c      	adds	r3, #12
 800a34a:	2100      	movs	r1, #0
 800a34c:	4618      	mov	r0, r3
 800a34e:	f00b faec 	bl	801592a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a352:	4815      	ldr	r0, [pc, #84]	; (800a3a8 <lwip_netconn_do_connect+0x154>)
 800a354:	f00b fb74 	bl	8015a40 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	785b      	ldrb	r3, [r3, #1]
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d116      	bne.n	800a390 <lwip_netconn_do_connect+0x13c>
 800a362:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <lwip_netconn_do_connect+0x148>)
 800a364:	f240 5274 	movw	r2, #1396	; 0x574
 800a368:	490d      	ldr	r1, [pc, #52]	; (800a3a0 <lwip_netconn_do_connect+0x14c>)
 800a36a:	480e      	ldr	r0, [pc, #56]	; (800a3a4 <lwip_netconn_do_connect+0x150>)
 800a36c:	f00b fdb4 	bl	8015ed8 <iprintf>
              return;
 800a370:	e00e      	b.n	800a390 <lwip_netconn_do_connect+0x13c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a372:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <lwip_netconn_do_connect+0x148>)
 800a374:	f240 527d 	movw	r2, #1405	; 0x57d
 800a378:	490c      	ldr	r1, [pc, #48]	; (800a3ac <lwip_netconn_do_connect+0x158>)
 800a37a:	480a      	ldr	r0, [pc, #40]	; (800a3a4 <lwip_netconn_do_connect+0x150>)
 800a37c:	f00b fdac 	bl	8015ed8 <iprintf>
 800a380:	23fa      	movs	r3, #250	; 0xfa
 800a382:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a384:	e000      	b.n	800a388 <lwip_netconn_do_connect+0x134>
        break;
 800a386:	bf00      	nop
    }
  }
  msg->err = err;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	7dfa      	ldrb	r2, [r7, #23]
 800a38c:	711a      	strb	r2, [r3, #4]
 800a38e:	e000      	b.n	800a392 <lwip_netconn_do_connect+0x13e>
              return;
 800a390:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	0800a135 	.word	0x0800a135
 800a39c:	080174fc 	.word	0x080174fc
 800a3a0:	08017858 	.word	0x08017858
 800a3a4:	08017540 	.word	0x08017540
 800a3a8:	200098b4 	.word	0x200098b4
 800a3ac:	080178e0 	.word	0x080178e0

0800a3b0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d022      	beq.n	800a412 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d11b      	bne.n	800a412 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3e6:	d202      	bcs.n	800a3ee <lwip_netconn_do_recv+0x3e>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	e001      	b.n	800a3f2 <lwip_netconn_do_recv+0x42>
 800a3ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3f2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	89fa      	ldrh	r2, [r7, #14]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f003 f8ea 	bl	800d5d8 <tcp_recved>
        remaining -= recved;
 800a404:	89fb      	ldrh	r3, [r7, #14]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e6      	bne.n	800a3e0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a412:	bf00      	nop
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d106      	bne.n	800a440 <lwip_netconn_do_writemore+0x24>
 800a432:	4b96      	ldr	r3, [pc, #600]	; (800a68c <lwip_netconn_do_writemore+0x270>)
 800a434:	f240 6273 	movw	r2, #1651	; 0x673
 800a438:	4995      	ldr	r1, [pc, #596]	; (800a690 <lwip_netconn_do_writemore+0x274>)
 800a43a:	4896      	ldr	r0, [pc, #600]	; (800a694 <lwip_netconn_do_writemore+0x278>)
 800a43c:	f00b fd4c 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d006      	beq.n	800a456 <lwip_netconn_do_writemore+0x3a>
 800a448:	4b90      	ldr	r3, [pc, #576]	; (800a68c <lwip_netconn_do_writemore+0x270>)
 800a44a:	f240 6274 	movw	r2, #1652	; 0x674
 800a44e:	4992      	ldr	r1, [pc, #584]	; (800a698 <lwip_netconn_do_writemore+0x27c>)
 800a450:	4890      	ldr	r0, [pc, #576]	; (800a694 <lwip_netconn_do_writemore+0x278>)
 800a452:	f00b fd41 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d106      	bne.n	800a46c <lwip_netconn_do_writemore+0x50>
 800a45e:	4b8b      	ldr	r3, [pc, #556]	; (800a68c <lwip_netconn_do_writemore+0x270>)
 800a460:	f240 6275 	movw	r2, #1653	; 0x675
 800a464:	498d      	ldr	r1, [pc, #564]	; (800a69c <lwip_netconn_do_writemore+0x280>)
 800a466:	488b      	ldr	r0, [pc, #556]	; (800a694 <lwip_netconn_do_writemore+0x278>)
 800a468:	f00b fd36 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d106      	bne.n	800a482 <lwip_netconn_do_writemore+0x66>
 800a474:	4b85      	ldr	r3, [pc, #532]	; (800a68c <lwip_netconn_do_writemore+0x270>)
 800a476:	f240 6276 	movw	r2, #1654	; 0x676
 800a47a:	4989      	ldr	r1, [pc, #548]	; (800a6a0 <lwip_netconn_do_writemore+0x284>)
 800a47c:	4885      	ldr	r0, [pc, #532]	; (800a694 <lwip_netconn_do_writemore+0x278>)
 800a47e:	f00b fd2b 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	699a      	ldr	r2, [r3, #24]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d306      	bcc.n	800a4a0 <lwip_netconn_do_writemore+0x84>
 800a492:	4b7e      	ldr	r3, [pc, #504]	; (800a68c <lwip_netconn_do_writemore+0x270>)
 800a494:	f240 6277 	movw	r2, #1655	; 0x677
 800a498:	4982      	ldr	r1, [pc, #520]	; (800a6a4 <lwip_netconn_do_writemore+0x288>)
 800a49a:	487e      	ldr	r0, [pc, #504]	; (800a694 <lwip_netconn_do_writemore+0x278>)
 800a49c:	f00b fd1c 	bl	8015ed8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	899b      	ldrh	r3, [r3, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <lwip_netconn_do_writemore+0x9c>
 800a4aa:	4b78      	ldr	r3, [pc, #480]	; (800a68c <lwip_netconn_do_writemore+0x270>)
 800a4ac:	f240 6279 	movw	r2, #1657	; 0x679
 800a4b0:	497d      	ldr	r1, [pc, #500]	; (800a6a8 <lwip_netconn_do_writemore+0x28c>)
 800a4b2:	4878      	ldr	r0, [pc, #480]	; (800a694 <lwip_netconn_do_writemore+0x278>)
 800a4b4:	f00b fd10 	bl	8015ed8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	7f1b      	ldrb	r3, [r3, #28]
 800a4be:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	7f1b      	ldrb	r3, [r3, #28]
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d104      	bne.n	800a4d6 <lwip_netconn_do_writemore+0xba>
 800a4cc:	7ebb      	ldrb	r3, [r7, #26]
 800a4ce:	f003 0304 	and.w	r3, r3, #4
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <lwip_netconn_do_writemore+0xbe>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e000      	b.n	800a4dc <lwip_netconn_do_writemore+0xc0>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a508:	d307      	bcc.n	800a51a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a50a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a50e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a510:	7ebb      	ldrb	r3, [r7, #26]
 800a512:	f043 0302 	orr.w	r3, r3, #2
 800a516:	76bb      	strb	r3, [r7, #26]
 800a518:	e001      	b.n	800a51e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a526:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a528:	89fa      	ldrh	r2, [r7, #14]
 800a52a:	8bbb      	ldrh	r3, [r7, #28]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d216      	bcs.n	800a55e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a534:	7e3b      	ldrb	r3, [r7, #24]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00d      	beq.n	800a556 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a53a:	8bbb      	ldrh	r3, [r7, #28]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10e      	bne.n	800a55e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <lwip_netconn_do_writemore+0x134>
 800a54a:	f06f 0306 	mvn.w	r3, #6
 800a54e:	e000      	b.n	800a552 <lwip_netconn_do_writemore+0x136>
 800a550:	2300      	movs	r3, #0
 800a552:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a554:	e07d      	b.n	800a652 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a556:	7ebb      	ldrb	r3, [r7, #26]
 800a558:	f043 0302 	orr.w	r3, r3, #2
 800a55c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	8bbb      	ldrh	r3, [r7, #28]
 800a566:	441a      	add	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d906      	bls.n	800a582 <lwip_netconn_do_writemore+0x166>
 800a574:	4b45      	ldr	r3, [pc, #276]	; (800a68c <lwip_netconn_do_writemore+0x270>)
 800a576:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a57a:	494c      	ldr	r1, [pc, #304]	; (800a6ac <lwip_netconn_do_writemore+0x290>)
 800a57c:	4845      	ldr	r0, [pc, #276]	; (800a694 <lwip_netconn_do_writemore+0x278>)
 800a57e:	f00b fcab 	bl	8015ed8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a582:	8bbb      	ldrh	r3, [r7, #28]
 800a584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a588:	4293      	cmp	r3, r2
 800a58a:	d103      	bne.n	800a594 <lwip_netconn_do_writemore+0x178>
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a592:	d209      	bcs.n	800a5a8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a598:	8bba      	ldrh	r2, [r7, #28]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d10b      	bne.n	800a5b6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	899b      	ldrh	r3, [r3, #12]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d906      	bls.n	800a5b6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a5ac:	7ebb      	ldrb	r3, [r7, #26]
 800a5ae:	f043 0302 	orr.w	r3, r3, #2
 800a5b2:	76bb      	strb	r3, [r7, #26]
 800a5b4:	e001      	b.n	800a5ba <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6858      	ldr	r0, [r3, #4]
 800a5be:	7ebb      	ldrb	r3, [r7, #26]
 800a5c0:	8bba      	ldrh	r2, [r7, #28]
 800a5c2:	6979      	ldr	r1, [r7, #20]
 800a5c4:	f006 ff28 	bl	8011418 <tcp_write>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a5cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d12c      	bne.n	800a62e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	6999      	ldr	r1, [r3, #24]
 800a5da:	8bba      	ldrh	r2, [r7, #28]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	440a      	add	r2, r1
 800a5e2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	6919      	ldr	r1, [r3, #16]
 800a5ea:	8bba      	ldrh	r2, [r7, #28]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	440a      	add	r2, r1
 800a5f2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	691a      	ldr	r2, [r3, #16]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	429a      	cmp	r2, r3
 800a604:	d113      	bne.n	800a62e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	899a      	ldrh	r2, [r3, #12]
 800a60c:	3a01      	subs	r2, #1
 800a60e:	b292      	uxth	r2, r2
 800a610:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	899b      	ldrh	r3, [r3, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	3208      	adds	r2, #8
 800a624:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	2200      	movs	r2, #0
 800a62c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a62e:	7e7b      	ldrb	r3, [r7, #25]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d004      	beq.n	800a63e <lwip_netconn_do_writemore+0x222>
 800a634:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f43f af50 	beq.w	800a4de <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a63e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d004      	beq.n	800a650 <lwip_netconn_do_writemore+0x234>
 800a646:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a64a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a64e:	d146      	bne.n	800a6de <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a650:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a652:	7e3b      	ldrb	r3, [r7, #24]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d02b      	beq.n	800a6b0 <lwip_netconn_do_writemore+0x294>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	429a      	cmp	r2, r3
 800a666:	d223      	bcs.n	800a6b0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <lwip_netconn_do_writemore+0x260>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	2200      	movs	r2, #0
 800a676:	2103      	movs	r1, #3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	7f1b      	ldrb	r3, [r3, #28]
 800a680:	f043 0310 	orr.w	r3, r3, #16
 800a684:	b2da      	uxtb	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	771a      	strb	r2, [r3, #28]
 800a68a:	e028      	b.n	800a6de <lwip_netconn_do_writemore+0x2c2>
 800a68c:	080174fc 	.word	0x080174fc
 800a690:	080175f0 	.word	0x080175f0
 800a694:	08017540 	.word	0x08017540
 800a698:	080178f8 	.word	0x080178f8
 800a69c:	08017600 	.word	0x08017600
 800a6a0:	08017918 	.word	0x08017918
 800a6a4:	08017930 	.word	0x08017930
 800a6a8:	08017970 	.word	0x08017970
 800a6ac:	08017998 	.word	0x08017998
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a6b8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a6bc:	d305      	bcc.n	800a6ca <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d909      	bls.n	800a6de <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d005      	beq.n	800a6de <lwip_netconn_do_writemore+0x2c2>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2103      	movs	r1, #3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a6de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d11d      	bne.n	800a722 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d002      	beq.n	800a6fc <lwip_netconn_do_writemore+0x2e0>
 800a6f6:	7e3b      	ldrb	r3, [r7, #24]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	4618      	mov	r0, r3
 800a706:	f007 fc71 	bl	8011fec <tcp_output>
 800a70a:	4603      	mov	r3, r0
 800a70c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a70e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a712:	f113 0f04 	cmn.w	r3, #4
 800a716:	d12c      	bne.n	800a772 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a718:	7b3b      	ldrb	r3, [r7, #12]
 800a71a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	76fb      	strb	r3, [r7, #27]
 800a720:	e027      	b.n	800a772 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a72a:	d120      	bne.n	800a76e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4618      	mov	r0, r3
 800a732:	f007 fc5b 	bl	8011fec <tcp_output>
 800a736:	4603      	mov	r3, r0
 800a738:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a73a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a73e:	f113 0f04 	cmn.w	r3, #4
 800a742:	d104      	bne.n	800a74e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a744:	7b7b      	ldrb	r3, [r7, #13]
 800a746:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a748:	2301      	movs	r3, #1
 800a74a:	76fb      	strb	r3, [r7, #27]
 800a74c:	e011      	b.n	800a772 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a74e:	7e3b      	ldrb	r3, [r7, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00e      	beq.n	800a772 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d102      	bne.n	800a764 <lwip_netconn_do_writemore+0x348>
 800a75e:	f06f 0306 	mvn.w	r3, #6
 800a762:	e000      	b.n	800a766 <lwip_netconn_do_writemore+0x34a>
 800a764:	2300      	movs	r3, #0
 800a766:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a768:	2301      	movs	r3, #1
 800a76a:	76fb      	strb	r3, [r7, #27]
 800a76c:	e001      	b.n	800a772 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a76e:	2301      	movs	r3, #1
 800a770:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a772:	7efb      	ldrb	r3, [r7, #27]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d015      	beq.n	800a7a4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	330c      	adds	r3, #12
 800a780:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	7ffa      	ldrb	r2, [r7, #31]
 800a788:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a796:	78fb      	ldrb	r3, [r7, #3]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d006      	beq.n	800a7aa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a79c:	68b8      	ldr	r0, [r7, #8]
 800a79e:	f00b f8f5 	bl	801598c <sys_sem_signal>
 800a7a2:	e002      	b.n	800a7aa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a7a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7a8:	e000      	b.n	800a7ac <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3720      	adds	r7, #32
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fdf8 	bl	80093ba <netconn_err>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a7ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d163      	bne.n	800a89e <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7e0:	2b10      	cmp	r3, #16
 800a7e2:	d15c      	bne.n	800a89e <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	785b      	ldrb	r3, [r3, #1]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a7ee:	23fb      	movs	r3, #251	; 0xfb
 800a7f0:	73fb      	strb	r3, [r7, #15]
 800a7f2:	e054      	b.n	800a89e <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d04d      	beq.n	800a89a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2201      	movs	r2, #1
 800a804:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d006      	beq.n	800a81e <lwip_netconn_do_write+0x6a>
 800a810:	4b27      	ldr	r3, [pc, #156]	; (800a8b0 <lwip_netconn_do_write+0xfc>)
 800a812:	f240 7223 	movw	r2, #1827	; 0x723
 800a816:	4927      	ldr	r1, [pc, #156]	; (800a8b4 <lwip_netconn_do_write+0x100>)
 800a818:	4827      	ldr	r0, [pc, #156]	; (800a8b8 <lwip_netconn_do_write+0x104>)
 800a81a:	f00b fb5d 	bl	8015ed8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <lwip_netconn_do_write+0x80>
 800a826:	4b22      	ldr	r3, [pc, #136]	; (800a8b0 <lwip_netconn_do_write+0xfc>)
 800a828:	f240 7224 	movw	r2, #1828	; 0x724
 800a82c:	4923      	ldr	r1, [pc, #140]	; (800a8bc <lwip_netconn_do_write+0x108>)
 800a82e:	4822      	ldr	r0, [pc, #136]	; (800a8b8 <lwip_netconn_do_write+0x104>)
 800a830:	f00b fb52 	bl	8015ed8 <iprintf>
        msg->conn->current_msg = msg;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2100      	movs	r1, #0
 800a842:	4618      	mov	r0, r3
 800a844:	f7ff fdea 	bl	800a41c <lwip_netconn_do_writemore>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d02b      	beq.n	800a8a6 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	785b      	ldrb	r3, [r3, #1]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d006      	beq.n	800a866 <lwip_netconn_do_write+0xb2>
 800a858:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <lwip_netconn_do_write+0xfc>)
 800a85a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a85e:	4918      	ldr	r1, [pc, #96]	; (800a8c0 <lwip_netconn_do_write+0x10c>)
 800a860:	4815      	ldr	r0, [pc, #84]	; (800a8b8 <lwip_netconn_do_write+0x104>)
 800a862:	f00b fb39 	bl	8015ed8 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a866:	4817      	ldr	r0, [pc, #92]	; (800a8c4 <lwip_netconn_do_write+0x110>)
 800a868:	f00b f8f9 	bl	8015a5e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	330c      	adds	r3, #12
 800a872:	2100      	movs	r1, #0
 800a874:	4618      	mov	r0, r3
 800a876:	f00b f858 	bl	801592a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a87a:	4812      	ldr	r0, [pc, #72]	; (800a8c4 <lwip_netconn_do_write+0x110>)
 800a87c:	f00b f8e0 	bl	8015a40 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d10d      	bne.n	800a8a6 <lwip_netconn_do_write+0xf2>
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <lwip_netconn_do_write+0xfc>)
 800a88c:	f240 722c 	movw	r2, #1836	; 0x72c
 800a890:	490b      	ldr	r1, [pc, #44]	; (800a8c0 <lwip_netconn_do_write+0x10c>)
 800a892:	4809      	ldr	r0, [pc, #36]	; (800a8b8 <lwip_netconn_do_write+0x104>)
 800a894:	f00b fb20 	bl	8015ed8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a898:	e005      	b.n	800a8a6 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800a89a:	23f5      	movs	r3, #245	; 0xf5
 800a89c:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	7bfa      	ldrb	r2, [r7, #15]
 800a8a2:	711a      	strb	r2, [r3, #4]
 800a8a4:	e000      	b.n	800a8a8 <lwip_netconn_do_write+0xf4>
        return;
 800a8a6:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	080174fc 	.word	0x080174fc
 800a8b4:	0801783c 	.word	0x0801783c
 800a8b8:	08017540 	.word	0x08017540
 800a8bc:	080179c4 	.word	0x080179c4
 800a8c0:	08017858 	.word	0x08017858
 800a8c4:	200098b4 	.word	0x200098b4

0800a8c8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d069      	beq.n	800a9ba <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a8f0:	2b10      	cmp	r3, #16
 800a8f2:	d162      	bne.n	800a9ba <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d002      	beq.n	800a902 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a8fc:	7afb      	ldrb	r3, [r7, #11]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d05b      	beq.n	800a9ba <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	2b03      	cmp	r3, #3
 800a906:	d103      	bne.n	800a910 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	22f5      	movs	r2, #245	; 0xf5
 800a90c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a90e:	e059      	b.n	800a9c4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a910:	7afb      	ldrb	r3, [r7, #11]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d103      	bne.n	800a91e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	22fb      	movs	r2, #251	; 0xfb
 800a91a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a91c:	e052      	b.n	800a9c4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	7a1b      	ldrb	r3, [r3, #8]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff f916 	bl	8009b60 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d006      	beq.n	800a94c <lwip_netconn_do_close+0x84>
 800a93e:	4b23      	ldr	r3, [pc, #140]	; (800a9cc <lwip_netconn_do_close+0x104>)
 800a940:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a944:	4922      	ldr	r1, [pc, #136]	; (800a9d0 <lwip_netconn_do_close+0x108>)
 800a946:	4823      	ldr	r0, [pc, #140]	; (800a9d4 <lwip_netconn_do_close+0x10c>)
 800a948:	f00b fac6 	bl	8015ed8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2204      	movs	r2, #4
 800a952:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2100      	movs	r1, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff f97a 	bl	8009c5c <lwip_netconn_do_close_internal>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d029      	beq.n	800a9c2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	785b      	ldrb	r3, [r3, #1]
 800a974:	2b04      	cmp	r3, #4
 800a976:	d006      	beq.n	800a986 <lwip_netconn_do_close+0xbe>
 800a978:	4b14      	ldr	r3, [pc, #80]	; (800a9cc <lwip_netconn_do_close+0x104>)
 800a97a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a97e:	4916      	ldr	r1, [pc, #88]	; (800a9d8 <lwip_netconn_do_close+0x110>)
 800a980:	4814      	ldr	r0, [pc, #80]	; (800a9d4 <lwip_netconn_do_close+0x10c>)
 800a982:	f00b faa9 	bl	8015ed8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a986:	4815      	ldr	r0, [pc, #84]	; (800a9dc <lwip_netconn_do_close+0x114>)
 800a988:	f00b f869 	bl	8015a5e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	330c      	adds	r3, #12
 800a992:	2100      	movs	r1, #0
 800a994:	4618      	mov	r0, r3
 800a996:	f00a ffc8 	bl	801592a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a99a:	4810      	ldr	r0, [pc, #64]	; (800a9dc <lwip_netconn_do_close+0x114>)
 800a99c:	f00b f850 	bl	8015a40 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	785b      	ldrb	r3, [r3, #1]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00b      	beq.n	800a9c2 <lwip_netconn_do_close+0xfa>
 800a9aa:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <lwip_netconn_do_close+0x104>)
 800a9ac:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a9b0:	4909      	ldr	r1, [pc, #36]	; (800a9d8 <lwip_netconn_do_close+0x110>)
 800a9b2:	4808      	ldr	r0, [pc, #32]	; (800a9d4 <lwip_netconn_do_close+0x10c>)
 800a9b4:	f00b fa90 	bl	8015ed8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a9b8:	e003      	b.n	800a9c2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	22f5      	movs	r2, #245	; 0xf5
 800a9be:	711a      	strb	r2, [r3, #4]
 800a9c0:	e000      	b.n	800a9c4 <lwip_netconn_do_close+0xfc>
      return;
 800a9c2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	080174fc 	.word	0x080174fc
 800a9d0:	0801783c 	.word	0x0801783c
 800a9d4:	08017540 	.word	0x08017540
 800a9d8:	08017858 	.word	0x08017858
 800a9dc:	200098b4 	.word	0x200098b4

0800a9e0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d013      	beq.n	800aa16 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00b      	beq.n	800aa0e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 fefe 	bl	800c7fc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	605a      	str	r2, [r3, #4]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	2005      	movs	r0, #5
 800aa12:	f001 f853 	bl	800babc <memp_free>
  }
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d108      	bne.n	800aa40 <netbuf_next+0x20>
 800aa2e:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <netbuf_next+0x54>)
 800aa30:	22e0      	movs	r2, #224	; 0xe0
 800aa32:	4911      	ldr	r1, [pc, #68]	; (800aa78 <netbuf_next+0x58>)
 800aa34:	4811      	ldr	r0, [pc, #68]	; (800aa7c <netbuf_next+0x5c>)
 800aa36:	f00b fa4f 	bl	8015ed8 <iprintf>
 800aa3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa3e:	e014      	b.n	800aa6a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d102      	bne.n	800aa50 <netbuf_next+0x30>
    return -1;
 800aa4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa4e:	e00c      	b.n	800aa6a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <netbuf_next+0x48>
    return 1;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <netbuf_next+0x4a>
  }
  return 0;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	080179f0 	.word	0x080179f0
 800aa78:	08017b50 	.word	0x08017b50
 800aa7c:	08017a40 	.word	0x08017a40

0800aa80 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800aa8a:	f008 fb89 	bl	80131a0 <sys_timeouts_sleeptime>
 800aa8e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa96:	d10b      	bne.n	800aab0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800aa98:	4813      	ldr	r0, [pc, #76]	; (800aae8 <tcpip_timeouts_mbox_fetch+0x68>)
 800aa9a:	f00a ffe0 	bl	8015a5e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f00a feb6 	bl	8015814 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800aaa8:	480f      	ldr	r0, [pc, #60]	; (800aae8 <tcpip_timeouts_mbox_fetch+0x68>)
 800aaaa:	f00a ffc9 	bl	8015a40 <sys_mutex_lock>
    return;
 800aaae:	e018      	b.n	800aae2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800aab6:	f008 fb39 	bl	801312c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aaba:	e7e6      	b.n	800aa8a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800aabc:	480a      	ldr	r0, [pc, #40]	; (800aae8 <tcpip_timeouts_mbox_fetch+0x68>)
 800aabe:	f00a ffce 	bl	8015a5e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f00a fea4 	bl	8015814 <sys_arch_mbox_fetch>
 800aacc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800aace:	4806      	ldr	r0, [pc, #24]	; (800aae8 <tcpip_timeouts_mbox_fetch+0x68>)
 800aad0:	f00a ffb6 	bl	8015a40 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aada:	d102      	bne.n	800aae2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800aadc:	f008 fb26 	bl	801312c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aae0:	e7d3      	b.n	800aa8a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	200098b4 	.word	0x200098b4

0800aaec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800aaf4:	4810      	ldr	r0, [pc, #64]	; (800ab38 <tcpip_thread+0x4c>)
 800aaf6:	f00a ffa3 	bl	8015a40 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800aafa:	4b10      	ldr	r3, [pc, #64]	; (800ab3c <tcpip_thread+0x50>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d005      	beq.n	800ab0e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ab02:	4b0e      	ldr	r3, [pc, #56]	; (800ab3c <tcpip_thread+0x50>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a0e      	ldr	r2, [pc, #56]	; (800ab40 <tcpip_thread+0x54>)
 800ab08:	6812      	ldr	r2, [r2, #0]
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ab0e:	f107 030c 	add.w	r3, r7, #12
 800ab12:	4619      	mov	r1, r3
 800ab14:	480b      	ldr	r0, [pc, #44]	; (800ab44 <tcpip_thread+0x58>)
 800ab16:	f7ff ffb3 	bl	800aa80 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ab20:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <tcpip_thread+0x5c>)
 800ab22:	2291      	movs	r2, #145	; 0x91
 800ab24:	4909      	ldr	r1, [pc, #36]	; (800ab4c <tcpip_thread+0x60>)
 800ab26:	480a      	ldr	r0, [pc, #40]	; (800ab50 <tcpip_thread+0x64>)
 800ab28:	f00b f9d6 	bl	8015ed8 <iprintf>
      continue;
 800ab2c:	e003      	b.n	800ab36 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 f80f 	bl	800ab54 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ab36:	e7ea      	b.n	800ab0e <tcpip_thread+0x22>
 800ab38:	200098b4 	.word	0x200098b4
 800ab3c:	200098a8 	.word	0x200098a8
 800ab40:	200098ac 	.word	0x200098ac
 800ab44:	200098b0 	.word	0x200098b0
 800ab48:	08017b88 	.word	0x08017b88
 800ab4c:	08017bb8 	.word	0x08017bb8
 800ab50:	08017bd8 	.word	0x08017bd8

0800ab54 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d026      	beq.n	800abb2 <tcpip_thread_handle_msg+0x5e>
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	dc2b      	bgt.n	800abc0 <tcpip_thread_handle_msg+0x6c>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <tcpip_thread_handle_msg+0x1e>
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d015      	beq.n	800ab9c <tcpip_thread_handle_msg+0x48>
 800ab70:	e026      	b.n	800abc0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6850      	ldr	r0, [r2, #4]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6892      	ldr	r2, [r2, #8]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4798      	blx	r3
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f001 fe35 	bl	800c7fc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	2008      	movs	r0, #8
 800ab96:	f000 ff91 	bl	800babc <memp_free>
      break;
 800ab9a:	e018      	b.n	800abce <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6892      	ldr	r2, [r2, #8]
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	2007      	movs	r0, #7
 800abac:	f000 ff86 	bl	800babc <memp_free>
      break;
 800abb0:	e00d      	b.n	800abce <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	6892      	ldr	r2, [r2, #8]
 800abba:	4610      	mov	r0, r2
 800abbc:	4798      	blx	r3
      break;
 800abbe:	e006      	b.n	800abce <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800abc0:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <tcpip_thread_handle_msg+0x84>)
 800abc2:	22cf      	movs	r2, #207	; 0xcf
 800abc4:	4905      	ldr	r1, [pc, #20]	; (800abdc <tcpip_thread_handle_msg+0x88>)
 800abc6:	4806      	ldr	r0, [pc, #24]	; (800abe0 <tcpip_thread_handle_msg+0x8c>)
 800abc8:	f00b f986 	bl	8015ed8 <iprintf>
      break;
 800abcc:	bf00      	nop
  }
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	08017b88 	.word	0x08017b88
 800abdc:	08017bb8 	.word	0x08017bb8
 800abe0:	08017bd8 	.word	0x08017bd8

0800abe4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800abf0:	481a      	ldr	r0, [pc, #104]	; (800ac5c <tcpip_inpkt+0x78>)
 800abf2:	f00a fe57 	bl	80158a4 <sys_mbox_valid>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d105      	bne.n	800ac08 <tcpip_inpkt+0x24>
 800abfc:	4b18      	ldr	r3, [pc, #96]	; (800ac60 <tcpip_inpkt+0x7c>)
 800abfe:	22fc      	movs	r2, #252	; 0xfc
 800ac00:	4918      	ldr	r1, [pc, #96]	; (800ac64 <tcpip_inpkt+0x80>)
 800ac02:	4819      	ldr	r0, [pc, #100]	; (800ac68 <tcpip_inpkt+0x84>)
 800ac04:	f00b f968 	bl	8015ed8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ac08:	2008      	movs	r0, #8
 800ac0a:	f000 fee1 	bl	800b9d0 <memp_malloc>
 800ac0e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d102      	bne.n	800ac1c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ac16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac1a:	e01a      	b.n	800ac52 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ac34:	6979      	ldr	r1, [r7, #20]
 800ac36:	4809      	ldr	r0, [pc, #36]	; (800ac5c <tcpip_inpkt+0x78>)
 800ac38:	f00a fdd2 	bl	80157e0 <sys_mbox_trypost>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d006      	beq.n	800ac50 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ac42:	6979      	ldr	r1, [r7, #20]
 800ac44:	2008      	movs	r0, #8
 800ac46:	f000 ff39 	bl	800babc <memp_free>
    return ERR_MEM;
 800ac4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac4e:	e000      	b.n	800ac52 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ac50:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	200098b0 	.word	0x200098b0
 800ac60:	08017b88 	.word	0x08017b88
 800ac64:	08017c00 	.word	0x08017c00
 800ac68:	08017bd8 	.word	0x08017bd8

0800ac6c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac7c:	f003 0318 	and.w	r3, r3, #24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d006      	beq.n	800ac92 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ac84:	4a08      	ldr	r2, [pc, #32]	; (800aca8 <tcpip_input+0x3c>)
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff ffab 	bl	800abe4 <tcpip_inpkt>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	e005      	b.n	800ac9e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ac92:	4a06      	ldr	r2, [pc, #24]	; (800acac <tcpip_input+0x40>)
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff ffa4 	bl	800abe4 <tcpip_inpkt>
 800ac9c:	4603      	mov	r3, r0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	080155dd 	.word	0x080155dd
 800acac:	080144f9 	.word	0x080144f9

0800acb0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800acba:	4819      	ldr	r0, [pc, #100]	; (800ad20 <tcpip_try_callback+0x70>)
 800acbc:	f00a fdf2 	bl	80158a4 <sys_mbox_valid>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <tcpip_try_callback+0x24>
 800acc6:	4b17      	ldr	r3, [pc, #92]	; (800ad24 <tcpip_try_callback+0x74>)
 800acc8:	f240 125d 	movw	r2, #349	; 0x15d
 800accc:	4916      	ldr	r1, [pc, #88]	; (800ad28 <tcpip_try_callback+0x78>)
 800acce:	4817      	ldr	r0, [pc, #92]	; (800ad2c <tcpip_try_callback+0x7c>)
 800acd0:	f00b f902 	bl	8015ed8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800acd4:	2007      	movs	r0, #7
 800acd6:	f000 fe7b 	bl	800b9d0 <memp_malloc>
 800acda:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ace6:	e017      	b.n	800ad18 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2201      	movs	r2, #1
 800acec:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	4808      	ldr	r0, [pc, #32]	; (800ad20 <tcpip_try_callback+0x70>)
 800acfe:	f00a fd6f 	bl	80157e0 <sys_mbox_trypost>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d006      	beq.n	800ad16 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ad08:	68f9      	ldr	r1, [r7, #12]
 800ad0a:	2007      	movs	r0, #7
 800ad0c:	f000 fed6 	bl	800babc <memp_free>
    return ERR_MEM;
 800ad10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad14:	e000      	b.n	800ad18 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	200098b0 	.word	0x200098b0
 800ad24:	08017b88 	.word	0x08017b88
 800ad28:	08017c00 	.word	0x08017c00
 800ad2c:	08017bd8 	.word	0x08017bd8

0800ad30 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ad3c:	4806      	ldr	r0, [pc, #24]	; (800ad58 <tcpip_send_msg_wait_sem+0x28>)
 800ad3e:	f00a fe7f 	bl	8015a40 <sys_mutex_lock>
  fn(apimsg);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	68b8      	ldr	r0, [r7, #8]
 800ad46:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ad48:	4803      	ldr	r0, [pc, #12]	; (800ad58 <tcpip_send_msg_wait_sem+0x28>)
 800ad4a:	f00a fe88 	bl	8015a5e <sys_mutex_unlock>
  return ERR_OK;
 800ad4e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	200098b4 	.word	0x200098b4

0800ad5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af02      	add	r7, sp, #8
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ad66:	f000 f98b 	bl	800b080 <lwip_init>

  tcpip_init_done = initfunc;
 800ad6a:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <tcpip_init+0x6c>)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ad70:	4a16      	ldr	r2, [pc, #88]	; (800adcc <tcpip_init+0x70>)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ad76:	2106      	movs	r1, #6
 800ad78:	4815      	ldr	r0, [pc, #84]	; (800add0 <tcpip_init+0x74>)
 800ad7a:	f00a fd05 	bl	8015788 <sys_mbox_new>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ad84:	4b13      	ldr	r3, [pc, #76]	; (800add4 <tcpip_init+0x78>)
 800ad86:	f240 2261 	movw	r2, #609	; 0x261
 800ad8a:	4913      	ldr	r1, [pc, #76]	; (800add8 <tcpip_init+0x7c>)
 800ad8c:	4813      	ldr	r0, [pc, #76]	; (800addc <tcpip_init+0x80>)
 800ad8e:	f00b f8a3 	bl	8015ed8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ad92:	4813      	ldr	r0, [pc, #76]	; (800ade0 <tcpip_init+0x84>)
 800ad94:	f00a fe3e 	bl	8015a14 <sys_mutex_new>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d006      	beq.n	800adac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	; (800add4 <tcpip_init+0x78>)
 800ada0:	f240 2265 	movw	r2, #613	; 0x265
 800ada4:	490f      	ldr	r1, [pc, #60]	; (800ade4 <tcpip_init+0x88>)
 800ada6:	480d      	ldr	r0, [pc, #52]	; (800addc <tcpip_init+0x80>)
 800ada8:	f00b f896 	bl	8015ed8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800adac:	2318      	movs	r3, #24
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb4:	2200      	movs	r2, #0
 800adb6:	490c      	ldr	r1, [pc, #48]	; (800ade8 <tcpip_init+0x8c>)
 800adb8:	480c      	ldr	r0, [pc, #48]	; (800adec <tcpip_init+0x90>)
 800adba:	f00a fe5d 	bl	8015a78 <sys_thread_new>
}
 800adbe:	bf00      	nop
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	200098a8 	.word	0x200098a8
 800adcc:	200098ac 	.word	0x200098ac
 800add0:	200098b0 	.word	0x200098b0
 800add4:	08017b88 	.word	0x08017b88
 800add8:	08017c10 	.word	0x08017c10
 800addc:	08017bd8 	.word	0x08017bd8
 800ade0:	200098b4 	.word	0x200098b4
 800ade4:	08017c34 	.word	0x08017c34
 800ade8:	0800aaed 	.word	0x0800aaed
 800adec:	08017c58 	.word	0x08017c58

0800adf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800adfa:	88fb      	ldrh	r3, [r7, #6]
 800adfc:	021b      	lsls	r3, r3, #8
 800adfe:	b21a      	sxth	r2, r3
 800ae00:	88fb      	ldrh	r3, [r7, #6]
 800ae02:	0a1b      	lsrs	r3, r3, #8
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	b21b      	sxth	r3, r3
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	b21b      	sxth	r3, r3
 800ae0c:	b29b      	uxth	r3, r3
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	061a      	lsls	r2, r3, #24
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	0a1b      	lsrs	r3, r3, #8
 800ae34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	0e1b      	lsrs	r3, r3, #24
 800ae3e:	4313      	orrs	r3, r2
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b089      	sub	sp, #36	; 0x24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	f003 0301 	and.w	r3, r3, #1
 800ae68:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00d      	beq.n	800ae8c <lwip_standard_chksum+0x40>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dd0a      	ble.n	800ae8c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ae76:	69fa      	ldr	r2, [r7, #28]
 800ae78:	1c53      	adds	r3, r2, #1
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	f107 030e 	add.w	r3, r7, #14
 800ae80:	3301      	adds	r3, #1
 800ae82:	7812      	ldrb	r2, [r2, #0]
 800ae84:	701a      	strb	r2, [r3, #0]
    len--;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ae90:	e00a      	b.n	800aea8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	1c9a      	adds	r2, r3, #2
 800ae96:	61ba      	str	r2, [r7, #24]
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	4413      	add	r3, r2
 800aea0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	3b02      	subs	r3, #2
 800aea6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	dcf1      	bgt.n	800ae92 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dd04      	ble.n	800aebe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800aeb4:	f107 030e 	add.w	r3, r7, #14
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	7812      	ldrb	r2, [r2, #0]
 800aebc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800aebe:	89fb      	ldrh	r3, [r7, #14]
 800aec0:	461a      	mov	r2, r3
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	4413      	add	r3, r2
 800aec6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	0c1a      	lsrs	r2, r3, #16
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	4413      	add	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	0c1a      	lsrs	r2, r3, #16
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	4413      	add	r3, r2
 800aede:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	4313      	orrs	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	b29b      	uxth	r3, r3
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3724      	adds	r7, #36	; 0x24
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b086      	sub	sp, #24
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	607b      	str	r3, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	72fb      	strb	r3, [r7, #11]
 800af14:	4613      	mov	r3, r2
 800af16:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e02b      	b.n	800af7a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	895b      	ldrh	r3, [r3, #10]
 800af2a:	4619      	mov	r1, r3
 800af2c:	4610      	mov	r0, r2
 800af2e:	f7ff ff8d 	bl	800ae4c <lwip_standard_chksum>
 800af32:	4603      	mov	r3, r0
 800af34:	461a      	mov	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	0c1a      	lsrs	r2, r3, #16
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	b29b      	uxth	r3, r3
 800af44:	4413      	add	r3, r2
 800af46:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	895b      	ldrh	r3, [r3, #10]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	b29b      	uxth	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00e      	beq.n	800af74 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bf0c      	ite	eq
 800af5c:	2301      	moveq	r3, #1
 800af5e:	2300      	movne	r3, #0
 800af60:	b2db      	uxtb	r3, r3
 800af62:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	021b      	lsls	r3, r3, #8
 800af68:	b29a      	uxth	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	0a1b      	lsrs	r3, r3, #8
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	4313      	orrs	r3, r2
 800af72:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	617b      	str	r3, [r7, #20]
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1d0      	bne.n	800af22 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d007      	beq.n	800af96 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	021b      	lsls	r3, r3, #8
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	0a1b      	lsrs	r3, r3, #8
 800af90:	b2db      	uxtb	r3, r3
 800af92:	4313      	orrs	r3, r2
 800af94:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff ff28 	bl	800adf0 <lwip_htons>
 800afa0:	4603      	mov	r3, r0
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4413      	add	r3, r2
 800afa8:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800afaa:	893b      	ldrh	r3, [r7, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff ff1f 	bl	800adf0 <lwip_htons>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461a      	mov	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4413      	add	r3, r2
 800afba:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	0c1a      	lsrs	r2, r3, #16
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	4413      	add	r3, r2
 800afc6:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	0c1a      	lsrs	r2, r3, #16
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	b29b      	uxth	r3, r3
 800afd0:	4413      	add	r3, r2
 800afd2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	43db      	mvns	r3, r3
 800afda:	b29b      	uxth	r3, r3
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	607b      	str	r3, [r7, #4]
 800afee:	460b      	mov	r3, r1
 800aff0:	72fb      	strb	r3, [r7, #11]
 800aff2:	4613      	mov	r3, r2
 800aff4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	b29b      	uxth	r3, r3
 800b000:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	0c1b      	lsrs	r3, r3, #16
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	4413      	add	r3, r2
 800b00a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	b29b      	uxth	r3, r3
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4413      	add	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	0c1b      	lsrs	r3, r3, #16
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4413      	add	r3, r2
 800b024:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	0c1a      	lsrs	r2, r3, #16
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	4413      	add	r3, r2
 800b030:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	0c1a      	lsrs	r2, r3, #16
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	4413      	add	r3, r2
 800b03c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800b03e:	893a      	ldrh	r2, [r7, #8]
 800b040:	7af9      	ldrb	r1, [r7, #11]
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7ff ff5e 	bl	800af06 <inet_cksum_pseudo_base>
 800b04a:	4603      	mov	r3, r0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af02      	add	r7, sp, #8
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	607b      	str	r3, [r7, #4]
 800b05e:	460b      	mov	r3, r1
 800b060:	72fb      	strb	r3, [r7, #11]
 800b062:	4613      	mov	r3, r2
 800b064:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800b066:	893a      	ldrh	r2, [r7, #8]
 800b068:	7af9      	ldrb	r1, [r7, #11]
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff ffb7 	bl	800afe4 <inet_chksum_pseudo>
 800b076:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b08a:	f00a fcb7 	bl	80159fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b08e:	f000 f8d3 	bl	800b238 <mem_init>
  memp_init();
 800b092:	f000 fc2f 	bl	800b8f4 <memp_init>
  pbuf_init();
  netif_init();
 800b096:	f000 fd3b 	bl	800bb10 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b09a:	f001 fe49 	bl	800cd30 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b09e:	f007 fffd 	bl	801309c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b0a2:	bf00      	nop
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <ptr_to_mem+0x20>)
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	88fb      	ldrh	r3, [r7, #6]
 800b0bc:	4413      	add	r3, r2
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	2000e8e4 	.word	0x2000e8e4

0800b0d0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <mem_to_ptr+0x20>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	b29b      	uxth	r3, r3
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	2000e8e4 	.word	0x2000e8e4

0800b0f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b0fc:	4b45      	ldr	r3, [pc, #276]	; (800b214 <plug_holes+0x120>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d206      	bcs.n	800b114 <plug_holes+0x20>
 800b106:	4b44      	ldr	r3, [pc, #272]	; (800b218 <plug_holes+0x124>)
 800b108:	f240 12df 	movw	r2, #479	; 0x1df
 800b10c:	4943      	ldr	r1, [pc, #268]	; (800b21c <plug_holes+0x128>)
 800b10e:	4844      	ldr	r0, [pc, #272]	; (800b220 <plug_holes+0x12c>)
 800b110:	f00a fee2 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b114:	4b43      	ldr	r3, [pc, #268]	; (800b224 <plug_holes+0x130>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d306      	bcc.n	800b12c <plug_holes+0x38>
 800b11e:	4b3e      	ldr	r3, [pc, #248]	; (800b218 <plug_holes+0x124>)
 800b120:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b124:	4940      	ldr	r1, [pc, #256]	; (800b228 <plug_holes+0x134>)
 800b126:	483e      	ldr	r0, [pc, #248]	; (800b220 <plug_holes+0x12c>)
 800b128:	f00a fed6 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	791b      	ldrb	r3, [r3, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <plug_holes+0x4e>
 800b134:	4b38      	ldr	r3, [pc, #224]	; (800b218 <plug_holes+0x124>)
 800b136:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b13a:	493c      	ldr	r1, [pc, #240]	; (800b22c <plug_holes+0x138>)
 800b13c:	4838      	ldr	r0, [pc, #224]	; (800b220 <plug_holes+0x12c>)
 800b13e:	f00a fecb 	bl	8015ed8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b14a:	d906      	bls.n	800b15a <plug_holes+0x66>
 800b14c:	4b32      	ldr	r3, [pc, #200]	; (800b218 <plug_holes+0x124>)
 800b14e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b152:	4937      	ldr	r1, [pc, #220]	; (800b230 <plug_holes+0x13c>)
 800b154:	4832      	ldr	r0, [pc, #200]	; (800b220 <plug_holes+0x12c>)
 800b156:	f00a febf 	bl	8015ed8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff ffa4 	bl	800b0ac <ptr_to_mem>
 800b164:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d024      	beq.n	800b1b8 <plug_holes+0xc4>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	791b      	ldrb	r3, [r3, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d120      	bne.n	800b1b8 <plug_holes+0xc4>
 800b176:	4b2b      	ldr	r3, [pc, #172]	; (800b224 <plug_holes+0x130>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d01b      	beq.n	800b1b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b180:	4b2c      	ldr	r3, [pc, #176]	; (800b234 <plug_holes+0x140>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	429a      	cmp	r2, r3
 800b188:	d102      	bne.n	800b190 <plug_holes+0x9c>
      lfree = mem;
 800b18a:	4a2a      	ldr	r2, [pc, #168]	; (800b234 <plug_holes+0x140>)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	881a      	ldrh	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	881b      	ldrh	r3, [r3, #0]
 800b19c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b1a0:	d00a      	beq.n	800b1b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff ff80 	bl	800b0ac <ptr_to_mem>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7ff ff8e 	bl	800b0d0 <mem_to_ptr>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	885b      	ldrh	r3, [r3, #2]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7ff ff75 	bl	800b0ac <ptr_to_mem>
 800b1c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d01f      	beq.n	800b20c <plug_holes+0x118>
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	791b      	ldrb	r3, [r3, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d11b      	bne.n	800b20c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b1d4:	4b17      	ldr	r3, [pc, #92]	; (800b234 <plug_holes+0x140>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d102      	bne.n	800b1e4 <plug_holes+0xf0>
      lfree = pmem;
 800b1de:	4a15      	ldr	r2, [pc, #84]	; (800b234 <plug_holes+0x140>)
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	881a      	ldrh	r2, [r3, #0]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b1f4:	d00a      	beq.n	800b20c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff ff56 	bl	800b0ac <ptr_to_mem>
 800b200:	4604      	mov	r4, r0
 800b202:	68b8      	ldr	r0, [r7, #8]
 800b204:	f7ff ff64 	bl	800b0d0 <mem_to_ptr>
 800b208:	4603      	mov	r3, r0
 800b20a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b20c:	bf00      	nop
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	bd90      	pop	{r4, r7, pc}
 800b214:	2000e8e4 	.word	0x2000e8e4
 800b218:	08017c68 	.word	0x08017c68
 800b21c:	08017c98 	.word	0x08017c98
 800b220:	08017cb0 	.word	0x08017cb0
 800b224:	2000e8e8 	.word	0x2000e8e8
 800b228:	08017cd8 	.word	0x08017cd8
 800b22c:	08017cf4 	.word	0x08017cf4
 800b230:	08017d10 	.word	0x08017d10
 800b234:	2000e8f0 	.word	0x2000e8f0

0800b238 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b23e:	4b1f      	ldr	r3, [pc, #124]	; (800b2bc <mem_init+0x84>)
 800b240:	3303      	adds	r3, #3
 800b242:	f023 0303 	bic.w	r3, r3, #3
 800b246:	461a      	mov	r2, r3
 800b248:	4b1d      	ldr	r3, [pc, #116]	; (800b2c0 <mem_init+0x88>)
 800b24a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b24c:	4b1c      	ldr	r3, [pc, #112]	; (800b2c0 <mem_init+0x88>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800b258:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b266:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800b26a:	f7ff ff1f 	bl	800b0ac <ptr_to_mem>
 800b26e:	4603      	mov	r3, r0
 800b270:	4a14      	ldr	r2, [pc, #80]	; (800b2c4 <mem_init+0x8c>)
 800b272:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b274:	4b13      	ldr	r3, [pc, #76]	; (800b2c4 <mem_init+0x8c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2201      	movs	r2, #1
 800b27a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b27c:	4b11      	ldr	r3, [pc, #68]	; (800b2c4 <mem_init+0x8c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800b284:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b286:	4b0f      	ldr	r3, [pc, #60]	; (800b2c4 <mem_init+0x8c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800b28e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <mem_init+0x88>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a0c      	ldr	r2, [pc, #48]	; (800b2c8 <mem_init+0x90>)
 800b296:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b298:	480c      	ldr	r0, [pc, #48]	; (800b2cc <mem_init+0x94>)
 800b29a:	f00a fbbb 	bl	8015a14 <sys_mutex_new>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d006      	beq.n	800b2b2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <mem_init+0x98>)
 800b2a6:	f240 221f 	movw	r2, #543	; 0x21f
 800b2aa:	490a      	ldr	r1, [pc, #40]	; (800b2d4 <mem_init+0x9c>)
 800b2ac:	480a      	ldr	r0, [pc, #40]	; (800b2d8 <mem_init+0xa0>)
 800b2ae:	f00a fe13 	bl	8015ed8 <iprintf>
  }
}
 800b2b2:	bf00      	nop
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200098d0 	.word	0x200098d0
 800b2c0:	2000e8e4 	.word	0x2000e8e4
 800b2c4:	2000e8e8 	.word	0x2000e8e8
 800b2c8:	2000e8f0 	.word	0x2000e8f0
 800b2cc:	2000e8ec 	.word	0x2000e8ec
 800b2d0:	08017c68 	.word	0x08017c68
 800b2d4:	08017d3c 	.word	0x08017d3c
 800b2d8:	08017cb0 	.word	0x08017cb0

0800b2dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff fef3 	bl	800b0d0 <mem_to_ptr>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff feda 	bl	800b0ac <ptr_to_mem>
 800b2f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	885b      	ldrh	r3, [r3, #2]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff fed4 	bl	800b0ac <ptr_to_mem>
 800b304:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b30e:	d818      	bhi.n	800b342 <mem_link_valid+0x66>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	885b      	ldrh	r3, [r3, #2]
 800b314:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b318:	d813      	bhi.n	800b342 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b31e:	8afa      	ldrh	r2, [r7, #22]
 800b320:	429a      	cmp	r2, r3
 800b322:	d004      	beq.n	800b32e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	8afa      	ldrh	r2, [r7, #22]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d109      	bne.n	800b342 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b32e:	4b08      	ldr	r3, [pc, #32]	; (800b350 <mem_link_valid+0x74>)
 800b330:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	429a      	cmp	r2, r3
 800b336:	d006      	beq.n	800b346 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	885b      	ldrh	r3, [r3, #2]
 800b33c:	8afa      	ldrh	r2, [r7, #22]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d001      	beq.n	800b346 <mem_link_valid+0x6a>
    return 0;
 800b342:	2300      	movs	r3, #0
 800b344:	e000      	b.n	800b348 <mem_link_valid+0x6c>
  }
  return 1;
 800b346:	2301      	movs	r3, #1
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	2000e8e8 	.word	0x2000e8e8

0800b354 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d070      	beq.n	800b444 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f003 0303 	and.w	r3, r3, #3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00d      	beq.n	800b388 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b36c:	4b37      	ldr	r3, [pc, #220]	; (800b44c <mem_free+0xf8>)
 800b36e:	f240 2273 	movw	r2, #627	; 0x273
 800b372:	4937      	ldr	r1, [pc, #220]	; (800b450 <mem_free+0xfc>)
 800b374:	4837      	ldr	r0, [pc, #220]	; (800b454 <mem_free+0x100>)
 800b376:	f00a fdaf 	bl	8015ed8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b37a:	f00a fb9d 	bl	8015ab8 <sys_arch_protect>
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f00a fba7 	bl	8015ad4 <sys_arch_unprotect>
    return;
 800b386:	e05e      	b.n	800b446 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3b08      	subs	r3, #8
 800b38c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b38e:	4b32      	ldr	r3, [pc, #200]	; (800b458 <mem_free+0x104>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69fa      	ldr	r2, [r7, #28]
 800b394:	429a      	cmp	r2, r3
 800b396:	d306      	bcc.n	800b3a6 <mem_free+0x52>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f103 020c 	add.w	r2, r3, #12
 800b39e:	4b2f      	ldr	r3, [pc, #188]	; (800b45c <mem_free+0x108>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d90d      	bls.n	800b3c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b3a6:	4b29      	ldr	r3, [pc, #164]	; (800b44c <mem_free+0xf8>)
 800b3a8:	f240 227f 	movw	r2, #639	; 0x27f
 800b3ac:	492c      	ldr	r1, [pc, #176]	; (800b460 <mem_free+0x10c>)
 800b3ae:	4829      	ldr	r0, [pc, #164]	; (800b454 <mem_free+0x100>)
 800b3b0:	f00a fd92 	bl	8015ed8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b3b4:	f00a fb80 	bl	8015ab8 <sys_arch_protect>
 800b3b8:	6138      	str	r0, [r7, #16]
 800b3ba:	6938      	ldr	r0, [r7, #16]
 800b3bc:	f00a fb8a 	bl	8015ad4 <sys_arch_unprotect>
    return;
 800b3c0:	e041      	b.n	800b446 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b3c2:	4828      	ldr	r0, [pc, #160]	; (800b464 <mem_free+0x110>)
 800b3c4:	f00a fb3c 	bl	8015a40 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	791b      	ldrb	r3, [r3, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d110      	bne.n	800b3f2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b3d0:	4b1e      	ldr	r3, [pc, #120]	; (800b44c <mem_free+0xf8>)
 800b3d2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b3d6:	4924      	ldr	r1, [pc, #144]	; (800b468 <mem_free+0x114>)
 800b3d8:	481e      	ldr	r0, [pc, #120]	; (800b454 <mem_free+0x100>)
 800b3da:	f00a fd7d 	bl	8015ed8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b3de:	4821      	ldr	r0, [pc, #132]	; (800b464 <mem_free+0x110>)
 800b3e0:	f00a fb3d 	bl	8015a5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b3e4:	f00a fb68 	bl	8015ab8 <sys_arch_protect>
 800b3e8:	6178      	str	r0, [r7, #20]
 800b3ea:	6978      	ldr	r0, [r7, #20]
 800b3ec:	f00a fb72 	bl	8015ad4 <sys_arch_unprotect>
    return;
 800b3f0:	e029      	b.n	800b446 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b3f2:	69f8      	ldr	r0, [r7, #28]
 800b3f4:	f7ff ff72 	bl	800b2dc <mem_link_valid>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d110      	bne.n	800b420 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b3fe:	4b13      	ldr	r3, [pc, #76]	; (800b44c <mem_free+0xf8>)
 800b400:	f240 2295 	movw	r2, #661	; 0x295
 800b404:	4919      	ldr	r1, [pc, #100]	; (800b46c <mem_free+0x118>)
 800b406:	4813      	ldr	r0, [pc, #76]	; (800b454 <mem_free+0x100>)
 800b408:	f00a fd66 	bl	8015ed8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b40c:	4815      	ldr	r0, [pc, #84]	; (800b464 <mem_free+0x110>)
 800b40e:	f00a fb26 	bl	8015a5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b412:	f00a fb51 	bl	8015ab8 <sys_arch_protect>
 800b416:	61b8      	str	r0, [r7, #24]
 800b418:	69b8      	ldr	r0, [r7, #24]
 800b41a:	f00a fb5b 	bl	8015ad4 <sys_arch_unprotect>
    return;
 800b41e:	e012      	b.n	800b446 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	2200      	movs	r2, #0
 800b424:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b426:	4b12      	ldr	r3, [pc, #72]	; (800b470 <mem_free+0x11c>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	69fa      	ldr	r2, [r7, #28]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d202      	bcs.n	800b436 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b430:	4a0f      	ldr	r2, [pc, #60]	; (800b470 <mem_free+0x11c>)
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b436:	69f8      	ldr	r0, [r7, #28]
 800b438:	f7ff fe5c 	bl	800b0f4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b43c:	4809      	ldr	r0, [pc, #36]	; (800b464 <mem_free+0x110>)
 800b43e:	f00a fb0e 	bl	8015a5e <sys_mutex_unlock>
 800b442:	e000      	b.n	800b446 <mem_free+0xf2>
    return;
 800b444:	bf00      	nop
}
 800b446:	3720      	adds	r7, #32
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	08017c68 	.word	0x08017c68
 800b450:	08017d58 	.word	0x08017d58
 800b454:	08017cb0 	.word	0x08017cb0
 800b458:	2000e8e4 	.word	0x2000e8e4
 800b45c:	2000e8e8 	.word	0x2000e8e8
 800b460:	08017d7c 	.word	0x08017d7c
 800b464:	2000e8ec 	.word	0x2000e8ec
 800b468:	08017d98 	.word	0x08017d98
 800b46c:	08017dc0 	.word	0x08017dc0
 800b470:	2000e8f0 	.word	0x2000e8f0

0800b474 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b480:	887b      	ldrh	r3, [r7, #2]
 800b482:	3303      	adds	r3, #3
 800b484:	b29b      	uxth	r3, r3
 800b486:	f023 0303 	bic.w	r3, r3, #3
 800b48a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b48c:	8bfb      	ldrh	r3, [r7, #30]
 800b48e:	2b0b      	cmp	r3, #11
 800b490:	d801      	bhi.n	800b496 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b492:	230c      	movs	r3, #12
 800b494:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b496:	8bfb      	ldrh	r3, [r7, #30]
 800b498:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b49c:	d803      	bhi.n	800b4a6 <mem_trim+0x32>
 800b49e:	8bfa      	ldrh	r2, [r7, #30]
 800b4a0:	887b      	ldrh	r3, [r7, #2]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d201      	bcs.n	800b4aa <mem_trim+0x36>
    return NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	e0d8      	b.n	800b65c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b4aa:	4b6e      	ldr	r3, [pc, #440]	; (800b664 <mem_trim+0x1f0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d304      	bcc.n	800b4be <mem_trim+0x4a>
 800b4b4:	4b6c      	ldr	r3, [pc, #432]	; (800b668 <mem_trim+0x1f4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d306      	bcc.n	800b4cc <mem_trim+0x58>
 800b4be:	4b6b      	ldr	r3, [pc, #428]	; (800b66c <mem_trim+0x1f8>)
 800b4c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b4c4:	496a      	ldr	r1, [pc, #424]	; (800b670 <mem_trim+0x1fc>)
 800b4c6:	486b      	ldr	r0, [pc, #428]	; (800b674 <mem_trim+0x200>)
 800b4c8:	f00a fd06 	bl	8015ed8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b4cc:	4b65      	ldr	r3, [pc, #404]	; (800b664 <mem_trim+0x1f0>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d304      	bcc.n	800b4e0 <mem_trim+0x6c>
 800b4d6:	4b64      	ldr	r3, [pc, #400]	; (800b668 <mem_trim+0x1f4>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d307      	bcc.n	800b4f0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b4e0:	f00a faea 	bl	8015ab8 <sys_arch_protect>
 800b4e4:	60b8      	str	r0, [r7, #8]
 800b4e6:	68b8      	ldr	r0, [r7, #8]
 800b4e8:	f00a faf4 	bl	8015ad4 <sys_arch_unprotect>
    return rmem;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	e0b5      	b.n	800b65c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	3b08      	subs	r3, #8
 800b4f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b4f6:	69b8      	ldr	r0, [r7, #24]
 800b4f8:	f7ff fdea 	bl	800b0d0 <mem_to_ptr>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	881a      	ldrh	r2, [r3, #0]
 800b504:	8afb      	ldrh	r3, [r7, #22]
 800b506:	1ad3      	subs	r3, r2, r3
 800b508:	b29b      	uxth	r3, r3
 800b50a:	3b08      	subs	r3, #8
 800b50c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b50e:	8bfa      	ldrh	r2, [r7, #30]
 800b510:	8abb      	ldrh	r3, [r7, #20]
 800b512:	429a      	cmp	r2, r3
 800b514:	d906      	bls.n	800b524 <mem_trim+0xb0>
 800b516:	4b55      	ldr	r3, [pc, #340]	; (800b66c <mem_trim+0x1f8>)
 800b518:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b51c:	4956      	ldr	r1, [pc, #344]	; (800b678 <mem_trim+0x204>)
 800b51e:	4855      	ldr	r0, [pc, #340]	; (800b674 <mem_trim+0x200>)
 800b520:	f00a fcda 	bl	8015ed8 <iprintf>
  if (newsize > size) {
 800b524:	8bfa      	ldrh	r2, [r7, #30]
 800b526:	8abb      	ldrh	r3, [r7, #20]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d901      	bls.n	800b530 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b52c:	2300      	movs	r3, #0
 800b52e:	e095      	b.n	800b65c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b530:	8bfa      	ldrh	r2, [r7, #30]
 800b532:	8abb      	ldrh	r3, [r7, #20]
 800b534:	429a      	cmp	r2, r3
 800b536:	d101      	bne.n	800b53c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	e08f      	b.n	800b65c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b53c:	484f      	ldr	r0, [pc, #316]	; (800b67c <mem_trim+0x208>)
 800b53e:	f00a fa7f 	bl	8015a40 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff fdb0 	bl	800b0ac <ptr_to_mem>
 800b54c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	791b      	ldrb	r3, [r3, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d13f      	bne.n	800b5d6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b55e:	d106      	bne.n	800b56e <mem_trim+0xfa>
 800b560:	4b42      	ldr	r3, [pc, #264]	; (800b66c <mem_trim+0x1f8>)
 800b562:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b566:	4946      	ldr	r1, [pc, #280]	; (800b680 <mem_trim+0x20c>)
 800b568:	4842      	ldr	r0, [pc, #264]	; (800b674 <mem_trim+0x200>)
 800b56a:	f00a fcb5 	bl	8015ed8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b574:	8afa      	ldrh	r2, [r7, #22]
 800b576:	8bfb      	ldrh	r3, [r7, #30]
 800b578:	4413      	add	r3, r2
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	3308      	adds	r3, #8
 800b57e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b580:	4b40      	ldr	r3, [pc, #256]	; (800b684 <mem_trim+0x210>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	429a      	cmp	r2, r3
 800b588:	d106      	bne.n	800b598 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b58a:	89fb      	ldrh	r3, [r7, #14]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff fd8d 	bl	800b0ac <ptr_to_mem>
 800b592:	4603      	mov	r3, r0
 800b594:	4a3b      	ldr	r2, [pc, #236]	; (800b684 <mem_trim+0x210>)
 800b596:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b598:	89fb      	ldrh	r3, [r7, #14]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7ff fd86 	bl	800b0ac <ptr_to_mem>
 800b5a0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	89ba      	ldrh	r2, [r7, #12]
 800b5ac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	8afa      	ldrh	r2, [r7, #22]
 800b5b2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	89fa      	ldrh	r2, [r7, #14]
 800b5b8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b5c2:	d047      	beq.n	800b654 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fd6f 	bl	800b0ac <ptr_to_mem>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	89fb      	ldrh	r3, [r7, #14]
 800b5d2:	8053      	strh	r3, [r2, #2]
 800b5d4:	e03e      	b.n	800b654 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b5d6:	8bfb      	ldrh	r3, [r7, #30]
 800b5d8:	f103 0214 	add.w	r2, r3, #20
 800b5dc:	8abb      	ldrh	r3, [r7, #20]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d838      	bhi.n	800b654 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b5e2:	8afa      	ldrh	r2, [r7, #22]
 800b5e4:	8bfb      	ldrh	r3, [r7, #30]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b5f6:	d106      	bne.n	800b606 <mem_trim+0x192>
 800b5f8:	4b1c      	ldr	r3, [pc, #112]	; (800b66c <mem_trim+0x1f8>)
 800b5fa:	f240 3216 	movw	r2, #790	; 0x316
 800b5fe:	4920      	ldr	r1, [pc, #128]	; (800b680 <mem_trim+0x20c>)
 800b600:	481c      	ldr	r0, [pc, #112]	; (800b674 <mem_trim+0x200>)
 800b602:	f00a fc69 	bl	8015ed8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b606:	89fb      	ldrh	r3, [r7, #14]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fd4f 	bl	800b0ac <ptr_to_mem>
 800b60e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b610:	4b1c      	ldr	r3, [pc, #112]	; (800b684 <mem_trim+0x210>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	429a      	cmp	r2, r3
 800b618:	d202      	bcs.n	800b620 <mem_trim+0x1ac>
      lfree = mem2;
 800b61a:	4a1a      	ldr	r2, [pc, #104]	; (800b684 <mem_trim+0x210>)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	2200      	movs	r2, #0
 800b624:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	881a      	ldrh	r2, [r3, #0]
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	8afa      	ldrh	r2, [r7, #22]
 800b632:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	89fa      	ldrh	r2, [r7, #14]
 800b638:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b642:	d007      	beq.n	800b654 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff fd2f 	bl	800b0ac <ptr_to_mem>
 800b64e:	4602      	mov	r2, r0
 800b650:	89fb      	ldrh	r3, [r7, #14]
 800b652:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b654:	4809      	ldr	r0, [pc, #36]	; (800b67c <mem_trim+0x208>)
 800b656:	f00a fa02 	bl	8015a5e <sys_mutex_unlock>
  return rmem;
 800b65a:	687b      	ldr	r3, [r7, #4]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	2000e8e4 	.word	0x2000e8e4
 800b668:	2000e8e8 	.word	0x2000e8e8
 800b66c:	08017c68 	.word	0x08017c68
 800b670:	08017df4 	.word	0x08017df4
 800b674:	08017cb0 	.word	0x08017cb0
 800b678:	08017e0c 	.word	0x08017e0c
 800b67c:	2000e8ec 	.word	0x2000e8ec
 800b680:	08017e2c 	.word	0x08017e2c
 800b684:	2000e8f0 	.word	0x2000e8f0

0800b688 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b692:	88fb      	ldrh	r3, [r7, #6]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <mem_malloc+0x14>
    return NULL;
 800b698:	2300      	movs	r3, #0
 800b69a:	e0e2      	b.n	800b862 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b69c:	88fb      	ldrh	r3, [r7, #6]
 800b69e:	3303      	adds	r3, #3
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	f023 0303 	bic.w	r3, r3, #3
 800b6a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b6a8:	8bbb      	ldrh	r3, [r7, #28]
 800b6aa:	2b0b      	cmp	r3, #11
 800b6ac:	d801      	bhi.n	800b6b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b6b2:	8bbb      	ldrh	r3, [r7, #28]
 800b6b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b6b8:	d803      	bhi.n	800b6c2 <mem_malloc+0x3a>
 800b6ba:	8bba      	ldrh	r2, [r7, #28]
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d201      	bcs.n	800b6c6 <mem_malloc+0x3e>
    return NULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e0cd      	b.n	800b862 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b6c6:	4869      	ldr	r0, [pc, #420]	; (800b86c <mem_malloc+0x1e4>)
 800b6c8:	f00a f9ba 	bl	8015a40 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b6cc:	4b68      	ldr	r3, [pc, #416]	; (800b870 <mem_malloc+0x1e8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff fcfd 	bl	800b0d0 <mem_to_ptr>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	83fb      	strh	r3, [r7, #30]
 800b6da:	e0b7      	b.n	800b84c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b6dc:	8bfb      	ldrh	r3, [r7, #30]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fce4 	bl	800b0ac <ptr_to_mem>
 800b6e4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	791b      	ldrb	r3, [r3, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 80a7 	bne.w	800b83e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	881b      	ldrh	r3, [r3, #0]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	8bfb      	ldrh	r3, [r7, #30]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	f1a3 0208 	sub.w	r2, r3, #8
 800b6fe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b700:	429a      	cmp	r2, r3
 800b702:	f0c0 809c 	bcc.w	800b83e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	8bfb      	ldrh	r3, [r7, #30]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	f1a3 0208 	sub.w	r2, r3, #8
 800b714:	8bbb      	ldrh	r3, [r7, #28]
 800b716:	3314      	adds	r3, #20
 800b718:	429a      	cmp	r2, r3
 800b71a:	d333      	bcc.n	800b784 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b71c:	8bfa      	ldrh	r2, [r7, #30]
 800b71e:	8bbb      	ldrh	r3, [r7, #28]
 800b720:	4413      	add	r3, r2
 800b722:	b29b      	uxth	r3, r3
 800b724:	3308      	adds	r3, #8
 800b726:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b728:	8a7b      	ldrh	r3, [r7, #18]
 800b72a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b72e:	d106      	bne.n	800b73e <mem_malloc+0xb6>
 800b730:	4b50      	ldr	r3, [pc, #320]	; (800b874 <mem_malloc+0x1ec>)
 800b732:	f240 3287 	movw	r2, #903	; 0x387
 800b736:	4950      	ldr	r1, [pc, #320]	; (800b878 <mem_malloc+0x1f0>)
 800b738:	4850      	ldr	r0, [pc, #320]	; (800b87c <mem_malloc+0x1f4>)
 800b73a:	f00a fbcd 	bl	8015ed8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b73e:	8a7b      	ldrh	r3, [r7, #18]
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fcb3 	bl	800b0ac <ptr_to_mem>
 800b746:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	881a      	ldrh	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8bfa      	ldrh	r2, [r7, #30]
 800b75a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	8a7a      	ldrh	r2, [r7, #18]
 800b760:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2201      	movs	r2, #1
 800b766:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b770:	d00b      	beq.n	800b78a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fc98 	bl	800b0ac <ptr_to_mem>
 800b77c:	4602      	mov	r2, r0
 800b77e:	8a7b      	ldrh	r3, [r7, #18]
 800b780:	8053      	strh	r3, [r2, #2]
 800b782:	e002      	b.n	800b78a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2201      	movs	r2, #1
 800b788:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b78a:	4b39      	ldr	r3, [pc, #228]	; (800b870 <mem_malloc+0x1e8>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	429a      	cmp	r2, r3
 800b792:	d127      	bne.n	800b7e4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b794:	4b36      	ldr	r3, [pc, #216]	; (800b870 <mem_malloc+0x1e8>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b79a:	e005      	b.n	800b7a8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff fc83 	bl	800b0ac <ptr_to_mem>
 800b7a6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	791b      	ldrb	r3, [r3, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <mem_malloc+0x132>
 800b7b0:	4b33      	ldr	r3, [pc, #204]	; (800b880 <mem_malloc+0x1f8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d1f0      	bne.n	800b79c <mem_malloc+0x114>
          }
          lfree = cur;
 800b7ba:	4a2d      	ldr	r2, [pc, #180]	; (800b870 <mem_malloc+0x1e8>)
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b7c0:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <mem_malloc+0x1e8>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	4b2e      	ldr	r3, [pc, #184]	; (800b880 <mem_malloc+0x1f8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d00b      	beq.n	800b7e4 <mem_malloc+0x15c>
 800b7cc:	4b28      	ldr	r3, [pc, #160]	; (800b870 <mem_malloc+0x1e8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d006      	beq.n	800b7e4 <mem_malloc+0x15c>
 800b7d6:	4b27      	ldr	r3, [pc, #156]	; (800b874 <mem_malloc+0x1ec>)
 800b7d8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b7dc:	4929      	ldr	r1, [pc, #164]	; (800b884 <mem_malloc+0x1fc>)
 800b7de:	4827      	ldr	r0, [pc, #156]	; (800b87c <mem_malloc+0x1f4>)
 800b7e0:	f00a fb7a 	bl	8015ed8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b7e4:	4821      	ldr	r0, [pc, #132]	; (800b86c <mem_malloc+0x1e4>)
 800b7e6:	f00a f93a 	bl	8015a5e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b7ea:	8bba      	ldrh	r2, [r7, #28]
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	4a23      	ldr	r2, [pc, #140]	; (800b880 <mem_malloc+0x1f8>)
 800b7f4:	6812      	ldr	r2, [r2, #0]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d906      	bls.n	800b808 <mem_malloc+0x180>
 800b7fa:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <mem_malloc+0x1ec>)
 800b7fc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b800:	4921      	ldr	r1, [pc, #132]	; (800b888 <mem_malloc+0x200>)
 800b802:	481e      	ldr	r0, [pc, #120]	; (800b87c <mem_malloc+0x1f4>)
 800b804:	f00a fb68 	bl	8015ed8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d006      	beq.n	800b820 <mem_malloc+0x198>
 800b812:	4b18      	ldr	r3, [pc, #96]	; (800b874 <mem_malloc+0x1ec>)
 800b814:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b818:	491c      	ldr	r1, [pc, #112]	; (800b88c <mem_malloc+0x204>)
 800b81a:	4818      	ldr	r0, [pc, #96]	; (800b87c <mem_malloc+0x1f4>)
 800b81c:	f00a fb5c 	bl	8015ed8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	2b00      	cmp	r3, #0
 800b828:	d006      	beq.n	800b838 <mem_malloc+0x1b0>
 800b82a:	4b12      	ldr	r3, [pc, #72]	; (800b874 <mem_malloc+0x1ec>)
 800b82c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b830:	4917      	ldr	r1, [pc, #92]	; (800b890 <mem_malloc+0x208>)
 800b832:	4812      	ldr	r0, [pc, #72]	; (800b87c <mem_malloc+0x1f4>)
 800b834:	f00a fb50 	bl	8015ed8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	3308      	adds	r3, #8
 800b83c:	e011      	b.n	800b862 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b83e:	8bfb      	ldrh	r3, [r7, #30]
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff fc33 	bl	800b0ac <ptr_to_mem>
 800b846:	4603      	mov	r3, r0
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b84c:	8bfa      	ldrh	r2, [r7, #30]
 800b84e:	8bbb      	ldrh	r3, [r7, #28]
 800b850:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800b854:	429a      	cmp	r2, r3
 800b856:	f4ff af41 	bcc.w	800b6dc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b85a:	4804      	ldr	r0, [pc, #16]	; (800b86c <mem_malloc+0x1e4>)
 800b85c:	f00a f8ff 	bl	8015a5e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3720      	adds	r7, #32
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	2000e8ec 	.word	0x2000e8ec
 800b870:	2000e8f0 	.word	0x2000e8f0
 800b874:	08017c68 	.word	0x08017c68
 800b878:	08017e2c 	.word	0x08017e2c
 800b87c:	08017cb0 	.word	0x08017cb0
 800b880:	2000e8e8 	.word	0x2000e8e8
 800b884:	08017e40 	.word	0x08017e40
 800b888:	08017e5c 	.word	0x08017e5c
 800b88c:	08017e8c 	.word	0x08017e8c
 800b890:	08017ebc 	.word	0x08017ebc

0800b894 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	3303      	adds	r3, #3
 800b8aa:	f023 0303 	bic.w	r3, r3, #3
 800b8ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	e011      	b.n	800b8da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	885b      	ldrh	r3, [r3, #2]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	dbe7      	blt.n	800b8b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b8e6:	bf00      	nop
 800b8e8:	bf00      	nop
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	80fb      	strh	r3, [r7, #6]
 800b8fe:	e009      	b.n	800b914 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b900:	88fb      	ldrh	r3, [r7, #6]
 800b902:	4a08      	ldr	r2, [pc, #32]	; (800b924 <memp_init+0x30>)
 800b904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff ffc3 	bl	800b894 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b90e:	88fb      	ldrh	r3, [r7, #6]
 800b910:	3301      	adds	r3, #1
 800b912:	80fb      	strh	r3, [r7, #6]
 800b914:	88fb      	ldrh	r3, [r7, #6]
 800b916:	2b0b      	cmp	r3, #11
 800b918:	d9f2      	bls.n	800b900 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b91a:	bf00      	nop
 800b91c:	bf00      	nop
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	0801a3d0 	.word	0x0801a3d0

0800b928 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b930:	f00a f8c2 	bl	8015ab8 <sys_arch_protect>
 800b934:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d015      	beq.n	800b970 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	6812      	ldr	r2, [r2, #0]
 800b94c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	f003 0303 	and.w	r3, r3, #3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <do_memp_malloc_pool+0x3e>
 800b958:	4b09      	ldr	r3, [pc, #36]	; (800b980 <do_memp_malloc_pool+0x58>)
 800b95a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b95e:	4909      	ldr	r1, [pc, #36]	; (800b984 <do_memp_malloc_pool+0x5c>)
 800b960:	4809      	ldr	r0, [pc, #36]	; (800b988 <do_memp_malloc_pool+0x60>)
 800b962:	f00a fab9 	bl	8015ed8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f00a f8b4 	bl	8015ad4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	e003      	b.n	800b978 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f00a f8af 	bl	8015ad4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	08017ee0 	.word	0x08017ee0
 800b984:	08017f10 	.word	0x08017f10
 800b988:	08017f34 	.word	0x08017f34

0800b98c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d106      	bne.n	800b9a8 <memp_malloc_pool+0x1c>
 800b99a:	4b0a      	ldr	r3, [pc, #40]	; (800b9c4 <memp_malloc_pool+0x38>)
 800b99c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b9a0:	4909      	ldr	r1, [pc, #36]	; (800b9c8 <memp_malloc_pool+0x3c>)
 800b9a2:	480a      	ldr	r0, [pc, #40]	; (800b9cc <memp_malloc_pool+0x40>)
 800b9a4:	f00a fa98 	bl	8015ed8 <iprintf>
  if (desc == NULL) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <memp_malloc_pool+0x26>
    return NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e003      	b.n	800b9ba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff ffb8 	bl	800b928 <do_memp_malloc_pool>
 800b9b8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	08017ee0 	.word	0x08017ee0
 800b9c8:	08017f5c 	.word	0x08017f5c
 800b9cc:	08017f34 	.word	0x08017f34

0800b9d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	2b0b      	cmp	r3, #11
 800b9de:	d908      	bls.n	800b9f2 <memp_malloc+0x22>
 800b9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <memp_malloc+0x3c>)
 800b9e2:	f240 1257 	movw	r2, #343	; 0x157
 800b9e6:	490a      	ldr	r1, [pc, #40]	; (800ba10 <memp_malloc+0x40>)
 800b9e8:	480a      	ldr	r0, [pc, #40]	; (800ba14 <memp_malloc+0x44>)
 800b9ea:	f00a fa75 	bl	8015ed8 <iprintf>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e008      	b.n	800ba04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	4a08      	ldr	r2, [pc, #32]	; (800ba18 <memp_malloc+0x48>)
 800b9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff ff94 	bl	800b928 <do_memp_malloc_pool>
 800ba00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ba02:	68fb      	ldr	r3, [r7, #12]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	08017ee0 	.word	0x08017ee0
 800ba10:	08017f70 	.word	0x08017f70
 800ba14:	08017f34 	.word	0x08017f34
 800ba18:	0801a3d0 	.word	0x0801a3d0

0800ba1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	f003 0303 	and.w	r3, r3, #3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <do_memp_free_pool+0x22>
 800ba30:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <do_memp_free_pool+0x4c>)
 800ba32:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ba36:	490d      	ldr	r1, [pc, #52]	; (800ba6c <do_memp_free_pool+0x50>)
 800ba38:	480d      	ldr	r0, [pc, #52]	; (800ba70 <do_memp_free_pool+0x54>)
 800ba3a:	f00a fa4d 	bl	8015ed8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ba42:	f00a f839 	bl	8015ab8 <sys_arch_protect>
 800ba46:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ba5a:	68b8      	ldr	r0, [r7, #8]
 800ba5c:	f00a f83a 	bl	8015ad4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ba60:	bf00      	nop
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	08017ee0 	.word	0x08017ee0
 800ba6c:	08017f90 	.word	0x08017f90
 800ba70:	08017f34 	.word	0x08017f34

0800ba74 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <memp_free_pool+0x1e>
 800ba84:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <memp_free_pool+0x3c>)
 800ba86:	f240 1295 	movw	r2, #405	; 0x195
 800ba8a:	490a      	ldr	r1, [pc, #40]	; (800bab4 <memp_free_pool+0x40>)
 800ba8c:	480a      	ldr	r0, [pc, #40]	; (800bab8 <memp_free_pool+0x44>)
 800ba8e:	f00a fa23 	bl	8015ed8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d007      	beq.n	800baa8 <memp_free_pool+0x34>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ffbb 	bl	800ba1c <do_memp_free_pool>
 800baa6:	e000      	b.n	800baaa <memp_free_pool+0x36>
    return;
 800baa8:	bf00      	nop
}
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	08017ee0 	.word	0x08017ee0
 800bab4:	08017f5c 	.word	0x08017f5c
 800bab8:	08017f34 	.word	0x08017f34

0800babc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	6039      	str	r1, [r7, #0]
 800bac6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	2b0b      	cmp	r3, #11
 800bacc:	d907      	bls.n	800bade <memp_free+0x22>
 800bace:	4b0c      	ldr	r3, [pc, #48]	; (800bb00 <memp_free+0x44>)
 800bad0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bad4:	490b      	ldr	r1, [pc, #44]	; (800bb04 <memp_free+0x48>)
 800bad6:	480c      	ldr	r0, [pc, #48]	; (800bb08 <memp_free+0x4c>)
 800bad8:	f00a f9fe 	bl	8015ed8 <iprintf>
 800badc:	e00c      	b.n	800baf8 <memp_free+0x3c>

  if (mem == NULL) {
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d008      	beq.n	800baf6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bae4:	79fb      	ldrb	r3, [r7, #7]
 800bae6:	4a09      	ldr	r2, [pc, #36]	; (800bb0c <memp_free+0x50>)
 800bae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff ff94 	bl	800ba1c <do_memp_free_pool>
 800baf4:	e000      	b.n	800baf8 <memp_free+0x3c>
    return;
 800baf6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	08017ee0 	.word	0x08017ee0
 800bb04:	08017fb0 	.word	0x08017fb0
 800bb08:	08017f34 	.word	0x08017f34
 800bb0c:	0801a3d0 	.word	0x0801a3d0

0800bb10 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bb10:	b480      	push	{r7}
 800bb12:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bb14:	bf00      	nop
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
	...

0800bb20 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d108      	bne.n	800bb46 <netif_add+0x26>
 800bb34:	4b57      	ldr	r3, [pc, #348]	; (800bc94 <netif_add+0x174>)
 800bb36:	f240 1227 	movw	r2, #295	; 0x127
 800bb3a:	4957      	ldr	r1, [pc, #348]	; (800bc98 <netif_add+0x178>)
 800bb3c:	4857      	ldr	r0, [pc, #348]	; (800bc9c <netif_add+0x17c>)
 800bb3e:	f00a f9cb 	bl	8015ed8 <iprintf>
 800bb42:	2300      	movs	r3, #0
 800bb44:	e0a2      	b.n	800bc8c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d108      	bne.n	800bb5e <netif_add+0x3e>
 800bb4c:	4b51      	ldr	r3, [pc, #324]	; (800bc94 <netif_add+0x174>)
 800bb4e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bb52:	4953      	ldr	r1, [pc, #332]	; (800bca0 <netif_add+0x180>)
 800bb54:	4851      	ldr	r0, [pc, #324]	; (800bc9c <netif_add+0x17c>)
 800bb56:	f00a f9bf 	bl	8015ed8 <iprintf>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e096      	b.n	800bc8c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d101      	bne.n	800bb68 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bb64:	4b4f      	ldr	r3, [pc, #316]	; (800bca4 <netif_add+0x184>)
 800bb66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d101      	bne.n	800bb72 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bb6e:	4b4d      	ldr	r3, [pc, #308]	; (800bca4 <netif_add+0x184>)
 800bb70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bb78:	4b4a      	ldr	r3, [pc, #296]	; (800bca4 <netif_add+0x184>)
 800bb7a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4a45      	ldr	r2, [pc, #276]	; (800bca8 <netif_add+0x188>)
 800bb92:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a3a      	ldr	r2, [r7, #32]
 800bbac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bbae:	4b3f      	ldr	r3, [pc, #252]	; (800bcac <netif_add+0x18c>)
 800bbb0:	781a      	ldrb	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbbc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 f90f 	bl	800bde8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	4798      	blx	r3
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <netif_add+0xba>
    return NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e058      	b.n	800bc8c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbe0:	2bff      	cmp	r3, #255	; 0xff
 800bbe2:	d103      	bne.n	800bbec <netif_add+0xcc>
        netif->num = 0;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bbf0:	4b2f      	ldr	r3, [pc, #188]	; (800bcb0 <netif_add+0x190>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	617b      	str	r3, [r7, #20]
 800bbf6:	e02b      	b.n	800bc50 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d106      	bne.n	800bc0e <netif_add+0xee>
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <netif_add+0x174>)
 800bc02:	f240 128b 	movw	r2, #395	; 0x18b
 800bc06:	492b      	ldr	r1, [pc, #172]	; (800bcb4 <netif_add+0x194>)
 800bc08:	4824      	ldr	r0, [pc, #144]	; (800bc9c <netif_add+0x17c>)
 800bc0a:	f00a f965 	bl	8015ed8 <iprintf>
        num_netifs++;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3301      	adds	r3, #1
 800bc12:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	2bff      	cmp	r3, #255	; 0xff
 800bc18:	dd06      	ble.n	800bc28 <netif_add+0x108>
 800bc1a:	4b1e      	ldr	r3, [pc, #120]	; (800bc94 <netif_add+0x174>)
 800bc1c:	f240 128d 	movw	r2, #397	; 0x18d
 800bc20:	4925      	ldr	r1, [pc, #148]	; (800bcb8 <netif_add+0x198>)
 800bc22:	481e      	ldr	r0, [pc, #120]	; (800bc9c <netif_add+0x17c>)
 800bc24:	f00a f958 	bl	8015ed8 <iprintf>
        if (netif2->num == netif->num) {
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d108      	bne.n	800bc4a <netif_add+0x12a>
          netif->num++;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc3e:	3301      	adds	r3, #1
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800bc48:	e005      	b.n	800bc56 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1d0      	bne.n	800bbf8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1be      	bne.n	800bbda <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc62:	2bfe      	cmp	r3, #254	; 0xfe
 800bc64:	d103      	bne.n	800bc6e <netif_add+0x14e>
    netif_num = 0;
 800bc66:	4b11      	ldr	r3, [pc, #68]	; (800bcac <netif_add+0x18c>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	e006      	b.n	800bc7c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc74:	3301      	adds	r3, #1
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <netif_add+0x18c>)
 800bc7a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	; (800bcb0 <netif_add+0x190>)
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bc84:	4a0a      	ldr	r2, [pc, #40]	; (800bcb0 <netif_add+0x190>)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	08017fcc 	.word	0x08017fcc
 800bc98:	08018060 	.word	0x08018060
 800bc9c:	0801801c 	.word	0x0801801c
 800bca0:	0801807c 	.word	0x0801807c
 800bca4:	0801a440 	.word	0x0801a440
 800bca8:	0800c0c3 	.word	0x0800c0c3
 800bcac:	20011940 	.word	0x20011940
 800bcb0:	20011938 	.word	0x20011938
 800bcb4:	080180a0 	.word	0x080180a0
 800bcb8:	080180b4 	.word	0x080180b4

0800bcbc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f002 fe99 	bl	800ea00 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d106      	bne.n	800bcf8 <netif_do_set_ipaddr+0x20>
 800bcea:	4b1d      	ldr	r3, [pc, #116]	; (800bd60 <netif_do_set_ipaddr+0x88>)
 800bcec:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bcf0:	491c      	ldr	r1, [pc, #112]	; (800bd64 <netif_do_set_ipaddr+0x8c>)
 800bcf2:	481d      	ldr	r0, [pc, #116]	; (800bd68 <netif_do_set_ipaddr+0x90>)
 800bcf4:	f00a f8f0 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <netif_do_set_ipaddr+0x34>
 800bcfe:	4b18      	ldr	r3, [pc, #96]	; (800bd60 <netif_do_set_ipaddr+0x88>)
 800bd00:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bd04:	4917      	ldr	r1, [pc, #92]	; (800bd64 <netif_do_set_ipaddr+0x8c>)
 800bd06:	4818      	ldr	r0, [pc, #96]	; (800bd68 <netif_do_set_ipaddr+0x90>)
 800bd08:	f00a f8e6 	bl	8015ed8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3304      	adds	r3, #4
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d01c      	beq.n	800bd54 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3304      	adds	r3, #4
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bd2a:	f107 0314 	add.w	r3, r7, #20
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff ffc3 	bl	800bcbc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <netif_do_set_ipaddr+0x6a>
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	e000      	b.n	800bd44 <netif_do_set_ipaddr+0x6c>
 800bd42:	2300      	movs	r3, #0
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bd48:	2101      	movs	r1, #1
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 f8d2 	bl	800bef4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bd50:	2301      	movs	r3, #1
 800bd52:	e000      	b.n	800bd56 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	08017fcc 	.word	0x08017fcc
 800bd64:	080180e4 	.word	0x080180e4
 800bd68:	0801801c 	.word	0x0801801c

0800bd6c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3308      	adds	r3, #8
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d00a      	beq.n	800bd9c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <netif_do_set_netmask+0x26>
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	e000      	b.n	800bd94 <netif_do_set_netmask+0x28>
 800bd92:	2300      	movs	r3, #0
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e000      	b.n	800bd9e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b085      	sub	sp, #20
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d00a      	beq.n	800bdda <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d002      	beq.n	800bdd0 <netif_do_set_gw+0x26>
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	e000      	b.n	800bdd2 <netif_do_set_gw+0x28>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e000      	b.n	800bddc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b088      	sub	sp, #32
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800be04:	4b1c      	ldr	r3, [pc, #112]	; (800be78 <netif_set_addr+0x90>)
 800be06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800be0e:	4b1a      	ldr	r3, [pc, #104]	; (800be78 <netif_set_addr+0x90>)
 800be10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800be18:	4b17      	ldr	r3, [pc, #92]	; (800be78 <netif_set_addr+0x90>)
 800be1a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <netif_set_addr+0x42>
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <netif_set_addr+0x46>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <netif_set_addr+0x48>
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]
  if (remove) {
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d006      	beq.n	800be46 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be38:	f107 0310 	add.w	r3, r7, #16
 800be3c:	461a      	mov	r2, r3
 800be3e:	68b9      	ldr	r1, [r7, #8]
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f7ff ff49 	bl	800bcd8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800be46:	69fa      	ldr	r2, [r7, #28]
 800be48:	6879      	ldr	r1, [r7, #4]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7ff ff8e 	bl	800bd6c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800be50:	69ba      	ldr	r2, [r7, #24]
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f7ff ffa8 	bl	800bdaa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d106      	bne.n	800be6e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be60:	f107 0310 	add.w	r3, r7, #16
 800be64:	461a      	mov	r2, r3
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7ff ff35 	bl	800bcd8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800be6e:	bf00      	nop
 800be70:	3720      	adds	r7, #32
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	0801a440 	.word	0x0801a440

0800be7c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800be84:	4a04      	ldr	r2, [pc, #16]	; (800be98 <netif_set_default+0x1c>)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800be8a:	bf00      	nop
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	2001193c 	.word	0x2001193c

0800be9c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d107      	bne.n	800beba <netif_set_up+0x1e>
 800beaa:	4b0f      	ldr	r3, [pc, #60]	; (800bee8 <netif_set_up+0x4c>)
 800beac:	f44f 7254 	mov.w	r2, #848	; 0x350
 800beb0:	490e      	ldr	r1, [pc, #56]	; (800beec <netif_set_up+0x50>)
 800beb2:	480f      	ldr	r0, [pc, #60]	; (800bef0 <netif_set_up+0x54>)
 800beb4:	f00a f810 	bl	8015ed8 <iprintf>
 800beb8:	e013      	b.n	800bee2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10c      	bne.n	800bee2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bece:	f043 0301 	orr.w	r3, r3, #1
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800beda:	2103      	movs	r1, #3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f809 	bl	800bef4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	08017fcc 	.word	0x08017fcc
 800beec:	08018154 	.word	0x08018154
 800bef0:	0801801c 	.word	0x0801801c

0800bef4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <netif_issue_reports+0x20>
 800bf06:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <netif_issue_reports+0x74>)
 800bf08:	f240 326d 	movw	r2, #877	; 0x36d
 800bf0c:	4917      	ldr	r1, [pc, #92]	; (800bf6c <netif_issue_reports+0x78>)
 800bf0e:	4818      	ldr	r0, [pc, #96]	; (800bf70 <netif_issue_reports+0x7c>)
 800bf10:	f009 ffe2 	bl	8015ed8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf1a:	f003 0304 	and.w	r3, r3, #4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d01e      	beq.n	800bf60 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf28:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d017      	beq.n	800bf60 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d013      	beq.n	800bf62 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00e      	beq.n	800bf62 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d007      	beq.n	800bf62 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f008 f893 	bl	8014084 <etharp_request>
 800bf5e:	e000      	b.n	800bf62 <netif_issue_reports+0x6e>
    return;
 800bf60:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	08017fcc 	.word	0x08017fcc
 800bf6c:	08018170 	.word	0x08018170
 800bf70:	0801801c 	.word	0x0801801c

0800bf74 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d107      	bne.n	800bf92 <netif_set_down+0x1e>
 800bf82:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <netif_set_down+0x58>)
 800bf84:	f240 329b 	movw	r2, #923	; 0x39b
 800bf88:	4911      	ldr	r1, [pc, #68]	; (800bfd0 <netif_set_down+0x5c>)
 800bf8a:	4812      	ldr	r0, [pc, #72]	; (800bfd4 <netif_set_down+0x60>)
 800bf8c:	f009 ffa4 	bl	8015ed8 <iprintf>
 800bf90:	e019      	b.n	800bfc6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d012      	beq.n	800bfc6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfa6:	f023 0301 	bic.w	r3, r3, #1
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfb8:	f003 0308 	and.w	r3, r3, #8
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f007 fc1d 	bl	8013800 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	08017fcc 	.word	0x08017fcc
 800bfd0:	08018194 	.word	0x08018194
 800bfd4:	0801801c 	.word	0x0801801c

0800bfd8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d107      	bne.n	800bff6 <netif_set_link_up+0x1e>
 800bfe6:	4b13      	ldr	r3, [pc, #76]	; (800c034 <netif_set_link_up+0x5c>)
 800bfe8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bfec:	4912      	ldr	r1, [pc, #72]	; (800c038 <netif_set_link_up+0x60>)
 800bfee:	4813      	ldr	r0, [pc, #76]	; (800c03c <netif_set_link_up+0x64>)
 800bff0:	f009 ff72 	bl	8015ed8 <iprintf>
 800bff4:	e01b      	b.n	800c02e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bffc:	f003 0304 	and.w	r3, r3, #4
 800c000:	2b00      	cmp	r3, #0
 800c002:	d114      	bne.n	800c02e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c00a:	f043 0304 	orr.w	r3, r3, #4
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c016:	2103      	movs	r1, #3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff ff6b 	bl	800bef4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <netif_set_link_up+0x56>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	69db      	ldr	r3, [r3, #28]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	08017fcc 	.word	0x08017fcc
 800c038:	080181b4 	.word	0x080181b4
 800c03c:	0801801c 	.word	0x0801801c

0800c040 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d107      	bne.n	800c05e <netif_set_link_down+0x1e>
 800c04e:	4b11      	ldr	r3, [pc, #68]	; (800c094 <netif_set_link_down+0x54>)
 800c050:	f240 4206 	movw	r2, #1030	; 0x406
 800c054:	4910      	ldr	r1, [pc, #64]	; (800c098 <netif_set_link_down+0x58>)
 800c056:	4811      	ldr	r0, [pc, #68]	; (800c09c <netif_set_link_down+0x5c>)
 800c058:	f009 ff3e 	bl	8015ed8 <iprintf>
 800c05c:	e017      	b.n	800c08e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d010      	beq.n	800c08e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c072:	f023 0304 	bic.w	r3, r3, #4
 800c076:	b2da      	uxtb	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <netif_set_link_down+0x4e>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	08017fcc 	.word	0x08017fcc
 800c098:	080181d8 	.word	0x080181d8
 800c09c:	0801801c 	.word	0x0801801c

0800c0a0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	61da      	str	r2, [r3, #28]
  }
}
 800c0b6:	bf00      	nop
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b085      	sub	sp, #20
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	60b9      	str	r1, [r7, #8]
 800c0cc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c0ce:	f06f 030b 	mvn.w	r3, #11
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d013      	beq.n	800c118 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c0f0:	4b0d      	ldr	r3, [pc, #52]	; (800c128 <netif_get_by_index+0x48>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	e00c      	b.n	800c112 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0fe:	3301      	adds	r3, #1
 800c100:	b2db      	uxtb	r3, r3
 800c102:	79fa      	ldrb	r2, [r7, #7]
 800c104:	429a      	cmp	r2, r3
 800c106:	d101      	bne.n	800c10c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	e006      	b.n	800c11a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1ef      	bne.n	800c0f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	20011938 	.word	0x20011938

0800c12c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c132:	f009 fcc1 	bl	8015ab8 <sys_arch_protect>
 800c136:	6038      	str	r0, [r7, #0]
 800c138:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <pbuf_free_ooseq+0x44>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	6838      	ldr	r0, [r7, #0]
 800c140:	f009 fcc8 	bl	8015ad4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c144:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <pbuf_free_ooseq+0x48>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	607b      	str	r3, [r7, #4]
 800c14a:	e00a      	b.n	800c162 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c150:	2b00      	cmp	r3, #0
 800c152:	d003      	beq.n	800c15c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f002 fc91 	bl	800ea7c <tcp_free_ooseq>
      return;
 800c15a:	e005      	b.n	800c168 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	607b      	str	r3, [r7, #4]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1f1      	bne.n	800c14c <pbuf_free_ooseq+0x20>
    }
  }
}
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20011941 	.word	0x20011941
 800c174:	20011950 	.word	0x20011950

0800c178 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c180:	f7ff ffd4 	bl	800c12c <pbuf_free_ooseq>
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c192:	f009 fc91 	bl	8015ab8 <sys_arch_protect>
 800c196:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c198:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <pbuf_pool_is_empty+0x4c>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c19e:	4b0e      	ldr	r3, [pc, #56]	; (800c1d8 <pbuf_pool_is_empty+0x4c>)
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f009 fc95 	bl	8015ad4 <sys_arch_unprotect>

  if (!queued) {
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10f      	bne.n	800c1d0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	480a      	ldr	r0, [pc, #40]	; (800c1dc <pbuf_pool_is_empty+0x50>)
 800c1b4:	f7fe fd7c 	bl	800acb0 <tcpip_try_callback>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d008      	beq.n	800c1d0 <pbuf_pool_is_empty+0x44>
 800c1be:	f009 fc7b 	bl	8015ab8 <sys_arch_protect>
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	4b04      	ldr	r3, [pc, #16]	; (800c1d8 <pbuf_pool_is_empty+0x4c>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	701a      	strb	r2, [r3, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f009 fc82 	bl	8015ad4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	20011941 	.word	0x20011941
 800c1dc:	0800c179 	.word	0x0800c179

0800c1e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	80fb      	strh	r3, [r7, #6]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	88fa      	ldrh	r2, [r7, #6]
 800c206:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	88ba      	ldrh	r2, [r7, #4]
 800c20c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c20e:	8b3b      	ldrh	r3, [r7, #24]
 800c210:	b2da      	uxtb	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	7f3a      	ldrb	r2, [r7, #28]
 800c21a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2201      	movs	r2, #1
 800c220:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	73da      	strb	r2, [r3, #15]
}
 800c228:	bf00      	nop
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08c      	sub	sp, #48	; 0x30
 800c238:	af02      	add	r7, sp, #8
 800c23a:	4603      	mov	r3, r0
 800c23c:	71fb      	strb	r3, [r7, #7]
 800c23e:	460b      	mov	r3, r1
 800c240:	80bb      	strh	r3, [r7, #4]
 800c242:	4613      	mov	r3, r2
 800c244:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c24a:	887b      	ldrh	r3, [r7, #2]
 800c24c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c250:	d07f      	beq.n	800c352 <pbuf_alloc+0x11e>
 800c252:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c256:	f300 80c8 	bgt.w	800c3ea <pbuf_alloc+0x1b6>
 800c25a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c25e:	d010      	beq.n	800c282 <pbuf_alloc+0x4e>
 800c260:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c264:	f300 80c1 	bgt.w	800c3ea <pbuf_alloc+0x1b6>
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d002      	beq.n	800c272 <pbuf_alloc+0x3e>
 800c26c:	2b41      	cmp	r3, #65	; 0x41
 800c26e:	f040 80bc 	bne.w	800c3ea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c272:	887a      	ldrh	r2, [r7, #2]
 800c274:	88bb      	ldrh	r3, [r7, #4]
 800c276:	4619      	mov	r1, r3
 800c278:	2000      	movs	r0, #0
 800c27a:	f000 f8d1 	bl	800c420 <pbuf_alloc_reference>
 800c27e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c280:	e0bd      	b.n	800c3fe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c286:	2300      	movs	r3, #0
 800c288:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c28a:	88bb      	ldrh	r3, [r7, #4]
 800c28c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c28e:	200b      	movs	r0, #11
 800c290:	f7ff fb9e 	bl	800b9d0 <memp_malloc>
 800c294:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d109      	bne.n	800c2b0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c29c:	f7ff ff76 	bl	800c18c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <pbuf_alloc+0x78>
            pbuf_free(p);
 800c2a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2a8:	f000 faa8 	bl	800c7fc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e0a7      	b.n	800c400 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2b2:	3303      	adds	r3, #3
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	f023 0303 	bic.w	r3, r3, #3
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	8b7a      	ldrh	r2, [r7, #26]
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	bf28      	it	cs
 800c2c8:	4613      	movcs	r3, r2
 800c2ca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c2cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2ce:	3310      	adds	r3, #16
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	3303      	adds	r3, #3
 800c2d6:	f023 0303 	bic.w	r3, r3, #3
 800c2da:	4618      	mov	r0, r3
 800c2dc:	89f9      	ldrh	r1, [r7, #14]
 800c2de:	8b7a      	ldrh	r2, [r7, #26]
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9301      	str	r3, [sp, #4]
 800c2e4:	887b      	ldrh	r3, [r7, #2]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	6938      	ldr	r0, [r7, #16]
 800c2ee:	f7ff ff77 	bl	800c1e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f003 0303 	and.w	r3, r3, #3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d006      	beq.n	800c30c <pbuf_alloc+0xd8>
 800c2fe:	4b42      	ldr	r3, [pc, #264]	; (800c408 <pbuf_alloc+0x1d4>)
 800c300:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c304:	4941      	ldr	r1, [pc, #260]	; (800c40c <pbuf_alloc+0x1d8>)
 800c306:	4842      	ldr	r0, [pc, #264]	; (800c410 <pbuf_alloc+0x1dc>)
 800c308:	f009 fde6 	bl	8015ed8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c30c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c30e:	3303      	adds	r3, #3
 800c310:	f023 0303 	bic.w	r3, r3, #3
 800c314:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c318:	d106      	bne.n	800c328 <pbuf_alloc+0xf4>
 800c31a:	4b3b      	ldr	r3, [pc, #236]	; (800c408 <pbuf_alloc+0x1d4>)
 800c31c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c320:	493c      	ldr	r1, [pc, #240]	; (800c414 <pbuf_alloc+0x1e0>)
 800c322:	483b      	ldr	r0, [pc, #236]	; (800c410 <pbuf_alloc+0x1dc>)
 800c324:	f009 fdd8 	bl	8015ed8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d102      	bne.n	800c334 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
 800c332:	e002      	b.n	800c33a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c33e:	8b7a      	ldrh	r2, [r7, #26]
 800c340:	89fb      	ldrh	r3, [r7, #14]
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c34a:	8b7b      	ldrh	r3, [r7, #26]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d19e      	bne.n	800c28e <pbuf_alloc+0x5a>
      break;
 800c350:	e055      	b.n	800c3fe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c354:	3303      	adds	r3, #3
 800c356:	b29b      	uxth	r3, r3
 800c358:	f023 0303 	bic.w	r3, r3, #3
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	88bb      	ldrh	r3, [r7, #4]
 800c360:	3303      	adds	r3, #3
 800c362:	b29b      	uxth	r3, r3
 800c364:	f023 0303 	bic.w	r3, r3, #3
 800c368:	b29b      	uxth	r3, r3
 800c36a:	4413      	add	r3, r2
 800c36c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c36e:	8b3b      	ldrh	r3, [r7, #24]
 800c370:	3310      	adds	r3, #16
 800c372:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c374:	8b3a      	ldrh	r2, [r7, #24]
 800c376:	88bb      	ldrh	r3, [r7, #4]
 800c378:	3303      	adds	r3, #3
 800c37a:	f023 0303 	bic.w	r3, r3, #3
 800c37e:	429a      	cmp	r2, r3
 800c380:	d306      	bcc.n	800c390 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c382:	8afa      	ldrh	r2, [r7, #22]
 800c384:	88bb      	ldrh	r3, [r7, #4]
 800c386:	3303      	adds	r3, #3
 800c388:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d201      	bcs.n	800c394 <pbuf_alloc+0x160>
        return NULL;
 800c390:	2300      	movs	r3, #0
 800c392:	e035      	b.n	800c400 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c394:	8afb      	ldrh	r3, [r7, #22]
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff f976 	bl	800b688 <mem_malloc>
 800c39c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <pbuf_alloc+0x174>
        return NULL;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e02b      	b.n	800c400 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c3a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3aa:	3310      	adds	r3, #16
 800c3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ae:	4413      	add	r3, r2
 800c3b0:	3303      	adds	r3, #3
 800c3b2:	f023 0303 	bic.w	r3, r3, #3
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	88b9      	ldrh	r1, [r7, #4]
 800c3ba:	88ba      	ldrh	r2, [r7, #4]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9301      	str	r3, [sp, #4]
 800c3c0:	887b      	ldrh	r3, [r7, #2]
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ca:	f7ff ff09 	bl	800c1e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f003 0303 	and.w	r3, r3, #3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d010      	beq.n	800c3fc <pbuf_alloc+0x1c8>
 800c3da:	4b0b      	ldr	r3, [pc, #44]	; (800c408 <pbuf_alloc+0x1d4>)
 800c3dc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c3e0:	490d      	ldr	r1, [pc, #52]	; (800c418 <pbuf_alloc+0x1e4>)
 800c3e2:	480b      	ldr	r0, [pc, #44]	; (800c410 <pbuf_alloc+0x1dc>)
 800c3e4:	f009 fd78 	bl	8015ed8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c3e8:	e008      	b.n	800c3fc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c3ea:	4b07      	ldr	r3, [pc, #28]	; (800c408 <pbuf_alloc+0x1d4>)
 800c3ec:	f240 1227 	movw	r2, #295	; 0x127
 800c3f0:	490a      	ldr	r1, [pc, #40]	; (800c41c <pbuf_alloc+0x1e8>)
 800c3f2:	4807      	ldr	r0, [pc, #28]	; (800c410 <pbuf_alloc+0x1dc>)
 800c3f4:	f009 fd70 	bl	8015ed8 <iprintf>
      return NULL;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	e001      	b.n	800c400 <pbuf_alloc+0x1cc>
      break;
 800c3fc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c400:	4618      	mov	r0, r3
 800c402:	3728      	adds	r7, #40	; 0x28
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	080181fc 	.word	0x080181fc
 800c40c:	0801822c 	.word	0x0801822c
 800c410:	0801825c 	.word	0x0801825c
 800c414:	08018284 	.word	0x08018284
 800c418:	080182b8 	.word	0x080182b8
 800c41c:	080182e4 	.word	0x080182e4

0800c420 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af02      	add	r7, sp, #8
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	807b      	strh	r3, [r7, #2]
 800c42c:	4613      	mov	r3, r2
 800c42e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c430:	883b      	ldrh	r3, [r7, #0]
 800c432:	2b41      	cmp	r3, #65	; 0x41
 800c434:	d009      	beq.n	800c44a <pbuf_alloc_reference+0x2a>
 800c436:	883b      	ldrh	r3, [r7, #0]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d006      	beq.n	800c44a <pbuf_alloc_reference+0x2a>
 800c43c:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <pbuf_alloc_reference+0x5c>)
 800c43e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c442:	490f      	ldr	r1, [pc, #60]	; (800c480 <pbuf_alloc_reference+0x60>)
 800c444:	480f      	ldr	r0, [pc, #60]	; (800c484 <pbuf_alloc_reference+0x64>)
 800c446:	f009 fd47 	bl	8015ed8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c44a:	200a      	movs	r0, #10
 800c44c:	f7ff fac0 	bl	800b9d0 <memp_malloc>
 800c450:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c458:	2300      	movs	r3, #0
 800c45a:	e00b      	b.n	800c474 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c45c:	8879      	ldrh	r1, [r7, #2]
 800c45e:	887a      	ldrh	r2, [r7, #2]
 800c460:	2300      	movs	r3, #0
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	883b      	ldrh	r3, [r7, #0]
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	460b      	mov	r3, r1
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7ff feb7 	bl	800c1e0 <pbuf_init_alloced_pbuf>
  return p;
 800c472:	68fb      	ldr	r3, [r7, #12]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	080181fc 	.word	0x080181fc
 800c480:	08018300 	.word	0x08018300
 800c484:	0801825c 	.word	0x0801825c

0800c488 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af02      	add	r7, sp, #8
 800c48e:	607b      	str	r3, [r7, #4]
 800c490:	4603      	mov	r3, r0
 800c492:	73fb      	strb	r3, [r7, #15]
 800c494:	460b      	mov	r3, r1
 800c496:	81bb      	strh	r3, [r7, #12]
 800c498:	4613      	mov	r3, r2
 800c49a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c4a0:	8a7b      	ldrh	r3, [r7, #18]
 800c4a2:	3303      	adds	r3, #3
 800c4a4:	f023 0203 	bic.w	r2, r3, #3
 800c4a8:	89bb      	ldrh	r3, [r7, #12]
 800c4aa:	441a      	add	r2, r3
 800c4ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d901      	bls.n	800c4b6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e018      	b.n	800c4e8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d007      	beq.n	800c4cc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c4bc:	8a7b      	ldrh	r3, [r7, #18]
 800c4be:	3303      	adds	r3, #3
 800c4c0:	f023 0303 	bic.w	r3, r3, #3
 800c4c4:	6a3a      	ldr	r2, [r7, #32]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	e001      	b.n	800c4d0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	89b9      	ldrh	r1, [r7, #12]
 800c4d4:	89ba      	ldrh	r2, [r7, #12]
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	897b      	ldrh	r3, [r7, #10]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	6979      	ldr	r1, [r7, #20]
 800c4e2:	f7ff fe7d 	bl	800c1e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c4e6:	687b      	ldr	r3, [r7, #4]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d106      	bne.n	800c510 <pbuf_realloc+0x20>
 800c502:	4b3a      	ldr	r3, [pc, #232]	; (800c5ec <pbuf_realloc+0xfc>)
 800c504:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c508:	4939      	ldr	r1, [pc, #228]	; (800c5f0 <pbuf_realloc+0x100>)
 800c50a:	483a      	ldr	r0, [pc, #232]	; (800c5f4 <pbuf_realloc+0x104>)
 800c50c:	f009 fce4 	bl	8015ed8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	891b      	ldrh	r3, [r3, #8]
 800c514:	887a      	ldrh	r2, [r7, #2]
 800c516:	429a      	cmp	r2, r3
 800c518:	d263      	bcs.n	800c5e2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	891a      	ldrh	r2, [r3, #8]
 800c51e:	887b      	ldrh	r3, [r7, #2]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c524:	887b      	ldrh	r3, [r7, #2]
 800c526:	817b      	strh	r3, [r7, #10]
  q = p;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c52c:	e018      	b.n	800c560 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	895b      	ldrh	r3, [r3, #10]
 800c532:	897a      	ldrh	r2, [r7, #10]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	891a      	ldrh	r2, [r3, #8]
 800c53c:	893b      	ldrh	r3, [r7, #8]
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	b29a      	uxth	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d106      	bne.n	800c560 <pbuf_realloc+0x70>
 800c552:	4b26      	ldr	r3, [pc, #152]	; (800c5ec <pbuf_realloc+0xfc>)
 800c554:	f240 12af 	movw	r2, #431	; 0x1af
 800c558:	4927      	ldr	r1, [pc, #156]	; (800c5f8 <pbuf_realloc+0x108>)
 800c55a:	4826      	ldr	r0, [pc, #152]	; (800c5f4 <pbuf_realloc+0x104>)
 800c55c:	f009 fcbc 	bl	8015ed8 <iprintf>
  while (rem_len > q->len) {
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	895b      	ldrh	r3, [r3, #10]
 800c564:	897a      	ldrh	r2, [r7, #10]
 800c566:	429a      	cmp	r2, r3
 800c568:	d8e1      	bhi.n	800c52e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	7b1b      	ldrb	r3, [r3, #12]
 800c56e:	f003 030f 	and.w	r3, r3, #15
 800c572:	2b00      	cmp	r3, #0
 800c574:	d121      	bne.n	800c5ba <pbuf_realloc+0xca>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	895b      	ldrh	r3, [r3, #10]
 800c57a:	897a      	ldrh	r2, [r7, #10]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d01c      	beq.n	800c5ba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	7b5b      	ldrb	r3, [r3, #13]
 800c584:	f003 0302 	and.w	r3, r3, #2
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d116      	bne.n	800c5ba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	b29a      	uxth	r2, r3
 800c596:	897b      	ldrh	r3, [r7, #10]
 800c598:	4413      	add	r3, r2
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	4619      	mov	r1, r3
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f7fe ff68 	bl	800b474 <mem_trim>
 800c5a4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d106      	bne.n	800c5ba <pbuf_realloc+0xca>
 800c5ac:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <pbuf_realloc+0xfc>)
 800c5ae:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c5b2:	4912      	ldr	r1, [pc, #72]	; (800c5fc <pbuf_realloc+0x10c>)
 800c5b4:	480f      	ldr	r0, [pc, #60]	; (800c5f4 <pbuf_realloc+0x104>)
 800c5b6:	f009 fc8f 	bl	8015ed8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	897a      	ldrh	r2, [r7, #10]
 800c5be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	895a      	ldrh	r2, [r3, #10]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d004      	beq.n	800c5da <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 f911 	bl	800c7fc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	e000      	b.n	800c5e4 <pbuf_realloc+0xf4>
    return;
 800c5e2:	bf00      	nop

}
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	080181fc 	.word	0x080181fc
 800c5f0:	08018314 	.word	0x08018314
 800c5f4:	0801825c 	.word	0x0801825c
 800c5f8:	0801832c 	.word	0x0801832c
 800c5fc:	08018344 	.word	0x08018344

0800c600 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d106      	bne.n	800c622 <pbuf_add_header_impl+0x22>
 800c614:	4b2b      	ldr	r3, [pc, #172]	; (800c6c4 <pbuf_add_header_impl+0xc4>)
 800c616:	f240 12df 	movw	r2, #479	; 0x1df
 800c61a:	492b      	ldr	r1, [pc, #172]	; (800c6c8 <pbuf_add_header_impl+0xc8>)
 800c61c:	482b      	ldr	r0, [pc, #172]	; (800c6cc <pbuf_add_header_impl+0xcc>)
 800c61e:	f009 fc5b 	bl	8015ed8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d003      	beq.n	800c630 <pbuf_add_header_impl+0x30>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c62e:	d301      	bcc.n	800c634 <pbuf_add_header_impl+0x34>
    return 1;
 800c630:	2301      	movs	r3, #1
 800c632:	e043      	b.n	800c6bc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <pbuf_add_header_impl+0x3e>
    return 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	e03e      	b.n	800c6bc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	891a      	ldrh	r2, [r3, #8]
 800c646:	8a7b      	ldrh	r3, [r7, #18]
 800c648:	4413      	add	r3, r2
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	8a7a      	ldrh	r2, [r7, #18]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d901      	bls.n	800c656 <pbuf_add_header_impl+0x56>
    return 1;
 800c652:	2301      	movs	r3, #1
 800c654:	e032      	b.n	800c6bc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	7b1b      	ldrb	r3, [r3, #12]
 800c65a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c65c:	8a3b      	ldrh	r3, [r7, #16]
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00c      	beq.n	800c680 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	425b      	negs	r3, r3
 800c66e:	4413      	add	r3, r2
 800c670:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3310      	adds	r3, #16
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d20d      	bcs.n	800c698 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e01d      	b.n	800c6bc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c680:	79fb      	ldrb	r3, [r7, #7]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d006      	beq.n	800c694 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	425b      	negs	r3, r3
 800c68e:	4413      	add	r3, r2
 800c690:	617b      	str	r3, [r7, #20]
 800c692:	e001      	b.n	800c698 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c694:	2301      	movs	r3, #1
 800c696:	e011      	b.n	800c6bc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	895a      	ldrh	r2, [r3, #10]
 800c6a2:	8a7b      	ldrh	r3, [r7, #18]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	891a      	ldrh	r2, [r3, #8]
 800c6b0:	8a7b      	ldrh	r3, [r7, #18]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	811a      	strh	r2, [r3, #8]


  return 0;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3718      	adds	r7, #24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	080181fc 	.word	0x080181fc
 800c6c8:	08018360 	.word	0x08018360
 800c6cc:	0801825c 	.word	0x0801825c

0800c6d0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c6da:	2200      	movs	r2, #0
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7ff ff8e 	bl	800c600 <pbuf_add_header_impl>
 800c6e4:	4603      	mov	r3, r0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d106      	bne.n	800c70e <pbuf_remove_header+0x1e>
 800c700:	4b20      	ldr	r3, [pc, #128]	; (800c784 <pbuf_remove_header+0x94>)
 800c702:	f240 224b 	movw	r2, #587	; 0x24b
 800c706:	4920      	ldr	r1, [pc, #128]	; (800c788 <pbuf_remove_header+0x98>)
 800c708:	4820      	ldr	r0, [pc, #128]	; (800c78c <pbuf_remove_header+0x9c>)
 800c70a:	f009 fbe5 	bl	8015ed8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d003      	beq.n	800c71c <pbuf_remove_header+0x2c>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c71a:	d301      	bcc.n	800c720 <pbuf_remove_header+0x30>
    return 1;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e02c      	b.n	800c77a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <pbuf_remove_header+0x3a>
    return 0;
 800c726:	2300      	movs	r3, #0
 800c728:	e027      	b.n	800c77a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	895b      	ldrh	r3, [r3, #10]
 800c732:	89fa      	ldrh	r2, [r7, #14]
 800c734:	429a      	cmp	r2, r3
 800c736:	d908      	bls.n	800c74a <pbuf_remove_header+0x5a>
 800c738:	4b12      	ldr	r3, [pc, #72]	; (800c784 <pbuf_remove_header+0x94>)
 800c73a:	f240 2255 	movw	r2, #597	; 0x255
 800c73e:	4914      	ldr	r1, [pc, #80]	; (800c790 <pbuf_remove_header+0xa0>)
 800c740:	4812      	ldr	r0, [pc, #72]	; (800c78c <pbuf_remove_header+0x9c>)
 800c742:	f009 fbc9 	bl	8015ed8 <iprintf>
 800c746:	2301      	movs	r3, #1
 800c748:	e017      	b.n	800c77a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	441a      	add	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	895a      	ldrh	r2, [r3, #10]
 800c760:	89fb      	ldrh	r3, [r7, #14]
 800c762:	1ad3      	subs	r3, r2, r3
 800c764:	b29a      	uxth	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	891a      	ldrh	r2, [r3, #8]
 800c76e:	89fb      	ldrh	r3, [r7, #14]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	b29a      	uxth	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	080181fc 	.word	0x080181fc
 800c788:	08018360 	.word	0x08018360
 800c78c:	0801825c 	.word	0x0801825c
 800c790:	0801836c 	.word	0x0801836c

0800c794 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	807b      	strh	r3, [r7, #2]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c7a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	da08      	bge.n	800c7be <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c7ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7b0:	425b      	negs	r3, r3
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff ff9b 	bl	800c6f0 <pbuf_remove_header>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	e007      	b.n	800c7ce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c7be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7c2:	787a      	ldrb	r2, [r7, #1]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7ff ff1a 	bl	800c600 <pbuf_add_header_impl>
 800c7cc:	4603      	mov	r3, r0
  }
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c7e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ffd2 	bl	800c794 <pbuf_header_impl>
 800c7f0:	4603      	mov	r3, r0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10b      	bne.n	800c822 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d106      	bne.n	800c81e <pbuf_free+0x22>
 800c810:	4b3b      	ldr	r3, [pc, #236]	; (800c900 <pbuf_free+0x104>)
 800c812:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c816:	493b      	ldr	r1, [pc, #236]	; (800c904 <pbuf_free+0x108>)
 800c818:	483b      	ldr	r0, [pc, #236]	; (800c908 <pbuf_free+0x10c>)
 800c81a:	f009 fb5d 	bl	8015ed8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	e069      	b.n	800c8f6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c826:	e062      	b.n	800c8ee <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c828:	f009 f946 	bl	8015ab8 <sys_arch_protect>
 800c82c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	7b9b      	ldrb	r3, [r3, #14]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d106      	bne.n	800c844 <pbuf_free+0x48>
 800c836:	4b32      	ldr	r3, [pc, #200]	; (800c900 <pbuf_free+0x104>)
 800c838:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c83c:	4933      	ldr	r1, [pc, #204]	; (800c90c <pbuf_free+0x110>)
 800c83e:	4832      	ldr	r0, [pc, #200]	; (800c908 <pbuf_free+0x10c>)
 800c840:	f009 fb4a 	bl	8015ed8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	7b9b      	ldrb	r3, [r3, #14]
 800c848:	3b01      	subs	r3, #1
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	739a      	strb	r2, [r3, #14]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7b9b      	ldrb	r3, [r3, #14]
 800c854:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c856:	69b8      	ldr	r0, [r7, #24]
 800c858:	f009 f93c 	bl	8015ad4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d143      	bne.n	800c8ea <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	7b1b      	ldrb	r3, [r3, #12]
 800c86c:	f003 030f 	and.w	r3, r3, #15
 800c870:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	7b5b      	ldrb	r3, [r3, #13]
 800c876:	f003 0302 	and.w	r3, r3, #2
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d011      	beq.n	800c8a2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <pbuf_free+0x9c>
 800c88a:	4b1d      	ldr	r3, [pc, #116]	; (800c900 <pbuf_free+0x104>)
 800c88c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c890:	491f      	ldr	r1, [pc, #124]	; (800c910 <pbuf_free+0x114>)
 800c892:	481d      	ldr	r0, [pc, #116]	; (800c908 <pbuf_free+0x10c>)
 800c894:	f009 fb20 	bl	8015ed8 <iprintf>
        pc->custom_free_function(p);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	4798      	blx	r3
 800c8a0:	e01d      	b.n	800c8de <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d104      	bne.n	800c8b2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	200b      	movs	r0, #11
 800c8ac:	f7ff f906 	bl	800babc <memp_free>
 800c8b0:	e015      	b.n	800c8de <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d104      	bne.n	800c8c2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	200a      	movs	r0, #10
 800c8bc:	f7ff f8fe 	bl	800babc <memp_free>
 800c8c0:	e00d      	b.n	800c8de <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d103      	bne.n	800c8d0 <pbuf_free+0xd4>
          mem_free(p);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f7fe fd43 	bl	800b354 <mem_free>
 800c8ce:	e006      	b.n	800c8de <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c8d0:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <pbuf_free+0x104>)
 800c8d2:	f240 320f 	movw	r2, #783	; 0x30f
 800c8d6:	490f      	ldr	r1, [pc, #60]	; (800c914 <pbuf_free+0x118>)
 800c8d8:	480b      	ldr	r0, [pc, #44]	; (800c908 <pbuf_free+0x10c>)
 800c8da:	f009 fafd 	bl	8015ed8 <iprintf>
        }
      }
      count++;
 800c8de:	7ffb      	ldrb	r3, [r7, #31]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	607b      	str	r3, [r7, #4]
 800c8e8:	e001      	b.n	800c8ee <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d199      	bne.n	800c828 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c8f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3720      	adds	r7, #32
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	080181fc 	.word	0x080181fc
 800c904:	08018360 	.word	0x08018360
 800c908:	0801825c 	.word	0x0801825c
 800c90c:	0801838c 	.word	0x0801838c
 800c910:	080183a4 	.word	0x080183a4
 800c914:	080183c8 	.word	0x080183c8

0800c918 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c924:	e005      	b.n	800c932 <pbuf_clen+0x1a>
    ++len;
 800c926:	89fb      	ldrh	r3, [r7, #14]
 800c928:	3301      	adds	r3, #1
 800c92a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1f6      	bne.n	800c926 <pbuf_clen+0xe>
  }
  return len;
 800c938:	89fb      	ldrh	r3, [r7, #14]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
	...

0800c948 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d016      	beq.n	800c984 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c956:	f009 f8af 	bl	8015ab8 <sys_arch_protect>
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	7b9b      	ldrb	r3, [r3, #14]
 800c960:	3301      	adds	r3, #1
 800c962:	b2da      	uxtb	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	739a      	strb	r2, [r3, #14]
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f009 f8b3 	bl	8015ad4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7b9b      	ldrb	r3, [r3, #14]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d106      	bne.n	800c984 <pbuf_ref+0x3c>
 800c976:	4b05      	ldr	r3, [pc, #20]	; (800c98c <pbuf_ref+0x44>)
 800c978:	f240 3242 	movw	r2, #834	; 0x342
 800c97c:	4904      	ldr	r1, [pc, #16]	; (800c990 <pbuf_ref+0x48>)
 800c97e:	4805      	ldr	r0, [pc, #20]	; (800c994 <pbuf_ref+0x4c>)
 800c980:	f009 faaa 	bl	8015ed8 <iprintf>
  }
}
 800c984:	bf00      	nop
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	080181fc 	.word	0x080181fc
 800c990:	080183dc 	.word	0x080183dc
 800c994:	0801825c 	.word	0x0801825c

0800c998 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <pbuf_cat+0x16>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d107      	bne.n	800c9be <pbuf_cat+0x26>
 800c9ae:	4b20      	ldr	r3, [pc, #128]	; (800ca30 <pbuf_cat+0x98>)
 800c9b0:	f240 3259 	movw	r2, #857	; 0x359
 800c9b4:	491f      	ldr	r1, [pc, #124]	; (800ca34 <pbuf_cat+0x9c>)
 800c9b6:	4820      	ldr	r0, [pc, #128]	; (800ca38 <pbuf_cat+0xa0>)
 800c9b8:	f009 fa8e 	bl	8015ed8 <iprintf>
 800c9bc:	e034      	b.n	800ca28 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	60fb      	str	r3, [r7, #12]
 800c9c2:	e00a      	b.n	800c9da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	891a      	ldrh	r2, [r3, #8]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	891b      	ldrh	r3, [r3, #8]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	60fb      	str	r3, [r7, #12]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1f0      	bne.n	800c9c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	891a      	ldrh	r2, [r3, #8]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	895b      	ldrh	r3, [r3, #10]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d006      	beq.n	800c9fc <pbuf_cat+0x64>
 800c9ee:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <pbuf_cat+0x98>)
 800c9f0:	f240 3262 	movw	r2, #866	; 0x362
 800c9f4:	4911      	ldr	r1, [pc, #68]	; (800ca3c <pbuf_cat+0xa4>)
 800c9f6:	4810      	ldr	r0, [pc, #64]	; (800ca38 <pbuf_cat+0xa0>)
 800c9f8:	f009 fa6e 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d006      	beq.n	800ca12 <pbuf_cat+0x7a>
 800ca04:	4b0a      	ldr	r3, [pc, #40]	; (800ca30 <pbuf_cat+0x98>)
 800ca06:	f240 3263 	movw	r2, #867	; 0x363
 800ca0a:	490d      	ldr	r1, [pc, #52]	; (800ca40 <pbuf_cat+0xa8>)
 800ca0c:	480a      	ldr	r0, [pc, #40]	; (800ca38 <pbuf_cat+0xa0>)
 800ca0e:	f009 fa63 	bl	8015ed8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	891a      	ldrh	r2, [r3, #8]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	891b      	ldrh	r3, [r3, #8]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	080181fc 	.word	0x080181fc
 800ca34:	080183f0 	.word	0x080183f0
 800ca38:	0801825c 	.word	0x0801825c
 800ca3c:	08018428 	.word	0x08018428
 800ca40:	08018458 	.word	0x08018458

0800ca44 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]
 800ca52:	2300      	movs	r3, #0
 800ca54:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d008      	beq.n	800ca6e <pbuf_copy+0x2a>
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d005      	beq.n	800ca6e <pbuf_copy+0x2a>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	891a      	ldrh	r2, [r3, #8]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	891b      	ldrh	r3, [r3, #8]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d209      	bcs.n	800ca82 <pbuf_copy+0x3e>
 800ca6e:	4b57      	ldr	r3, [pc, #348]	; (800cbcc <pbuf_copy+0x188>)
 800ca70:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ca74:	4956      	ldr	r1, [pc, #344]	; (800cbd0 <pbuf_copy+0x18c>)
 800ca76:	4857      	ldr	r0, [pc, #348]	; (800cbd4 <pbuf_copy+0x190>)
 800ca78:	f009 fa2e 	bl	8015ed8 <iprintf>
 800ca7c:	f06f 030f 	mvn.w	r3, #15
 800ca80:	e09f      	b.n	800cbc2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	895b      	ldrh	r3, [r3, #10]
 800ca86:	461a      	mov	r2, r3
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	895b      	ldrh	r3, [r3, #10]
 800ca90:	4619      	mov	r1, r3
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	1acb      	subs	r3, r1, r3
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d306      	bcc.n	800caa8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	895b      	ldrh	r3, [r3, #10]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	e005      	b.n	800cab4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	895b      	ldrh	r3, [r3, #10]
 800caac:	461a      	mov	r2, r3
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	18d0      	adds	r0, r2, r3
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	4413      	add	r3, r2
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	4619      	mov	r1, r3
 800cac8:	f009 f941 	bl	8015d4e <memcpy>
    offset_to += len;
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	4413      	add	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4413      	add	r3, r2
 800cada:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	895b      	ldrh	r3, [r3, #10]
 800cae0:	461a      	mov	r2, r3
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d906      	bls.n	800caf6 <pbuf_copy+0xb2>
 800cae8:	4b38      	ldr	r3, [pc, #224]	; (800cbcc <pbuf_copy+0x188>)
 800caea:	f240 32d9 	movw	r2, #985	; 0x3d9
 800caee:	493a      	ldr	r1, [pc, #232]	; (800cbd8 <pbuf_copy+0x194>)
 800caf0:	4838      	ldr	r0, [pc, #224]	; (800cbd4 <pbuf_copy+0x190>)
 800caf2:	f009 f9f1 	bl	8015ed8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	895b      	ldrh	r3, [r3, #10]
 800cafa:	461a      	mov	r2, r3
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d906      	bls.n	800cb10 <pbuf_copy+0xcc>
 800cb02:	4b32      	ldr	r3, [pc, #200]	; (800cbcc <pbuf_copy+0x188>)
 800cb04:	f240 32da 	movw	r2, #986	; 0x3da
 800cb08:	4934      	ldr	r1, [pc, #208]	; (800cbdc <pbuf_copy+0x198>)
 800cb0a:	4832      	ldr	r0, [pc, #200]	; (800cbd4 <pbuf_copy+0x190>)
 800cb0c:	f009 f9e4 	bl	8015ed8 <iprintf>
    if (offset_from >= p_from->len) {
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	895b      	ldrh	r3, [r3, #10]
 800cb14:	461a      	mov	r2, r3
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d304      	bcc.n	800cb26 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	895b      	ldrh	r3, [r3, #10]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d114      	bne.n	800cb5c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10c      	bne.n	800cb5c <pbuf_copy+0x118>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d009      	beq.n	800cb5c <pbuf_copy+0x118>
 800cb48:	4b20      	ldr	r3, [pc, #128]	; (800cbcc <pbuf_copy+0x188>)
 800cb4a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cb4e:	4924      	ldr	r1, [pc, #144]	; (800cbe0 <pbuf_copy+0x19c>)
 800cb50:	4820      	ldr	r0, [pc, #128]	; (800cbd4 <pbuf_copy+0x190>)
 800cb52:	f009 f9c1 	bl	8015ed8 <iprintf>
 800cb56:	f06f 030f 	mvn.w	r3, #15
 800cb5a:	e032      	b.n	800cbc2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d013      	beq.n	800cb8a <pbuf_copy+0x146>
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	895a      	ldrh	r2, [r3, #10]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	891b      	ldrh	r3, [r3, #8]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d10d      	bne.n	800cb8a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d009      	beq.n	800cb8a <pbuf_copy+0x146>
 800cb76:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <pbuf_copy+0x188>)
 800cb78:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800cb7c:	4919      	ldr	r1, [pc, #100]	; (800cbe4 <pbuf_copy+0x1a0>)
 800cb7e:	4815      	ldr	r0, [pc, #84]	; (800cbd4 <pbuf_copy+0x190>)
 800cb80:	f009 f9aa 	bl	8015ed8 <iprintf>
 800cb84:	f06f 0305 	mvn.w	r3, #5
 800cb88:	e01b      	b.n	800cbc2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d013      	beq.n	800cbb8 <pbuf_copy+0x174>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	895a      	ldrh	r2, [r3, #10]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	891b      	ldrh	r3, [r3, #8]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d10d      	bne.n	800cbb8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d009      	beq.n	800cbb8 <pbuf_copy+0x174>
 800cba4:	4b09      	ldr	r3, [pc, #36]	; (800cbcc <pbuf_copy+0x188>)
 800cba6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cbaa:	490e      	ldr	r1, [pc, #56]	; (800cbe4 <pbuf_copy+0x1a0>)
 800cbac:	4809      	ldr	r0, [pc, #36]	; (800cbd4 <pbuf_copy+0x190>)
 800cbae:	f009 f993 	bl	8015ed8 <iprintf>
 800cbb2:	f06f 0305 	mvn.w	r3, #5
 800cbb6:	e004      	b.n	800cbc2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f47f af61 	bne.w	800ca82 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	080181fc 	.word	0x080181fc
 800cbd0:	080184a4 	.word	0x080184a4
 800cbd4:	0801825c 	.word	0x0801825c
 800cbd8:	080184d4 	.word	0x080184d4
 800cbdc:	080184ec 	.word	0x080184ec
 800cbe0:	08018508 	.word	0x08018508
 800cbe4:	08018518 	.word	0x08018518

0800cbe8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b088      	sub	sp, #32
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	80fb      	strh	r3, [r7, #6]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d108      	bne.n	800cc1e <pbuf_copy_partial+0x36>
 800cc0c:	4b2b      	ldr	r3, [pc, #172]	; (800ccbc <pbuf_copy_partial+0xd4>)
 800cc0e:	f240 420a 	movw	r2, #1034	; 0x40a
 800cc12:	492b      	ldr	r1, [pc, #172]	; (800ccc0 <pbuf_copy_partial+0xd8>)
 800cc14:	482b      	ldr	r0, [pc, #172]	; (800ccc4 <pbuf_copy_partial+0xdc>)
 800cc16:	f009 f95f 	bl	8015ed8 <iprintf>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e04a      	b.n	800ccb4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d108      	bne.n	800cc36 <pbuf_copy_partial+0x4e>
 800cc24:	4b25      	ldr	r3, [pc, #148]	; (800ccbc <pbuf_copy_partial+0xd4>)
 800cc26:	f240 420b 	movw	r2, #1035	; 0x40b
 800cc2a:	4927      	ldr	r1, [pc, #156]	; (800ccc8 <pbuf_copy_partial+0xe0>)
 800cc2c:	4825      	ldr	r0, [pc, #148]	; (800ccc4 <pbuf_copy_partial+0xdc>)
 800cc2e:	f009 f953 	bl	8015ed8 <iprintf>
 800cc32:	2300      	movs	r3, #0
 800cc34:	e03e      	b.n	800ccb4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	61fb      	str	r3, [r7, #28]
 800cc3a:	e034      	b.n	800cca6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cc3c:	88bb      	ldrh	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00a      	beq.n	800cc58 <pbuf_copy_partial+0x70>
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	895b      	ldrh	r3, [r3, #10]
 800cc46:	88ba      	ldrh	r2, [r7, #4]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d305      	bcc.n	800cc58 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	895b      	ldrh	r3, [r3, #10]
 800cc50:	88ba      	ldrh	r2, [r7, #4]
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	80bb      	strh	r3, [r7, #4]
 800cc56:	e023      	b.n	800cca0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	895a      	ldrh	r2, [r3, #10]
 800cc5c:	88bb      	ldrh	r3, [r7, #4]
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cc62:	8b3a      	ldrh	r2, [r7, #24]
 800cc64:	88fb      	ldrh	r3, [r7, #6]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d901      	bls.n	800cc6e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cc6a:	88fb      	ldrh	r3, [r7, #6]
 800cc6c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cc6e:	8b7b      	ldrh	r3, [r7, #26]
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	18d0      	adds	r0, r2, r3
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	685a      	ldr	r2, [r3, #4]
 800cc78:	88bb      	ldrh	r3, [r7, #4]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	8b3a      	ldrh	r2, [r7, #24]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	f009 f865 	bl	8015d4e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cc84:	8afa      	ldrh	r2, [r7, #22]
 800cc86:	8b3b      	ldrh	r3, [r7, #24]
 800cc88:	4413      	add	r3, r2
 800cc8a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cc8c:	8b7a      	ldrh	r2, [r7, #26]
 800cc8e:	8b3b      	ldrh	r3, [r7, #24]
 800cc90:	4413      	add	r3, r2
 800cc92:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cc94:	88fa      	ldrh	r2, [r7, #6]
 800cc96:	8b3b      	ldrh	r3, [r7, #24]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	61fb      	str	r3, [r7, #28]
 800cca6:	88fb      	ldrh	r3, [r7, #6]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <pbuf_copy_partial+0xca>
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1c4      	bne.n	800cc3c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ccb2:	8afb      	ldrh	r3, [r7, #22]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3720      	adds	r7, #32
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	080181fc 	.word	0x080181fc
 800ccc0:	08018544 	.word	0x08018544
 800ccc4:	0801825c 	.word	0x0801825c
 800ccc8:	08018564 	.word	0x08018564

0800cccc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	603a      	str	r2, [r7, #0]
 800ccd6:	71fb      	strb	r3, [r7, #7]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	8919      	ldrh	r1, [r3, #8]
 800cce0:	88ba      	ldrh	r2, [r7, #4]
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7ff faa5 	bl	800c234 <pbuf_alloc>
 800ccea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <pbuf_clone+0x2a>
    return NULL;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e011      	b.n	800cd1a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f7ff fea3 	bl	800ca44 <pbuf_copy>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cd02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d006      	beq.n	800cd18 <pbuf_clone+0x4c>
 800cd0a:	4b06      	ldr	r3, [pc, #24]	; (800cd24 <pbuf_clone+0x58>)
 800cd0c:	f240 5224 	movw	r2, #1316	; 0x524
 800cd10:	4905      	ldr	r1, [pc, #20]	; (800cd28 <pbuf_clone+0x5c>)
 800cd12:	4806      	ldr	r0, [pc, #24]	; (800cd2c <pbuf_clone+0x60>)
 800cd14:	f009 f8e0 	bl	8015ed8 <iprintf>
  return q;
 800cd18:	68fb      	ldr	r3, [r7, #12]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	080181fc 	.word	0x080181fc
 800cd28:	08018670 	.word	0x08018670
 800cd2c:	0801825c 	.word	0x0801825c

0800cd30 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cd34:	f009 f8e8 	bl	8015f08 <rand>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	4b01      	ldr	r3, [pc, #4]	; (800cd50 <tcp_init+0x20>)
 800cd4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cd4c:	bf00      	nop
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	20000024 	.word	0x20000024

0800cd54 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	7d1b      	ldrb	r3, [r3, #20]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d105      	bne.n	800cd70 <tcp_free+0x1c>
 800cd64:	4b06      	ldr	r3, [pc, #24]	; (800cd80 <tcp_free+0x2c>)
 800cd66:	22d4      	movs	r2, #212	; 0xd4
 800cd68:	4906      	ldr	r1, [pc, #24]	; (800cd84 <tcp_free+0x30>)
 800cd6a:	4807      	ldr	r0, [pc, #28]	; (800cd88 <tcp_free+0x34>)
 800cd6c:	f009 f8b4 	bl	8015ed8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	2000      	movs	r0, #0
 800cd74:	f7fe fea2 	bl	800babc <memp_free>
}
 800cd78:	bf00      	nop
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	080186fc 	.word	0x080186fc
 800cd84:	0801872c 	.word	0x0801872c
 800cd88:	08018740 	.word	0x08018740

0800cd8c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7d1b      	ldrb	r3, [r3, #20]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d105      	bne.n	800cda8 <tcp_free_listen+0x1c>
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <tcp_free_listen+0x2c>)
 800cd9e:	22df      	movs	r2, #223	; 0xdf
 800cda0:	4906      	ldr	r1, [pc, #24]	; (800cdbc <tcp_free_listen+0x30>)
 800cda2:	4807      	ldr	r0, [pc, #28]	; (800cdc0 <tcp_free_listen+0x34>)
 800cda4:	f009 f898 	bl	8015ed8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	2001      	movs	r0, #1
 800cdac:	f7fe fe86 	bl	800babc <memp_free>
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	080186fc 	.word	0x080186fc
 800cdbc:	08018768 	.word	0x08018768
 800cdc0:	08018740 	.word	0x08018740

0800cdc4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cdc8:	f001 f8f4 	bl	800dfb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cdcc:	4b07      	ldr	r3, [pc, #28]	; (800cdec <tcp_tmr+0x28>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	b2da      	uxtb	r2, r3
 800cdd4:	4b05      	ldr	r3, [pc, #20]	; (800cdec <tcp_tmr+0x28>)
 800cdd6:	701a      	strb	r2, [r3, #0]
 800cdd8:	4b04      	ldr	r3, [pc, #16]	; (800cdec <tcp_tmr+0x28>)
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cde4:	f000 fda6 	bl	800d934 <tcp_slowtmr>
  }
}
 800cde8:	bf00      	nop
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20011959 	.word	0x20011959

0800cdf0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d105      	bne.n	800ce0c <tcp_remove_listener+0x1c>
 800ce00:	4b0d      	ldr	r3, [pc, #52]	; (800ce38 <tcp_remove_listener+0x48>)
 800ce02:	22ff      	movs	r2, #255	; 0xff
 800ce04:	490d      	ldr	r1, [pc, #52]	; (800ce3c <tcp_remove_listener+0x4c>)
 800ce06:	480e      	ldr	r0, [pc, #56]	; (800ce40 <tcp_remove_listener+0x50>)
 800ce08:	f009 f866 	bl	8015ed8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	e00a      	b.n	800ce28 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce16:	683a      	ldr	r2, [r7, #0]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d102      	bne.n	800ce22 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1f1      	bne.n	800ce12 <tcp_remove_listener+0x22>
    }
  }
}
 800ce2e:	bf00      	nop
 800ce30:	bf00      	nop
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	080186fc 	.word	0x080186fc
 800ce3c:	08018784 	.word	0x08018784
 800ce40:	08018740 	.word	0x08018740

0800ce44 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <tcp_listen_closed+0x1c>
 800ce52:	4b14      	ldr	r3, [pc, #80]	; (800cea4 <tcp_listen_closed+0x60>)
 800ce54:	f240 1211 	movw	r2, #273	; 0x111
 800ce58:	4913      	ldr	r1, [pc, #76]	; (800cea8 <tcp_listen_closed+0x64>)
 800ce5a:	4814      	ldr	r0, [pc, #80]	; (800ceac <tcp_listen_closed+0x68>)
 800ce5c:	f009 f83c 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	7d1b      	ldrb	r3, [r3, #20]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d006      	beq.n	800ce76 <tcp_listen_closed+0x32>
 800ce68:	4b0e      	ldr	r3, [pc, #56]	; (800cea4 <tcp_listen_closed+0x60>)
 800ce6a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ce6e:	4910      	ldr	r1, [pc, #64]	; (800ceb0 <tcp_listen_closed+0x6c>)
 800ce70:	480e      	ldr	r0, [pc, #56]	; (800ceac <tcp_listen_closed+0x68>)
 800ce72:	f009 f831 	bl	8015ed8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce76:	2301      	movs	r3, #1
 800ce78:	60fb      	str	r3, [r7, #12]
 800ce7a:	e00b      	b.n	800ce94 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ce7c:	4a0d      	ldr	r2, [pc, #52]	; (800ceb4 <tcp_listen_closed+0x70>)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6879      	ldr	r1, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff ffb1 	bl	800cdf0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3301      	adds	r3, #1
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d9f0      	bls.n	800ce7c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ce9a:	bf00      	nop
 800ce9c:	bf00      	nop
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	080186fc 	.word	0x080186fc
 800cea8:	080187ac 	.word	0x080187ac
 800ceac:	08018740 	.word	0x08018740
 800ceb0:	080187b8 	.word	0x080187b8
 800ceb4:	0801a418 	.word	0x0801a418

0800ceb8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ceb8:	b5b0      	push	{r4, r5, r7, lr}
 800ceba:	b088      	sub	sp, #32
 800cebc:	af04      	add	r7, sp, #16
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d106      	bne.n	800ced8 <tcp_close_shutdown+0x20>
 800ceca:	4b63      	ldr	r3, [pc, #396]	; (800d058 <tcp_close_shutdown+0x1a0>)
 800cecc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ced0:	4962      	ldr	r1, [pc, #392]	; (800d05c <tcp_close_shutdown+0x1a4>)
 800ced2:	4863      	ldr	r0, [pc, #396]	; (800d060 <tcp_close_shutdown+0x1a8>)
 800ced4:	f009 f800 	bl	8015ed8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d066      	beq.n	800cfac <tcp_close_shutdown+0xf4>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	7d1b      	ldrb	r3, [r3, #20]
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d003      	beq.n	800ceee <tcp_close_shutdown+0x36>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	7d1b      	ldrb	r3, [r3, #20]
 800ceea:	2b07      	cmp	r3, #7
 800ceec:	d15e      	bne.n	800cfac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d104      	bne.n	800cf00 <tcp_close_shutdown+0x48>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cefa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cefe:	d055      	beq.n	800cfac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	8b5b      	ldrh	r3, [r3, #26]
 800cf04:	f003 0310 	and.w	r3, r3, #16
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d106      	bne.n	800cf1a <tcp_close_shutdown+0x62>
 800cf0c:	4b52      	ldr	r3, [pc, #328]	; (800d058 <tcp_close_shutdown+0x1a0>)
 800cf0e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cf12:	4954      	ldr	r1, [pc, #336]	; (800d064 <tcp_close_shutdown+0x1ac>)
 800cf14:	4852      	ldr	r0, [pc, #328]	; (800d060 <tcp_close_shutdown+0x1a8>)
 800cf16:	f008 ffdf 	bl	8015ed8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cf22:	687d      	ldr	r5, [r7, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	3304      	adds	r3, #4
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	8ad2      	ldrh	r2, [r2, #22]
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	8b09      	ldrh	r1, [r1, #24]
 800cf30:	9102      	str	r1, [sp, #8]
 800cf32:	9201      	str	r2, [sp, #4]
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	462b      	mov	r3, r5
 800cf38:	4622      	mov	r2, r4
 800cf3a:	4601      	mov	r1, r0
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f005 fe2b 	bl	8012b98 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f001 fbe6 	bl	800e714 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cf48:	4b47      	ldr	r3, [pc, #284]	; (800d068 <tcp_close_shutdown+0x1b0>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d105      	bne.n	800cf5e <tcp_close_shutdown+0xa6>
 800cf52:	4b45      	ldr	r3, [pc, #276]	; (800d068 <tcp_close_shutdown+0x1b0>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	4a43      	ldr	r2, [pc, #268]	; (800d068 <tcp_close_shutdown+0x1b0>)
 800cf5a:	6013      	str	r3, [r2, #0]
 800cf5c:	e013      	b.n	800cf86 <tcp_close_shutdown+0xce>
 800cf5e:	4b42      	ldr	r3, [pc, #264]	; (800d068 <tcp_close_shutdown+0x1b0>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	e00c      	b.n	800cf80 <tcp_close_shutdown+0xc8>
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d104      	bne.n	800cf7a <tcp_close_shutdown+0xc2>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68da      	ldr	r2, [r3, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	60da      	str	r2, [r3, #12]
 800cf78:	e005      	b.n	800cf86 <tcp_close_shutdown+0xce>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1ef      	bne.n	800cf66 <tcp_close_shutdown+0xae>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	60da      	str	r2, [r3, #12]
 800cf8c:	4b37      	ldr	r3, [pc, #220]	; (800d06c <tcp_close_shutdown+0x1b4>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cf92:	4b37      	ldr	r3, [pc, #220]	; (800d070 <tcp_close_shutdown+0x1b8>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d102      	bne.n	800cfa2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cf9c:	f004 f87e 	bl	801109c <tcp_trigger_input_pcb_close>
 800cfa0:	e002      	b.n	800cfa8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff fed6 	bl	800cd54 <tcp_free>
      }
      return ERR_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e050      	b.n	800d04e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d03b      	beq.n	800d02c <tcp_close_shutdown+0x174>
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	dc44      	bgt.n	800d042 <tcp_close_shutdown+0x18a>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <tcp_close_shutdown+0x10a>
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d02a      	beq.n	800d016 <tcp_close_shutdown+0x15e>
 800cfc0:	e03f      	b.n	800d042 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	8adb      	ldrh	r3, [r3, #22]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d021      	beq.n	800d00e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cfca:	4b2a      	ldr	r3, [pc, #168]	; (800d074 <tcp_close_shutdown+0x1bc>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d105      	bne.n	800cfe0 <tcp_close_shutdown+0x128>
 800cfd4:	4b27      	ldr	r3, [pc, #156]	; (800d074 <tcp_close_shutdown+0x1bc>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	4a26      	ldr	r2, [pc, #152]	; (800d074 <tcp_close_shutdown+0x1bc>)
 800cfdc:	6013      	str	r3, [r2, #0]
 800cfde:	e013      	b.n	800d008 <tcp_close_shutdown+0x150>
 800cfe0:	4b24      	ldr	r3, [pc, #144]	; (800d074 <tcp_close_shutdown+0x1bc>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	60bb      	str	r3, [r7, #8]
 800cfe6:	e00c      	b.n	800d002 <tcp_close_shutdown+0x14a>
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d104      	bne.n	800cffc <tcp_close_shutdown+0x144>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	68da      	ldr	r2, [r3, #12]
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	60da      	str	r2, [r3, #12]
 800cffa:	e005      	b.n	800d008 <tcp_close_shutdown+0x150>
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	60bb      	str	r3, [r7, #8]
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1ef      	bne.n	800cfe8 <tcp_close_shutdown+0x130>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7ff fea0 	bl	800cd54 <tcp_free>
      break;
 800d014:	e01a      	b.n	800d04c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7ff ff14 	bl	800ce44 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d01c:	6879      	ldr	r1, [r7, #4]
 800d01e:	4816      	ldr	r0, [pc, #88]	; (800d078 <tcp_close_shutdown+0x1c0>)
 800d020:	f001 fbc8 	bl	800e7b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff feb1 	bl	800cd8c <tcp_free_listen>
      break;
 800d02a:	e00f      	b.n	800d04c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	480e      	ldr	r0, [pc, #56]	; (800d068 <tcp_close_shutdown+0x1b0>)
 800d030:	f001 fbc0 	bl	800e7b4 <tcp_pcb_remove>
 800d034:	4b0d      	ldr	r3, [pc, #52]	; (800d06c <tcp_close_shutdown+0x1b4>)
 800d036:	2201      	movs	r2, #1
 800d038:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff fe8a 	bl	800cd54 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d040:	e004      	b.n	800d04c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 f81a 	bl	800d07c <tcp_close_shutdown_fin>
 800d048:	4603      	mov	r3, r0
 800d04a:	e000      	b.n	800d04e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bdb0      	pop	{r4, r5, r7, pc}
 800d056:	bf00      	nop
 800d058:	080186fc 	.word	0x080186fc
 800d05c:	080187d0 	.word	0x080187d0
 800d060:	08018740 	.word	0x08018740
 800d064:	080187f0 	.word	0x080187f0
 800d068:	20011950 	.word	0x20011950
 800d06c:	20011958 	.word	0x20011958
 800d070:	20011990 	.word	0x20011990
 800d074:	20011948 	.word	0x20011948
 800d078:	2001194c 	.word	0x2001194c

0800d07c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d106      	bne.n	800d098 <tcp_close_shutdown_fin+0x1c>
 800d08a:	4b2e      	ldr	r3, [pc, #184]	; (800d144 <tcp_close_shutdown_fin+0xc8>)
 800d08c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d090:	492d      	ldr	r1, [pc, #180]	; (800d148 <tcp_close_shutdown_fin+0xcc>)
 800d092:	482e      	ldr	r0, [pc, #184]	; (800d14c <tcp_close_shutdown_fin+0xd0>)
 800d094:	f008 ff20 	bl	8015ed8 <iprintf>

  switch (pcb->state) {
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7d1b      	ldrb	r3, [r3, #20]
 800d09c:	2b07      	cmp	r3, #7
 800d09e:	d020      	beq.n	800d0e2 <tcp_close_shutdown_fin+0x66>
 800d0a0:	2b07      	cmp	r3, #7
 800d0a2:	dc2b      	bgt.n	800d0fc <tcp_close_shutdown_fin+0x80>
 800d0a4:	2b03      	cmp	r3, #3
 800d0a6:	d002      	beq.n	800d0ae <tcp_close_shutdown_fin+0x32>
 800d0a8:	2b04      	cmp	r3, #4
 800d0aa:	d00d      	beq.n	800d0c8 <tcp_close_shutdown_fin+0x4c>
 800d0ac:	e026      	b.n	800d0fc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f004 fe5e 	bl	8011d70 <tcp_send_fin>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d11f      	bne.n	800d100 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2205      	movs	r2, #5
 800d0c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0c6:	e01b      	b.n	800d100 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f004 fe51 	bl	8011d70 <tcp_send_fin>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d114      	bne.n	800d104 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2205      	movs	r2, #5
 800d0de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0e0:	e010      	b.n	800d104 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f004 fe44 	bl	8011d70 <tcp_send_fin>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d109      	bne.n	800d108 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2209      	movs	r2, #9
 800d0f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0fa:	e005      	b.n	800d108 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e01c      	b.n	800d13a <tcp_close_shutdown_fin+0xbe>
      break;
 800d100:	bf00      	nop
 800d102:	e002      	b.n	800d10a <tcp_close_shutdown_fin+0x8e>
      break;
 800d104:	bf00      	nop
 800d106:	e000      	b.n	800d10a <tcp_close_shutdown_fin+0x8e>
      break;
 800d108:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d103      	bne.n	800d11a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f004 ff6a 	bl	8011fec <tcp_output>
 800d118:	e00d      	b.n	800d136 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d11e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d122:	d108      	bne.n	800d136 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	8b5b      	ldrh	r3, [r3, #26]
 800d128:	f043 0308 	orr.w	r3, r3, #8
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	e001      	b.n	800d13a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	080186fc 	.word	0x080186fc
 800d148:	080187ac 	.word	0x080187ac
 800d14c:	08018740 	.word	0x08018740

0800d150 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d109      	bne.n	800d172 <tcp_close+0x22>
 800d15e:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <tcp_close+0x4c>)
 800d160:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d164:	490e      	ldr	r1, [pc, #56]	; (800d1a0 <tcp_close+0x50>)
 800d166:	480f      	ldr	r0, [pc, #60]	; (800d1a4 <tcp_close+0x54>)
 800d168:	f008 feb6 	bl	8015ed8 <iprintf>
 800d16c:	f06f 030f 	mvn.w	r3, #15
 800d170:	e00f      	b.n	800d192 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7d1b      	ldrb	r3, [r3, #20]
 800d176:	2b01      	cmp	r3, #1
 800d178:	d006      	beq.n	800d188 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	8b5b      	ldrh	r3, [r3, #26]
 800d17e:	f043 0310 	orr.w	r3, r3, #16
 800d182:	b29a      	uxth	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d188:	2101      	movs	r1, #1
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7ff fe94 	bl	800ceb8 <tcp_close_shutdown>
 800d190:	4603      	mov	r3, r0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	080186fc 	.word	0x080186fc
 800d1a0:	0801880c 	.word	0x0801880c
 800d1a4:	08018740 	.word	0x08018740

0800d1a8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d109      	bne.n	800d1ce <tcp_shutdown+0x26>
 800d1ba:	4b26      	ldr	r3, [pc, #152]	; (800d254 <tcp_shutdown+0xac>)
 800d1bc:	f240 2207 	movw	r2, #519	; 0x207
 800d1c0:	4925      	ldr	r1, [pc, #148]	; (800d258 <tcp_shutdown+0xb0>)
 800d1c2:	4826      	ldr	r0, [pc, #152]	; (800d25c <tcp_shutdown+0xb4>)
 800d1c4:	f008 fe88 	bl	8015ed8 <iprintf>
 800d1c8:	f06f 030f 	mvn.w	r3, #15
 800d1cc:	e03d      	b.n	800d24a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	7d1b      	ldrb	r3, [r3, #20]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d102      	bne.n	800d1dc <tcp_shutdown+0x34>
    return ERR_CONN;
 800d1d6:	f06f 030a 	mvn.w	r3, #10
 800d1da:	e036      	b.n	800d24a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d01b      	beq.n	800d21a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8b5b      	ldrh	r3, [r3, #26]
 800d1e6:	f043 0310 	orr.w	r3, r3, #16
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d005      	beq.n	800d202 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7ff fe5d 	bl	800ceb8 <tcp_close_shutdown>
 800d1fe:	4603      	mov	r3, r0
 800d200:	e023      	b.n	800d24a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d206:	2b00      	cmp	r3, #0
 800d208:	d007      	beq.n	800d21a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff faf4 	bl	800c7fc <pbuf_free>
      pcb->refused_data = NULL;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d013      	beq.n	800d248 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	7d1b      	ldrb	r3, [r3, #20]
 800d224:	2b04      	cmp	r3, #4
 800d226:	dc02      	bgt.n	800d22e <tcp_shutdown+0x86>
 800d228:	2b03      	cmp	r3, #3
 800d22a:	da02      	bge.n	800d232 <tcp_shutdown+0x8a>
 800d22c:	e009      	b.n	800d242 <tcp_shutdown+0x9a>
 800d22e:	2b07      	cmp	r3, #7
 800d230:	d107      	bne.n	800d242 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	b2db      	uxtb	r3, r3
 800d236:	4619      	mov	r1, r3
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7ff fe3d 	bl	800ceb8 <tcp_close_shutdown>
 800d23e:	4603      	mov	r3, r0
 800d240:	e003      	b.n	800d24a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d242:	f06f 030a 	mvn.w	r3, #10
 800d246:	e000      	b.n	800d24a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	080186fc 	.word	0x080186fc
 800d258:	08018824 	.word	0x08018824
 800d25c:	08018740 	.word	0x08018740

0800d260 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08e      	sub	sp, #56	; 0x38
 800d264:	af04      	add	r7, sp, #16
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d107      	bne.n	800d280 <tcp_abandon+0x20>
 800d270:	4b52      	ldr	r3, [pc, #328]	; (800d3bc <tcp_abandon+0x15c>)
 800d272:	f240 223d 	movw	r2, #573	; 0x23d
 800d276:	4952      	ldr	r1, [pc, #328]	; (800d3c0 <tcp_abandon+0x160>)
 800d278:	4852      	ldr	r0, [pc, #328]	; (800d3c4 <tcp_abandon+0x164>)
 800d27a:	f008 fe2d 	bl	8015ed8 <iprintf>
 800d27e:	e099      	b.n	800d3b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	7d1b      	ldrb	r3, [r3, #20]
 800d284:	2b01      	cmp	r3, #1
 800d286:	d106      	bne.n	800d296 <tcp_abandon+0x36>
 800d288:	4b4c      	ldr	r3, [pc, #304]	; (800d3bc <tcp_abandon+0x15c>)
 800d28a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d28e:	494e      	ldr	r1, [pc, #312]	; (800d3c8 <tcp_abandon+0x168>)
 800d290:	484c      	ldr	r0, [pc, #304]	; (800d3c4 <tcp_abandon+0x164>)
 800d292:	f008 fe21 	bl	8015ed8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7d1b      	ldrb	r3, [r3, #20]
 800d29a:	2b0a      	cmp	r3, #10
 800d29c:	d107      	bne.n	800d2ae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	484a      	ldr	r0, [pc, #296]	; (800d3cc <tcp_abandon+0x16c>)
 800d2a2:	f001 fa87 	bl	800e7b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7ff fd54 	bl	800cd54 <tcp_free>
 800d2ac:	e082      	b.n	800d3b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7d1b      	ldrb	r3, [r3, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d126      	bne.n	800d326 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	8adb      	ldrh	r3, [r3, #22]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d02e      	beq.n	800d33e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d2e0:	4b3b      	ldr	r3, [pc, #236]	; (800d3d0 <tcp_abandon+0x170>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d105      	bne.n	800d2f6 <tcp_abandon+0x96>
 800d2ea:	4b39      	ldr	r3, [pc, #228]	; (800d3d0 <tcp_abandon+0x170>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	4a37      	ldr	r2, [pc, #220]	; (800d3d0 <tcp_abandon+0x170>)
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	e013      	b.n	800d31e <tcp_abandon+0xbe>
 800d2f6:	4b36      	ldr	r3, [pc, #216]	; (800d3d0 <tcp_abandon+0x170>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	61fb      	str	r3, [r7, #28]
 800d2fc:	e00c      	b.n	800d318 <tcp_abandon+0xb8>
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	429a      	cmp	r2, r3
 800d306:	d104      	bne.n	800d312 <tcp_abandon+0xb2>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	68da      	ldr	r2, [r3, #12]
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	60da      	str	r2, [r3, #12]
 800d310:	e005      	b.n	800d31e <tcp_abandon+0xbe>
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	61fb      	str	r3, [r7, #28]
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1ef      	bne.n	800d2fe <tcp_abandon+0x9e>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	60da      	str	r2, [r3, #12]
 800d324:	e00b      	b.n	800d33e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	8adb      	ldrh	r3, [r3, #22]
 800d32e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d330:	6879      	ldr	r1, [r7, #4]
 800d332:	4828      	ldr	r0, [pc, #160]	; (800d3d4 <tcp_abandon+0x174>)
 800d334:	f001 fa3e 	bl	800e7b4 <tcp_pcb_remove>
 800d338:	4b27      	ldr	r3, [pc, #156]	; (800d3d8 <tcp_abandon+0x178>)
 800d33a:	2201      	movs	r2, #1
 800d33c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d342:	2b00      	cmp	r3, #0
 800d344:	d004      	beq.n	800d350 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 ff12 	bl	800e174 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 ff09 	bl	800e174 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d366:	2b00      	cmp	r3, #0
 800d368:	d004      	beq.n	800d374 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 ff00 	bl	800e174 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00e      	beq.n	800d398 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	3304      	adds	r3, #4
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	8b12      	ldrh	r2, [r2, #24]
 800d384:	9202      	str	r2, [sp, #8]
 800d386:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d388:	9201      	str	r2, [sp, #4]
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	460b      	mov	r3, r1
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	69b9      	ldr	r1, [r7, #24]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f005 fc00 	bl	8012b98 <tcp_rst>
    }
    last_state = pcb->state;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	7d1b      	ldrb	r3, [r3, #20]
 800d39c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7ff fcd8 	bl	800cd54 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d004      	beq.n	800d3b4 <tcp_abandon+0x154>
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	f06f 010c 	mvn.w	r1, #12
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	4798      	blx	r3
  }
}
 800d3b4:	3728      	adds	r7, #40	; 0x28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	080186fc 	.word	0x080186fc
 800d3c0:	08018840 	.word	0x08018840
 800d3c4:	08018740 	.word	0x08018740
 800d3c8:	0801885c 	.word	0x0801885c
 800d3cc:	20011954 	.word	0x20011954
 800d3d0:	20011948 	.word	0x20011948
 800d3d4:	20011950 	.word	0x20011950
 800d3d8:	20011958 	.word	0x20011958

0800d3dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d3e4:	2101      	movs	r1, #1
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff ff3a 	bl	800d260 <tcp_abandon>
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b088      	sub	sp, #32
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	4613      	mov	r3, r2
 800d400:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d402:	2304      	movs	r3, #4
 800d404:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d101      	bne.n	800d410 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d40c:	4b3e      	ldr	r3, [pc, #248]	; (800d508 <tcp_bind+0x114>)
 800d40e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d109      	bne.n	800d42a <tcp_bind+0x36>
 800d416:	4b3d      	ldr	r3, [pc, #244]	; (800d50c <tcp_bind+0x118>)
 800d418:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d41c:	493c      	ldr	r1, [pc, #240]	; (800d510 <tcp_bind+0x11c>)
 800d41e:	483d      	ldr	r0, [pc, #244]	; (800d514 <tcp_bind+0x120>)
 800d420:	f008 fd5a 	bl	8015ed8 <iprintf>
 800d424:	f06f 030f 	mvn.w	r3, #15
 800d428:	e06a      	b.n	800d500 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	7d1b      	ldrb	r3, [r3, #20]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d009      	beq.n	800d446 <tcp_bind+0x52>
 800d432:	4b36      	ldr	r3, [pc, #216]	; (800d50c <tcp_bind+0x118>)
 800d434:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d438:	4937      	ldr	r1, [pc, #220]	; (800d518 <tcp_bind+0x124>)
 800d43a:	4836      	ldr	r0, [pc, #216]	; (800d514 <tcp_bind+0x120>)
 800d43c:	f008 fd4c 	bl	8015ed8 <iprintf>
 800d440:	f06f 0305 	mvn.w	r3, #5
 800d444:	e05c      	b.n	800d500 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d446:	88fb      	ldrh	r3, [r7, #6]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d109      	bne.n	800d460 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d44c:	f000 f914 	bl	800d678 <tcp_new_port>
 800d450:	4603      	mov	r3, r0
 800d452:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d454:	88fb      	ldrh	r3, [r7, #6]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d135      	bne.n	800d4c6 <tcp_bind+0xd2>
      return ERR_BUF;
 800d45a:	f06f 0301 	mvn.w	r3, #1
 800d45e:	e04f      	b.n	800d500 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d460:	2300      	movs	r3, #0
 800d462:	61fb      	str	r3, [r7, #28]
 800d464:	e02b      	b.n	800d4be <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d466:	4a2d      	ldr	r2, [pc, #180]	; (800d51c <tcp_bind+0x128>)
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	e01e      	b.n	800d4b2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	8adb      	ldrh	r3, [r3, #22]
 800d478:	88fa      	ldrh	r2, [r7, #6]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d116      	bne.n	800d4ac <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d47e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d480:	2b00      	cmp	r3, #0
 800d482:	d010      	beq.n	800d4a6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00c      	beq.n	800d4a6 <tcp_bind+0xb2>
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d009      	beq.n	800d4a6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d005      	beq.n	800d4a6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d102      	bne.n	800d4ac <tcp_bind+0xb8>
              return ERR_USE;
 800d4a6:	f06f 0307 	mvn.w	r3, #7
 800d4aa:	e029      	b.n	800d500 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	61bb      	str	r3, [r7, #24]
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1dd      	bne.n	800d474 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	61fb      	str	r3, [r7, #28]
 800d4be:	69fa      	ldr	r2, [r7, #28]
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	dbcf      	blt.n	800d466 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00c      	beq.n	800d4e6 <tcp_bind+0xf2>
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d008      	beq.n	800d4e6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d002      	beq.n	800d4e0 <tcp_bind+0xec>
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	e000      	b.n	800d4e2 <tcp_bind+0xee>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	88fa      	ldrh	r2, [r7, #6]
 800d4ea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d4ec:	4b0c      	ldr	r3, [pc, #48]	; (800d520 <tcp_bind+0x12c>)
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	60da      	str	r2, [r3, #12]
 800d4f4:	4a0a      	ldr	r2, [pc, #40]	; (800d520 <tcp_bind+0x12c>)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	f005 fd0f 	bl	8012f1c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3720      	adds	r7, #32
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	0801a440 	.word	0x0801a440
 800d50c:	080186fc 	.word	0x080186fc
 800d510:	08018890 	.word	0x08018890
 800d514:	08018740 	.word	0x08018740
 800d518:	080188a8 	.word	0x080188a8
 800d51c:	0801a418 	.word	0x0801a418
 800d520:	20011948 	.word	0x20011948

0800d524 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d106      	bne.n	800d540 <tcp_update_rcv_ann_wnd+0x1c>
 800d532:	4b25      	ldr	r3, [pc, #148]	; (800d5c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800d534:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d538:	4924      	ldr	r1, [pc, #144]	; (800d5cc <tcp_update_rcv_ann_wnd+0xa8>)
 800d53a:	4825      	ldr	r0, [pc, #148]	; (800d5d0 <tcp_update_rcv_ann_wnd+0xac>)
 800d53c:	f008 fccc 	bl	8015ed8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d548:	4413      	add	r3, r2
 800d54a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d554:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d558:	bf28      	it	cs
 800d55a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d55e:	b292      	uxth	r2, r2
 800d560:	4413      	add	r3, r2
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	db08      	blt.n	800d57c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	e020      	b.n	800d5be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d584:	1ad3      	subs	r3, r2, r3
 800d586:	2b00      	cmp	r3, #0
 800d588:	dd03      	ble.n	800d592 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d590:	e014      	b.n	800d5bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5a4:	d306      	bcc.n	800d5b4 <tcp_update_rcv_ann_wnd+0x90>
 800d5a6:	4b08      	ldr	r3, [pc, #32]	; (800d5c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800d5a8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d5ac:	4909      	ldr	r1, [pc, #36]	; (800d5d4 <tcp_update_rcv_ann_wnd+0xb0>)
 800d5ae:	4808      	ldr	r0, [pc, #32]	; (800d5d0 <tcp_update_rcv_ann_wnd+0xac>)
 800d5b0:	f008 fc92 	bl	8015ed8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d5bc:	2300      	movs	r3, #0
  }
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	080186fc 	.word	0x080186fc
 800d5cc:	08018958 	.word	0x08018958
 800d5d0:	08018740 	.word	0x08018740
 800d5d4:	0801897c 	.word	0x0801897c

0800d5d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d107      	bne.n	800d5fa <tcp_recved+0x22>
 800d5ea:	4b1f      	ldr	r3, [pc, #124]	; (800d668 <tcp_recved+0x90>)
 800d5ec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d5f0:	491e      	ldr	r1, [pc, #120]	; (800d66c <tcp_recved+0x94>)
 800d5f2:	481f      	ldr	r0, [pc, #124]	; (800d670 <tcp_recved+0x98>)
 800d5f4:	f008 fc70 	bl	8015ed8 <iprintf>
 800d5f8:	e032      	b.n	800d660 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7d1b      	ldrb	r3, [r3, #20]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d106      	bne.n	800d610 <tcp_recved+0x38>
 800d602:	4b19      	ldr	r3, [pc, #100]	; (800d668 <tcp_recved+0x90>)
 800d604:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d608:	491a      	ldr	r1, [pc, #104]	; (800d674 <tcp_recved+0x9c>)
 800d60a:	4819      	ldr	r0, [pc, #100]	; (800d670 <tcp_recved+0x98>)
 800d60c:	f008 fc64 	bl	8015ed8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d614:	887b      	ldrh	r3, [r7, #2]
 800d616:	4413      	add	r3, r2
 800d618:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d61a:	89fb      	ldrh	r3, [r7, #14]
 800d61c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d620:	d804      	bhi.n	800d62c <tcp_recved+0x54>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d626:	89fa      	ldrh	r2, [r7, #14]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d204      	bcs.n	800d636 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d632:	851a      	strh	r2, [r3, #40]	; 0x28
 800d634:	e002      	b.n	800d63c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	89fa      	ldrh	r2, [r7, #14]
 800d63a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff ff71 	bl	800d524 <tcp_update_rcv_ann_wnd>
 800d642:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d64a:	d309      	bcc.n	800d660 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	8b5b      	ldrh	r3, [r3, #26]
 800d650:	f043 0302 	orr.w	r3, r3, #2
 800d654:	b29a      	uxth	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f004 fcc6 	bl	8011fec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	080186fc 	.word	0x080186fc
 800d66c:	08018998 	.word	0x08018998
 800d670:	08018740 	.word	0x08018740
 800d674:	080189b0 	.word	0x080189b0

0800d678 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d682:	4b1e      	ldr	r3, [pc, #120]	; (800d6fc <tcp_new_port+0x84>)
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	3301      	adds	r3, #1
 800d688:	b29a      	uxth	r2, r3
 800d68a:	4b1c      	ldr	r3, [pc, #112]	; (800d6fc <tcp_new_port+0x84>)
 800d68c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d68e:	4b1b      	ldr	r3, [pc, #108]	; (800d6fc <tcp_new_port+0x84>)
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d696:	4293      	cmp	r3, r2
 800d698:	d103      	bne.n	800d6a2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d69a:	4b18      	ldr	r3, [pc, #96]	; (800d6fc <tcp_new_port+0x84>)
 800d69c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d6a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	71fb      	strb	r3, [r7, #7]
 800d6a6:	e01e      	b.n	800d6e6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d6a8:	79fb      	ldrb	r3, [r7, #7]
 800d6aa:	4a15      	ldr	r2, [pc, #84]	; (800d700 <tcp_new_port+0x88>)
 800d6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	e011      	b.n	800d6da <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	8ada      	ldrh	r2, [r3, #22]
 800d6ba:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <tcp_new_port+0x84>)
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d108      	bne.n	800d6d4 <tcp_new_port+0x5c>
        n++;
 800d6c2:	88bb      	ldrh	r3, [r7, #4]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d6c8:	88bb      	ldrh	r3, [r7, #4]
 800d6ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6ce:	d3d8      	bcc.n	800d682 <tcp_new_port+0xa>
          return 0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	e00d      	b.n	800d6f0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	603b      	str	r3, [r7, #0]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1ea      	bne.n	800d6b6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	71fb      	strb	r3, [r7, #7]
 800d6e6:	79fb      	ldrb	r3, [r7, #7]
 800d6e8:	2b03      	cmp	r3, #3
 800d6ea:	d9dd      	bls.n	800d6a8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d6ec:	4b03      	ldr	r3, [pc, #12]	; (800d6fc <tcp_new_port+0x84>)
 800d6ee:	881b      	ldrh	r3, [r3, #0]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	20000024 	.word	0x20000024
 800d700:	0801a418 	.word	0x0801a418

0800d704 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08a      	sub	sp, #40	; 0x28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	4613      	mov	r3, r2
 800d712:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d714:	2300      	movs	r3, #0
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d109      	bne.n	800d732 <tcp_connect+0x2e>
 800d71e:	4b7d      	ldr	r3, [pc, #500]	; (800d914 <tcp_connect+0x210>)
 800d720:	f240 4235 	movw	r2, #1077	; 0x435
 800d724:	497c      	ldr	r1, [pc, #496]	; (800d918 <tcp_connect+0x214>)
 800d726:	487d      	ldr	r0, [pc, #500]	; (800d91c <tcp_connect+0x218>)
 800d728:	f008 fbd6 	bl	8015ed8 <iprintf>
 800d72c:	f06f 030f 	mvn.w	r3, #15
 800d730:	e0ec      	b.n	800d90c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <tcp_connect+0x48>
 800d738:	4b76      	ldr	r3, [pc, #472]	; (800d914 <tcp_connect+0x210>)
 800d73a:	f240 4236 	movw	r2, #1078	; 0x436
 800d73e:	4978      	ldr	r1, [pc, #480]	; (800d920 <tcp_connect+0x21c>)
 800d740:	4876      	ldr	r0, [pc, #472]	; (800d91c <tcp_connect+0x218>)
 800d742:	f008 fbc9 	bl	8015ed8 <iprintf>
 800d746:	f06f 030f 	mvn.w	r3, #15
 800d74a:	e0df      	b.n	800d90c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	7d1b      	ldrb	r3, [r3, #20]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d009      	beq.n	800d768 <tcp_connect+0x64>
 800d754:	4b6f      	ldr	r3, [pc, #444]	; (800d914 <tcp_connect+0x210>)
 800d756:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d75a:	4972      	ldr	r1, [pc, #456]	; (800d924 <tcp_connect+0x220>)
 800d75c:	486f      	ldr	r0, [pc, #444]	; (800d91c <tcp_connect+0x218>)
 800d75e:	f008 fbbb 	bl	8015ed8 <iprintf>
 800d762:	f06f 0309 	mvn.w	r3, #9
 800d766:	e0d1      	b.n	800d90c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <tcp_connect+0x70>
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	e000      	b.n	800d776 <tcp_connect+0x72>
 800d774:	2300      	movs	r3, #0
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	88fa      	ldrh	r2, [r7, #6]
 800d77e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	7a1b      	ldrb	r3, [r3, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d006      	beq.n	800d796 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	7a1b      	ldrb	r3, [r3, #8]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fca7 	bl	800c0e0 <netif_get_by_index>
 800d792:	6278      	str	r0, [r7, #36]	; 0x24
 800d794:	e005      	b.n	800d7a2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	3304      	adds	r3, #4
 800d79a:	4618      	mov	r0, r3
 800d79c:	f006 fe12 	bl	80143c4 <ip4_route>
 800d7a0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d102      	bne.n	800d7ae <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d7a8:	f06f 0303 	mvn.w	r3, #3
 800d7ac:	e0ae      	b.n	800d90c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d003      	beq.n	800d7bc <tcp_connect+0xb8>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d111      	bne.n	800d7e0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <tcp_connect+0xc4>
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	e000      	b.n	800d7ca <tcp_connect+0xc6>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <tcp_connect+0xd4>
      return ERR_RTE;
 800d7d2:	f06f 0303 	mvn.w	r3, #3
 800d7d6:	e099      	b.n	800d90c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	8adb      	ldrh	r3, [r3, #22]
 800d7e4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	8adb      	ldrh	r3, [r3, #22]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10c      	bne.n	800d808 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d7ee:	f7ff ff43 	bl	800d678 <tcp_new_port>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8adb      	ldrh	r3, [r3, #22]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <tcp_connect+0x104>
      return ERR_BUF;
 800d802:	f06f 0301 	mvn.w	r3, #1
 800d806:	e081      	b.n	800d90c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f001 f867 	bl	800e8dc <tcp_next_iss>
 800d80e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	1e5a      	subs	r2, r3, #1
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	1e5a      	subs	r2, r3, #1
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	1e5a      	subs	r2, r3, #1
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d83a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d85c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	3304      	adds	r3, #4
 800d866:	461a      	mov	r2, r3
 800d868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d86a:	f001 f85d 	bl	800e928 <tcp_eff_send_mss_netif>
 800d86e:	4603      	mov	r3, r0
 800d870:	461a      	mov	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2201      	movs	r2, #1
 800d87a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d886:	2102      	movs	r1, #2
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f004 fac1 	bl	8011e10 <tcp_enqueue_flags>
 800d88e:	4603      	mov	r3, r0
 800d890:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d892:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d136      	bne.n	800d908 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2202      	movs	r2, #2
 800d89e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d8a0:	8b7b      	ldrh	r3, [r7, #26]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d021      	beq.n	800d8ea <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d8a6:	4b20      	ldr	r3, [pc, #128]	; (800d928 <tcp_connect+0x224>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d105      	bne.n	800d8bc <tcp_connect+0x1b8>
 800d8b0:	4b1d      	ldr	r3, [pc, #116]	; (800d928 <tcp_connect+0x224>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	4a1c      	ldr	r2, [pc, #112]	; (800d928 <tcp_connect+0x224>)
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	e013      	b.n	800d8e4 <tcp_connect+0x1e0>
 800d8bc:	4b1a      	ldr	r3, [pc, #104]	; (800d928 <tcp_connect+0x224>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	623b      	str	r3, [r7, #32]
 800d8c2:	e00c      	b.n	800d8de <tcp_connect+0x1da>
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d104      	bne.n	800d8d8 <tcp_connect+0x1d4>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	68da      	ldr	r2, [r3, #12]
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	60da      	str	r2, [r3, #12]
 800d8d6:	e005      	b.n	800d8e4 <tcp_connect+0x1e0>
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	623b      	str	r3, [r7, #32]
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1ef      	bne.n	800d8c4 <tcp_connect+0x1c0>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d8ea:	4b10      	ldr	r3, [pc, #64]	; (800d92c <tcp_connect+0x228>)
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	60da      	str	r2, [r3, #12]
 800d8f2:	4a0e      	ldr	r2, [pc, #56]	; (800d92c <tcp_connect+0x228>)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6013      	str	r3, [r2, #0]
 800d8f8:	f005 fb10 	bl	8012f1c <tcp_timer_needed>
 800d8fc:	4b0c      	ldr	r3, [pc, #48]	; (800d930 <tcp_connect+0x22c>)
 800d8fe:	2201      	movs	r2, #1
 800d900:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f004 fb72 	bl	8011fec <tcp_output>
  }
  return ret;
 800d908:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3728      	adds	r7, #40	; 0x28
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	080186fc 	.word	0x080186fc
 800d918:	080189d8 	.word	0x080189d8
 800d91c:	08018740 	.word	0x08018740
 800d920:	080189f4 	.word	0x080189f4
 800d924:	08018a10 	.word	0x08018a10
 800d928:	20011948 	.word	0x20011948
 800d92c:	20011950 	.word	0x20011950
 800d930:	20011958 	.word	0x20011958

0800d934 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d934:	b5b0      	push	{r4, r5, r7, lr}
 800d936:	b090      	sub	sp, #64	; 0x40
 800d938:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d940:	4b94      	ldr	r3, [pc, #592]	; (800db94 <tcp_slowtmr+0x260>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3301      	adds	r3, #1
 800d946:	4a93      	ldr	r2, [pc, #588]	; (800db94 <tcp_slowtmr+0x260>)
 800d948:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d94a:	4b93      	ldr	r3, [pc, #588]	; (800db98 <tcp_slowtmr+0x264>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	3301      	adds	r3, #1
 800d950:	b2da      	uxtb	r2, r3
 800d952:	4b91      	ldr	r3, [pc, #580]	; (800db98 <tcp_slowtmr+0x264>)
 800d954:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d956:	2300      	movs	r3, #0
 800d958:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d95a:	4b90      	ldr	r3, [pc, #576]	; (800db9c <tcp_slowtmr+0x268>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d960:	e29d      	b.n	800de9e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d964:	7d1b      	ldrb	r3, [r3, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d106      	bne.n	800d978 <tcp_slowtmr+0x44>
 800d96a:	4b8d      	ldr	r3, [pc, #564]	; (800dba0 <tcp_slowtmr+0x26c>)
 800d96c:	f240 42be 	movw	r2, #1214	; 0x4be
 800d970:	498c      	ldr	r1, [pc, #560]	; (800dba4 <tcp_slowtmr+0x270>)
 800d972:	488d      	ldr	r0, [pc, #564]	; (800dba8 <tcp_slowtmr+0x274>)
 800d974:	f008 fab0 	bl	8015ed8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	7d1b      	ldrb	r3, [r3, #20]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d106      	bne.n	800d98e <tcp_slowtmr+0x5a>
 800d980:	4b87      	ldr	r3, [pc, #540]	; (800dba0 <tcp_slowtmr+0x26c>)
 800d982:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d986:	4989      	ldr	r1, [pc, #548]	; (800dbac <tcp_slowtmr+0x278>)
 800d988:	4887      	ldr	r0, [pc, #540]	; (800dba8 <tcp_slowtmr+0x274>)
 800d98a:	f008 faa5 	bl	8015ed8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d990:	7d1b      	ldrb	r3, [r3, #20]
 800d992:	2b0a      	cmp	r3, #10
 800d994:	d106      	bne.n	800d9a4 <tcp_slowtmr+0x70>
 800d996:	4b82      	ldr	r3, [pc, #520]	; (800dba0 <tcp_slowtmr+0x26c>)
 800d998:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d99c:	4984      	ldr	r1, [pc, #528]	; (800dbb0 <tcp_slowtmr+0x27c>)
 800d99e:	4882      	ldr	r0, [pc, #520]	; (800dba8 <tcp_slowtmr+0x274>)
 800d9a0:	f008 fa9a 	bl	8015ed8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	7f9a      	ldrb	r2, [r3, #30]
 800d9a8:	4b7b      	ldr	r3, [pc, #492]	; (800db98 <tcp_slowtmr+0x264>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d105      	bne.n	800d9bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d9ba:	e270      	b.n	800de9e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d9bc:	4b76      	ldr	r3, [pc, #472]	; (800db98 <tcp_slowtmr+0x264>)
 800d9be:	781a      	ldrb	r2, [r3, #0]
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	7d1b      	ldrb	r3, [r3, #20]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d10a      	bne.n	800d9ee <tcp_slowtmr+0xba>
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9de:	2b05      	cmp	r3, #5
 800d9e0:	d905      	bls.n	800d9ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9ec:	e11e      	b.n	800dc2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9f4:	2b0b      	cmp	r3, #11
 800d9f6:	d905      	bls.n	800da04 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da02:	e113      	b.n	800dc2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800da04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d075      	beq.n	800dafa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da12:	2b00      	cmp	r3, #0
 800da14:	d006      	beq.n	800da24 <tcp_slowtmr+0xf0>
 800da16:	4b62      	ldr	r3, [pc, #392]	; (800dba0 <tcp_slowtmr+0x26c>)
 800da18:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800da1c:	4965      	ldr	r1, [pc, #404]	; (800dbb4 <tcp_slowtmr+0x280>)
 800da1e:	4862      	ldr	r0, [pc, #392]	; (800dba8 <tcp_slowtmr+0x274>)
 800da20:	f008 fa5a 	bl	8015ed8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800da24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d106      	bne.n	800da3a <tcp_slowtmr+0x106>
 800da2c:	4b5c      	ldr	r3, [pc, #368]	; (800dba0 <tcp_slowtmr+0x26c>)
 800da2e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800da32:	4961      	ldr	r1, [pc, #388]	; (800dbb8 <tcp_slowtmr+0x284>)
 800da34:	485c      	ldr	r0, [pc, #368]	; (800dba8 <tcp_slowtmr+0x274>)
 800da36:	f008 fa4f 	bl	8015ed8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800da40:	2b0b      	cmp	r3, #11
 800da42:	d905      	bls.n	800da50 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800da44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da48:	3301      	adds	r3, #1
 800da4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da4e:	e0ed      	b.n	800dc2c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800da50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800da56:	3b01      	subs	r3, #1
 800da58:	4a58      	ldr	r2, [pc, #352]	; (800dbbc <tcp_slowtmr+0x288>)
 800da5a:	5cd3      	ldrb	r3, [r2, r3]
 800da5c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800da5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800da64:	7c7a      	ldrb	r2, [r7, #17]
 800da66:	429a      	cmp	r2, r3
 800da68:	d907      	bls.n	800da7a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800da6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800da70:	3301      	adds	r3, #1
 800da72:	b2da      	uxtb	r2, r3
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800da7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800da80:	7c7a      	ldrb	r2, [r7, #17]
 800da82:	429a      	cmp	r2, r3
 800da84:	f200 80d2 	bhi.w	800dc2c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800da88:	2301      	movs	r3, #1
 800da8a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800da8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da92:	2b00      	cmp	r3, #0
 800da94:	d108      	bne.n	800daa8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800da96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da98:	f005 f972 	bl	8012d80 <tcp_zero_window_probe>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d014      	beq.n	800dacc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800daa2:	2300      	movs	r3, #0
 800daa4:	623b      	str	r3, [r7, #32]
 800daa6:	e011      	b.n	800dacc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800daae:	4619      	mov	r1, r3
 800dab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dab2:	f004 f815 	bl	8011ae0 <tcp_split_unsent_seg>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d107      	bne.n	800dacc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dabc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dabe:	f004 fa95 	bl	8011fec <tcp_output>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800dacc:	6a3b      	ldr	r3, [r7, #32]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f000 80ac 	beq.w	800dc2c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dae2:	2b06      	cmp	r3, #6
 800dae4:	f200 80a2 	bhi.w	800dc2c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800dae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800daee:	3301      	adds	r3, #1
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800daf8:	e098      	b.n	800dc2c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800db00:	2b00      	cmp	r3, #0
 800db02:	db0f      	blt.n	800db24 <tcp_slowtmr+0x1f0>
 800db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800db0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800db0e:	4293      	cmp	r3, r2
 800db10:	d008      	beq.n	800db24 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800db18:	b29b      	uxth	r3, r3
 800db1a:	3301      	adds	r3, #1
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	b21a      	sxth	r2, r3
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800db30:	429a      	cmp	r2, r3
 800db32:	db7b      	blt.n	800dc2c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800db34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db36:	f004 fd5d 	bl	80125f4 <tcp_rexmit_rto_prepare>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d007      	beq.n	800db50 <tcp_slowtmr+0x21c>
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db44:	2b00      	cmp	r3, #0
 800db46:	d171      	bne.n	800dc2c <tcp_slowtmr+0x2f8>
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d06d      	beq.n	800dc2c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	7d1b      	ldrb	r3, [r3, #20]
 800db54:	2b02      	cmp	r3, #2
 800db56:	d03a      	beq.n	800dbce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800db58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db5e:	2b0c      	cmp	r3, #12
 800db60:	bf28      	it	cs
 800db62:	230c      	movcs	r3, #12
 800db64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800db66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db6c:	10db      	asrs	r3, r3, #3
 800db6e:	b21b      	sxth	r3, r3
 800db70:	461a      	mov	r2, r3
 800db72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db78:	4413      	add	r3, r2
 800db7a:	7efa      	ldrb	r2, [r7, #27]
 800db7c:	4910      	ldr	r1, [pc, #64]	; (800dbc0 <tcp_slowtmr+0x28c>)
 800db7e:	5c8a      	ldrb	r2, [r1, r2]
 800db80:	4093      	lsls	r3, r2
 800db82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800db8a:	4293      	cmp	r3, r2
 800db8c:	dc1a      	bgt.n	800dbc4 <tcp_slowtmr+0x290>
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	b21a      	sxth	r2, r3
 800db92:	e019      	b.n	800dbc8 <tcp_slowtmr+0x294>
 800db94:	20011944 	.word	0x20011944
 800db98:	2001195a 	.word	0x2001195a
 800db9c:	20011950 	.word	0x20011950
 800dba0:	080186fc 	.word	0x080186fc
 800dba4:	08018a40 	.word	0x08018a40
 800dba8:	08018740 	.word	0x08018740
 800dbac:	08018a6c 	.word	0x08018a6c
 800dbb0:	08018a98 	.word	0x08018a98
 800dbb4:	08018ac8 	.word	0x08018ac8
 800dbb8:	08018afc 	.word	0x08018afc
 800dbbc:	0801a410 	.word	0x0801a410
 800dbc0:	0801a400 	.word	0x0801a400
 800dbc4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	bf28      	it	cs
 800dbe4:	4613      	movcs	r3, r2
 800dbe6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dbe8:	8a7b      	ldrh	r3, [r7, #18]
 800dbea:	085b      	lsrs	r3, r3, #1
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbfe:	005b      	lsls	r3, r3, #1
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d206      	bcs.n	800dc14 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc0a:	005b      	lsls	r3, r3, #1
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	2200      	movs	r2, #0
 800dc22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800dc26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc28:	f004 fd54 	bl	80126d4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
 800dc30:	2b06      	cmp	r3, #6
 800dc32:	d111      	bne.n	800dc58 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	8b5b      	ldrh	r3, [r3, #26]
 800dc38:	f003 0310 	and.w	r3, r3, #16
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00b      	beq.n	800dc58 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc40:	4b9c      	ldr	r3, [pc, #624]	; (800deb4 <tcp_slowtmr+0x580>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	2b28      	cmp	r3, #40	; 0x28
 800dc4c:	d904      	bls.n	800dc58 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc52:	3301      	adds	r3, #1
 800dc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	7a5b      	ldrb	r3, [r3, #9]
 800dc5c:	f003 0308 	and.w	r3, r3, #8
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d04a      	beq.n	800dcfa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800dc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dc68:	2b04      	cmp	r3, #4
 800dc6a:	d003      	beq.n	800dc74 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dc70:	2b07      	cmp	r3, #7
 800dc72:	d142      	bne.n	800dcfa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc74:	4b8f      	ldr	r3, [pc, #572]	; (800deb4 <tcp_slowtmr+0x580>)
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	6a1b      	ldr	r3, [r3, #32]
 800dc7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc80:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dc84:	4b8c      	ldr	r3, [pc, #560]	; (800deb8 <tcp_slowtmr+0x584>)
 800dc86:	440b      	add	r3, r1
 800dc88:	498c      	ldr	r1, [pc, #560]	; (800debc <tcp_slowtmr+0x588>)
 800dc8a:	fba1 1303 	umull	r1, r3, r1, r3
 800dc8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d90a      	bls.n	800dcaa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800dc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc98:	3301      	adds	r3, #1
 800dc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800dc9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dca2:	3301      	adds	r3, #1
 800dca4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dca8:	e027      	b.n	800dcfa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dcaa:	4b82      	ldr	r3, [pc, #520]	; (800deb4 <tcp_slowtmr+0x580>)
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb0:	6a1b      	ldr	r3, [r3, #32]
 800dcb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	4b7f      	ldr	r3, [pc, #508]	; (800dec0 <tcp_slowtmr+0x58c>)
 800dcc4:	fb00 f303 	mul.w	r3, r0, r3
 800dcc8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dcca:	497c      	ldr	r1, [pc, #496]	; (800debc <tcp_slowtmr+0x588>)
 800dccc:	fba1 1303 	umull	r1, r3, r1, r3
 800dcd0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d911      	bls.n	800dcfa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800dcd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcd8:	f005 f812 	bl	8012d00 <tcp_keepalive>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dce2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d107      	bne.n	800dcfa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d011      	beq.n	800dd26 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dd02:	4b6c      	ldr	r3, [pc, #432]	; (800deb4 <tcp_slowtmr+0x580>)
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	1ad2      	subs	r2, r2, r3
 800dd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dd12:	4619      	mov	r1, r3
 800dd14:	460b      	mov	r3, r1
 800dd16:	005b      	lsls	r3, r3, #1
 800dd18:	440b      	add	r3, r1
 800dd1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d302      	bcc.n	800dd26 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800dd20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd22:	f000 feab 	bl	800ea7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800dd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd28:	7d1b      	ldrb	r3, [r3, #20]
 800dd2a:	2b03      	cmp	r3, #3
 800dd2c:	d10b      	bne.n	800dd46 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd2e:	4b61      	ldr	r3, [pc, #388]	; (800deb4 <tcp_slowtmr+0x580>)
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	2b28      	cmp	r3, #40	; 0x28
 800dd3a:	d904      	bls.n	800dd46 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd40:	3301      	adds	r3, #1
 800dd42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	7d1b      	ldrb	r3, [r3, #20]
 800dd4a:	2b09      	cmp	r3, #9
 800dd4c:	d10b      	bne.n	800dd66 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dd4e:	4b59      	ldr	r3, [pc, #356]	; (800deb4 <tcp_slowtmr+0x580>)
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	2bf0      	cmp	r3, #240	; 0xf0
 800dd5a:	d904      	bls.n	800dd66 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800dd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd60:	3301      	adds	r3, #1
 800dd62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dd66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d060      	beq.n	800de30 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd74:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dd76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd78:	f000 fccc 	bl	800e714 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d010      	beq.n	800dda4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dd82:	4b50      	ldr	r3, [pc, #320]	; (800dec4 <tcp_slowtmr+0x590>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d106      	bne.n	800dd9a <tcp_slowtmr+0x466>
 800dd8c:	4b4e      	ldr	r3, [pc, #312]	; (800dec8 <tcp_slowtmr+0x594>)
 800dd8e:	f240 526d 	movw	r2, #1389	; 0x56d
 800dd92:	494e      	ldr	r1, [pc, #312]	; (800decc <tcp_slowtmr+0x598>)
 800dd94:	484e      	ldr	r0, [pc, #312]	; (800ded0 <tcp_slowtmr+0x59c>)
 800dd96:	f008 f89f 	bl	8015ed8 <iprintf>
        prev->next = pcb->next;
 800dd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9c:	68da      	ldr	r2, [r3, #12]
 800dd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	e00f      	b.n	800ddc4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dda4:	4b47      	ldr	r3, [pc, #284]	; (800dec4 <tcp_slowtmr+0x590>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d006      	beq.n	800ddbc <tcp_slowtmr+0x488>
 800ddae:	4b46      	ldr	r3, [pc, #280]	; (800dec8 <tcp_slowtmr+0x594>)
 800ddb0:	f240 5271 	movw	r2, #1393	; 0x571
 800ddb4:	4947      	ldr	r1, [pc, #284]	; (800ded4 <tcp_slowtmr+0x5a0>)
 800ddb6:	4846      	ldr	r0, [pc, #280]	; (800ded0 <tcp_slowtmr+0x59c>)
 800ddb8:	f008 f88e 	bl	8015ed8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	4a40      	ldr	r2, [pc, #256]	; (800dec4 <tcp_slowtmr+0x590>)
 800ddc2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ddc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d013      	beq.n	800ddf4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ddd4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ddd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd8:	3304      	adds	r3, #4
 800ddda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dddc:	8ad2      	ldrh	r2, [r2, #22]
 800ddde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dde0:	8b09      	ldrh	r1, [r1, #24]
 800dde2:	9102      	str	r1, [sp, #8]
 800dde4:	9201      	str	r2, [sp, #4]
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	462b      	mov	r3, r5
 800ddea:	4622      	mov	r2, r4
 800ddec:	4601      	mov	r1, r0
 800ddee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddf0:	f004 fed2 	bl	8012b98 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfc:	7d1b      	ldrb	r3, [r3, #20]
 800ddfe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800de0a:	6838      	ldr	r0, [r7, #0]
 800de0c:	f7fe ffa2 	bl	800cd54 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800de10:	4b31      	ldr	r3, [pc, #196]	; (800ded8 <tcp_slowtmr+0x5a4>)
 800de12:	2200      	movs	r2, #0
 800de14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <tcp_slowtmr+0x4f2>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f06f 010c 	mvn.w	r1, #12
 800de22:	68b8      	ldr	r0, [r7, #8]
 800de24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800de26:	4b2c      	ldr	r3, [pc, #176]	; (800ded8 <tcp_slowtmr+0x5a4>)
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d037      	beq.n	800de9e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800de2e:	e592      	b.n	800d956 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800de34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800de3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3c:	7f1b      	ldrb	r3, [r3, #28]
 800de3e:	3301      	adds	r3, #1
 800de40:	b2da      	uxtb	r2, r3
 800de42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800de46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de48:	7f1a      	ldrb	r2, [r3, #28]
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4c:	7f5b      	ldrb	r3, [r3, #29]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d325      	bcc.n	800de9e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800de52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de54:	2200      	movs	r2, #0
 800de56:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800de58:	4b1f      	ldr	r3, [pc, #124]	; (800ded8 <tcp_slowtmr+0x5a4>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00b      	beq.n	800de80 <tcp_slowtmr+0x54c>
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de70:	6912      	ldr	r2, [r2, #16]
 800de72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de74:	4610      	mov	r0, r2
 800de76:	4798      	blx	r3
 800de78:	4603      	mov	r3, r0
 800de7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800de7e:	e002      	b.n	800de86 <tcp_slowtmr+0x552>
 800de80:	2300      	movs	r3, #0
 800de82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800de86:	4b14      	ldr	r3, [pc, #80]	; (800ded8 <tcp_slowtmr+0x5a4>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d000      	beq.n	800de90 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800de8e:	e562      	b.n	800d956 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800de90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800de94:	2b00      	cmp	r3, #0
 800de96:	d102      	bne.n	800de9e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800de98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de9a:	f004 f8a7 	bl	8011fec <tcp_output>
  while (pcb != NULL) {
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f47f ad5e 	bne.w	800d962 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800deaa:	4b0c      	ldr	r3, [pc, #48]	; (800dedc <tcp_slowtmr+0x5a8>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800deb0:	e069      	b.n	800df86 <tcp_slowtmr+0x652>
 800deb2:	bf00      	nop
 800deb4:	20011944 	.word	0x20011944
 800deb8:	000a4cb8 	.word	0x000a4cb8
 800debc:	10624dd3 	.word	0x10624dd3
 800dec0:	000124f8 	.word	0x000124f8
 800dec4:	20011950 	.word	0x20011950
 800dec8:	080186fc 	.word	0x080186fc
 800decc:	08018b34 	.word	0x08018b34
 800ded0:	08018740 	.word	0x08018740
 800ded4:	08018b60 	.word	0x08018b60
 800ded8:	20011958 	.word	0x20011958
 800dedc:	20011954 	.word	0x20011954
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	7d1b      	ldrb	r3, [r3, #20]
 800dee4:	2b0a      	cmp	r3, #10
 800dee6:	d006      	beq.n	800def6 <tcp_slowtmr+0x5c2>
 800dee8:	4b2b      	ldr	r3, [pc, #172]	; (800df98 <tcp_slowtmr+0x664>)
 800deea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800deee:	492b      	ldr	r1, [pc, #172]	; (800df9c <tcp_slowtmr+0x668>)
 800def0:	482b      	ldr	r0, [pc, #172]	; (800dfa0 <tcp_slowtmr+0x66c>)
 800def2:	f007 fff1 	bl	8015ed8 <iprintf>
    pcb_remove = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800defc:	4b29      	ldr	r3, [pc, #164]	; (800dfa4 <tcp_slowtmr+0x670>)
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df02:	6a1b      	ldr	r3, [r3, #32]
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	2bf0      	cmp	r3, #240	; 0xf0
 800df08:	d904      	bls.n	800df14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800df0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df0e:	3301      	adds	r3, #1
 800df10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800df14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d02f      	beq.n	800df7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800df1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df1e:	f000 fbf9 	bl	800e714 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	2b00      	cmp	r3, #0
 800df26:	d010      	beq.n	800df4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800df28:	4b1f      	ldr	r3, [pc, #124]	; (800dfa8 <tcp_slowtmr+0x674>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df2e:	429a      	cmp	r2, r3
 800df30:	d106      	bne.n	800df40 <tcp_slowtmr+0x60c>
 800df32:	4b19      	ldr	r3, [pc, #100]	; (800df98 <tcp_slowtmr+0x664>)
 800df34:	f240 52af 	movw	r2, #1455	; 0x5af
 800df38:	491c      	ldr	r1, [pc, #112]	; (800dfac <tcp_slowtmr+0x678>)
 800df3a:	4819      	ldr	r0, [pc, #100]	; (800dfa0 <tcp_slowtmr+0x66c>)
 800df3c:	f007 ffcc 	bl	8015ed8 <iprintf>
        prev->next = pcb->next;
 800df40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df42:	68da      	ldr	r2, [r3, #12]
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	60da      	str	r2, [r3, #12]
 800df48:	e00f      	b.n	800df6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800df4a:	4b17      	ldr	r3, [pc, #92]	; (800dfa8 <tcp_slowtmr+0x674>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df50:	429a      	cmp	r2, r3
 800df52:	d006      	beq.n	800df62 <tcp_slowtmr+0x62e>
 800df54:	4b10      	ldr	r3, [pc, #64]	; (800df98 <tcp_slowtmr+0x664>)
 800df56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800df5a:	4915      	ldr	r1, [pc, #84]	; (800dfb0 <tcp_slowtmr+0x67c>)
 800df5c:	4810      	ldr	r0, [pc, #64]	; (800dfa0 <tcp_slowtmr+0x66c>)
 800df5e:	f007 ffbb 	bl	8015ed8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	4a10      	ldr	r2, [pc, #64]	; (800dfa8 <tcp_slowtmr+0x674>)
 800df68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800df6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800df74:	69f8      	ldr	r0, [r7, #28]
 800df76:	f7fe feed 	bl	800cd54 <tcp_free>
 800df7a:	e004      	b.n	800df86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1a9      	bne.n	800dee0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800df8c:	bf00      	nop
 800df8e:	bf00      	nop
 800df90:	3730      	adds	r7, #48	; 0x30
 800df92:	46bd      	mov	sp, r7
 800df94:	bdb0      	pop	{r4, r5, r7, pc}
 800df96:	bf00      	nop
 800df98:	080186fc 	.word	0x080186fc
 800df9c:	08018b8c 	.word	0x08018b8c
 800dfa0:	08018740 	.word	0x08018740
 800dfa4:	20011944 	.word	0x20011944
 800dfa8:	20011954 	.word	0x20011954
 800dfac:	08018bbc 	.word	0x08018bbc
 800dfb0:	08018be4 	.word	0x08018be4

0800dfb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dfba:	4b2d      	ldr	r3, [pc, #180]	; (800e070 <tcp_fasttmr+0xbc>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	b2da      	uxtb	r2, r3
 800dfc2:	4b2b      	ldr	r3, [pc, #172]	; (800e070 <tcp_fasttmr+0xbc>)
 800dfc4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dfc6:	4b2b      	ldr	r3, [pc, #172]	; (800e074 <tcp_fasttmr+0xc0>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dfcc:	e048      	b.n	800e060 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	7f9a      	ldrb	r2, [r3, #30]
 800dfd2:	4b27      	ldr	r3, [pc, #156]	; (800e070 <tcp_fasttmr+0xbc>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d03f      	beq.n	800e05a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dfda:	4b25      	ldr	r3, [pc, #148]	; (800e070 <tcp_fasttmr+0xbc>)
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	8b5b      	ldrh	r3, [r3, #26]
 800dfe6:	f003 0301 	and.w	r3, r3, #1
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d010      	beq.n	800e010 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	8b5b      	ldrh	r3, [r3, #26]
 800dff2:	f043 0302 	orr.w	r3, r3, #2
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f003 fff5 	bl	8011fec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	8b5b      	ldrh	r3, [r3, #26]
 800e006:	f023 0303 	bic.w	r3, r3, #3
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	8b5b      	ldrh	r3, [r3, #26]
 800e014:	f003 0308 	and.w	r3, r3, #8
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d009      	beq.n	800e030 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	8b5b      	ldrh	r3, [r3, #26]
 800e020:	f023 0308 	bic.w	r3, r3, #8
 800e024:	b29a      	uxth	r2, r3
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7ff f826 	bl	800d07c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00a      	beq.n	800e054 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e03e:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <tcp_fasttmr+0xc4>)
 800e040:	2200      	movs	r2, #0
 800e042:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f819 	bl	800e07c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e04a:	4b0b      	ldr	r3, [pc, #44]	; (800e078 <tcp_fasttmr+0xc4>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d000      	beq.n	800e054 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e052:	e7b8      	b.n	800dfc6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	607b      	str	r3, [r7, #4]
 800e058:	e002      	b.n	800e060 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1b3      	bne.n	800dfce <tcp_fasttmr+0x1a>
    }
  }
}
 800e066:	bf00      	nop
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	2001195a 	.word	0x2001195a
 800e074:	20011950 	.word	0x20011950
 800e078:	20011958 	.word	0x20011958

0800e07c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e07c:	b590      	push	{r4, r7, lr}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d109      	bne.n	800e09e <tcp_process_refused_data+0x22>
 800e08a:	4b37      	ldr	r3, [pc, #220]	; (800e168 <tcp_process_refused_data+0xec>)
 800e08c:	f240 6209 	movw	r2, #1545	; 0x609
 800e090:	4936      	ldr	r1, [pc, #216]	; (800e16c <tcp_process_refused_data+0xf0>)
 800e092:	4837      	ldr	r0, [pc, #220]	; (800e170 <tcp_process_refused_data+0xf4>)
 800e094:	f007 ff20 	bl	8015ed8 <iprintf>
 800e098:	f06f 030f 	mvn.w	r3, #15
 800e09c:	e060      	b.n	800e160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0a2:	7b5b      	ldrb	r3, [r3, #13]
 800e0a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00b      	beq.n	800e0d4 <tcp_process_refused_data+0x58>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6918      	ldr	r0, [r3, #16]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	47a0      	blx	r4
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	73fb      	strb	r3, [r7, #15]
 800e0d2:	e007      	b.n	800e0e4 <tcp_process_refused_data+0x68>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	6879      	ldr	r1, [r7, #4]
 800e0da:	2000      	movs	r0, #0
 800e0dc:	f000 f8a4 	bl	800e228 <tcp_recv_null>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e0e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d12a      	bne.n	800e142 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
 800e0ee:	f003 0320 	and.w	r3, r3, #32
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d033      	beq.n	800e15e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0fe:	d005      	beq.n	800e10c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e104:	3301      	adds	r3, #1
 800e106:	b29a      	uxth	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00b      	beq.n	800e12e <tcp_process_refused_data+0xb2>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6918      	ldr	r0, [r3, #16]
 800e120:	2300      	movs	r3, #0
 800e122:	2200      	movs	r2, #0
 800e124:	6879      	ldr	r1, [r7, #4]
 800e126:	47a0      	blx	r4
 800e128:	4603      	mov	r3, r0
 800e12a:	73fb      	strb	r3, [r7, #15]
 800e12c:	e001      	b.n	800e132 <tcp_process_refused_data+0xb6>
 800e12e:	2300      	movs	r3, #0
 800e130:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e136:	f113 0f0d 	cmn.w	r3, #13
 800e13a:	d110      	bne.n	800e15e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e13c:	f06f 030c 	mvn.w	r3, #12
 800e140:	e00e      	b.n	800e160 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e146:	f113 0f0d 	cmn.w	r3, #13
 800e14a:	d102      	bne.n	800e152 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e14c:	f06f 030c 	mvn.w	r3, #12
 800e150:	e006      	b.n	800e160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e158:	f06f 0304 	mvn.w	r3, #4
 800e15c:	e000      	b.n	800e160 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3714      	adds	r7, #20
 800e164:	46bd      	mov	sp, r7
 800e166:	bd90      	pop	{r4, r7, pc}
 800e168:	080186fc 	.word	0x080186fc
 800e16c:	08018c0c 	.word	0x08018c0c
 800e170:	08018740 	.word	0x08018740

0800e174 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e17c:	e007      	b.n	800e18e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f80a 	bl	800e19e <tcp_seg_free>
    seg = next;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1f4      	bne.n	800e17e <tcp_segs_free+0xa>
  }
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b082      	sub	sp, #8
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00c      	beq.n	800e1c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d004      	beq.n	800e1be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe fb1f 	bl	800c7fc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e1be:	6879      	ldr	r1, [r7, #4]
 800e1c0:	2002      	movs	r0, #2
 800e1c2:	f7fd fc7b 	bl	800babc <memp_free>
  }
}
 800e1c6:	bf00      	nop
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d106      	bne.n	800e1ec <tcp_seg_copy+0x1c>
 800e1de:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <tcp_seg_copy+0x4c>)
 800e1e0:	f240 6282 	movw	r2, #1666	; 0x682
 800e1e4:	490e      	ldr	r1, [pc, #56]	; (800e220 <tcp_seg_copy+0x50>)
 800e1e6:	480f      	ldr	r0, [pc, #60]	; (800e224 <tcp_seg_copy+0x54>)
 800e1e8:	f007 fe76 	bl	8015ed8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e1ec:	2002      	movs	r0, #2
 800e1ee:	f7fd fbef 	bl	800b9d0 <memp_malloc>
 800e1f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d101      	bne.n	800e1fe <tcp_seg_copy+0x2e>
    return NULL;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e00a      	b.n	800e214 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e1fe:	2210      	movs	r2, #16
 800e200:	6879      	ldr	r1, [r7, #4]
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f007 fda3 	bl	8015d4e <memcpy>
  pbuf_ref(cseg->p);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe fb9b 	bl	800c948 <pbuf_ref>
  return cseg;
 800e212:	68fb      	ldr	r3, [r7, #12]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	080186fc 	.word	0x080186fc
 800e220:	08018c50 	.word	0x08018c50
 800e224:	08018740 	.word	0x08018740

0800e228 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	607a      	str	r2, [r7, #4]
 800e234:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d109      	bne.n	800e250 <tcp_recv_null+0x28>
 800e23c:	4b12      	ldr	r3, [pc, #72]	; (800e288 <tcp_recv_null+0x60>)
 800e23e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e242:	4912      	ldr	r1, [pc, #72]	; (800e28c <tcp_recv_null+0x64>)
 800e244:	4812      	ldr	r0, [pc, #72]	; (800e290 <tcp_recv_null+0x68>)
 800e246:	f007 fe47 	bl	8015ed8 <iprintf>
 800e24a:	f06f 030f 	mvn.w	r3, #15
 800e24e:	e016      	b.n	800e27e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d009      	beq.n	800e26a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	891b      	ldrh	r3, [r3, #8]
 800e25a:	4619      	mov	r1, r3
 800e25c:	68b8      	ldr	r0, [r7, #8]
 800e25e:	f7ff f9bb 	bl	800d5d8 <tcp_recved>
    pbuf_free(p);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7fe faca 	bl	800c7fc <pbuf_free>
 800e268:	e008      	b.n	800e27c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e26a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d104      	bne.n	800e27c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e272:	68b8      	ldr	r0, [r7, #8]
 800e274:	f7fe ff6c 	bl	800d150 <tcp_close>
 800e278:	4603      	mov	r3, r0
 800e27a:	e000      	b.n	800e27e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	080186fc 	.word	0x080186fc
 800e28c:	08018c6c 	.word	0x08018c6c
 800e290:	08018740 	.word	0x08018740

0800e294 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4603      	mov	r3, r0
 800e29c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e29e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	db01      	blt.n	800e2aa <tcp_kill_prio+0x16>
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	e000      	b.n	800e2ac <tcp_kill_prio+0x18>
 800e2aa:	237f      	movs	r3, #127	; 0x7f
 800e2ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e2ae:	7afb      	ldrb	r3, [r7, #11]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d034      	beq.n	800e31e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e2b4:	7afb      	ldrb	r3, [r7, #11]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2c2:	4b19      	ldr	r3, [pc, #100]	; (800e328 <tcp_kill_prio+0x94>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	617b      	str	r3, [r7, #20]
 800e2c8:	e01f      	b.n	800e30a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	7d5b      	ldrb	r3, [r3, #21]
 800e2ce:	7afa      	ldrb	r2, [r7, #11]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d80c      	bhi.n	800e2ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e2d8:	7afa      	ldrb	r2, [r7, #11]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d112      	bne.n	800e304 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e2de:	4b13      	ldr	r3, [pc, #76]	; (800e32c <tcp_kill_prio+0x98>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d80a      	bhi.n	800e304 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e2ee:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <tcp_kill_prio+0x98>)
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	7d5b      	ldrb	r3, [r3, #21]
 800e302:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1dc      	bne.n	800e2ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d004      	beq.n	800e320 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e316:	6938      	ldr	r0, [r7, #16]
 800e318:	f7ff f860 	bl	800d3dc <tcp_abort>
 800e31c:	e000      	b.n	800e320 <tcp_kill_prio+0x8c>
    return;
 800e31e:	bf00      	nop
  }
}
 800e320:	3718      	adds	r7, #24
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	20011950 	.word	0x20011950
 800e32c:	20011944 	.word	0x20011944

0800e330 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b086      	sub	sp, #24
 800e334:	af00      	add	r7, sp, #0
 800e336:	4603      	mov	r3, r0
 800e338:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e33a:	79fb      	ldrb	r3, [r7, #7]
 800e33c:	2b08      	cmp	r3, #8
 800e33e:	d009      	beq.n	800e354 <tcp_kill_state+0x24>
 800e340:	79fb      	ldrb	r3, [r7, #7]
 800e342:	2b09      	cmp	r3, #9
 800e344:	d006      	beq.n	800e354 <tcp_kill_state+0x24>
 800e346:	4b1a      	ldr	r3, [pc, #104]	; (800e3b0 <tcp_kill_state+0x80>)
 800e348:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e34c:	4919      	ldr	r1, [pc, #100]	; (800e3b4 <tcp_kill_state+0x84>)
 800e34e:	481a      	ldr	r0, [pc, #104]	; (800e3b8 <tcp_kill_state+0x88>)
 800e350:	f007 fdc2 	bl	8015ed8 <iprintf>

  inactivity = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e358:	2300      	movs	r3, #0
 800e35a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e35c:	4b17      	ldr	r3, [pc, #92]	; (800e3bc <tcp_kill_state+0x8c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	617b      	str	r3, [r7, #20]
 800e362:	e017      	b.n	800e394 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	7d1b      	ldrb	r3, [r3, #20]
 800e368:	79fa      	ldrb	r2, [r7, #7]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d10f      	bne.n	800e38e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e36e:	4b14      	ldr	r3, [pc, #80]	; (800e3c0 <tcp_kill_state+0x90>)
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	1ad3      	subs	r3, r2, r3
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d807      	bhi.n	800e38e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e37e:	4b10      	ldr	r3, [pc, #64]	; (800e3c0 <tcp_kill_state+0x90>)
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	6a1b      	ldr	r3, [r3, #32]
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1e4      	bne.n	800e364 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	6938      	ldr	r0, [r7, #16]
 800e3a4:	f7fe ff5c 	bl	800d260 <tcp_abandon>
  }
}
 800e3a8:	bf00      	nop
 800e3aa:	3718      	adds	r7, #24
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	080186fc 	.word	0x080186fc
 800e3b4:	08018c88 	.word	0x08018c88
 800e3b8:	08018740 	.word	0x08018740
 800e3bc:	20011950 	.word	0x20011950
 800e3c0:	20011944 	.word	0x20011944

0800e3c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3d2:	4b12      	ldr	r3, [pc, #72]	; (800e41c <tcp_kill_timewait+0x58>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	60fb      	str	r3, [r7, #12]
 800e3d8:	e012      	b.n	800e400 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e3da:	4b11      	ldr	r3, [pc, #68]	; (800e420 <tcp_kill_timewait+0x5c>)
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d807      	bhi.n	800e3fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e3ea:	4b0d      	ldr	r3, [pc, #52]	; (800e420 <tcp_kill_timewait+0x5c>)
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6a1b      	ldr	r3, [r3, #32]
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1e9      	bne.n	800e3da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d002      	beq.n	800e412 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e40c:	68b8      	ldr	r0, [r7, #8]
 800e40e:	f7fe ffe5 	bl	800d3dc <tcp_abort>
  }
}
 800e412:	bf00      	nop
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20011954 	.word	0x20011954
 800e420:	20011944 	.word	0x20011944

0800e424 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e42a:	4b10      	ldr	r3, [pc, #64]	; (800e46c <tcp_handle_closepend+0x48>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e430:	e014      	b.n	800e45c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	8b5b      	ldrh	r3, [r3, #26]
 800e43c:	f003 0308 	and.w	r3, r3, #8
 800e440:	2b00      	cmp	r3, #0
 800e442:	d009      	beq.n	800e458 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	8b5b      	ldrh	r3, [r3, #26]
 800e448:	f023 0308 	bic.w	r3, r3, #8
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7fe fe12 	bl	800d07c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1e7      	bne.n	800e432 <tcp_handle_closepend+0xe>
  }
}
 800e462:	bf00      	nop
 800e464:	bf00      	nop
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	20011950 	.word	0x20011950

0800e470 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e47a:	2000      	movs	r0, #0
 800e47c:	f7fd faa8 	bl	800b9d0 <memp_malloc>
 800e480:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d126      	bne.n	800e4d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e488:	f7ff ffcc 	bl	800e424 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e48c:	f7ff ff9a 	bl	800e3c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e490:	2000      	movs	r0, #0
 800e492:	f7fd fa9d 	bl	800b9d0 <memp_malloc>
 800e496:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d11b      	bne.n	800e4d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e49e:	2009      	movs	r0, #9
 800e4a0:	f7ff ff46 	bl	800e330 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	f7fd fa93 	bl	800b9d0 <memp_malloc>
 800e4aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d111      	bne.n	800e4d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e4b2:	2008      	movs	r0, #8
 800e4b4:	f7ff ff3c 	bl	800e330 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f7fd fa89 	bl	800b9d0 <memp_malloc>
 800e4be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d107      	bne.n	800e4d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7ff fee3 	bl	800e294 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	f7fd fa7e 	bl	800b9d0 <memp_malloc>
 800e4d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d03f      	beq.n	800e55c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e4dc:	229c      	movs	r2, #156	; 0x9c
 800e4de:	2100      	movs	r1, #0
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f007 fc5c 	bl	8015d9e <memset>
    pcb->prio = prio;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	79fa      	ldrb	r2, [r7, #7]
 800e4ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e4f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e4fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	22ff      	movs	r2, #255	; 0xff
 800e50a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e512:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2206      	movs	r2, #6
 800e518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2206      	movs	r2, #6
 800e520:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e528:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2201      	movs	r2, #1
 800e52e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e532:	4b0d      	ldr	r3, [pc, #52]	; (800e568 <tcp_alloc+0xf8>)
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e53a:	4b0c      	ldr	r3, [pc, #48]	; (800e56c <tcp_alloc+0xfc>)
 800e53c:	781a      	ldrb	r2, [r3, #0]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e548:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	4a08      	ldr	r2, [pc, #32]	; (800e570 <tcp_alloc+0x100>)
 800e550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	4a07      	ldr	r2, [pc, #28]	; (800e574 <tcp_alloc+0x104>)
 800e558:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e55c:	68fb      	ldr	r3, [r7, #12]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20011944 	.word	0x20011944
 800e56c:	2001195a 	.word	0x2001195a
 800e570:	0800e229 	.word	0x0800e229
 800e574:	006ddd00 	.word	0x006ddd00

0800e578 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4603      	mov	r3, r0
 800e580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e582:	2040      	movs	r0, #64	; 0x40
 800e584:	f7ff ff74 	bl	800e470 <tcp_alloc>
 800e588:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e58a:	68fb      	ldr	r3, [r7, #12]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	683a      	ldr	r2, [r7, #0]
 800e5a8:	611a      	str	r2, [r3, #16]
  }
}
 800e5aa:	bf00      	nop
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr
	...

0800e5b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00e      	beq.n	800e5e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7d1b      	ldrb	r3, [r3, #20]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d106      	bne.n	800e5de <tcp_recv+0x26>
 800e5d0:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <tcp_recv+0x38>)
 800e5d2:	f240 72df 	movw	r2, #2015	; 0x7df
 800e5d6:	4907      	ldr	r1, [pc, #28]	; (800e5f4 <tcp_recv+0x3c>)
 800e5d8:	4807      	ldr	r0, [pc, #28]	; (800e5f8 <tcp_recv+0x40>)
 800e5da:	f007 fc7d 	bl	8015ed8 <iprintf>
    pcb->recv = recv;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e5e6:	bf00      	nop
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	080186fc 	.word	0x080186fc
 800e5f4:	08018c98 	.word	0x08018c98
 800e5f8:	08018740 	.word	0x08018740

0800e5fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00e      	beq.n	800e62a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7d1b      	ldrb	r3, [r3, #20]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d106      	bne.n	800e622 <tcp_sent+0x26>
 800e614:	4b07      	ldr	r3, [pc, #28]	; (800e634 <tcp_sent+0x38>)
 800e616:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e61a:	4907      	ldr	r1, [pc, #28]	; (800e638 <tcp_sent+0x3c>)
 800e61c:	4807      	ldr	r0, [pc, #28]	; (800e63c <tcp_sent+0x40>)
 800e61e:	f007 fc5b 	bl	8015ed8 <iprintf>
    pcb->sent = sent;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	683a      	ldr	r2, [r7, #0]
 800e626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	080186fc 	.word	0x080186fc
 800e638:	08018cc0 	.word	0x08018cc0
 800e63c:	08018740 	.word	0x08018740

0800e640 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00e      	beq.n	800e66e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	7d1b      	ldrb	r3, [r3, #20]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d106      	bne.n	800e666 <tcp_err+0x26>
 800e658:	4b07      	ldr	r3, [pc, #28]	; (800e678 <tcp_err+0x38>)
 800e65a:	f640 020d 	movw	r2, #2061	; 0x80d
 800e65e:	4907      	ldr	r1, [pc, #28]	; (800e67c <tcp_err+0x3c>)
 800e660:	4807      	ldr	r0, [pc, #28]	; (800e680 <tcp_err+0x40>)
 800e662:	f007 fc39 	bl	8015ed8 <iprintf>
    pcb->errf = err;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e66e:	bf00      	nop
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	080186fc 	.word	0x080186fc
 800e67c:	08018ce8 	.word	0x08018ce8
 800e680:	08018740 	.word	0x08018740

0800e684 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d008      	beq.n	800e6a6 <tcp_accept+0x22>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7d1b      	ldrb	r3, [r3, #20]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d104      	bne.n	800e6a6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	619a      	str	r2, [r3, #24]
  }
}
 800e6a6:	bf00      	nop
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
	...

0800e6b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d107      	bne.n	800e6d8 <tcp_poll+0x24>
 800e6c8:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <tcp_poll+0x50>)
 800e6ca:	f640 023d 	movw	r2, #2109	; 0x83d
 800e6ce:	490e      	ldr	r1, [pc, #56]	; (800e708 <tcp_poll+0x54>)
 800e6d0:	480e      	ldr	r0, [pc, #56]	; (800e70c <tcp_poll+0x58>)
 800e6d2:	f007 fc01 	bl	8015ed8 <iprintf>
 800e6d6:	e011      	b.n	800e6fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	7d1b      	ldrb	r3, [r3, #20]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d106      	bne.n	800e6ee <tcp_poll+0x3a>
 800e6e0:	4b08      	ldr	r3, [pc, #32]	; (800e704 <tcp_poll+0x50>)
 800e6e2:	f640 023e 	movw	r2, #2110	; 0x83e
 800e6e6:	490a      	ldr	r1, [pc, #40]	; (800e710 <tcp_poll+0x5c>)
 800e6e8:	4808      	ldr	r0, [pc, #32]	; (800e70c <tcp_poll+0x58>)
 800e6ea:	f007 fbf5 	bl	8015ed8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	79fa      	ldrb	r2, [r7, #7]
 800e6fa:	775a      	strb	r2, [r3, #29]
}
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	080186fc 	.word	0x080186fc
 800e708:	08018d10 	.word	0x08018d10
 800e70c:	08018740 	.word	0x08018740
 800e710:	08018d28 	.word	0x08018d28

0800e714 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d107      	bne.n	800e732 <tcp_pcb_purge+0x1e>
 800e722:	4b21      	ldr	r3, [pc, #132]	; (800e7a8 <tcp_pcb_purge+0x94>)
 800e724:	f640 0251 	movw	r2, #2129	; 0x851
 800e728:	4920      	ldr	r1, [pc, #128]	; (800e7ac <tcp_pcb_purge+0x98>)
 800e72a:	4821      	ldr	r0, [pc, #132]	; (800e7b0 <tcp_pcb_purge+0x9c>)
 800e72c:	f007 fbd4 	bl	8015ed8 <iprintf>
 800e730:	e037      	b.n	800e7a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7d1b      	ldrb	r3, [r3, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d033      	beq.n	800e7a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e73e:	2b0a      	cmp	r3, #10
 800e740:	d02f      	beq.n	800e7a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e746:	2b01      	cmp	r3, #1
 800e748:	d02b      	beq.n	800e7a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d007      	beq.n	800e762 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe f850 	bl	800c7fc <pbuf_free>
      pcb->refused_data = NULL;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e766:	2b00      	cmp	r3, #0
 800e768:	d002      	beq.n	800e770 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f986 	bl	800ea7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e776:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7ff fcf9 	bl	800e174 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e786:	4618      	mov	r0, r3
 800e788:	f7ff fcf4 	bl	800e174 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	66da      	str	r2, [r3, #108]	; 0x6c
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	080186fc 	.word	0x080186fc
 800e7ac:	08018d48 	.word	0x08018d48
 800e7b0:	08018740 	.word	0x08018740

0800e7b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d106      	bne.n	800e7d2 <tcp_pcb_remove+0x1e>
 800e7c4:	4b3e      	ldr	r3, [pc, #248]	; (800e8c0 <tcp_pcb_remove+0x10c>)
 800e7c6:	f640 0283 	movw	r2, #2179	; 0x883
 800e7ca:	493e      	ldr	r1, [pc, #248]	; (800e8c4 <tcp_pcb_remove+0x110>)
 800e7cc:	483e      	ldr	r0, [pc, #248]	; (800e8c8 <tcp_pcb_remove+0x114>)
 800e7ce:	f007 fb83 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d106      	bne.n	800e7e6 <tcp_pcb_remove+0x32>
 800e7d8:	4b39      	ldr	r3, [pc, #228]	; (800e8c0 <tcp_pcb_remove+0x10c>)
 800e7da:	f640 0284 	movw	r2, #2180	; 0x884
 800e7de:	493b      	ldr	r1, [pc, #236]	; (800e8cc <tcp_pcb_remove+0x118>)
 800e7e0:	4839      	ldr	r0, [pc, #228]	; (800e8c8 <tcp_pcb_remove+0x114>)
 800e7e2:	f007 fb79 	bl	8015ed8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d105      	bne.n	800e7fc <tcp_pcb_remove+0x48>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68da      	ldr	r2, [r3, #12]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	e013      	b.n	800e824 <tcp_pcb_remove+0x70>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	60fb      	str	r3, [r7, #12]
 800e802:	e00c      	b.n	800e81e <tcp_pcb_remove+0x6a>
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d104      	bne.n	800e818 <tcp_pcb_remove+0x64>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	60da      	str	r2, [r3, #12]
 800e816:	e005      	b.n	800e824 <tcp_pcb_remove+0x70>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	60fb      	str	r3, [r7, #12]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1ef      	bne.n	800e804 <tcp_pcb_remove+0x50>
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2200      	movs	r2, #0
 800e828:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e82a:	6838      	ldr	r0, [r7, #0]
 800e82c:	f7ff ff72 	bl	800e714 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b0a      	cmp	r3, #10
 800e836:	d013      	beq.n	800e860 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d00f      	beq.n	800e860 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	8b5b      	ldrh	r3, [r3, #26]
 800e844:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d009      	beq.n	800e860 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	8b5b      	ldrh	r3, [r3, #26]
 800e850:	f043 0302 	orr.w	r3, r3, #2
 800e854:	b29a      	uxth	r2, r3
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e85a:	6838      	ldr	r0, [r7, #0]
 800e85c:	f003 fbc6 	bl	8011fec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	7d1b      	ldrb	r3, [r3, #20]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d020      	beq.n	800e8aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d006      	beq.n	800e87e <tcp_pcb_remove+0xca>
 800e870:	4b13      	ldr	r3, [pc, #76]	; (800e8c0 <tcp_pcb_remove+0x10c>)
 800e872:	f640 0293 	movw	r2, #2195	; 0x893
 800e876:	4916      	ldr	r1, [pc, #88]	; (800e8d0 <tcp_pcb_remove+0x11c>)
 800e878:	4813      	ldr	r0, [pc, #76]	; (800e8c8 <tcp_pcb_remove+0x114>)
 800e87a:	f007 fb2d 	bl	8015ed8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e882:	2b00      	cmp	r3, #0
 800e884:	d006      	beq.n	800e894 <tcp_pcb_remove+0xe0>
 800e886:	4b0e      	ldr	r3, [pc, #56]	; (800e8c0 <tcp_pcb_remove+0x10c>)
 800e888:	f640 0294 	movw	r2, #2196	; 0x894
 800e88c:	4911      	ldr	r1, [pc, #68]	; (800e8d4 <tcp_pcb_remove+0x120>)
 800e88e:	480e      	ldr	r0, [pc, #56]	; (800e8c8 <tcp_pcb_remove+0x114>)
 800e890:	f007 fb22 	bl	8015ed8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d006      	beq.n	800e8aa <tcp_pcb_remove+0xf6>
 800e89c:	4b08      	ldr	r3, [pc, #32]	; (800e8c0 <tcp_pcb_remove+0x10c>)
 800e89e:	f640 0296 	movw	r2, #2198	; 0x896
 800e8a2:	490d      	ldr	r1, [pc, #52]	; (800e8d8 <tcp_pcb_remove+0x124>)
 800e8a4:	4808      	ldr	r0, [pc, #32]	; (800e8c8 <tcp_pcb_remove+0x114>)
 800e8a6:	f007 fb17 	bl	8015ed8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e8b6:	bf00      	nop
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	080186fc 	.word	0x080186fc
 800e8c4:	08018d64 	.word	0x08018d64
 800e8c8:	08018740 	.word	0x08018740
 800e8cc:	08018d80 	.word	0x08018d80
 800e8d0:	08018da0 	.word	0x08018da0
 800e8d4:	08018db8 	.word	0x08018db8
 800e8d8:	08018dd4 	.word	0x08018dd4

0800e8dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <tcp_next_iss+0x1c>
 800e8ea:	4b0a      	ldr	r3, [pc, #40]	; (800e914 <tcp_next_iss+0x38>)
 800e8ec:	f640 02af 	movw	r2, #2223	; 0x8af
 800e8f0:	4909      	ldr	r1, [pc, #36]	; (800e918 <tcp_next_iss+0x3c>)
 800e8f2:	480a      	ldr	r0, [pc, #40]	; (800e91c <tcp_next_iss+0x40>)
 800e8f4:	f007 faf0 	bl	8015ed8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e8f8:	4b09      	ldr	r3, [pc, #36]	; (800e920 <tcp_next_iss+0x44>)
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	4b09      	ldr	r3, [pc, #36]	; (800e924 <tcp_next_iss+0x48>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4413      	add	r3, r2
 800e902:	4a07      	ldr	r2, [pc, #28]	; (800e920 <tcp_next_iss+0x44>)
 800e904:	6013      	str	r3, [r2, #0]
  return iss;
 800e906:	4b06      	ldr	r3, [pc, #24]	; (800e920 <tcp_next_iss+0x44>)
 800e908:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	080186fc 	.word	0x080186fc
 800e918:	08018dec 	.word	0x08018dec
 800e91c:	08018740 	.word	0x08018740
 800e920:	20000028 	.word	0x20000028
 800e924:	20011944 	.word	0x20011944

0800e928 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b086      	sub	sp, #24
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	4603      	mov	r3, r0
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d106      	bne.n	800e94a <tcp_eff_send_mss_netif+0x22>
 800e93c:	4b14      	ldr	r3, [pc, #80]	; (800e990 <tcp_eff_send_mss_netif+0x68>)
 800e93e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e942:	4914      	ldr	r1, [pc, #80]	; (800e994 <tcp_eff_send_mss_netif+0x6c>)
 800e944:	4814      	ldr	r0, [pc, #80]	; (800e998 <tcp_eff_send_mss_netif+0x70>)
 800e946:	f007 fac7 	bl	8015ed8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e950:	89fb      	ldrh	r3, [r7, #14]
 800e952:	e019      	b.n	800e988 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e958:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e95a:	8afb      	ldrh	r3, [r7, #22]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d012      	beq.n	800e986 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e960:	2328      	movs	r3, #40	; 0x28
 800e962:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e964:	8afa      	ldrh	r2, [r7, #22]
 800e966:	8abb      	ldrh	r3, [r7, #20]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d904      	bls.n	800e976 <tcp_eff_send_mss_netif+0x4e>
 800e96c:	8afa      	ldrh	r2, [r7, #22]
 800e96e:	8abb      	ldrh	r3, [r7, #20]
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	b29b      	uxth	r3, r3
 800e974:	e000      	b.n	800e978 <tcp_eff_send_mss_netif+0x50>
 800e976:	2300      	movs	r3, #0
 800e978:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e97a:	8a7a      	ldrh	r2, [r7, #18]
 800e97c:	89fb      	ldrh	r3, [r7, #14]
 800e97e:	4293      	cmp	r3, r2
 800e980:	bf28      	it	cs
 800e982:	4613      	movcs	r3, r2
 800e984:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e986:	89fb      	ldrh	r3, [r7, #14]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3718      	adds	r7, #24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	080186fc 	.word	0x080186fc
 800e994:	08018e08 	.word	0x08018e08
 800e998:	08018740 	.word	0x08018740

0800e99c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d119      	bne.n	800e9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e9b0:	4b10      	ldr	r3, [pc, #64]	; (800e9f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e9b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e9b6:	4910      	ldr	r1, [pc, #64]	; (800e9f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e9b8:	4810      	ldr	r0, [pc, #64]	; (800e9fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e9ba:	f007 fa8d 	bl	8015ed8 <iprintf>

  while (pcb != NULL) {
 800e9be:	e011      	b.n	800e9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d108      	bne.n	800e9de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7fe fd02 	bl	800d3dc <tcp_abort>
      pcb = next;
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	e002      	b.n	800e9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1ea      	bne.n	800e9c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e9ea:	bf00      	nop
 800e9ec:	bf00      	nop
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	080186fc 	.word	0x080186fc
 800e9f8:	08018e30 	.word	0x08018e30
 800e9fc:	08018740 	.word	0x08018740

0800ea00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d02a      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d026      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ea18:	4b15      	ldr	r3, [pc, #84]	; (800ea70 <tcp_netif_ip_addr_changed+0x70>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff ffbc 	bl	800e99c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ea24:	4b13      	ldr	r3, [pc, #76]	; (800ea74 <tcp_netif_ip_addr_changed+0x74>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4619      	mov	r1, r3
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff ffb6 	bl	800e99c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d017      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d013      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea3e:	4b0e      	ldr	r3, [pc, #56]	; (800ea78 <tcp_netif_ip_addr_changed+0x78>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e00c      	b.n	800ea60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d103      	bne.n	800ea5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1ef      	bne.n	800ea46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ea66:	bf00      	nop
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20011950 	.word	0x20011950
 800ea74:	20011948 	.word	0x20011948
 800ea78:	2001194c 	.word	0x2001194c

0800ea7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d007      	beq.n	800ea9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7ff fb6f 	bl	800e174 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ea9c:	bf00      	nop
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eaa4:	b590      	push	{r4, r7, lr}
 800eaa6:	b08d      	sub	sp, #52	; 0x34
 800eaa8:	af04      	add	r7, sp, #16
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <tcp_input+0x1c>
 800eab4:	4b9b      	ldr	r3, [pc, #620]	; (800ed24 <tcp_input+0x280>)
 800eab6:	2283      	movs	r2, #131	; 0x83
 800eab8:	499b      	ldr	r1, [pc, #620]	; (800ed28 <tcp_input+0x284>)
 800eaba:	489c      	ldr	r0, [pc, #624]	; (800ed2c <tcp_input+0x288>)
 800eabc:	f007 fa0c 	bl	8015ed8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	4a9a      	ldr	r2, [pc, #616]	; (800ed30 <tcp_input+0x28c>)
 800eac6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	895b      	ldrh	r3, [r3, #10]
 800eacc:	2b13      	cmp	r3, #19
 800eace:	f240 83d1 	bls.w	800f274 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ead2:	4b98      	ldr	r3, [pc, #608]	; (800ed34 <tcp_input+0x290>)
 800ead4:	695b      	ldr	r3, [r3, #20]
 800ead6:	4a97      	ldr	r2, [pc, #604]	; (800ed34 <tcp_input+0x290>)
 800ead8:	6812      	ldr	r2, [r2, #0]
 800eada:	4611      	mov	r1, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f005 fefd 	bl	80148dc <ip4_addr_isbroadcast_u32>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f040 83c7 	bne.w	800f278 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800eaea:	4b92      	ldr	r3, [pc, #584]	; (800ed34 <tcp_input+0x290>)
 800eaec:	695b      	ldr	r3, [r3, #20]
 800eaee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eaf2:	2be0      	cmp	r3, #224	; 0xe0
 800eaf4:	f000 83c0 	beq.w	800f278 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800eaf8:	4b8d      	ldr	r3, [pc, #564]	; (800ed30 <tcp_input+0x28c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	899b      	ldrh	r3, [r3, #12]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fc f975 	bl	800adf0 <lwip_htons>
 800eb06:	4603      	mov	r3, r0
 800eb08:	0b1b      	lsrs	r3, r3, #12
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800eb12:	7cbb      	ldrb	r3, [r7, #18]
 800eb14:	2b13      	cmp	r3, #19
 800eb16:	f240 83b1 	bls.w	800f27c <tcp_input+0x7d8>
 800eb1a:	7cbb      	ldrb	r3, [r7, #18]
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	891b      	ldrh	r3, [r3, #8]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	f200 83aa 	bhi.w	800f27c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800eb28:	7cbb      	ldrb	r3, [r7, #18]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	3b14      	subs	r3, #20
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	4b81      	ldr	r3, [pc, #516]	; (800ed38 <tcp_input+0x294>)
 800eb32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800eb34:	4b81      	ldr	r3, [pc, #516]	; (800ed3c <tcp_input+0x298>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	895a      	ldrh	r2, [r3, #10]
 800eb3e:	7cbb      	ldrb	r3, [r7, #18]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d309      	bcc.n	800eb5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800eb46:	4b7c      	ldr	r3, [pc, #496]	; (800ed38 <tcp_input+0x294>)
 800eb48:	881a      	ldrh	r2, [r3, #0]
 800eb4a:	4b7d      	ldr	r3, [pc, #500]	; (800ed40 <tcp_input+0x29c>)
 800eb4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800eb4e:	7cbb      	ldrb	r3, [r7, #18]
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7fd fdcc 	bl	800c6f0 <pbuf_remove_header>
 800eb58:	e04e      	b.n	800ebf8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d105      	bne.n	800eb6e <tcp_input+0xca>
 800eb62:	4b70      	ldr	r3, [pc, #448]	; (800ed24 <tcp_input+0x280>)
 800eb64:	22c2      	movs	r2, #194	; 0xc2
 800eb66:	4977      	ldr	r1, [pc, #476]	; (800ed44 <tcp_input+0x2a0>)
 800eb68:	4870      	ldr	r0, [pc, #448]	; (800ed2c <tcp_input+0x288>)
 800eb6a:	f007 f9b5 	bl	8015ed8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800eb6e:	2114      	movs	r1, #20
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7fd fdbd 	bl	800c6f0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	895a      	ldrh	r2, [r3, #10]
 800eb7a:	4b71      	ldr	r3, [pc, #452]	; (800ed40 <tcp_input+0x29c>)
 800eb7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800eb7e:	4b6e      	ldr	r3, [pc, #440]	; (800ed38 <tcp_input+0x294>)
 800eb80:	881a      	ldrh	r2, [r3, #0]
 800eb82:	4b6f      	ldr	r3, [pc, #444]	; (800ed40 <tcp_input+0x29c>)
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800eb8a:	4b6d      	ldr	r3, [pc, #436]	; (800ed40 <tcp_input+0x29c>)
 800eb8c:	881b      	ldrh	r3, [r3, #0]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7fd fdad 	bl	800c6f0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	895b      	ldrh	r3, [r3, #10]
 800eb9c:	8a3a      	ldrh	r2, [r7, #16]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	f200 836e 	bhi.w	800f280 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	4a64      	ldr	r2, [pc, #400]	; (800ed3c <tcp_input+0x298>)
 800ebac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	8a3a      	ldrh	r2, [r7, #16]
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fd fd9a 	bl	800c6f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	891a      	ldrh	r2, [r3, #8]
 800ebc0:	8a3b      	ldrh	r3, [r7, #16]
 800ebc2:	1ad3      	subs	r3, r2, r3
 800ebc4:	b29a      	uxth	r2, r3
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	895b      	ldrh	r3, [r3, #10]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d005      	beq.n	800ebde <tcp_input+0x13a>
 800ebd2:	4b54      	ldr	r3, [pc, #336]	; (800ed24 <tcp_input+0x280>)
 800ebd4:	22df      	movs	r2, #223	; 0xdf
 800ebd6:	495c      	ldr	r1, [pc, #368]	; (800ed48 <tcp_input+0x2a4>)
 800ebd8:	4854      	ldr	r0, [pc, #336]	; (800ed2c <tcp_input+0x288>)
 800ebda:	f007 f97d 	bl	8015ed8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	891a      	ldrh	r2, [r3, #8]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d005      	beq.n	800ebf8 <tcp_input+0x154>
 800ebec:	4b4d      	ldr	r3, [pc, #308]	; (800ed24 <tcp_input+0x280>)
 800ebee:	22e0      	movs	r2, #224	; 0xe0
 800ebf0:	4956      	ldr	r1, [pc, #344]	; (800ed4c <tcp_input+0x2a8>)
 800ebf2:	484e      	ldr	r0, [pc, #312]	; (800ed2c <tcp_input+0x288>)
 800ebf4:	f007 f970 	bl	8015ed8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ebf8:	4b4d      	ldr	r3, [pc, #308]	; (800ed30 <tcp_input+0x28c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	4a4b      	ldr	r2, [pc, #300]	; (800ed30 <tcp_input+0x28c>)
 800ec02:	6814      	ldr	r4, [r2, #0]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fc f8f3 	bl	800adf0 <lwip_htons>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ec0e:	4b48      	ldr	r3, [pc, #288]	; (800ed30 <tcp_input+0x28c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	885b      	ldrh	r3, [r3, #2]
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	4a46      	ldr	r2, [pc, #280]	; (800ed30 <tcp_input+0x28c>)
 800ec18:	6814      	ldr	r4, [r2, #0]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fc f8e8 	bl	800adf0 <lwip_htons>
 800ec20:	4603      	mov	r3, r0
 800ec22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ec24:	4b42      	ldr	r3, [pc, #264]	; (800ed30 <tcp_input+0x28c>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	4a41      	ldr	r2, [pc, #260]	; (800ed30 <tcp_input+0x28c>)
 800ec2c:	6814      	ldr	r4, [r2, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fc f8f3 	bl	800ae1a <lwip_htonl>
 800ec34:	4603      	mov	r3, r0
 800ec36:	6063      	str	r3, [r4, #4]
 800ec38:	6863      	ldr	r3, [r4, #4]
 800ec3a:	4a45      	ldr	r2, [pc, #276]	; (800ed50 <tcp_input+0x2ac>)
 800ec3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ec3e:	4b3c      	ldr	r3, [pc, #240]	; (800ed30 <tcp_input+0x28c>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	4a3a      	ldr	r2, [pc, #232]	; (800ed30 <tcp_input+0x28c>)
 800ec46:	6814      	ldr	r4, [r2, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fc f8e6 	bl	800ae1a <lwip_htonl>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	60a3      	str	r3, [r4, #8]
 800ec52:	68a3      	ldr	r3, [r4, #8]
 800ec54:	4a3f      	ldr	r2, [pc, #252]	; (800ed54 <tcp_input+0x2b0>)
 800ec56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ec58:	4b35      	ldr	r3, [pc, #212]	; (800ed30 <tcp_input+0x28c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	89db      	ldrh	r3, [r3, #14]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	4a33      	ldr	r2, [pc, #204]	; (800ed30 <tcp_input+0x28c>)
 800ec62:	6814      	ldr	r4, [r2, #0]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fc f8c3 	bl	800adf0 <lwip_htons>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ec6e:	4b30      	ldr	r3, [pc, #192]	; (800ed30 <tcp_input+0x28c>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	899b      	ldrh	r3, [r3, #12]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fc f8ba 	bl	800adf0 <lwip_htons>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	4b34      	ldr	r3, [pc, #208]	; (800ed58 <tcp_input+0x2b4>)
 800ec88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	891a      	ldrh	r2, [r3, #8]
 800ec8e:	4b33      	ldr	r3, [pc, #204]	; (800ed5c <tcp_input+0x2b8>)
 800ec90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ec92:	4b31      	ldr	r3, [pc, #196]	; (800ed58 <tcp_input+0x2b4>)
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	f003 0303 	and.w	r3, r3, #3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00c      	beq.n	800ecb8 <tcp_input+0x214>
    tcplen++;
 800ec9e:	4b2f      	ldr	r3, [pc, #188]	; (800ed5c <tcp_input+0x2b8>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	4b2d      	ldr	r3, [pc, #180]	; (800ed5c <tcp_input+0x2b8>)
 800eca8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	891a      	ldrh	r2, [r3, #8]
 800ecae:	4b2b      	ldr	r3, [pc, #172]	; (800ed5c <tcp_input+0x2b8>)
 800ecb0:	881b      	ldrh	r3, [r3, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	f200 82e6 	bhi.w	800f284 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecbc:	4b28      	ldr	r3, [pc, #160]	; (800ed60 <tcp_input+0x2bc>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	61fb      	str	r3, [r7, #28]
 800ecc2:	e09d      	b.n	800ee00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	7d1b      	ldrb	r3, [r3, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d105      	bne.n	800ecd8 <tcp_input+0x234>
 800eccc:	4b15      	ldr	r3, [pc, #84]	; (800ed24 <tcp_input+0x280>)
 800ecce:	22fb      	movs	r2, #251	; 0xfb
 800ecd0:	4924      	ldr	r1, [pc, #144]	; (800ed64 <tcp_input+0x2c0>)
 800ecd2:	4816      	ldr	r0, [pc, #88]	; (800ed2c <tcp_input+0x288>)
 800ecd4:	f007 f900 	bl	8015ed8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	7d1b      	ldrb	r3, [r3, #20]
 800ecdc:	2b0a      	cmp	r3, #10
 800ecde:	d105      	bne.n	800ecec <tcp_input+0x248>
 800ece0:	4b10      	ldr	r3, [pc, #64]	; (800ed24 <tcp_input+0x280>)
 800ece2:	22fc      	movs	r2, #252	; 0xfc
 800ece4:	4920      	ldr	r1, [pc, #128]	; (800ed68 <tcp_input+0x2c4>)
 800ece6:	4811      	ldr	r0, [pc, #68]	; (800ed2c <tcp_input+0x288>)
 800ece8:	f007 f8f6 	bl	8015ed8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	7d1b      	ldrb	r3, [r3, #20]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d105      	bne.n	800ed00 <tcp_input+0x25c>
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	; (800ed24 <tcp_input+0x280>)
 800ecf6:	22fd      	movs	r2, #253	; 0xfd
 800ecf8:	491c      	ldr	r1, [pc, #112]	; (800ed6c <tcp_input+0x2c8>)
 800ecfa:	480c      	ldr	r0, [pc, #48]	; (800ed2c <tcp_input+0x288>)
 800ecfc:	f007 f8ec 	bl	8015ed8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	7a1b      	ldrb	r3, [r3, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d033      	beq.n	800ed70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	7a1a      	ldrb	r2, [r3, #8]
 800ed0c:	4b09      	ldr	r3, [pc, #36]	; (800ed34 <tcp_input+0x290>)
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed14:	3301      	adds	r3, #1
 800ed16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d029      	beq.n	800ed70 <tcp_input+0x2cc>
      prev = pcb;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	61bb      	str	r3, [r7, #24]
      continue;
 800ed20:	e06b      	b.n	800edfa <tcp_input+0x356>
 800ed22:	bf00      	nop
 800ed24:	08018e64 	.word	0x08018e64
 800ed28:	08018e98 	.word	0x08018e98
 800ed2c:	08018eb0 	.word	0x08018eb0
 800ed30:	2001196c 	.word	0x2001196c
 800ed34:	200098b8 	.word	0x200098b8
 800ed38:	20011970 	.word	0x20011970
 800ed3c:	20011974 	.word	0x20011974
 800ed40:	20011972 	.word	0x20011972
 800ed44:	08018ed8 	.word	0x08018ed8
 800ed48:	08018ee8 	.word	0x08018ee8
 800ed4c:	08018ef4 	.word	0x08018ef4
 800ed50:	2001197c 	.word	0x2001197c
 800ed54:	20011980 	.word	0x20011980
 800ed58:	20011988 	.word	0x20011988
 800ed5c:	20011986 	.word	0x20011986
 800ed60:	20011950 	.word	0x20011950
 800ed64:	08018f14 	.word	0x08018f14
 800ed68:	08018f3c 	.word	0x08018f3c
 800ed6c:	08018f68 	.word	0x08018f68
    }

    if (pcb->remote_port == tcphdr->src &&
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	8b1a      	ldrh	r2, [r3, #24]
 800ed74:	4b72      	ldr	r3, [pc, #456]	; (800ef40 <tcp_input+0x49c>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	881b      	ldrh	r3, [r3, #0]
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d13a      	bne.n	800edf6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	8ada      	ldrh	r2, [r3, #22]
 800ed84:	4b6e      	ldr	r3, [pc, #440]	; (800ef40 <tcp_input+0x49c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	885b      	ldrh	r3, [r3, #2]
 800ed8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d132      	bne.n	800edf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	4b6b      	ldr	r3, [pc, #428]	; (800ef44 <tcp_input+0x4a0>)
 800ed96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d12c      	bne.n	800edf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	4b68      	ldr	r3, [pc, #416]	; (800ef44 <tcp_input+0x4a0>)
 800eda2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d126      	bne.n	800edf6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	69fa      	ldr	r2, [r7, #28]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d106      	bne.n	800edc0 <tcp_input+0x31c>
 800edb2:	4b65      	ldr	r3, [pc, #404]	; (800ef48 <tcp_input+0x4a4>)
 800edb4:	f240 120d 	movw	r2, #269	; 0x10d
 800edb8:	4964      	ldr	r1, [pc, #400]	; (800ef4c <tcp_input+0x4a8>)
 800edba:	4865      	ldr	r0, [pc, #404]	; (800ef50 <tcp_input+0x4ac>)
 800edbc:	f007 f88c 	bl	8015ed8 <iprintf>
      if (prev != NULL) {
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <tcp_input+0x338>
        prev->next = pcb->next;
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	68da      	ldr	r2, [r3, #12]
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800edce:	4b61      	ldr	r3, [pc, #388]	; (800ef54 <tcp_input+0x4b0>)
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800edd6:	4a5f      	ldr	r2, [pc, #380]	; (800ef54 <tcp_input+0x4b0>)
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	69fa      	ldr	r2, [r7, #28]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d111      	bne.n	800ee0a <tcp_input+0x366>
 800ede6:	4b58      	ldr	r3, [pc, #352]	; (800ef48 <tcp_input+0x4a4>)
 800ede8:	f240 1215 	movw	r2, #277	; 0x115
 800edec:	495a      	ldr	r1, [pc, #360]	; (800ef58 <tcp_input+0x4b4>)
 800edee:	4858      	ldr	r0, [pc, #352]	; (800ef50 <tcp_input+0x4ac>)
 800edf0:	f007 f872 	bl	8015ed8 <iprintf>
      break;
 800edf4:	e009      	b.n	800ee0a <tcp_input+0x366>
    }
    prev = pcb;
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	61fb      	str	r3, [r7, #28]
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f47f af5e 	bne.w	800ecc4 <tcp_input+0x220>
 800ee08:	e000      	b.n	800ee0c <tcp_input+0x368>
      break;
 800ee0a:	bf00      	nop
  }

  if (pcb == NULL) {
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f040 80aa 	bne.w	800ef68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee14:	4b51      	ldr	r3, [pc, #324]	; (800ef5c <tcp_input+0x4b8>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	61fb      	str	r3, [r7, #28]
 800ee1a:	e03f      	b.n	800ee9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b0a      	cmp	r3, #10
 800ee22:	d006      	beq.n	800ee32 <tcp_input+0x38e>
 800ee24:	4b48      	ldr	r3, [pc, #288]	; (800ef48 <tcp_input+0x4a4>)
 800ee26:	f240 121f 	movw	r2, #287	; 0x11f
 800ee2a:	494d      	ldr	r1, [pc, #308]	; (800ef60 <tcp_input+0x4bc>)
 800ee2c:	4848      	ldr	r0, [pc, #288]	; (800ef50 <tcp_input+0x4ac>)
 800ee2e:	f007 f853 	bl	8015ed8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	7a1b      	ldrb	r3, [r3, #8]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d009      	beq.n	800ee4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	7a1a      	ldrb	r2, [r3, #8]
 800ee3e:	4b41      	ldr	r3, [pc, #260]	; (800ef44 <tcp_input+0x4a0>)
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee46:	3301      	adds	r3, #1
 800ee48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d122      	bne.n	800ee94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	8b1a      	ldrh	r2, [r3, #24]
 800ee52:	4b3b      	ldr	r3, [pc, #236]	; (800ef40 <tcp_input+0x49c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d11b      	bne.n	800ee96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	8ada      	ldrh	r2, [r3, #22]
 800ee62:	4b37      	ldr	r3, [pc, #220]	; (800ef40 <tcp_input+0x49c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	885b      	ldrh	r3, [r3, #2]
 800ee68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d113      	bne.n	800ee96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	4b34      	ldr	r3, [pc, #208]	; (800ef44 <tcp_input+0x4a0>)
 800ee74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d10d      	bne.n	800ee96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	4b31      	ldr	r3, [pc, #196]	; (800ef44 <tcp_input+0x4a0>)
 800ee80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d107      	bne.n	800ee96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ee86:	69f8      	ldr	r0, [r7, #28]
 800ee88:	f000 fb56 	bl	800f538 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7fd fcb5 	bl	800c7fc <pbuf_free>
        return;
 800ee92:	e1fd      	b.n	800f290 <tcp_input+0x7ec>
        continue;
 800ee94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	61fb      	str	r3, [r7, #28]
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1bc      	bne.n	800ee1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eea6:	4b2f      	ldr	r3, [pc, #188]	; (800ef64 <tcp_input+0x4c0>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	617b      	str	r3, [r7, #20]
 800eeac:	e02a      	b.n	800ef04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	7a1b      	ldrb	r3, [r3, #8]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00c      	beq.n	800eed0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	7a1a      	ldrb	r2, [r3, #8]
 800eeba:	4b22      	ldr	r3, [pc, #136]	; (800ef44 <tcp_input+0x4a0>)
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eec2:	3301      	adds	r3, #1
 800eec4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d002      	beq.n	800eed0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	61bb      	str	r3, [r7, #24]
        continue;
 800eece:	e016      	b.n	800eefe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	8ada      	ldrh	r2, [r3, #22]
 800eed4:	4b1a      	ldr	r3, [pc, #104]	; (800ef40 <tcp_input+0x49c>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	885b      	ldrh	r3, [r3, #2]
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	429a      	cmp	r2, r3
 800eede:	d10c      	bne.n	800eefa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	4b17      	ldr	r3, [pc, #92]	; (800ef44 <tcp_input+0x4a0>)
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d00f      	beq.n	800ef0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00d      	beq.n	800ef0e <tcp_input+0x46a>
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d009      	beq.n	800ef0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	617b      	str	r3, [r7, #20]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1d1      	bne.n	800eeae <tcp_input+0x40a>
 800ef0a:	e000      	b.n	800ef0e <tcp_input+0x46a>
            break;
 800ef0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d029      	beq.n	800ef68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00a      	beq.n	800ef30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	68da      	ldr	r2, [r3, #12]
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ef22:	4b10      	ldr	r3, [pc, #64]	; (800ef64 <tcp_input+0x4c0>)
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ef2a:	4a0e      	ldr	r2, [pc, #56]	; (800ef64 <tcp_input+0x4c0>)
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ef30:	6978      	ldr	r0, [r7, #20]
 800ef32:	f000 fa03 	bl	800f33c <tcp_listen_input>
      }
      pbuf_free(p);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7fd fc60 	bl	800c7fc <pbuf_free>
      return;
 800ef3c:	e1a8      	b.n	800f290 <tcp_input+0x7ec>
 800ef3e:	bf00      	nop
 800ef40:	2001196c 	.word	0x2001196c
 800ef44:	200098b8 	.word	0x200098b8
 800ef48:	08018e64 	.word	0x08018e64
 800ef4c:	08018f90 	.word	0x08018f90
 800ef50:	08018eb0 	.word	0x08018eb0
 800ef54:	20011950 	.word	0x20011950
 800ef58:	08018fbc 	.word	0x08018fbc
 800ef5c:	20011954 	.word	0x20011954
 800ef60:	08018fe8 	.word	0x08018fe8
 800ef64:	2001194c 	.word	0x2001194c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	f000 8158 	beq.w	800f220 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ef70:	4b95      	ldr	r3, [pc, #596]	; (800f1c8 <tcp_input+0x724>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	891a      	ldrh	r2, [r3, #8]
 800ef7a:	4b93      	ldr	r3, [pc, #588]	; (800f1c8 <tcp_input+0x724>)
 800ef7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ef7e:	4a92      	ldr	r2, [pc, #584]	; (800f1c8 <tcp_input+0x724>)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ef84:	4b91      	ldr	r3, [pc, #580]	; (800f1cc <tcp_input+0x728>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a8f      	ldr	r2, [pc, #572]	; (800f1c8 <tcp_input+0x724>)
 800ef8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ef8c:	4b90      	ldr	r3, [pc, #576]	; (800f1d0 <tcp_input+0x72c>)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ef92:	4b90      	ldr	r3, [pc, #576]	; (800f1d4 <tcp_input+0x730>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ef98:	4b8f      	ldr	r3, [pc, #572]	; (800f1d8 <tcp_input+0x734>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ef9e:	4b8f      	ldr	r3, [pc, #572]	; (800f1dc <tcp_input+0x738>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	f003 0308 	and.w	r3, r3, #8
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d006      	beq.n	800efb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	7b5b      	ldrb	r3, [r3, #13]
 800efae:	f043 0301 	orr.w	r3, r3, #1
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d017      	beq.n	800eff0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800efc0:	69f8      	ldr	r0, [r7, #28]
 800efc2:	f7ff f85b 	bl	800e07c <tcp_process_refused_data>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f113 0f0d 	cmn.w	r3, #13
 800efcc:	d007      	beq.n	800efde <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00c      	beq.n	800eff0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800efd6:	4b82      	ldr	r3, [pc, #520]	; (800f1e0 <tcp_input+0x73c>)
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d008      	beq.n	800eff0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f040 80e3 	bne.w	800f1ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800efe8:	69f8      	ldr	r0, [r7, #28]
 800efea:	f003 fe27 	bl	8012c3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800efee:	e0de      	b.n	800f1ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800eff0:	4a7c      	ldr	r2, [pc, #496]	; (800f1e4 <tcp_input+0x740>)
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eff6:	69f8      	ldr	r0, [r7, #28]
 800eff8:	f000 fb18 	bl	800f62c <tcp_process>
 800effc:	4603      	mov	r3, r0
 800effe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f004:	f113 0f0d 	cmn.w	r3, #13
 800f008:	f000 80d3 	beq.w	800f1b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f00c:	4b71      	ldr	r3, [pc, #452]	; (800f1d4 <tcp_input+0x730>)
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	f003 0308 	and.w	r3, r3, #8
 800f014:	2b00      	cmp	r3, #0
 800f016:	d015      	beq.n	800f044 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <tcp_input+0x590>
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	6912      	ldr	r2, [r2, #16]
 800f02c:	f06f 010d 	mvn.w	r1, #13
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f034:	69f9      	ldr	r1, [r7, #28]
 800f036:	486c      	ldr	r0, [pc, #432]	; (800f1e8 <tcp_input+0x744>)
 800f038:	f7ff fbbc 	bl	800e7b4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f03c:	69f8      	ldr	r0, [r7, #28]
 800f03e:	f7fd fe89 	bl	800cd54 <tcp_free>
 800f042:	e0da      	b.n	800f1fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f044:	2300      	movs	r3, #0
 800f046:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f048:	4b63      	ldr	r3, [pc, #396]	; (800f1d8 <tcp_input+0x734>)
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d01d      	beq.n	800f08c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f050:	4b61      	ldr	r3, [pc, #388]	; (800f1d8 <tcp_input+0x734>)
 800f052:	881b      	ldrh	r3, [r3, #0]
 800f054:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00a      	beq.n	800f076 <tcp_input+0x5d2>
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f066:	69fa      	ldr	r2, [r7, #28]
 800f068:	6910      	ldr	r0, [r2, #16]
 800f06a:	89fa      	ldrh	r2, [r7, #14]
 800f06c:	69f9      	ldr	r1, [r7, #28]
 800f06e:	4798      	blx	r3
 800f070:	4603      	mov	r3, r0
 800f072:	74fb      	strb	r3, [r7, #19]
 800f074:	e001      	b.n	800f07a <tcp_input+0x5d6>
 800f076:	2300      	movs	r3, #0
 800f078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f07e:	f113 0f0d 	cmn.w	r3, #13
 800f082:	f000 8098 	beq.w	800f1b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f086:	4b54      	ldr	r3, [pc, #336]	; (800f1d8 <tcp_input+0x734>)
 800f088:	2200      	movs	r2, #0
 800f08a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f08c:	69f8      	ldr	r0, [r7, #28]
 800f08e:	f000 f915 	bl	800f2bc <tcp_input_delayed_close>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	f040 8090 	bne.w	800f1ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f09a:	4b4d      	ldr	r3, [pc, #308]	; (800f1d0 <tcp_input+0x72c>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d041      	beq.n	800f126 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d006      	beq.n	800f0b8 <tcp_input+0x614>
 800f0aa:	4b50      	ldr	r3, [pc, #320]	; (800f1ec <tcp_input+0x748>)
 800f0ac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f0b0:	494f      	ldr	r1, [pc, #316]	; (800f1f0 <tcp_input+0x74c>)
 800f0b2:	4850      	ldr	r0, [pc, #320]	; (800f1f4 <tcp_input+0x750>)
 800f0b4:	f006 ff10 	bl	8015ed8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	8b5b      	ldrh	r3, [r3, #26]
 800f0bc:	f003 0310 	and.w	r3, r3, #16
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d008      	beq.n	800f0d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f0c4:	4b42      	ldr	r3, [pc, #264]	; (800f1d0 <tcp_input+0x72c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fd fb97 	bl	800c7fc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f0ce:	69f8      	ldr	r0, [r7, #28]
 800f0d0:	f7fe f984 	bl	800d3dc <tcp_abort>
            goto aborted;
 800f0d4:	e091      	b.n	800f1fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00c      	beq.n	800f0fa <tcp_input+0x656>
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	6918      	ldr	r0, [r3, #16]
 800f0ea:	4b39      	ldr	r3, [pc, #228]	; (800f1d0 <tcp_input+0x72c>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	69f9      	ldr	r1, [r7, #28]
 800f0f2:	47a0      	blx	r4
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	74fb      	strb	r3, [r7, #19]
 800f0f8:	e008      	b.n	800f10c <tcp_input+0x668>
 800f0fa:	4b35      	ldr	r3, [pc, #212]	; (800f1d0 <tcp_input+0x72c>)
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	2300      	movs	r3, #0
 800f100:	69f9      	ldr	r1, [r7, #28]
 800f102:	2000      	movs	r0, #0
 800f104:	f7ff f890 	bl	800e228 <tcp_recv_null>
 800f108:	4603      	mov	r3, r0
 800f10a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f10c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f110:	f113 0f0d 	cmn.w	r3, #13
 800f114:	d053      	beq.n	800f1be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d003      	beq.n	800f126 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f11e:	4b2c      	ldr	r3, [pc, #176]	; (800f1d0 <tcp_input+0x72c>)
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f126:	4b2b      	ldr	r3, [pc, #172]	; (800f1d4 <tcp_input+0x730>)
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d030      	beq.n	800f194 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f136:	2b00      	cmp	r3, #0
 800f138:	d009      	beq.n	800f14e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f13e:	7b5a      	ldrb	r2, [r3, #13]
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f144:	f042 0220 	orr.w	r2, r2, #32
 800f148:	b2d2      	uxtb	r2, r2
 800f14a:	735a      	strb	r2, [r3, #13]
 800f14c:	e022      	b.n	800f194 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f152:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f156:	d005      	beq.n	800f164 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f15c:	3301      	adds	r3, #1
 800f15e:	b29a      	uxth	r2, r3
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00b      	beq.n	800f186 <tcp_input+0x6e2>
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	6918      	ldr	r0, [r3, #16]
 800f178:	2300      	movs	r3, #0
 800f17a:	2200      	movs	r2, #0
 800f17c:	69f9      	ldr	r1, [r7, #28]
 800f17e:	47a0      	blx	r4
 800f180:	4603      	mov	r3, r0
 800f182:	74fb      	strb	r3, [r7, #19]
 800f184:	e001      	b.n	800f18a <tcp_input+0x6e6>
 800f186:	2300      	movs	r3, #0
 800f188:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f18a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f18e:	f113 0f0d 	cmn.w	r3, #13
 800f192:	d016      	beq.n	800f1c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f194:	4b13      	ldr	r3, [pc, #76]	; (800f1e4 <tcp_input+0x740>)
 800f196:	2200      	movs	r2, #0
 800f198:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f19a:	69f8      	ldr	r0, [r7, #28]
 800f19c:	f000 f88e 	bl	800f2bc <tcp_input_delayed_close>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d128      	bne.n	800f1f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f1a6:	69f8      	ldr	r0, [r7, #28]
 800f1a8:	f002 ff20 	bl	8011fec <tcp_output>
 800f1ac:	e025      	b.n	800f1fa <tcp_input+0x756>
        goto aborted;
 800f1ae:	bf00      	nop
 800f1b0:	e023      	b.n	800f1fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f1b2:	bf00      	nop
 800f1b4:	e021      	b.n	800f1fa <tcp_input+0x756>
              goto aborted;
 800f1b6:	bf00      	nop
 800f1b8:	e01f      	b.n	800f1fa <tcp_input+0x756>
          goto aborted;
 800f1ba:	bf00      	nop
 800f1bc:	e01d      	b.n	800f1fa <tcp_input+0x756>
            goto aborted;
 800f1be:	bf00      	nop
 800f1c0:	e01b      	b.n	800f1fa <tcp_input+0x756>
              goto aborted;
 800f1c2:	bf00      	nop
 800f1c4:	e019      	b.n	800f1fa <tcp_input+0x756>
 800f1c6:	bf00      	nop
 800f1c8:	2001195c 	.word	0x2001195c
 800f1cc:	2001196c 	.word	0x2001196c
 800f1d0:	2001198c 	.word	0x2001198c
 800f1d4:	20011989 	.word	0x20011989
 800f1d8:	20011984 	.word	0x20011984
 800f1dc:	20011988 	.word	0x20011988
 800f1e0:	20011986 	.word	0x20011986
 800f1e4:	20011990 	.word	0x20011990
 800f1e8:	20011950 	.word	0x20011950
 800f1ec:	08018e64 	.word	0x08018e64
 800f1f0:	08019018 	.word	0x08019018
 800f1f4:	08018eb0 	.word	0x08018eb0
          goto aborted;
 800f1f8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f1fa:	4b27      	ldr	r3, [pc, #156]	; (800f298 <tcp_input+0x7f4>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f200:	4b26      	ldr	r3, [pc, #152]	; (800f29c <tcp_input+0x7f8>)
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f206:	4b26      	ldr	r3, [pc, #152]	; (800f2a0 <tcp_input+0x7fc>)
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d03f      	beq.n	800f28e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f20e:	4b24      	ldr	r3, [pc, #144]	; (800f2a0 <tcp_input+0x7fc>)
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	4618      	mov	r0, r3
 800f214:	f7fd faf2 	bl	800c7fc <pbuf_free>
      inseg.p = NULL;
 800f218:	4b21      	ldr	r3, [pc, #132]	; (800f2a0 <tcp_input+0x7fc>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f21e:	e036      	b.n	800f28e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f220:	4b20      	ldr	r3, [pc, #128]	; (800f2a4 <tcp_input+0x800>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	899b      	ldrh	r3, [r3, #12]
 800f226:	b29b      	uxth	r3, r3
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fb fde1 	bl	800adf0 <lwip_htons>
 800f22e:	4603      	mov	r3, r0
 800f230:	b2db      	uxtb	r3, r3
 800f232:	f003 0304 	and.w	r3, r3, #4
 800f236:	2b00      	cmp	r3, #0
 800f238:	d118      	bne.n	800f26c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f23a:	4b1b      	ldr	r3, [pc, #108]	; (800f2a8 <tcp_input+0x804>)
 800f23c:	6819      	ldr	r1, [r3, #0]
 800f23e:	4b1b      	ldr	r3, [pc, #108]	; (800f2ac <tcp_input+0x808>)
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	4b1a      	ldr	r3, [pc, #104]	; (800f2b0 <tcp_input+0x80c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f24a:	4b16      	ldr	r3, [pc, #88]	; (800f2a4 <tcp_input+0x800>)
 800f24c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f24e:	885b      	ldrh	r3, [r3, #2]
 800f250:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f252:	4a14      	ldr	r2, [pc, #80]	; (800f2a4 <tcp_input+0x800>)
 800f254:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f256:	8812      	ldrh	r2, [r2, #0]
 800f258:	b292      	uxth	r2, r2
 800f25a:	9202      	str	r2, [sp, #8]
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	4b15      	ldr	r3, [pc, #84]	; (800f2b4 <tcp_input+0x810>)
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	4b15      	ldr	r3, [pc, #84]	; (800f2b8 <tcp_input+0x814>)
 800f264:	4602      	mov	r2, r0
 800f266:	2000      	movs	r0, #0
 800f268:	f003 fc96 	bl	8012b98 <tcp_rst>
    pbuf_free(p);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7fd fac5 	bl	800c7fc <pbuf_free>
  return;
 800f272:	e00c      	b.n	800f28e <tcp_input+0x7ea>
    goto dropped;
 800f274:	bf00      	nop
 800f276:	e006      	b.n	800f286 <tcp_input+0x7e2>
    goto dropped;
 800f278:	bf00      	nop
 800f27a:	e004      	b.n	800f286 <tcp_input+0x7e2>
    goto dropped;
 800f27c:	bf00      	nop
 800f27e:	e002      	b.n	800f286 <tcp_input+0x7e2>
      goto dropped;
 800f280:	bf00      	nop
 800f282:	e000      	b.n	800f286 <tcp_input+0x7e2>
      goto dropped;
 800f284:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7fd fab8 	bl	800c7fc <pbuf_free>
 800f28c:	e000      	b.n	800f290 <tcp_input+0x7ec>
  return;
 800f28e:	bf00      	nop
}
 800f290:	3724      	adds	r7, #36	; 0x24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd90      	pop	{r4, r7, pc}
 800f296:	bf00      	nop
 800f298:	20011990 	.word	0x20011990
 800f29c:	2001198c 	.word	0x2001198c
 800f2a0:	2001195c 	.word	0x2001195c
 800f2a4:	2001196c 	.word	0x2001196c
 800f2a8:	20011980 	.word	0x20011980
 800f2ac:	20011986 	.word	0x20011986
 800f2b0:	2001197c 	.word	0x2001197c
 800f2b4:	200098c8 	.word	0x200098c8
 800f2b8:	200098cc 	.word	0x200098cc

0800f2bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d106      	bne.n	800f2d8 <tcp_input_delayed_close+0x1c>
 800f2ca:	4b17      	ldr	r3, [pc, #92]	; (800f328 <tcp_input_delayed_close+0x6c>)
 800f2cc:	f240 225a 	movw	r2, #602	; 0x25a
 800f2d0:	4916      	ldr	r1, [pc, #88]	; (800f32c <tcp_input_delayed_close+0x70>)
 800f2d2:	4817      	ldr	r0, [pc, #92]	; (800f330 <tcp_input_delayed_close+0x74>)
 800f2d4:	f006 fe00 	bl	8015ed8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f2d8:	4b16      	ldr	r3, [pc, #88]	; (800f334 <tcp_input_delayed_close+0x78>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f003 0310 	and.w	r3, r3, #16
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01c      	beq.n	800f31e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	8b5b      	ldrh	r3, [r3, #26]
 800f2e8:	f003 0310 	and.w	r3, r3, #16
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10d      	bne.n	800f30c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d008      	beq.n	800f30c <tcp_input_delayed_close+0x50>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	6912      	ldr	r2, [r2, #16]
 800f304:	f06f 010e 	mvn.w	r1, #14
 800f308:	4610      	mov	r0, r2
 800f30a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	480a      	ldr	r0, [pc, #40]	; (800f338 <tcp_input_delayed_close+0x7c>)
 800f310:	f7ff fa50 	bl	800e7b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7fd fd1d 	bl	800cd54 <tcp_free>
    return 1;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e000      	b.n	800f320 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	08018e64 	.word	0x08018e64
 800f32c:	08019034 	.word	0x08019034
 800f330:	08018eb0 	.word	0x08018eb0
 800f334:	20011989 	.word	0x20011989
 800f338:	20011950 	.word	0x20011950

0800f33c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b08b      	sub	sp, #44	; 0x2c
 800f340:	af04      	add	r7, sp, #16
 800f342:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f344:	4b6f      	ldr	r3, [pc, #444]	; (800f504 <tcp_listen_input+0x1c8>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f040 80d2 	bne.w	800f4f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d106      	bne.n	800f366 <tcp_listen_input+0x2a>
 800f358:	4b6b      	ldr	r3, [pc, #428]	; (800f508 <tcp_listen_input+0x1cc>)
 800f35a:	f240 2281 	movw	r2, #641	; 0x281
 800f35e:	496b      	ldr	r1, [pc, #428]	; (800f50c <tcp_listen_input+0x1d0>)
 800f360:	486b      	ldr	r0, [pc, #428]	; (800f510 <tcp_listen_input+0x1d4>)
 800f362:	f006 fdb9 	bl	8015ed8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f366:	4b67      	ldr	r3, [pc, #412]	; (800f504 <tcp_listen_input+0x1c8>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	f003 0310 	and.w	r3, r3, #16
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d019      	beq.n	800f3a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f372:	4b68      	ldr	r3, [pc, #416]	; (800f514 <tcp_listen_input+0x1d8>)
 800f374:	6819      	ldr	r1, [r3, #0]
 800f376:	4b68      	ldr	r3, [pc, #416]	; (800f518 <tcp_listen_input+0x1dc>)
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	4b67      	ldr	r3, [pc, #412]	; (800f51c <tcp_listen_input+0x1e0>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f382:	4b67      	ldr	r3, [pc, #412]	; (800f520 <tcp_listen_input+0x1e4>)
 800f384:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f386:	885b      	ldrh	r3, [r3, #2]
 800f388:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f38a:	4a65      	ldr	r2, [pc, #404]	; (800f520 <tcp_listen_input+0x1e4>)
 800f38c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f38e:	8812      	ldrh	r2, [r2, #0]
 800f390:	b292      	uxth	r2, r2
 800f392:	9202      	str	r2, [sp, #8]
 800f394:	9301      	str	r3, [sp, #4]
 800f396:	4b63      	ldr	r3, [pc, #396]	; (800f524 <tcp_listen_input+0x1e8>)
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	4b63      	ldr	r3, [pc, #396]	; (800f528 <tcp_listen_input+0x1ec>)
 800f39c:	4602      	mov	r2, r0
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f003 fbfa 	bl	8012b98 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f3a4:	e0a9      	b.n	800f4fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f3a6:	4b57      	ldr	r3, [pc, #348]	; (800f504 <tcp_listen_input+0x1c8>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	f003 0302 	and.w	r3, r3, #2
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f000 80a3 	beq.w	800f4fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	7d5b      	ldrb	r3, [r3, #21]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7ff f859 	bl	800e470 <tcp_alloc>
 800f3be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d111      	bne.n	800f3ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	699b      	ldr	r3, [r3, #24]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00a      	beq.n	800f3e4 <tcp_listen_input+0xa8>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	699b      	ldr	r3, [r3, #24]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	6910      	ldr	r0, [r2, #16]
 800f3d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3da:	2100      	movs	r1, #0
 800f3dc:	4798      	blx	r3
 800f3de:	4603      	mov	r3, r0
 800f3e0:	73bb      	strb	r3, [r7, #14]
      return;
 800f3e2:	e08b      	b.n	800f4fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f3e4:	23f0      	movs	r3, #240	; 0xf0
 800f3e6:	73bb      	strb	r3, [r7, #14]
      return;
 800f3e8:	e088      	b.n	800f4fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f3ea:	4b50      	ldr	r3, [pc, #320]	; (800f52c <tcp_listen_input+0x1f0>)
 800f3ec:	695a      	ldr	r2, [r3, #20]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f3f2:	4b4e      	ldr	r3, [pc, #312]	; (800f52c <tcp_listen_input+0x1f0>)
 800f3f4:	691a      	ldr	r2, [r3, #16]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	8ada      	ldrh	r2, [r3, #22]
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f402:	4b47      	ldr	r3, [pc, #284]	; (800f520 <tcp_listen_input+0x1e4>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	2203      	movs	r2, #3
 800f412:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f414:	4b41      	ldr	r3, [pc, #260]	; (800f51c <tcp_listen_input+0x1e0>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	1c5a      	adds	r2, r3, #1
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f426:	6978      	ldr	r0, [r7, #20]
 800f428:	f7ff fa58 	bl	800e8dc <tcp_next_iss>
 800f42c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	693a      	ldr	r2, [r7, #16]
 800f438:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	693a      	ldr	r2, [r7, #16]
 800f43e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f446:	4b35      	ldr	r3, [pc, #212]	; (800f51c <tcp_listen_input+0x1e0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	1e5a      	subs	r2, r3, #1
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	691a      	ldr	r2, [r3, #16]
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7a5b      	ldrb	r3, [r3, #9]
 800f462:	f003 030c 	and.w	r3, r3, #12
 800f466:	b2da      	uxtb	r2, r3
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7a1a      	ldrb	r2, [r3, #8]
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f474:	4b2e      	ldr	r3, [pc, #184]	; (800f530 <tcp_listen_input+0x1f4>)
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	60da      	str	r2, [r3, #12]
 800f47c:	4a2c      	ldr	r2, [pc, #176]	; (800f530 <tcp_listen_input+0x1f4>)
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	f003 fd4b 	bl	8012f1c <tcp_timer_needed>
 800f486:	4b2b      	ldr	r3, [pc, #172]	; (800f534 <tcp_listen_input+0x1f8>)
 800f488:	2201      	movs	r2, #1
 800f48a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f48c:	6978      	ldr	r0, [r7, #20]
 800f48e:	f001 fd8f 	bl	8010fb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f492:	4b23      	ldr	r3, [pc, #140]	; (800f520 <tcp_listen_input+0x1e4>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	89db      	ldrh	r3, [r3, #14]
 800f498:	b29a      	uxth	r2, r3
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f004 ff85 	bl	80143c4 <ip4_route>
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7ff fa30 	bl	800e928 <tcp_eff_send_mss_netif>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f4d0:	2112      	movs	r1, #18
 800f4d2:	6978      	ldr	r0, [r7, #20]
 800f4d4:	f002 fc9c 	bl	8011e10 <tcp_enqueue_flags>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d004      	beq.n	800f4ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	6978      	ldr	r0, [r7, #20]
 800f4e8:	f7fd feba 	bl	800d260 <tcp_abandon>
      return;
 800f4ec:	e006      	b.n	800f4fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f4ee:	6978      	ldr	r0, [r7, #20]
 800f4f0:	f002 fd7c 	bl	8011fec <tcp_output>
  return;
 800f4f4:	e001      	b.n	800f4fa <tcp_listen_input+0x1be>
    return;
 800f4f6:	bf00      	nop
 800f4f8:	e000      	b.n	800f4fc <tcp_listen_input+0x1c0>
  return;
 800f4fa:	bf00      	nop
}
 800f4fc:	371c      	adds	r7, #28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd90      	pop	{r4, r7, pc}
 800f502:	bf00      	nop
 800f504:	20011988 	.word	0x20011988
 800f508:	08018e64 	.word	0x08018e64
 800f50c:	0801905c 	.word	0x0801905c
 800f510:	08018eb0 	.word	0x08018eb0
 800f514:	20011980 	.word	0x20011980
 800f518:	20011986 	.word	0x20011986
 800f51c:	2001197c 	.word	0x2001197c
 800f520:	2001196c 	.word	0x2001196c
 800f524:	200098c8 	.word	0x200098c8
 800f528:	200098cc 	.word	0x200098cc
 800f52c:	200098b8 	.word	0x200098b8
 800f530:	20011950 	.word	0x20011950
 800f534:	20011958 	.word	0x20011958

0800f538 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af04      	add	r7, sp, #16
 800f53e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f540:	4b2f      	ldr	r3, [pc, #188]	; (800f600 <tcp_timewait_input+0xc8>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	f003 0304 	and.w	r3, r3, #4
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d153      	bne.n	800f5f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <tcp_timewait_input+0x28>
 800f552:	4b2c      	ldr	r3, [pc, #176]	; (800f604 <tcp_timewait_input+0xcc>)
 800f554:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f558:	492b      	ldr	r1, [pc, #172]	; (800f608 <tcp_timewait_input+0xd0>)
 800f55a:	482c      	ldr	r0, [pc, #176]	; (800f60c <tcp_timewait_input+0xd4>)
 800f55c:	f006 fcbc 	bl	8015ed8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f560:	4b27      	ldr	r3, [pc, #156]	; (800f600 <tcp_timewait_input+0xc8>)
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	f003 0302 	and.w	r3, r3, #2
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d02a      	beq.n	800f5c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f56c:	4b28      	ldr	r3, [pc, #160]	; (800f610 <tcp_timewait_input+0xd8>)
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	db2d      	blt.n	800f5d6 <tcp_timewait_input+0x9e>
 800f57a:	4b25      	ldr	r3, [pc, #148]	; (800f610 <tcp_timewait_input+0xd8>)
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f582:	6879      	ldr	r1, [r7, #4]
 800f584:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f586:	440b      	add	r3, r1
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	dc23      	bgt.n	800f5d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f58e:	4b21      	ldr	r3, [pc, #132]	; (800f614 <tcp_timewait_input+0xdc>)
 800f590:	6819      	ldr	r1, [r3, #0]
 800f592:	4b21      	ldr	r3, [pc, #132]	; (800f618 <tcp_timewait_input+0xe0>)
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	461a      	mov	r2, r3
 800f598:	4b1d      	ldr	r3, [pc, #116]	; (800f610 <tcp_timewait_input+0xd8>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f59e:	4b1f      	ldr	r3, [pc, #124]	; (800f61c <tcp_timewait_input+0xe4>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5a2:	885b      	ldrh	r3, [r3, #2]
 800f5a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5a6:	4a1d      	ldr	r2, [pc, #116]	; (800f61c <tcp_timewait_input+0xe4>)
 800f5a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5aa:	8812      	ldrh	r2, [r2, #0]
 800f5ac:	b292      	uxth	r2, r2
 800f5ae:	9202      	str	r2, [sp, #8]
 800f5b0:	9301      	str	r3, [sp, #4]
 800f5b2:	4b1b      	ldr	r3, [pc, #108]	; (800f620 <tcp_timewait_input+0xe8>)
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	4b1b      	ldr	r3, [pc, #108]	; (800f624 <tcp_timewait_input+0xec>)
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f003 faec 	bl	8012b98 <tcp_rst>
      return;
 800f5c0:	e01b      	b.n	800f5fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f5c2:	4b0f      	ldr	r3, [pc, #60]	; (800f600 <tcp_timewait_input+0xc8>)
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	f003 0301 	and.w	r3, r3, #1
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d003      	beq.n	800f5d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f5ce:	4b16      	ldr	r3, [pc, #88]	; (800f628 <tcp_timewait_input+0xf0>)
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f5d6:	4b10      	ldr	r3, [pc, #64]	; (800f618 <tcp_timewait_input+0xe0>)
 800f5d8:	881b      	ldrh	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00c      	beq.n	800f5f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	8b5b      	ldrh	r3, [r3, #26]
 800f5e2:	f043 0302 	orr.w	r3, r3, #2
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f002 fcfd 	bl	8011fec <tcp_output>
  }
  return;
 800f5f2:	e001      	b.n	800f5f8 <tcp_timewait_input+0xc0>
    return;
 800f5f4:	bf00      	nop
 800f5f6:	e000      	b.n	800f5fa <tcp_timewait_input+0xc2>
  return;
 800f5f8:	bf00      	nop
}
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	20011988 	.word	0x20011988
 800f604:	08018e64 	.word	0x08018e64
 800f608:	0801907c 	.word	0x0801907c
 800f60c:	08018eb0 	.word	0x08018eb0
 800f610:	2001197c 	.word	0x2001197c
 800f614:	20011980 	.word	0x20011980
 800f618:	20011986 	.word	0x20011986
 800f61c:	2001196c 	.word	0x2001196c
 800f620:	200098c8 	.word	0x200098c8
 800f624:	200098cc 	.word	0x200098cc
 800f628:	20011944 	.word	0x20011944

0800f62c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f62c:	b590      	push	{r4, r7, lr}
 800f62e:	b08d      	sub	sp, #52	; 0x34
 800f630:	af04      	add	r7, sp, #16
 800f632:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f634:	2300      	movs	r3, #0
 800f636:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d106      	bne.n	800f650 <tcp_process+0x24>
 800f642:	4b9d      	ldr	r3, [pc, #628]	; (800f8b8 <tcp_process+0x28c>)
 800f644:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f648:	499c      	ldr	r1, [pc, #624]	; (800f8bc <tcp_process+0x290>)
 800f64a:	489d      	ldr	r0, [pc, #628]	; (800f8c0 <tcp_process+0x294>)
 800f64c:	f006 fc44 	bl	8015ed8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f650:	4b9c      	ldr	r3, [pc, #624]	; (800f8c4 <tcp_process+0x298>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	f003 0304 	and.w	r3, r3, #4
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d04e      	beq.n	800f6fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	7d1b      	ldrb	r3, [r3, #20]
 800f660:	2b02      	cmp	r3, #2
 800f662:	d108      	bne.n	800f676 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f668:	4b97      	ldr	r3, [pc, #604]	; (800f8c8 <tcp_process+0x29c>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d123      	bne.n	800f6b8 <tcp_process+0x8c>
        acceptable = 1;
 800f670:	2301      	movs	r3, #1
 800f672:	76fb      	strb	r3, [r7, #27]
 800f674:	e020      	b.n	800f6b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f67a:	4b94      	ldr	r3, [pc, #592]	; (800f8cc <tcp_process+0x2a0>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d102      	bne.n	800f688 <tcp_process+0x5c>
        acceptable = 1;
 800f682:	2301      	movs	r3, #1
 800f684:	76fb      	strb	r3, [r7, #27]
 800f686:	e017      	b.n	800f6b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f688:	4b90      	ldr	r3, [pc, #576]	; (800f8cc <tcp_process+0x2a0>)
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	db10      	blt.n	800f6b8 <tcp_process+0x8c>
 800f696:	4b8d      	ldr	r3, [pc, #564]	; (800f8cc <tcp_process+0x2a0>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69e:	6879      	ldr	r1, [r7, #4]
 800f6a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6a2:	440b      	add	r3, r1
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	dc06      	bgt.n	800f6b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	8b5b      	ldrh	r3, [r3, #26]
 800f6ae:	f043 0302 	orr.w	r3, r3, #2
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f6b8:	7efb      	ldrb	r3, [r7, #27]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d01b      	beq.n	800f6f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	7d1b      	ldrb	r3, [r3, #20]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d106      	bne.n	800f6d4 <tcp_process+0xa8>
 800f6c6:	4b7c      	ldr	r3, [pc, #496]	; (800f8b8 <tcp_process+0x28c>)
 800f6c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f6cc:	4980      	ldr	r1, [pc, #512]	; (800f8d0 <tcp_process+0x2a4>)
 800f6ce:	487c      	ldr	r0, [pc, #496]	; (800f8c0 <tcp_process+0x294>)
 800f6d0:	f006 fc02 	bl	8015ed8 <iprintf>
      recv_flags |= TF_RESET;
 800f6d4:	4b7f      	ldr	r3, [pc, #508]	; (800f8d4 <tcp_process+0x2a8>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	f043 0308 	orr.w	r3, r3, #8
 800f6dc:	b2da      	uxtb	r2, r3
 800f6de:	4b7d      	ldr	r3, [pc, #500]	; (800f8d4 <tcp_process+0x2a8>)
 800f6e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	8b5b      	ldrh	r3, [r3, #26]
 800f6e6:	f023 0301 	bic.w	r3, r3, #1
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f6f0:	f06f 030d 	mvn.w	r3, #13
 800f6f4:	e37a      	b.n	800fdec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	e378      	b.n	800fdec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f6fa:	4b72      	ldr	r3, [pc, #456]	; (800f8c4 <tcp_process+0x298>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	f003 0302 	and.w	r3, r3, #2
 800f702:	2b00      	cmp	r3, #0
 800f704:	d010      	beq.n	800f728 <tcp_process+0xfc>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	7d1b      	ldrb	r3, [r3, #20]
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d00c      	beq.n	800f728 <tcp_process+0xfc>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	7d1b      	ldrb	r3, [r3, #20]
 800f712:	2b03      	cmp	r3, #3
 800f714:	d008      	beq.n	800f728 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	8b5b      	ldrh	r3, [r3, #26]
 800f71a:	f043 0302 	orr.w	r3, r3, #2
 800f71e:	b29a      	uxth	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f724:	2300      	movs	r3, #0
 800f726:	e361      	b.n	800fdec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	8b5b      	ldrh	r3, [r3, #26]
 800f72c:	f003 0310 	and.w	r3, r3, #16
 800f730:	2b00      	cmp	r3, #0
 800f732:	d103      	bne.n	800f73c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f734:	4b68      	ldr	r3, [pc, #416]	; (800f8d8 <tcp_process+0x2ac>)
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f001 fc2f 	bl	8010fb0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	7d1b      	ldrb	r3, [r3, #20]
 800f756:	3b02      	subs	r3, #2
 800f758:	2b07      	cmp	r3, #7
 800f75a:	f200 8337 	bhi.w	800fdcc <tcp_process+0x7a0>
 800f75e:	a201      	add	r2, pc, #4	; (adr r2, 800f764 <tcp_process+0x138>)
 800f760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f764:	0800f785 	.word	0x0800f785
 800f768:	0800f9b5 	.word	0x0800f9b5
 800f76c:	0800fb2d 	.word	0x0800fb2d
 800f770:	0800fb57 	.word	0x0800fb57
 800f774:	0800fc7b 	.word	0x0800fc7b
 800f778:	0800fb2d 	.word	0x0800fb2d
 800f77c:	0800fd07 	.word	0x0800fd07
 800f780:	0800fd97 	.word	0x0800fd97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f784:	4b4f      	ldr	r3, [pc, #316]	; (800f8c4 <tcp_process+0x298>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	f003 0310 	and.w	r3, r3, #16
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 80e4 	beq.w	800f95a <tcp_process+0x32e>
 800f792:	4b4c      	ldr	r3, [pc, #304]	; (800f8c4 <tcp_process+0x298>)
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	f003 0302 	and.w	r3, r3, #2
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f000 80dd 	beq.w	800f95a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7a4:	1c5a      	adds	r2, r3, #1
 800f7a6:	4b48      	ldr	r3, [pc, #288]	; (800f8c8 <tcp_process+0x29c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	f040 80d5 	bne.w	800f95a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f7b0:	4b46      	ldr	r3, [pc, #280]	; (800f8cc <tcp_process+0x2a0>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f7c2:	4b41      	ldr	r3, [pc, #260]	; (800f8c8 <tcp_process+0x29c>)
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f7ca:	4b44      	ldr	r3, [pc, #272]	; (800f8dc <tcp_process+0x2b0>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	89db      	ldrh	r3, [r3, #14]
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f7e4:	4b39      	ldr	r3, [pc, #228]	; (800f8cc <tcp_process+0x2a0>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	1e5a      	subs	r2, r3, #1
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2204      	movs	r2, #4
 800f7f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f004 fde1 	bl	80143c4 <ip4_route>
 800f802:	4601      	mov	r1, r0
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	3304      	adds	r3, #4
 800f808:	461a      	mov	r2, r3
 800f80a:	4620      	mov	r0, r4
 800f80c:	f7ff f88c 	bl	800e928 <tcp_eff_send_mss_netif>
 800f810:	4603      	mov	r3, r0
 800f812:	461a      	mov	r2, r3
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f81c:	009a      	lsls	r2, r3, #2
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f822:	005b      	lsls	r3, r3, #1
 800f824:	f241 111c 	movw	r1, #4380	; 0x111c
 800f828:	428b      	cmp	r3, r1
 800f82a:	bf38      	it	cc
 800f82c:	460b      	movcc	r3, r1
 800f82e:	429a      	cmp	r2, r3
 800f830:	d204      	bcs.n	800f83c <tcp_process+0x210>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	b29b      	uxth	r3, r3
 800f83a:	e00d      	b.n	800f858 <tcp_process+0x22c>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f840:	005b      	lsls	r3, r3, #1
 800f842:	f241 121c 	movw	r2, #4380	; 0x111c
 800f846:	4293      	cmp	r3, r2
 800f848:	d904      	bls.n	800f854 <tcp_process+0x228>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	b29b      	uxth	r3, r3
 800f852:	e001      	b.n	800f858 <tcp_process+0x22c>
 800f854:	f241 131c 	movw	r3, #4380	; 0x111c
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f864:	2b00      	cmp	r3, #0
 800f866:	d106      	bne.n	800f876 <tcp_process+0x24a>
 800f868:	4b13      	ldr	r3, [pc, #76]	; (800f8b8 <tcp_process+0x28c>)
 800f86a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f86e:	491c      	ldr	r1, [pc, #112]	; (800f8e0 <tcp_process+0x2b4>)
 800f870:	4813      	ldr	r0, [pc, #76]	; (800f8c0 <tcp_process+0x294>)
 800f872:	f006 fb31 	bl	8015ed8 <iprintf>
        --pcb->snd_queuelen;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f87c:	3b01      	subs	r3, #1
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f88a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d12a      	bne.n	800f8e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f896:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <tcp_process+0x280>
 800f89e:	4b06      	ldr	r3, [pc, #24]	; (800f8b8 <tcp_process+0x28c>)
 800f8a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f8a4:	490f      	ldr	r1, [pc, #60]	; (800f8e4 <tcp_process+0x2b8>)
 800f8a6:	4806      	ldr	r0, [pc, #24]	; (800f8c0 <tcp_process+0x294>)
 800f8a8:	f006 fb16 	bl	8015ed8 <iprintf>
          pcb->unsent = rseg->next;
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	66da      	str	r2, [r3, #108]	; 0x6c
 800f8b4:	e01c      	b.n	800f8f0 <tcp_process+0x2c4>
 800f8b6:	bf00      	nop
 800f8b8:	08018e64 	.word	0x08018e64
 800f8bc:	0801909c 	.word	0x0801909c
 800f8c0:	08018eb0 	.word	0x08018eb0
 800f8c4:	20011988 	.word	0x20011988
 800f8c8:	20011980 	.word	0x20011980
 800f8cc:	2001197c 	.word	0x2001197c
 800f8d0:	080190b8 	.word	0x080190b8
 800f8d4:	20011989 	.word	0x20011989
 800f8d8:	20011944 	.word	0x20011944
 800f8dc:	2001196c 	.word	0x2001196c
 800f8e0:	080190d8 	.word	0x080190d8
 800f8e4:	080190f0 	.word	0x080190f0
        } else {
          pcb->unacked = rseg->next;
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f8f0:	69f8      	ldr	r0, [r7, #28]
 800f8f2:	f7fe fc54 	bl	800e19e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d104      	bne.n	800f908 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f904:	861a      	strh	r2, [r3, #48]	; 0x30
 800f906:	e006      	b.n	800f916 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00a      	beq.n	800f936 <tcp_process+0x30a>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	6910      	ldr	r0, [r2, #16]
 800f92a:	2200      	movs	r2, #0
 800f92c:	6879      	ldr	r1, [r7, #4]
 800f92e:	4798      	blx	r3
 800f930:	4603      	mov	r3, r0
 800f932:	76bb      	strb	r3, [r7, #26]
 800f934:	e001      	b.n	800f93a <tcp_process+0x30e>
 800f936:	2300      	movs	r3, #0
 800f938:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f93a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f93e:	f113 0f0d 	cmn.w	r3, #13
 800f942:	d102      	bne.n	800f94a <tcp_process+0x31e>
          return ERR_ABRT;
 800f944:	f06f 030c 	mvn.w	r3, #12
 800f948:	e250      	b.n	800fdec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	8b5b      	ldrh	r3, [r3, #26]
 800f94e:	f043 0302 	orr.w	r3, r3, #2
 800f952:	b29a      	uxth	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f958:	e23a      	b.n	800fdd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f95a:	4b98      	ldr	r3, [pc, #608]	; (800fbbc <tcp_process+0x590>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	f003 0310 	and.w	r3, r3, #16
 800f962:	2b00      	cmp	r3, #0
 800f964:	f000 8234 	beq.w	800fdd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f968:	4b95      	ldr	r3, [pc, #596]	; (800fbc0 <tcp_process+0x594>)
 800f96a:	6819      	ldr	r1, [r3, #0]
 800f96c:	4b95      	ldr	r3, [pc, #596]	; (800fbc4 <tcp_process+0x598>)
 800f96e:	881b      	ldrh	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	4b95      	ldr	r3, [pc, #596]	; (800fbc8 <tcp_process+0x59c>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f978:	4b94      	ldr	r3, [pc, #592]	; (800fbcc <tcp_process+0x5a0>)
 800f97a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f97c:	885b      	ldrh	r3, [r3, #2]
 800f97e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f980:	4a92      	ldr	r2, [pc, #584]	; (800fbcc <tcp_process+0x5a0>)
 800f982:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f984:	8812      	ldrh	r2, [r2, #0]
 800f986:	b292      	uxth	r2, r2
 800f988:	9202      	str	r2, [sp, #8]
 800f98a:	9301      	str	r3, [sp, #4]
 800f98c:	4b90      	ldr	r3, [pc, #576]	; (800fbd0 <tcp_process+0x5a4>)
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	4b90      	ldr	r3, [pc, #576]	; (800fbd4 <tcp_process+0x5a8>)
 800f992:	4602      	mov	r2, r0
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f003 f8ff 	bl	8012b98 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9a0:	2b05      	cmp	r3, #5
 800f9a2:	f200 8215 	bhi.w	800fdd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f002 feb9 	bl	8012724 <tcp_rexmit_rto>
      break;
 800f9b2:	e20d      	b.n	800fdd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f9b4:	4b81      	ldr	r3, [pc, #516]	; (800fbbc <tcp_process+0x590>)
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	f003 0310 	and.w	r3, r3, #16
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 80a1 	beq.w	800fb04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9c2:	4b7f      	ldr	r3, [pc, #508]	; (800fbc0 <tcp_process+0x594>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	db7e      	blt.n	800fad0 <tcp_process+0x4a4>
 800f9d2:	4b7b      	ldr	r3, [pc, #492]	; (800fbc0 <tcp_process+0x594>)
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	dc77      	bgt.n	800fad0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2204      	movs	r2, #4
 800f9e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d102      	bne.n	800f9f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f9ee:	23fa      	movs	r3, #250	; 0xfa
 800f9f0:	76bb      	strb	r3, [r7, #26]
 800f9f2:	e01d      	b.n	800fa30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d106      	bne.n	800fa0c <tcp_process+0x3e0>
 800f9fe:	4b76      	ldr	r3, [pc, #472]	; (800fbd8 <tcp_process+0x5ac>)
 800fa00:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fa04:	4975      	ldr	r1, [pc, #468]	; (800fbdc <tcp_process+0x5b0>)
 800fa06:	4876      	ldr	r0, [pc, #472]	; (800fbe0 <tcp_process+0x5b4>)
 800fa08:	f006 fa66 	bl	8015ed8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa10:	699b      	ldr	r3, [r3, #24]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00a      	beq.n	800fa2c <tcp_process+0x400>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa1a:	699b      	ldr	r3, [r3, #24]
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	6910      	ldr	r0, [r2, #16]
 800fa20:	2200      	movs	r2, #0
 800fa22:	6879      	ldr	r1, [r7, #4]
 800fa24:	4798      	blx	r3
 800fa26:	4603      	mov	r3, r0
 800fa28:	76bb      	strb	r3, [r7, #26]
 800fa2a:	e001      	b.n	800fa30 <tcp_process+0x404>
 800fa2c:	23f0      	movs	r3, #240	; 0xf0
 800fa2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fa30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00a      	beq.n	800fa4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fa38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa3c:	f113 0f0d 	cmn.w	r3, #13
 800fa40:	d002      	beq.n	800fa48 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7fd fcca 	bl	800d3dc <tcp_abort>
            }
            return ERR_ABRT;
 800fa48:	f06f 030c 	mvn.w	r3, #12
 800fa4c:	e1ce      	b.n	800fdec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 fae0 	bl	8010014 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fa54:	4b63      	ldr	r3, [pc, #396]	; (800fbe4 <tcp_process+0x5b8>)
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <tcp_process+0x43c>
            recv_acked--;
 800fa5c:	4b61      	ldr	r3, [pc, #388]	; (800fbe4 <tcp_process+0x5b8>)
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	3b01      	subs	r3, #1
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	4b5f      	ldr	r3, [pc, #380]	; (800fbe4 <tcp_process+0x5b8>)
 800fa66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa6c:	009a      	lsls	r2, r3, #2
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa72:	005b      	lsls	r3, r3, #1
 800fa74:	f241 111c 	movw	r1, #4380	; 0x111c
 800fa78:	428b      	cmp	r3, r1
 800fa7a:	bf38      	it	cc
 800fa7c:	460b      	movcc	r3, r1
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d204      	bcs.n	800fa8c <tcp_process+0x460>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	e00d      	b.n	800faa8 <tcp_process+0x47c>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa90:	005b      	lsls	r3, r3, #1
 800fa92:	f241 121c 	movw	r2, #4380	; 0x111c
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d904      	bls.n	800faa4 <tcp_process+0x478>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa9e:	005b      	lsls	r3, r3, #1
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	e001      	b.n	800faa8 <tcp_process+0x47c>
 800faa4:	f241 131c 	movw	r3, #4380	; 0x111c
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800faae:	4b4e      	ldr	r3, [pc, #312]	; (800fbe8 <tcp_process+0x5bc>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	f003 0320 	and.w	r3, r3, #32
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d037      	beq.n	800fb2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	8b5b      	ldrh	r3, [r3, #26]
 800fabe:	f043 0302 	orr.w	r3, r3, #2
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2207      	movs	r2, #7
 800facc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800face:	e02c      	b.n	800fb2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fad0:	4b3b      	ldr	r3, [pc, #236]	; (800fbc0 <tcp_process+0x594>)
 800fad2:	6819      	ldr	r1, [r3, #0]
 800fad4:	4b3b      	ldr	r3, [pc, #236]	; (800fbc4 <tcp_process+0x598>)
 800fad6:	881b      	ldrh	r3, [r3, #0]
 800fad8:	461a      	mov	r2, r3
 800fada:	4b3b      	ldr	r3, [pc, #236]	; (800fbc8 <tcp_process+0x59c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fae0:	4b3a      	ldr	r3, [pc, #232]	; (800fbcc <tcp_process+0x5a0>)
 800fae2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fae4:	885b      	ldrh	r3, [r3, #2]
 800fae6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fae8:	4a38      	ldr	r2, [pc, #224]	; (800fbcc <tcp_process+0x5a0>)
 800faea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faec:	8812      	ldrh	r2, [r2, #0]
 800faee:	b292      	uxth	r2, r2
 800faf0:	9202      	str	r2, [sp, #8]
 800faf2:	9301      	str	r3, [sp, #4]
 800faf4:	4b36      	ldr	r3, [pc, #216]	; (800fbd0 <tcp_process+0x5a4>)
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	4b36      	ldr	r3, [pc, #216]	; (800fbd4 <tcp_process+0x5a8>)
 800fafa:	4602      	mov	r2, r0
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f003 f84b 	bl	8012b98 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fb02:	e167      	b.n	800fdd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fb04:	4b2d      	ldr	r3, [pc, #180]	; (800fbbc <tcp_process+0x590>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	f003 0302 	and.w	r3, r3, #2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f000 8161 	beq.w	800fdd4 <tcp_process+0x7a8>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb16:	1e5a      	subs	r2, r3, #1
 800fb18:	4b2b      	ldr	r3, [pc, #172]	; (800fbc8 <tcp_process+0x59c>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	f040 8159 	bne.w	800fdd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f002 fe20 	bl	8012768 <tcp_rexmit>
      break;
 800fb28:	e154      	b.n	800fdd4 <tcp_process+0x7a8>
 800fb2a:	e153      	b.n	800fdd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fa71 	bl	8010014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fb32:	4b2d      	ldr	r3, [pc, #180]	; (800fbe8 <tcp_process+0x5bc>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 0320 	and.w	r3, r3, #32
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f000 814c 	beq.w	800fdd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	8b5b      	ldrh	r3, [r3, #26]
 800fb44:	f043 0302 	orr.w	r3, r3, #2
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2207      	movs	r2, #7
 800fb52:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb54:	e140      	b.n	800fdd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fa5c 	bl	8010014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fb5c:	4b22      	ldr	r3, [pc, #136]	; (800fbe8 <tcp_process+0x5bc>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	f003 0320 	and.w	r3, r3, #32
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d071      	beq.n	800fc4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb68:	4b14      	ldr	r3, [pc, #80]	; (800fbbc <tcp_process+0x590>)
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f003 0310 	and.w	r3, r3, #16
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d060      	beq.n	800fc36 <tcp_process+0x60a>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb78:	4b11      	ldr	r3, [pc, #68]	; (800fbc0 <tcp_process+0x594>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d15a      	bne.n	800fc36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d156      	bne.n	800fc36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	8b5b      	ldrh	r3, [r3, #26]
 800fb8c:	f043 0302 	orr.w	r3, r3, #2
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7fe fdbc 	bl	800e714 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fb9c:	4b13      	ldr	r3, [pc, #76]	; (800fbec <tcp_process+0x5c0>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d105      	bne.n	800fbb2 <tcp_process+0x586>
 800fba6:	4b11      	ldr	r3, [pc, #68]	; (800fbec <tcp_process+0x5c0>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	4a0f      	ldr	r2, [pc, #60]	; (800fbec <tcp_process+0x5c0>)
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	e02e      	b.n	800fc10 <tcp_process+0x5e4>
 800fbb2:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <tcp_process+0x5c0>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	617b      	str	r3, [r7, #20]
 800fbb8:	e027      	b.n	800fc0a <tcp_process+0x5de>
 800fbba:	bf00      	nop
 800fbbc:	20011988 	.word	0x20011988
 800fbc0:	20011980 	.word	0x20011980
 800fbc4:	20011986 	.word	0x20011986
 800fbc8:	2001197c 	.word	0x2001197c
 800fbcc:	2001196c 	.word	0x2001196c
 800fbd0:	200098c8 	.word	0x200098c8
 800fbd4:	200098cc 	.word	0x200098cc
 800fbd8:	08018e64 	.word	0x08018e64
 800fbdc:	08019104 	.word	0x08019104
 800fbe0:	08018eb0 	.word	0x08018eb0
 800fbe4:	20011984 	.word	0x20011984
 800fbe8:	20011989 	.word	0x20011989
 800fbec:	20011950 	.word	0x20011950
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d104      	bne.n	800fc04 <tcp_process+0x5d8>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	68da      	ldr	r2, [r3, #12]
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	60da      	str	r2, [r3, #12]
 800fc02:	e005      	b.n	800fc10 <tcp_process+0x5e4>
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	617b      	str	r3, [r7, #20]
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d1ef      	bne.n	800fbf0 <tcp_process+0x5c4>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	60da      	str	r2, [r3, #12]
 800fc16:	4b77      	ldr	r3, [pc, #476]	; (800fdf4 <tcp_process+0x7c8>)
 800fc18:	2201      	movs	r2, #1
 800fc1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	220a      	movs	r2, #10
 800fc20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fc22:	4b75      	ldr	r3, [pc, #468]	; (800fdf8 <tcp_process+0x7cc>)
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	60da      	str	r2, [r3, #12]
 800fc2a:	4a73      	ldr	r2, [pc, #460]	; (800fdf8 <tcp_process+0x7cc>)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6013      	str	r3, [r2, #0]
 800fc30:	f003 f974 	bl	8012f1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fc34:	e0d2      	b.n	800fddc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	8b5b      	ldrh	r3, [r3, #26]
 800fc3a:	f043 0302 	orr.w	r3, r3, #2
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2208      	movs	r2, #8
 800fc48:	751a      	strb	r2, [r3, #20]
      break;
 800fc4a:	e0c7      	b.n	800fddc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc4c:	4b6b      	ldr	r3, [pc, #428]	; (800fdfc <tcp_process+0x7d0>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	f003 0310 	and.w	r3, r3, #16
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f000 80c1 	beq.w	800fddc <tcp_process+0x7b0>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc5e:	4b68      	ldr	r3, [pc, #416]	; (800fe00 <tcp_process+0x7d4>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	f040 80ba 	bne.w	800fddc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f040 80b5 	bne.w	800fddc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2206      	movs	r2, #6
 800fc76:	751a      	strb	r2, [r3, #20]
      break;
 800fc78:	e0b0      	b.n	800fddc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f9ca 	bl	8010014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fc80:	4b60      	ldr	r3, [pc, #384]	; (800fe04 <tcp_process+0x7d8>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	f003 0320 	and.w	r3, r3, #32
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 80a9 	beq.w	800fde0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	8b5b      	ldrh	r3, [r3, #26]
 800fc92:	f043 0302 	orr.w	r3, r3, #2
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7fe fd39 	bl	800e714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fca2:	4b59      	ldr	r3, [pc, #356]	; (800fe08 <tcp_process+0x7dc>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d105      	bne.n	800fcb8 <tcp_process+0x68c>
 800fcac:	4b56      	ldr	r3, [pc, #344]	; (800fe08 <tcp_process+0x7dc>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	4a55      	ldr	r2, [pc, #340]	; (800fe08 <tcp_process+0x7dc>)
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	e013      	b.n	800fce0 <tcp_process+0x6b4>
 800fcb8:	4b53      	ldr	r3, [pc, #332]	; (800fe08 <tcp_process+0x7dc>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	613b      	str	r3, [r7, #16]
 800fcbe:	e00c      	b.n	800fcda <tcp_process+0x6ae>
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d104      	bne.n	800fcd4 <tcp_process+0x6a8>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	68da      	ldr	r2, [r3, #12]
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	60da      	str	r2, [r3, #12]
 800fcd2:	e005      	b.n	800fce0 <tcp_process+0x6b4>
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	613b      	str	r3, [r7, #16]
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1ef      	bne.n	800fcc0 <tcp_process+0x694>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	60da      	str	r2, [r3, #12]
 800fce6:	4b43      	ldr	r3, [pc, #268]	; (800fdf4 <tcp_process+0x7c8>)
 800fce8:	2201      	movs	r2, #1
 800fcea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	220a      	movs	r2, #10
 800fcf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fcf2:	4b41      	ldr	r3, [pc, #260]	; (800fdf8 <tcp_process+0x7cc>)
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	60da      	str	r2, [r3, #12]
 800fcfa:	4a3f      	ldr	r2, [pc, #252]	; (800fdf8 <tcp_process+0x7cc>)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	f003 f90c 	bl	8012f1c <tcp_timer_needed>
      }
      break;
 800fd04:	e06c      	b.n	800fde0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f984 	bl	8010014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fd0c:	4b3b      	ldr	r3, [pc, #236]	; (800fdfc <tcp_process+0x7d0>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 0310 	and.w	r3, r3, #16
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d065      	beq.n	800fde4 <tcp_process+0x7b8>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd1c:	4b38      	ldr	r3, [pc, #224]	; (800fe00 <tcp_process+0x7d4>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d15f      	bne.n	800fde4 <tcp_process+0x7b8>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d15b      	bne.n	800fde4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7fe fcf1 	bl	800e714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fd32:	4b35      	ldr	r3, [pc, #212]	; (800fe08 <tcp_process+0x7dc>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d105      	bne.n	800fd48 <tcp_process+0x71c>
 800fd3c:	4b32      	ldr	r3, [pc, #200]	; (800fe08 <tcp_process+0x7dc>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	4a31      	ldr	r2, [pc, #196]	; (800fe08 <tcp_process+0x7dc>)
 800fd44:	6013      	str	r3, [r2, #0]
 800fd46:	e013      	b.n	800fd70 <tcp_process+0x744>
 800fd48:	4b2f      	ldr	r3, [pc, #188]	; (800fe08 <tcp_process+0x7dc>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	60fb      	str	r3, [r7, #12]
 800fd4e:	e00c      	b.n	800fd6a <tcp_process+0x73e>
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d104      	bne.n	800fd64 <tcp_process+0x738>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68da      	ldr	r2, [r3, #12]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	60da      	str	r2, [r3, #12]
 800fd62:	e005      	b.n	800fd70 <tcp_process+0x744>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	60fb      	str	r3, [r7, #12]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1ef      	bne.n	800fd50 <tcp_process+0x724>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	60da      	str	r2, [r3, #12]
 800fd76:	4b1f      	ldr	r3, [pc, #124]	; (800fdf4 <tcp_process+0x7c8>)
 800fd78:	2201      	movs	r2, #1
 800fd7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	220a      	movs	r2, #10
 800fd80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fd82:	4b1d      	ldr	r3, [pc, #116]	; (800fdf8 <tcp_process+0x7cc>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	60da      	str	r2, [r3, #12]
 800fd8a:	4a1b      	ldr	r2, [pc, #108]	; (800fdf8 <tcp_process+0x7cc>)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	f003 f8c4 	bl	8012f1c <tcp_timer_needed>
      }
      break;
 800fd94:	e026      	b.n	800fde4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 f93c 	bl	8010014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fd9c:	4b17      	ldr	r3, [pc, #92]	; (800fdfc <tcp_process+0x7d0>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 0310 	and.w	r3, r3, #16
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d01f      	beq.n	800fde8 <tcp_process+0x7bc>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdac:	4b14      	ldr	r3, [pc, #80]	; (800fe00 <tcp_process+0x7d4>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d119      	bne.n	800fde8 <tcp_process+0x7bc>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d115      	bne.n	800fde8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fdbc:	4b11      	ldr	r3, [pc, #68]	; (800fe04 <tcp_process+0x7d8>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f043 0310 	orr.w	r3, r3, #16
 800fdc4:	b2da      	uxtb	r2, r3
 800fdc6:	4b0f      	ldr	r3, [pc, #60]	; (800fe04 <tcp_process+0x7d8>)
 800fdc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fdca:	e00d      	b.n	800fde8 <tcp_process+0x7bc>
    default:
      break;
 800fdcc:	bf00      	nop
 800fdce:	e00c      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fdd0:	bf00      	nop
 800fdd2:	e00a      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fdd4:	bf00      	nop
 800fdd6:	e008      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fdd8:	bf00      	nop
 800fdda:	e006      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fddc:	bf00      	nop
 800fdde:	e004      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fde0:	bf00      	nop
 800fde2:	e002      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fde4:	bf00      	nop
 800fde6:	e000      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fde8:	bf00      	nop
  }
  return ERR_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3724      	adds	r7, #36	; 0x24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd90      	pop	{r4, r7, pc}
 800fdf4:	20011958 	.word	0x20011958
 800fdf8:	20011954 	.word	0x20011954
 800fdfc:	20011988 	.word	0x20011988
 800fe00:	20011980 	.word	0x20011980
 800fe04:	20011989 	.word	0x20011989
 800fe08:	20011950 	.word	0x20011950

0800fe0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fe0c:	b590      	push	{r4, r7, lr}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d106      	bne.n	800fe2a <tcp_oos_insert_segment+0x1e>
 800fe1c:	4b3b      	ldr	r3, [pc, #236]	; (800ff0c <tcp_oos_insert_segment+0x100>)
 800fe1e:	f240 421f 	movw	r2, #1055	; 0x41f
 800fe22:	493b      	ldr	r1, [pc, #236]	; (800ff10 <tcp_oos_insert_segment+0x104>)
 800fe24:	483b      	ldr	r0, [pc, #236]	; (800ff14 <tcp_oos_insert_segment+0x108>)
 800fe26:	f006 f857 	bl	8015ed8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	899b      	ldrh	r3, [r3, #12]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fa ffdc 	bl	800adf0 <lwip_htons>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	f003 0301 	and.w	r3, r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d028      	beq.n	800fe96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fe44:	6838      	ldr	r0, [r7, #0]
 800fe46:	f7fe f995 	bl	800e174 <tcp_segs_free>
    next = NULL;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	603b      	str	r3, [r7, #0]
 800fe4e:	e056      	b.n	800fefe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	899b      	ldrh	r3, [r3, #12]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fa ffc9 	bl	800adf0 <lwip_htons>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	f003 0301 	and.w	r3, r3, #1
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00d      	beq.n	800fe86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	899b      	ldrh	r3, [r3, #12]
 800fe70:	b29c      	uxth	r4, r3
 800fe72:	2001      	movs	r0, #1
 800fe74:	f7fa ffbc 	bl	800adf0 <lwip_htons>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	4322      	orrs	r2, r4
 800fe82:	b292      	uxth	r2, r2
 800fe84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fe90:	68f8      	ldr	r0, [r7, #12]
 800fe92:	f7fe f984 	bl	800e19e <tcp_seg_free>
    while (next &&
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00e      	beq.n	800feba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	891b      	ldrh	r3, [r3, #8]
 800fea0:	461a      	mov	r2, r3
 800fea2:	4b1d      	ldr	r3, [pc, #116]	; (800ff18 <tcp_oos_insert_segment+0x10c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	441a      	add	r2, r3
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	6839      	ldr	r1, [r7, #0]
 800feb0:	8909      	ldrh	r1, [r1, #8]
 800feb2:	440b      	add	r3, r1
 800feb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	daca      	bge.n	800fe50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d01e      	beq.n	800fefe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	891b      	ldrh	r3, [r3, #8]
 800fec4:	461a      	mov	r2, r3
 800fec6:	4b14      	ldr	r3, [pc, #80]	; (800ff18 <tcp_oos_insert_segment+0x10c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	441a      	add	r2, r3
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	dd12      	ble.n	800fefe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	b29a      	uxth	r2, r3
 800fee0:	4b0d      	ldr	r3, [pc, #52]	; (800ff18 <tcp_oos_insert_segment+0x10c>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	b29a      	uxth	r2, r3
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	685a      	ldr	r2, [r3, #4]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	891b      	ldrh	r3, [r3, #8]
 800fef6:	4619      	mov	r1, r3
 800fef8:	4610      	mov	r0, r2
 800fefa:	f7fc faf9 	bl	800c4f0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	601a      	str	r2, [r3, #0]
}
 800ff04:	bf00      	nop
 800ff06:	3714      	adds	r7, #20
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd90      	pop	{r4, r7, pc}
 800ff0c:	08018e64 	.word	0x08018e64
 800ff10:	08019124 	.word	0x08019124
 800ff14:	08018eb0 	.word	0x08018eb0
 800ff18:	2001197c 	.word	0x2001197c

0800ff1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ff1c:	b5b0      	push	{r4, r5, r7, lr}
 800ff1e:	b086      	sub	sp, #24
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ff2a:	e03e      	b.n	800ffaa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fc fcec 	bl	800c918 <pbuf_clen>
 800ff40:	4603      	mov	r3, r0
 800ff42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff4a:	8a7a      	ldrh	r2, [r7, #18]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d906      	bls.n	800ff5e <tcp_free_acked_segments+0x42>
 800ff50:	4b2a      	ldr	r3, [pc, #168]	; (800fffc <tcp_free_acked_segments+0xe0>)
 800ff52:	f240 4257 	movw	r2, #1111	; 0x457
 800ff56:	492a      	ldr	r1, [pc, #168]	; (8010000 <tcp_free_acked_segments+0xe4>)
 800ff58:	482a      	ldr	r0, [pc, #168]	; (8010004 <tcp_free_acked_segments+0xe8>)
 800ff5a:	f005 ffbd 	bl	8015ed8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ff64:	8a7b      	ldrh	r3, [r7, #18]
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	891a      	ldrh	r2, [r3, #8]
 800ff74:	4b24      	ldr	r3, [pc, #144]	; (8010008 <tcp_free_acked_segments+0xec>)
 800ff76:	881b      	ldrh	r3, [r3, #0]
 800ff78:	4413      	add	r3, r2
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	4b22      	ldr	r3, [pc, #136]	; (8010008 <tcp_free_acked_segments+0xec>)
 800ff7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ff80:	6978      	ldr	r0, [r7, #20]
 800ff82:	f7fe f90c 	bl	800e19e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d00c      	beq.n	800ffaa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d109      	bne.n	800ffaa <tcp_free_acked_segments+0x8e>
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d106      	bne.n	800ffaa <tcp_free_acked_segments+0x8e>
 800ff9c:	4b17      	ldr	r3, [pc, #92]	; (800fffc <tcp_free_acked_segments+0xe0>)
 800ff9e:	f240 4261 	movw	r2, #1121	; 0x461
 800ffa2:	491a      	ldr	r1, [pc, #104]	; (801000c <tcp_free_acked_segments+0xf0>)
 800ffa4:	4817      	ldr	r0, [pc, #92]	; (8010004 <tcp_free_acked_segments+0xe8>)
 800ffa6:	f005 ff97 	bl	8015ed8 <iprintf>
  while (seg_list != NULL &&
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d020      	beq.n	800fff2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fa ff2f 	bl	800ae1a <lwip_htonl>
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	891b      	ldrh	r3, [r3, #8]
 800ffc2:	461d      	mov	r5, r3
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	899b      	ldrh	r3, [r3, #12]
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fa ff0f 	bl	800adf0 <lwip_htons>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	f003 0303 	and.w	r3, r3, #3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <tcp_free_acked_segments+0xc6>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e000      	b.n	800ffe4 <tcp_free_acked_segments+0xc8>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	442b      	add	r3, r5
 800ffe6:	18e2      	adds	r2, r4, r3
 800ffe8:	4b09      	ldr	r3, [pc, #36]	; (8010010 <tcp_free_acked_segments+0xf4>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	dd9c      	ble.n	800ff2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fff2:	68bb      	ldr	r3, [r7, #8]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bdb0      	pop	{r4, r5, r7, pc}
 800fffc:	08018e64 	.word	0x08018e64
 8010000:	0801914c 	.word	0x0801914c
 8010004:	08018eb0 	.word	0x08018eb0
 8010008:	20011984 	.word	0x20011984
 801000c:	08019174 	.word	0x08019174
 8010010:	20011980 	.word	0x20011980

08010014 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010014:	b5b0      	push	{r4, r5, r7, lr}
 8010016:	b094      	sub	sp, #80	; 0x50
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801001c:	2300      	movs	r3, #0
 801001e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d106      	bne.n	8010034 <tcp_receive+0x20>
 8010026:	4b91      	ldr	r3, [pc, #580]	; (801026c <tcp_receive+0x258>)
 8010028:	f240 427b 	movw	r2, #1147	; 0x47b
 801002c:	4990      	ldr	r1, [pc, #576]	; (8010270 <tcp_receive+0x25c>)
 801002e:	4891      	ldr	r0, [pc, #580]	; (8010274 <tcp_receive+0x260>)
 8010030:	f005 ff52 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	7d1b      	ldrb	r3, [r3, #20]
 8010038:	2b03      	cmp	r3, #3
 801003a:	d806      	bhi.n	801004a <tcp_receive+0x36>
 801003c:	4b8b      	ldr	r3, [pc, #556]	; (801026c <tcp_receive+0x258>)
 801003e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010042:	498d      	ldr	r1, [pc, #564]	; (8010278 <tcp_receive+0x264>)
 8010044:	488b      	ldr	r0, [pc, #556]	; (8010274 <tcp_receive+0x260>)
 8010046:	f005 ff47 	bl	8015ed8 <iprintf>

  if (flags & TCP_ACK) {
 801004a:	4b8c      	ldr	r3, [pc, #560]	; (801027c <tcp_receive+0x268>)
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f003 0310 	and.w	r3, r3, #16
 8010052:	2b00      	cmp	r3, #0
 8010054:	f000 8264 	beq.w	8010520 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801005e:	461a      	mov	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010064:	4413      	add	r3, r2
 8010066:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801006c:	4b84      	ldr	r3, [pc, #528]	; (8010280 <tcp_receive+0x26c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	db1b      	blt.n	80100ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801007a:	4b81      	ldr	r3, [pc, #516]	; (8010280 <tcp_receive+0x26c>)
 801007c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801007e:	429a      	cmp	r2, r3
 8010080:	d106      	bne.n	8010090 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010086:	4b7f      	ldr	r3, [pc, #508]	; (8010284 <tcp_receive+0x270>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	1ad3      	subs	r3, r2, r3
 801008c:	2b00      	cmp	r3, #0
 801008e:	db0e      	blt.n	80100ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010094:	4b7b      	ldr	r3, [pc, #492]	; (8010284 <tcp_receive+0x270>)
 8010096:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010098:	429a      	cmp	r2, r3
 801009a:	d125      	bne.n	80100e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801009c:	4b7a      	ldr	r3, [pc, #488]	; (8010288 <tcp_receive+0x274>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	89db      	ldrh	r3, [r3, #14]
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d91c      	bls.n	80100e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80100ae:	4b76      	ldr	r3, [pc, #472]	; (8010288 <tcp_receive+0x274>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	89db      	ldrh	r3, [r3, #14]
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d205      	bcs.n	80100d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80100d8:	4b69      	ldr	r3, [pc, #420]	; (8010280 <tcp_receive+0x26c>)
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80100e0:	4b68      	ldr	r3, [pc, #416]	; (8010284 <tcp_receive+0x270>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80100e8:	4b66      	ldr	r3, [pc, #408]	; (8010284 <tcp_receive+0x270>)
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	dc58      	bgt.n	80101a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80100f6:	4b65      	ldr	r3, [pc, #404]	; (801028c <tcp_receive+0x278>)
 80100f8:	881b      	ldrh	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d14b      	bne.n	8010196 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010108:	4413      	add	r3, r2
 801010a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801010c:	429a      	cmp	r2, r3
 801010e:	d142      	bne.n	8010196 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010116:	2b00      	cmp	r3, #0
 8010118:	db3d      	blt.n	8010196 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801011e:	4b59      	ldr	r3, [pc, #356]	; (8010284 <tcp_receive+0x270>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	d137      	bne.n	8010196 <tcp_receive+0x182>
              found_dupack = 1;
 8010126:	2301      	movs	r3, #1
 8010128:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010130:	2bff      	cmp	r3, #255	; 0xff
 8010132:	d007      	beq.n	8010144 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801013a:	3301      	adds	r3, #1
 801013c:	b2da      	uxtb	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801014a:	2b03      	cmp	r3, #3
 801014c:	d91b      	bls.n	8010186 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010158:	4413      	add	r3, r2
 801015a:	b29a      	uxth	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010162:	429a      	cmp	r2, r3
 8010164:	d30a      	bcc.n	801017c <tcp_receive+0x168>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010170:	4413      	add	r3, r2
 8010172:	b29a      	uxth	r2, r3
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801017a:	e004      	b.n	8010186 <tcp_receive+0x172>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801018c:	2b02      	cmp	r3, #2
 801018e:	d902      	bls.n	8010196 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f002 fb55 	bl	8012840 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010198:	2b00      	cmp	r3, #0
 801019a:	f040 8161 	bne.w	8010460 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80101a6:	e15b      	b.n	8010460 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80101a8:	4b36      	ldr	r3, [pc, #216]	; (8010284 <tcp_receive+0x270>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	3b01      	subs	r3, #1
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f2c0 814e 	blt.w	8010456 <tcp_receive+0x442>
 80101ba:	4b32      	ldr	r3, [pc, #200]	; (8010284 <tcp_receive+0x270>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f300 8146 	bgt.w	8010456 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8b5b      	ldrh	r3, [r3, #26]
 80101ce:	f003 0304 	and.w	r3, r3, #4
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d010      	beq.n	80101f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8b5b      	ldrh	r3, [r3, #26]
 80101da:	f023 0304 	bic.w	r3, r3, #4
 80101de:	b29a      	uxth	r2, r3
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010206:	10db      	asrs	r3, r3, #3
 8010208:	b21b      	sxth	r3, r3
 801020a:	b29a      	uxth	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010212:	b29b      	uxth	r3, r3
 8010214:	4413      	add	r3, r2
 8010216:	b29b      	uxth	r3, r3
 8010218:	b21a      	sxth	r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010220:	4b18      	ldr	r3, [pc, #96]	; (8010284 <tcp_receive+0x270>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	b29a      	uxth	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801022a:	b29b      	uxth	r3, r3
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010238:	4b12      	ldr	r3, [pc, #72]	; (8010284 <tcp_receive+0x270>)
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	7d1b      	ldrb	r3, [r3, #20]
 8010244:	2b03      	cmp	r3, #3
 8010246:	f240 8097 	bls.w	8010378 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010256:	429a      	cmp	r2, r3
 8010258:	d245      	bcs.n	80102e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	8b5b      	ldrh	r3, [r3, #26]
 801025e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010262:	2b00      	cmp	r3, #0
 8010264:	d014      	beq.n	8010290 <tcp_receive+0x27c>
 8010266:	2301      	movs	r3, #1
 8010268:	e013      	b.n	8010292 <tcp_receive+0x27e>
 801026a:	bf00      	nop
 801026c:	08018e64 	.word	0x08018e64
 8010270:	08019194 	.word	0x08019194
 8010274:	08018eb0 	.word	0x08018eb0
 8010278:	080191b0 	.word	0x080191b0
 801027c:	20011988 	.word	0x20011988
 8010280:	2001197c 	.word	0x2001197c
 8010284:	20011980 	.word	0x20011980
 8010288:	2001196c 	.word	0x2001196c
 801028c:	20011986 	.word	0x20011986
 8010290:	2302      	movs	r3, #2
 8010292:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801029a:	b29a      	uxth	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102a0:	fb12 f303 	smulbb	r3, r2, r3
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80102a8:	4293      	cmp	r3, r2
 80102aa:	bf28      	it	cs
 80102ac:	4613      	movcs	r3, r2
 80102ae:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80102b8:	4413      	add	r3, r2
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d309      	bcc.n	80102da <tcp_receive+0x2c6>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80102ce:	4413      	add	r3, r2
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80102d8:	e04e      	b.n	8010378 <tcp_receive+0x364>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80102e4:	e048      	b.n	8010378 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80102ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80102ee:	4413      	add	r3, r2
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d309      	bcc.n	8010310 <tcp_receive+0x2fc>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010304:	4413      	add	r3, r2
 8010306:	b29a      	uxth	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801030e:	e004      	b.n	801031a <tcp_receive+0x306>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010326:	429a      	cmp	r2, r3
 8010328:	d326      	bcc.n	8010378 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	b29a      	uxth	r2, r3
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801034a:	4413      	add	r3, r2
 801034c:	b29a      	uxth	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010354:	429a      	cmp	r2, r3
 8010356:	d30a      	bcc.n	801036e <tcp_receive+0x35a>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010362:	4413      	add	r3, r2
 8010364:	b29a      	uxth	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801036c:	e004      	b.n	8010378 <tcp_receive+0x364>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010374:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010380:	4a98      	ldr	r2, [pc, #608]	; (80105e4 <tcp_receive+0x5d0>)
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7ff fdca 	bl	800ff1c <tcp_free_acked_segments>
 8010388:	4602      	mov	r2, r0
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010396:	4a94      	ldr	r2, [pc, #592]	; (80105e8 <tcp_receive+0x5d4>)
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff fdbf 	bl	800ff1c <tcp_free_acked_segments>
 801039e:	4602      	mov	r2, r0
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d104      	bne.n	80103b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103b2:	861a      	strh	r2, [r3, #48]	; 0x30
 80103b4:	e002      	b.n	80103bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d103      	bne.n	80103d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80103d8:	4b84      	ldr	r3, [pc, #528]	; (80105ec <tcp_receive+0x5d8>)
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	4413      	add	r3, r2
 80103de:	b29a      	uxth	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	8b5b      	ldrh	r3, [r3, #26]
 80103ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d035      	beq.n	801045e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d118      	bne.n	801042c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00c      	beq.n	801041c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	4618      	mov	r0, r3
 8010410:	f7fa fd03 	bl	800ae1a <lwip_htonl>
 8010414:	4603      	mov	r3, r0
 8010416:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010418:	2b00      	cmp	r3, #0
 801041a:	dc20      	bgt.n	801045e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	8b5b      	ldrh	r3, [r3, #26]
 8010420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010424:	b29a      	uxth	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801042a:	e018      	b.n	801045e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	4618      	mov	r0, r3
 801043a:	f7fa fcee 	bl	800ae1a <lwip_htonl>
 801043e:	4603      	mov	r3, r0
 8010440:	1ae3      	subs	r3, r4, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	dc0b      	bgt.n	801045e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	8b5b      	ldrh	r3, [r3, #26]
 801044a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801044e:	b29a      	uxth	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010454:	e003      	b.n	801045e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f002 fbf0 	bl	8012c3c <tcp_send_empty_ack>
 801045c:	e000      	b.n	8010460 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801045e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010464:	2b00      	cmp	r3, #0
 8010466:	d05b      	beq.n	8010520 <tcp_receive+0x50c>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801046c:	4b60      	ldr	r3, [pc, #384]	; (80105f0 <tcp_receive+0x5dc>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	da54      	bge.n	8010520 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010476:	4b5f      	ldr	r3, [pc, #380]	; (80105f4 <tcp_receive+0x5e0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	b29a      	uxth	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010480:	b29b      	uxth	r3, r3
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	b29b      	uxth	r3, r3
 8010486:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801048a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010494:	10db      	asrs	r3, r3, #3
 8010496:	b21b      	sxth	r3, r3
 8010498:	b29b      	uxth	r3, r3
 801049a:	1ad3      	subs	r3, r2, r3
 801049c:	b29b      	uxth	r3, r3
 801049e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80104ae:	4413      	add	r3, r2
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	b21a      	sxth	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80104b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80104bc:	2b00      	cmp	r3, #0
 80104be:	da05      	bge.n	80104cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80104c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80104c4:	425b      	negs	r3, r3
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80104cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80104d6:	109b      	asrs	r3, r3, #2
 80104d8:	b21b      	sxth	r3, r3
 80104da:	b29b      	uxth	r3, r3
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	b29b      	uxth	r3, r3
 80104e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80104f0:	4413      	add	r3, r2
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	b21a      	sxth	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010500:	10db      	asrs	r3, r3, #3
 8010502:	b21b      	sxth	r3, r3
 8010504:	b29a      	uxth	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801050c:	b29b      	uxth	r3, r3
 801050e:	4413      	add	r3, r2
 8010510:	b29b      	uxth	r3, r3
 8010512:	b21a      	sxth	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010520:	4b35      	ldr	r3, [pc, #212]	; (80105f8 <tcp_receive+0x5e4>)
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	f000 84e2 	beq.w	8010eee <tcp_receive+0xeda>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	7d1b      	ldrb	r3, [r3, #20]
 801052e:	2b06      	cmp	r3, #6
 8010530:	f200 84dd 	bhi.w	8010eee <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010538:	4b30      	ldr	r3, [pc, #192]	; (80105fc <tcp_receive+0x5e8>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	1ad3      	subs	r3, r2, r3
 801053e:	3b01      	subs	r3, #1
 8010540:	2b00      	cmp	r3, #0
 8010542:	f2c0 808f 	blt.w	8010664 <tcp_receive+0x650>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801054a:	4b2b      	ldr	r3, [pc, #172]	; (80105f8 <tcp_receive+0x5e4>)
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	4619      	mov	r1, r3
 8010550:	4b2a      	ldr	r3, [pc, #168]	; (80105fc <tcp_receive+0x5e8>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	440b      	add	r3, r1
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	3301      	adds	r3, #1
 801055a:	2b00      	cmp	r3, #0
 801055c:	f300 8082 	bgt.w	8010664 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010560:	4b27      	ldr	r3, [pc, #156]	; (8010600 <tcp_receive+0x5ec>)
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801056a:	4b24      	ldr	r3, [pc, #144]	; (80105fc <tcp_receive+0x5e8>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010572:	4b23      	ldr	r3, [pc, #140]	; (8010600 <tcp_receive+0x5ec>)
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d106      	bne.n	8010588 <tcp_receive+0x574>
 801057a:	4b22      	ldr	r3, [pc, #136]	; (8010604 <tcp_receive+0x5f0>)
 801057c:	f240 5294 	movw	r2, #1428	; 0x594
 8010580:	4921      	ldr	r1, [pc, #132]	; (8010608 <tcp_receive+0x5f4>)
 8010582:	4822      	ldr	r0, [pc, #136]	; (801060c <tcp_receive+0x5f8>)
 8010584:	f005 fca8 	bl	8015ed8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801058e:	4293      	cmp	r3, r2
 8010590:	d906      	bls.n	80105a0 <tcp_receive+0x58c>
 8010592:	4b1c      	ldr	r3, [pc, #112]	; (8010604 <tcp_receive+0x5f0>)
 8010594:	f240 5295 	movw	r2, #1429	; 0x595
 8010598:	491d      	ldr	r1, [pc, #116]	; (8010610 <tcp_receive+0x5fc>)
 801059a:	481c      	ldr	r0, [pc, #112]	; (801060c <tcp_receive+0x5f8>)
 801059c:	f005 fc9c 	bl	8015ed8 <iprintf>
      off = (u16_t)off32;
 80105a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80105a6:	4b16      	ldr	r3, [pc, #88]	; (8010600 <tcp_receive+0x5ec>)
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	891b      	ldrh	r3, [r3, #8]
 80105ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d906      	bls.n	80105c2 <tcp_receive+0x5ae>
 80105b4:	4b13      	ldr	r3, [pc, #76]	; (8010604 <tcp_receive+0x5f0>)
 80105b6:	f240 5297 	movw	r2, #1431	; 0x597
 80105ba:	4916      	ldr	r1, [pc, #88]	; (8010614 <tcp_receive+0x600>)
 80105bc:	4813      	ldr	r0, [pc, #76]	; (801060c <tcp_receive+0x5f8>)
 80105be:	f005 fc8b 	bl	8015ed8 <iprintf>
      inseg.len -= off;
 80105c2:	4b0f      	ldr	r3, [pc, #60]	; (8010600 <tcp_receive+0x5ec>)
 80105c4:	891a      	ldrh	r2, [r3, #8]
 80105c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	4b0c      	ldr	r3, [pc, #48]	; (8010600 <tcp_receive+0x5ec>)
 80105d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80105d2:	4b0b      	ldr	r3, [pc, #44]	; (8010600 <tcp_receive+0x5ec>)
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	891a      	ldrh	r2, [r3, #8]
 80105d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105dc:	1ad3      	subs	r3, r2, r3
 80105de:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80105e0:	e02a      	b.n	8010638 <tcp_receive+0x624>
 80105e2:	bf00      	nop
 80105e4:	080191cc 	.word	0x080191cc
 80105e8:	080191d4 	.word	0x080191d4
 80105ec:	20011984 	.word	0x20011984
 80105f0:	20011980 	.word	0x20011980
 80105f4:	20011944 	.word	0x20011944
 80105f8:	20011986 	.word	0x20011986
 80105fc:	2001197c 	.word	0x2001197c
 8010600:	2001195c 	.word	0x2001195c
 8010604:	08018e64 	.word	0x08018e64
 8010608:	080191dc 	.word	0x080191dc
 801060c:	08018eb0 	.word	0x08018eb0
 8010610:	080191ec 	.word	0x080191ec
 8010614:	080191fc 	.word	0x080191fc
        off -= p->len;
 8010618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801061a:	895b      	ldrh	r3, [r3, #10]
 801061c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010628:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801062a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801062c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801062e:	2200      	movs	r2, #0
 8010630:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801063a:	895b      	ldrh	r3, [r3, #10]
 801063c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010640:	429a      	cmp	r2, r3
 8010642:	d8e9      	bhi.n	8010618 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010648:	4619      	mov	r1, r3
 801064a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801064c:	f7fc f850 	bl	800c6f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010654:	4a91      	ldr	r2, [pc, #580]	; (801089c <tcp_receive+0x888>)
 8010656:	6013      	str	r3, [r2, #0]
 8010658:	4b91      	ldr	r3, [pc, #580]	; (80108a0 <tcp_receive+0x88c>)
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	4a8f      	ldr	r2, [pc, #572]	; (801089c <tcp_receive+0x888>)
 801065e:	6812      	ldr	r2, [r2, #0]
 8010660:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010662:	e00d      	b.n	8010680 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010664:	4b8d      	ldr	r3, [pc, #564]	; (801089c <tcp_receive+0x888>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	da06      	bge.n	8010680 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	8b5b      	ldrh	r3, [r3, #26]
 8010676:	f043 0302 	orr.w	r3, r3, #2
 801067a:	b29a      	uxth	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010680:	4b86      	ldr	r3, [pc, #536]	; (801089c <tcp_receive+0x888>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010688:	1ad3      	subs	r3, r2, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	f2c0 842a 	blt.w	8010ee4 <tcp_receive+0xed0>
 8010690:	4b82      	ldr	r3, [pc, #520]	; (801089c <tcp_receive+0x888>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010698:	6879      	ldr	r1, [r7, #4]
 801069a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801069c:	440b      	add	r3, r1
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	3301      	adds	r3, #1
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f300 841e 	bgt.w	8010ee4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106ac:	4b7b      	ldr	r3, [pc, #492]	; (801089c <tcp_receive+0x888>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	f040 829a 	bne.w	8010bea <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80106b6:	4b7a      	ldr	r3, [pc, #488]	; (80108a0 <tcp_receive+0x88c>)
 80106b8:	891c      	ldrh	r4, [r3, #8]
 80106ba:	4b79      	ldr	r3, [pc, #484]	; (80108a0 <tcp_receive+0x88c>)
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	899b      	ldrh	r3, [r3, #12]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fa fb94 	bl	800adf0 <lwip_htons>
 80106c8:	4603      	mov	r3, r0
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	f003 0303 	and.w	r3, r3, #3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <tcp_receive+0x6c4>
 80106d4:	2301      	movs	r3, #1
 80106d6:	e000      	b.n	80106da <tcp_receive+0x6c6>
 80106d8:	2300      	movs	r3, #0
 80106da:	4423      	add	r3, r4
 80106dc:	b29a      	uxth	r2, r3
 80106de:	4b71      	ldr	r3, [pc, #452]	; (80108a4 <tcp_receive+0x890>)
 80106e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80106e6:	4b6f      	ldr	r3, [pc, #444]	; (80108a4 <tcp_receive+0x890>)
 80106e8:	881b      	ldrh	r3, [r3, #0]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d275      	bcs.n	80107da <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80106ee:	4b6c      	ldr	r3, [pc, #432]	; (80108a0 <tcp_receive+0x88c>)
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	899b      	ldrh	r3, [r3, #12]
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fa fb7a 	bl	800adf0 <lwip_htons>
 80106fc:	4603      	mov	r3, r0
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	f003 0301 	and.w	r3, r3, #1
 8010704:	2b00      	cmp	r3, #0
 8010706:	d01f      	beq.n	8010748 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010708:	4b65      	ldr	r3, [pc, #404]	; (80108a0 <tcp_receive+0x88c>)
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	899b      	ldrh	r3, [r3, #12]
 801070e:	b29b      	uxth	r3, r3
 8010710:	b21b      	sxth	r3, r3
 8010712:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010716:	b21c      	sxth	r4, r3
 8010718:	4b61      	ldr	r3, [pc, #388]	; (80108a0 <tcp_receive+0x88c>)
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	899b      	ldrh	r3, [r3, #12]
 801071e:	b29b      	uxth	r3, r3
 8010720:	4618      	mov	r0, r3
 8010722:	f7fa fb65 	bl	800adf0 <lwip_htons>
 8010726:	4603      	mov	r3, r0
 8010728:	b2db      	uxtb	r3, r3
 801072a:	b29b      	uxth	r3, r3
 801072c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010730:	b29b      	uxth	r3, r3
 8010732:	4618      	mov	r0, r3
 8010734:	f7fa fb5c 	bl	800adf0 <lwip_htons>
 8010738:	4603      	mov	r3, r0
 801073a:	b21b      	sxth	r3, r3
 801073c:	4323      	orrs	r3, r4
 801073e:	b21a      	sxth	r2, r3
 8010740:	4b57      	ldr	r3, [pc, #348]	; (80108a0 <tcp_receive+0x88c>)
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	b292      	uxth	r2, r2
 8010746:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801074c:	4b54      	ldr	r3, [pc, #336]	; (80108a0 <tcp_receive+0x88c>)
 801074e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010750:	4b53      	ldr	r3, [pc, #332]	; (80108a0 <tcp_receive+0x88c>)
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	899b      	ldrh	r3, [r3, #12]
 8010756:	b29b      	uxth	r3, r3
 8010758:	4618      	mov	r0, r3
 801075a:	f7fa fb49 	bl	800adf0 <lwip_htons>
 801075e:	4603      	mov	r3, r0
 8010760:	b2db      	uxtb	r3, r3
 8010762:	f003 0302 	and.w	r3, r3, #2
 8010766:	2b00      	cmp	r3, #0
 8010768:	d005      	beq.n	8010776 <tcp_receive+0x762>
            inseg.len -= 1;
 801076a:	4b4d      	ldr	r3, [pc, #308]	; (80108a0 <tcp_receive+0x88c>)
 801076c:	891b      	ldrh	r3, [r3, #8]
 801076e:	3b01      	subs	r3, #1
 8010770:	b29a      	uxth	r2, r3
 8010772:	4b4b      	ldr	r3, [pc, #300]	; (80108a0 <tcp_receive+0x88c>)
 8010774:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010776:	4b4a      	ldr	r3, [pc, #296]	; (80108a0 <tcp_receive+0x88c>)
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	4a49      	ldr	r2, [pc, #292]	; (80108a0 <tcp_receive+0x88c>)
 801077c:	8912      	ldrh	r2, [r2, #8]
 801077e:	4611      	mov	r1, r2
 8010780:	4618      	mov	r0, r3
 8010782:	f7fb feb5 	bl	800c4f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010786:	4b46      	ldr	r3, [pc, #280]	; (80108a0 <tcp_receive+0x88c>)
 8010788:	891c      	ldrh	r4, [r3, #8]
 801078a:	4b45      	ldr	r3, [pc, #276]	; (80108a0 <tcp_receive+0x88c>)
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	899b      	ldrh	r3, [r3, #12]
 8010790:	b29b      	uxth	r3, r3
 8010792:	4618      	mov	r0, r3
 8010794:	f7fa fb2c 	bl	800adf0 <lwip_htons>
 8010798:	4603      	mov	r3, r0
 801079a:	b2db      	uxtb	r3, r3
 801079c:	f003 0303 	and.w	r3, r3, #3
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d001      	beq.n	80107a8 <tcp_receive+0x794>
 80107a4:	2301      	movs	r3, #1
 80107a6:	e000      	b.n	80107aa <tcp_receive+0x796>
 80107a8:	2300      	movs	r3, #0
 80107aa:	4423      	add	r3, r4
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	4b3d      	ldr	r3, [pc, #244]	; (80108a4 <tcp_receive+0x890>)
 80107b0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107b2:	4b3c      	ldr	r3, [pc, #240]	; (80108a4 <tcp_receive+0x890>)
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	461a      	mov	r2, r3
 80107b8:	4b38      	ldr	r3, [pc, #224]	; (801089c <tcp_receive+0x888>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	441a      	add	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c2:	6879      	ldr	r1, [r7, #4]
 80107c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107c6:	440b      	add	r3, r1
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d006      	beq.n	80107da <tcp_receive+0x7c6>
 80107cc:	4b36      	ldr	r3, [pc, #216]	; (80108a8 <tcp_receive+0x894>)
 80107ce:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80107d2:	4936      	ldr	r1, [pc, #216]	; (80108ac <tcp_receive+0x898>)
 80107d4:	4836      	ldr	r0, [pc, #216]	; (80108b0 <tcp_receive+0x89c>)
 80107d6:	f005 fb7f 	bl	8015ed8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f000 80e7 	beq.w	80109b2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80107e4:	4b2e      	ldr	r3, [pc, #184]	; (80108a0 <tcp_receive+0x88c>)
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	899b      	ldrh	r3, [r3, #12]
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fa faff 	bl	800adf0 <lwip_htons>
 80107f2:	4603      	mov	r3, r0
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	f003 0301 	and.w	r3, r3, #1
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d010      	beq.n	8010820 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80107fe:	e00a      	b.n	8010816 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010804:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f7fd fcc4 	bl	800e19e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1f0      	bne.n	8010800 <tcp_receive+0x7ec>
 801081e:	e0c8      	b.n	80109b2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010824:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010826:	e052      	b.n	80108ce <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	899b      	ldrh	r3, [r3, #12]
 801082e:	b29b      	uxth	r3, r3
 8010830:	4618      	mov	r0, r3
 8010832:	f7fa fadd 	bl	800adf0 <lwip_htons>
 8010836:	4603      	mov	r3, r0
 8010838:	b2db      	uxtb	r3, r3
 801083a:	f003 0301 	and.w	r3, r3, #1
 801083e:	2b00      	cmp	r3, #0
 8010840:	d03d      	beq.n	80108be <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010842:	4b17      	ldr	r3, [pc, #92]	; (80108a0 <tcp_receive+0x88c>)
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	899b      	ldrh	r3, [r3, #12]
 8010848:	b29b      	uxth	r3, r3
 801084a:	4618      	mov	r0, r3
 801084c:	f7fa fad0 	bl	800adf0 <lwip_htons>
 8010850:	4603      	mov	r3, r0
 8010852:	b2db      	uxtb	r3, r3
 8010854:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010858:	2b00      	cmp	r3, #0
 801085a:	d130      	bne.n	80108be <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801085c:	4b10      	ldr	r3, [pc, #64]	; (80108a0 <tcp_receive+0x88c>)
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	899b      	ldrh	r3, [r3, #12]
 8010862:	b29c      	uxth	r4, r3
 8010864:	2001      	movs	r0, #1
 8010866:	f7fa fac3 	bl	800adf0 <lwip_htons>
 801086a:	4603      	mov	r3, r0
 801086c:	461a      	mov	r2, r3
 801086e:	4b0c      	ldr	r3, [pc, #48]	; (80108a0 <tcp_receive+0x88c>)
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	4322      	orrs	r2, r4
 8010874:	b292      	uxth	r2, r2
 8010876:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010878:	4b09      	ldr	r3, [pc, #36]	; (80108a0 <tcp_receive+0x88c>)
 801087a:	891c      	ldrh	r4, [r3, #8]
 801087c:	4b08      	ldr	r3, [pc, #32]	; (80108a0 <tcp_receive+0x88c>)
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	899b      	ldrh	r3, [r3, #12]
 8010882:	b29b      	uxth	r3, r3
 8010884:	4618      	mov	r0, r3
 8010886:	f7fa fab3 	bl	800adf0 <lwip_htons>
 801088a:	4603      	mov	r3, r0
 801088c:	b2db      	uxtb	r3, r3
 801088e:	f003 0303 	and.w	r3, r3, #3
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00e      	beq.n	80108b4 <tcp_receive+0x8a0>
 8010896:	2301      	movs	r3, #1
 8010898:	e00d      	b.n	80108b6 <tcp_receive+0x8a2>
 801089a:	bf00      	nop
 801089c:	2001197c 	.word	0x2001197c
 80108a0:	2001195c 	.word	0x2001195c
 80108a4:	20011986 	.word	0x20011986
 80108a8:	08018e64 	.word	0x08018e64
 80108ac:	0801920c 	.word	0x0801920c
 80108b0:	08018eb0 	.word	0x08018eb0
 80108b4:	2300      	movs	r3, #0
 80108b6:	4423      	add	r3, r4
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	4b98      	ldr	r3, [pc, #608]	; (8010b1c <tcp_receive+0xb08>)
 80108bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80108be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80108c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80108c8:	6938      	ldr	r0, [r7, #16]
 80108ca:	f7fd fc68 	bl	800e19e <tcp_seg_free>
            while (next &&
 80108ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00e      	beq.n	80108f2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80108d4:	4b91      	ldr	r3, [pc, #580]	; (8010b1c <tcp_receive+0xb08>)
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	461a      	mov	r2, r3
 80108da:	4b91      	ldr	r3, [pc, #580]	; (8010b20 <tcp_receive+0xb0c>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	441a      	add	r2, r3
 80108e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108e8:	8909      	ldrh	r1, [r1, #8]
 80108ea:	440b      	add	r3, r1
 80108ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	da9a      	bge.n	8010828 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80108f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d059      	beq.n	80109ac <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80108f8:	4b88      	ldr	r3, [pc, #544]	; (8010b1c <tcp_receive+0xb08>)
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	461a      	mov	r2, r3
 80108fe:	4b88      	ldr	r3, [pc, #544]	; (8010b20 <tcp_receive+0xb0c>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	441a      	add	r2, r3
 8010904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801090c:	2b00      	cmp	r3, #0
 801090e:	dd4d      	ble.n	80109ac <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	b29a      	uxth	r2, r3
 8010918:	4b81      	ldr	r3, [pc, #516]	; (8010b20 <tcp_receive+0xb0c>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	b29b      	uxth	r3, r3
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	b29a      	uxth	r2, r3
 8010922:	4b80      	ldr	r3, [pc, #512]	; (8010b24 <tcp_receive+0xb10>)
 8010924:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010926:	4b7f      	ldr	r3, [pc, #508]	; (8010b24 <tcp_receive+0xb10>)
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	899b      	ldrh	r3, [r3, #12]
 801092c:	b29b      	uxth	r3, r3
 801092e:	4618      	mov	r0, r3
 8010930:	f7fa fa5e 	bl	800adf0 <lwip_htons>
 8010934:	4603      	mov	r3, r0
 8010936:	b2db      	uxtb	r3, r3
 8010938:	f003 0302 	and.w	r3, r3, #2
 801093c:	2b00      	cmp	r3, #0
 801093e:	d005      	beq.n	801094c <tcp_receive+0x938>
                inseg.len -= 1;
 8010940:	4b78      	ldr	r3, [pc, #480]	; (8010b24 <tcp_receive+0xb10>)
 8010942:	891b      	ldrh	r3, [r3, #8]
 8010944:	3b01      	subs	r3, #1
 8010946:	b29a      	uxth	r2, r3
 8010948:	4b76      	ldr	r3, [pc, #472]	; (8010b24 <tcp_receive+0xb10>)
 801094a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801094c:	4b75      	ldr	r3, [pc, #468]	; (8010b24 <tcp_receive+0xb10>)
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	4a74      	ldr	r2, [pc, #464]	; (8010b24 <tcp_receive+0xb10>)
 8010952:	8912      	ldrh	r2, [r2, #8]
 8010954:	4611      	mov	r1, r2
 8010956:	4618      	mov	r0, r3
 8010958:	f7fb fdca 	bl	800c4f0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801095c:	4b71      	ldr	r3, [pc, #452]	; (8010b24 <tcp_receive+0xb10>)
 801095e:	891c      	ldrh	r4, [r3, #8]
 8010960:	4b70      	ldr	r3, [pc, #448]	; (8010b24 <tcp_receive+0xb10>)
 8010962:	68db      	ldr	r3, [r3, #12]
 8010964:	899b      	ldrh	r3, [r3, #12]
 8010966:	b29b      	uxth	r3, r3
 8010968:	4618      	mov	r0, r3
 801096a:	f7fa fa41 	bl	800adf0 <lwip_htons>
 801096e:	4603      	mov	r3, r0
 8010970:	b2db      	uxtb	r3, r3
 8010972:	f003 0303 	and.w	r3, r3, #3
 8010976:	2b00      	cmp	r3, #0
 8010978:	d001      	beq.n	801097e <tcp_receive+0x96a>
 801097a:	2301      	movs	r3, #1
 801097c:	e000      	b.n	8010980 <tcp_receive+0x96c>
 801097e:	2300      	movs	r3, #0
 8010980:	4423      	add	r3, r4
 8010982:	b29a      	uxth	r2, r3
 8010984:	4b65      	ldr	r3, [pc, #404]	; (8010b1c <tcp_receive+0xb08>)
 8010986:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010988:	4b64      	ldr	r3, [pc, #400]	; (8010b1c <tcp_receive+0xb08>)
 801098a:	881b      	ldrh	r3, [r3, #0]
 801098c:	461a      	mov	r2, r3
 801098e:	4b64      	ldr	r3, [pc, #400]	; (8010b20 <tcp_receive+0xb0c>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	441a      	add	r2, r3
 8010994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	429a      	cmp	r2, r3
 801099c:	d006      	beq.n	80109ac <tcp_receive+0x998>
 801099e:	4b62      	ldr	r3, [pc, #392]	; (8010b28 <tcp_receive+0xb14>)
 80109a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80109a4:	4961      	ldr	r1, [pc, #388]	; (8010b2c <tcp_receive+0xb18>)
 80109a6:	4862      	ldr	r0, [pc, #392]	; (8010b30 <tcp_receive+0xb1c>)
 80109a8:	f005 fa96 	bl	8015ed8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109b0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80109b2:	4b5a      	ldr	r3, [pc, #360]	; (8010b1c <tcp_receive+0xb08>)
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	461a      	mov	r2, r3
 80109b8:	4b59      	ldr	r3, [pc, #356]	; (8010b20 <tcp_receive+0xb0c>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	441a      	add	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109c6:	4b55      	ldr	r3, [pc, #340]	; (8010b1c <tcp_receive+0xb08>)
 80109c8:	881b      	ldrh	r3, [r3, #0]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d206      	bcs.n	80109dc <tcp_receive+0x9c8>
 80109ce:	4b56      	ldr	r3, [pc, #344]	; (8010b28 <tcp_receive+0xb14>)
 80109d0:	f240 6207 	movw	r2, #1543	; 0x607
 80109d4:	4957      	ldr	r1, [pc, #348]	; (8010b34 <tcp_receive+0xb20>)
 80109d6:	4856      	ldr	r0, [pc, #344]	; (8010b30 <tcp_receive+0xb1c>)
 80109d8:	f005 fa7e 	bl	8015ed8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109e0:	4b4e      	ldr	r3, [pc, #312]	; (8010b1c <tcp_receive+0xb08>)
 80109e2:	881b      	ldrh	r3, [r3, #0]
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7fc fd99 	bl	800d524 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80109f2:	4b4c      	ldr	r3, [pc, #304]	; (8010b24 <tcp_receive+0xb10>)
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	891b      	ldrh	r3, [r3, #8]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d006      	beq.n	8010a0a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80109fc:	4b49      	ldr	r3, [pc, #292]	; (8010b24 <tcp_receive+0xb10>)
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	4a4d      	ldr	r2, [pc, #308]	; (8010b38 <tcp_receive+0xb24>)
 8010a02:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010a04:	4b47      	ldr	r3, [pc, #284]	; (8010b24 <tcp_receive+0xb10>)
 8010a06:	2200      	movs	r2, #0
 8010a08:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a0a:	4b46      	ldr	r3, [pc, #280]	; (8010b24 <tcp_receive+0xb10>)
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	899b      	ldrh	r3, [r3, #12]
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fa f9ec 	bl	800adf0 <lwip_htons>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	f003 0301 	and.w	r3, r3, #1
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 80b8 	beq.w	8010b96 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010a26:	4b45      	ldr	r3, [pc, #276]	; (8010b3c <tcp_receive+0xb28>)
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f043 0320 	orr.w	r3, r3, #32
 8010a2e:	b2da      	uxtb	r2, r3
 8010a30:	4b42      	ldr	r3, [pc, #264]	; (8010b3c <tcp_receive+0xb28>)
 8010a32:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010a34:	e0af      	b.n	8010b96 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a3a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	4a36      	ldr	r2, [pc, #216]	; (8010b20 <tcp_receive+0xb0c>)
 8010a46:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	891b      	ldrh	r3, [r3, #8]
 8010a4c:	461c      	mov	r4, r3
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	899b      	ldrh	r3, [r3, #12]
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fa f9ca 	bl	800adf0 <lwip_htons>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	f003 0303 	and.w	r3, r3, #3
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d001      	beq.n	8010a6c <tcp_receive+0xa58>
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e000      	b.n	8010a6e <tcp_receive+0xa5a>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	191a      	adds	r2, r3, r4
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a74:	441a      	add	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a7e:	461c      	mov	r4, r3
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	891b      	ldrh	r3, [r3, #8]
 8010a84:	461d      	mov	r5, r3
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	899b      	ldrh	r3, [r3, #12]
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fa f9ae 	bl	800adf0 <lwip_htons>
 8010a94:	4603      	mov	r3, r0
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	f003 0303 	and.w	r3, r3, #3
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d001      	beq.n	8010aa4 <tcp_receive+0xa90>
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	e000      	b.n	8010aa6 <tcp_receive+0xa92>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	442b      	add	r3, r5
 8010aa8:	429c      	cmp	r4, r3
 8010aaa:	d206      	bcs.n	8010aba <tcp_receive+0xaa6>
 8010aac:	4b1e      	ldr	r3, [pc, #120]	; (8010b28 <tcp_receive+0xb14>)
 8010aae:	f240 622b 	movw	r2, #1579	; 0x62b
 8010ab2:	4923      	ldr	r1, [pc, #140]	; (8010b40 <tcp_receive+0xb2c>)
 8010ab4:	481e      	ldr	r0, [pc, #120]	; (8010b30 <tcp_receive+0xb1c>)
 8010ab6:	f005 fa0f 	bl	8015ed8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	891b      	ldrh	r3, [r3, #8]
 8010abe:	461c      	mov	r4, r3
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	899b      	ldrh	r3, [r3, #12]
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fa f991 	bl	800adf0 <lwip_htons>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	f003 0303 	and.w	r3, r3, #3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d001      	beq.n	8010ade <tcp_receive+0xaca>
 8010ada:	2301      	movs	r3, #1
 8010adc:	e000      	b.n	8010ae0 <tcp_receive+0xacc>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	1919      	adds	r1, r3, r4
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ae6:	b28b      	uxth	r3, r1
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7fc fd17 	bl	800d524 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	891b      	ldrh	r3, [r3, #8]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d028      	beq.n	8010b52 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010b00:	4b0d      	ldr	r3, [pc, #52]	; (8010b38 <tcp_receive+0xb24>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d01d      	beq.n	8010b44 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010b08:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <tcp_receive+0xb24>)
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	4619      	mov	r1, r3
 8010b12:	4610      	mov	r0, r2
 8010b14:	f7fb ff40 	bl	800c998 <pbuf_cat>
 8010b18:	e018      	b.n	8010b4c <tcp_receive+0xb38>
 8010b1a:	bf00      	nop
 8010b1c:	20011986 	.word	0x20011986
 8010b20:	2001197c 	.word	0x2001197c
 8010b24:	2001195c 	.word	0x2001195c
 8010b28:	08018e64 	.word	0x08018e64
 8010b2c:	08019244 	.word	0x08019244
 8010b30:	08018eb0 	.word	0x08018eb0
 8010b34:	08019280 	.word	0x08019280
 8010b38:	2001198c 	.word	0x2001198c
 8010b3c:	20011989 	.word	0x20011989
 8010b40:	080192a0 	.word	0x080192a0
            } else {
              recv_data = cseg->p;
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	4a70      	ldr	r2, [pc, #448]	; (8010d0c <tcp_receive+0xcf8>)
 8010b4a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	899b      	ldrh	r3, [r3, #12]
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fa f948 	bl	800adf0 <lwip_htons>
 8010b60:	4603      	mov	r3, r0
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00d      	beq.n	8010b88 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010b6c:	4b68      	ldr	r3, [pc, #416]	; (8010d10 <tcp_receive+0xcfc>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	f043 0320 	orr.w	r3, r3, #32
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	4b66      	ldr	r3, [pc, #408]	; (8010d10 <tcp_receive+0xcfc>)
 8010b78:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	7d1b      	ldrb	r3, [r3, #20]
 8010b7e:	2b04      	cmp	r3, #4
 8010b80:	d102      	bne.n	8010b88 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2207      	movs	r2, #7
 8010b86:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010b90:	68b8      	ldr	r0, [r7, #8]
 8010b92:	f7fd fb04 	bl	800e19e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d008      	beq.n	8010bb0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	685a      	ldr	r2, [r3, #4]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010baa:	429a      	cmp	r2, r3
 8010bac:	f43f af43 	beq.w	8010a36 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	8b5b      	ldrh	r3, [r3, #26]
 8010bb4:	f003 0301 	and.w	r3, r3, #1
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00e      	beq.n	8010bda <tcp_receive+0xbc6>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	8b5b      	ldrh	r3, [r3, #26]
 8010bc0:	f023 0301 	bic.w	r3, r3, #1
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	835a      	strh	r2, [r3, #26]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	8b5b      	ldrh	r3, [r3, #26]
 8010bce:	f043 0302 	orr.w	r3, r3, #2
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010bd8:	e188      	b.n	8010eec <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	8b5b      	ldrh	r3, [r3, #26]
 8010bde:	f043 0301 	orr.w	r3, r3, #1
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010be8:	e180      	b.n	8010eec <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d106      	bne.n	8010c00 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010bf2:	4848      	ldr	r0, [pc, #288]	; (8010d14 <tcp_receive+0xd00>)
 8010bf4:	f7fd faec 	bl	800e1d0 <tcp_seg_copy>
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	675a      	str	r2, [r3, #116]	; 0x74
 8010bfe:	e16d      	b.n	8010edc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010c00:	2300      	movs	r3, #0
 8010c02:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c0a:	e157      	b.n	8010ebc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	685a      	ldr	r2, [r3, #4]
 8010c12:	4b41      	ldr	r3, [pc, #260]	; (8010d18 <tcp_receive+0xd04>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d11d      	bne.n	8010c56 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010c1a:	4b3e      	ldr	r3, [pc, #248]	; (8010d14 <tcp_receive+0xd00>)
 8010c1c:	891a      	ldrh	r2, [r3, #8]
 8010c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c20:	891b      	ldrh	r3, [r3, #8]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	f240 814f 	bls.w	8010ec6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010c28:	483a      	ldr	r0, [pc, #232]	; (8010d14 <tcp_receive+0xd00>)
 8010c2a:	f7fd fad1 	bl	800e1d0 <tcp_seg_copy>
 8010c2e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f000 8149 	beq.w	8010eca <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <tcp_receive+0xc32>
                    prev->next = cseg;
 8010c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c40:	697a      	ldr	r2, [r7, #20]
 8010c42:	601a      	str	r2, [r3, #0]
 8010c44:	e002      	b.n	8010c4c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	697a      	ldr	r2, [r7, #20]
 8010c4a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c4e:	6978      	ldr	r0, [r7, #20]
 8010c50:	f7ff f8dc 	bl	800fe0c <tcp_oos_insert_segment>
                }
                break;
 8010c54:	e139      	b.n	8010eca <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d117      	bne.n	8010c8c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010c5c:	4b2e      	ldr	r3, [pc, #184]	; (8010d18 <tcp_receive+0xd04>)
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	da57      	bge.n	8010d1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010c6c:	4829      	ldr	r0, [pc, #164]	; (8010d14 <tcp_receive+0xd00>)
 8010c6e:	f7fd faaf 	bl	800e1d0 <tcp_seg_copy>
 8010c72:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f000 8129 	beq.w	8010ece <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	69ba      	ldr	r2, [r7, #24]
 8010c80:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c84:	69b8      	ldr	r0, [r7, #24]
 8010c86:	f7ff f8c1 	bl	800fe0c <tcp_oos_insert_segment>
                  }
                  break;
 8010c8a:	e120      	b.n	8010ece <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010c8c:	4b22      	ldr	r3, [pc, #136]	; (8010d18 <tcp_receive+0xd04>)
 8010c8e:	681a      	ldr	r2, [r3, #0]
 8010c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	db3e      	blt.n	8010d1c <tcp_receive+0xd08>
 8010c9e:	4b1e      	ldr	r3, [pc, #120]	; (8010d18 <tcp_receive+0xd04>)
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	3301      	adds	r3, #1
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	dc35      	bgt.n	8010d1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010cb0:	4818      	ldr	r0, [pc, #96]	; (8010d14 <tcp_receive+0xd00>)
 8010cb2:	f7fd fa8d 	bl	800e1d0 <tcp_seg_copy>
 8010cb6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 8109 	beq.w	8010ed2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cc8:	8912      	ldrh	r2, [r2, #8]
 8010cca:	441a      	add	r2, r3
 8010ccc:	4b12      	ldr	r3, [pc, #72]	; (8010d18 <tcp_receive+0xd04>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	1ad3      	subs	r3, r2, r3
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	dd12      	ble.n	8010cfc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010cd6:	4b10      	ldr	r3, [pc, #64]	; (8010d18 <tcp_receive+0xd04>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	b29a      	uxth	r2, r3
 8010ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cee:	685a      	ldr	r2, [r3, #4]
 8010cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf2:	891b      	ldrh	r3, [r3, #8]
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	4610      	mov	r0, r2
 8010cf8:	f7fb fbfa 	bl	800c4f0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfe:	69fa      	ldr	r2, [r7, #28]
 8010d00:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d04:	69f8      	ldr	r0, [r7, #28]
 8010d06:	f7ff f881 	bl	800fe0c <tcp_oos_insert_segment>
                  }
                  break;
 8010d0a:	e0e2      	b.n	8010ed2 <tcp_receive+0xebe>
 8010d0c:	2001198c 	.word	0x2001198c
 8010d10:	20011989 	.word	0x20011989
 8010d14:	2001195c 	.word	0x2001195c
 8010d18:	2001197c 	.word	0x2001197c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f040 80c6 	bne.w	8010eb6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010d2a:	4b80      	ldr	r3, [pc, #512]	; (8010f2c <tcp_receive+0xf18>)
 8010d2c:	681a      	ldr	r2, [r3, #0]
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f340 80bd 	ble.w	8010eb6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	899b      	ldrh	r3, [r3, #12]
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7fa f853 	bl	800adf0 <lwip_htons>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	f003 0301 	and.w	r3, r3, #1
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f040 80bf 	bne.w	8010ed6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010d58:	4875      	ldr	r0, [pc, #468]	; (8010f30 <tcp_receive+0xf1c>)
 8010d5a:	f7fd fa39 	bl	800e1d0 <tcp_seg_copy>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d62:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 80b6 	beq.w	8010eda <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d76:	8912      	ldrh	r2, [r2, #8]
 8010d78:	441a      	add	r2, r3
 8010d7a:	4b6c      	ldr	r3, [pc, #432]	; (8010f2c <tcp_receive+0xf18>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	dd12      	ble.n	8010daa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010d84:	4b69      	ldr	r3, [pc, #420]	; (8010f2c <tcp_receive+0xf18>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	b29a      	uxth	r2, r3
 8010d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d98:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d9c:	685a      	ldr	r2, [r3, #4]
 8010d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da0:	891b      	ldrh	r3, [r3, #8]
 8010da2:	4619      	mov	r1, r3
 8010da4:	4610      	mov	r0, r2
 8010da6:	f7fb fba3 	bl	800c4f0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010daa:	4b62      	ldr	r3, [pc, #392]	; (8010f34 <tcp_receive+0xf20>)
 8010dac:	881b      	ldrh	r3, [r3, #0]
 8010dae:	461a      	mov	r2, r3
 8010db0:	4b5e      	ldr	r3, [pc, #376]	; (8010f2c <tcp_receive+0xf18>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	441a      	add	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dba:	6879      	ldr	r1, [r7, #4]
 8010dbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dbe:	440b      	add	r3, r1
 8010dc0:	1ad3      	subs	r3, r2, r3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f340 8089 	ble.w	8010eda <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	899b      	ldrh	r3, [r3, #12]
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fa f80c 	bl	800adf0 <lwip_htons>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	f003 0301 	and.w	r3, r3, #1
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d022      	beq.n	8010e2a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	899b      	ldrh	r3, [r3, #12]
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	b21b      	sxth	r3, r3
 8010df0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010df4:	b21c      	sxth	r4, r3
 8010df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	899b      	ldrh	r3, [r3, #12]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f9 fff5 	bl	800adf0 <lwip_htons>
 8010e06:	4603      	mov	r3, r0
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7f9 ffec 	bl	800adf0 <lwip_htons>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	b21b      	sxth	r3, r3
 8010e1c:	4323      	orrs	r3, r4
 8010e1e:	b21a      	sxth	r2, r3
 8010e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	b292      	uxth	r2, r2
 8010e28:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e34:	4413      	add	r3, r2
 8010e36:	b299      	uxth	r1, r3
 8010e38:	4b3c      	ldr	r3, [pc, #240]	; (8010f2c <tcp_receive+0xf18>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	1a8a      	subs	r2, r1, r2
 8010e44:	b292      	uxth	r2, r2
 8010e46:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	685a      	ldr	r2, [r3, #4]
 8010e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	891b      	ldrh	r3, [r3, #8]
 8010e54:	4619      	mov	r1, r3
 8010e56:	4610      	mov	r0, r2
 8010e58:	f7fb fb4a 	bl	800c4f0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	891c      	ldrh	r4, [r3, #8]
 8010e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7f9 ffbf 	bl	800adf0 <lwip_htons>
 8010e72:	4603      	mov	r3, r0
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	f003 0303 	and.w	r3, r3, #3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d001      	beq.n	8010e82 <tcp_receive+0xe6e>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e000      	b.n	8010e84 <tcp_receive+0xe70>
 8010e82:	2300      	movs	r3, #0
 8010e84:	4423      	add	r3, r4
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	4b2a      	ldr	r3, [pc, #168]	; (8010f34 <tcp_receive+0xf20>)
 8010e8a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010e8c:	4b29      	ldr	r3, [pc, #164]	; (8010f34 <tcp_receive+0xf20>)
 8010e8e:	881b      	ldrh	r3, [r3, #0]
 8010e90:	461a      	mov	r2, r3
 8010e92:	4b26      	ldr	r3, [pc, #152]	; (8010f2c <tcp_receive+0xf18>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	441a      	add	r2, r3
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9c:	6879      	ldr	r1, [r7, #4]
 8010e9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ea0:	440b      	add	r3, r1
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d019      	beq.n	8010eda <tcp_receive+0xec6>
 8010ea6:	4b24      	ldr	r3, [pc, #144]	; (8010f38 <tcp_receive+0xf24>)
 8010ea8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010eac:	4923      	ldr	r1, [pc, #140]	; (8010f3c <tcp_receive+0xf28>)
 8010eae:	4824      	ldr	r0, [pc, #144]	; (8010f40 <tcp_receive+0xf2c>)
 8010eb0:	f005 f812 	bl	8015ed8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010eb4:	e011      	b.n	8010eda <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f47f aea4 	bne.w	8010c0c <tcp_receive+0xbf8>
 8010ec4:	e00a      	b.n	8010edc <tcp_receive+0xec8>
                break;
 8010ec6:	bf00      	nop
 8010ec8:	e008      	b.n	8010edc <tcp_receive+0xec8>
                break;
 8010eca:	bf00      	nop
 8010ecc:	e006      	b.n	8010edc <tcp_receive+0xec8>
                  break;
 8010ece:	bf00      	nop
 8010ed0:	e004      	b.n	8010edc <tcp_receive+0xec8>
                  break;
 8010ed2:	bf00      	nop
 8010ed4:	e002      	b.n	8010edc <tcp_receive+0xec8>
                  break;
 8010ed6:	bf00      	nop
 8010ed8:	e000      	b.n	8010edc <tcp_receive+0xec8>
                break;
 8010eda:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f001 fead 	bl	8012c3c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010ee2:	e003      	b.n	8010eec <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f001 fea9 	bl	8012c3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010eea:	e01a      	b.n	8010f22 <tcp_receive+0xf0e>
 8010eec:	e019      	b.n	8010f22 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010eee:	4b0f      	ldr	r3, [pc, #60]	; (8010f2c <tcp_receive+0xf18>)
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	db0a      	blt.n	8010f12 <tcp_receive+0xefe>
 8010efc:	4b0b      	ldr	r3, [pc, #44]	; (8010f2c <tcp_receive+0xf18>)
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f04:	6879      	ldr	r1, [r7, #4]
 8010f06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f08:	440b      	add	r3, r1
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	dd07      	ble.n	8010f22 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	8b5b      	ldrh	r3, [r3, #26]
 8010f16:	f043 0302 	orr.w	r3, r3, #2
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010f20:	e7ff      	b.n	8010f22 <tcp_receive+0xf0e>
 8010f22:	bf00      	nop
 8010f24:	3750      	adds	r7, #80	; 0x50
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bdb0      	pop	{r4, r5, r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	2001197c 	.word	0x2001197c
 8010f30:	2001195c 	.word	0x2001195c
 8010f34:	20011986 	.word	0x20011986
 8010f38:	08018e64 	.word	0x08018e64
 8010f3c:	0801920c 	.word	0x0801920c
 8010f40:	08018eb0 	.word	0x08018eb0

08010f44 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010f44:	b480      	push	{r7}
 8010f46:	b083      	sub	sp, #12
 8010f48:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010f4a:	4b15      	ldr	r3, [pc, #84]	; (8010fa0 <tcp_get_next_optbyte+0x5c>)
 8010f4c:	881b      	ldrh	r3, [r3, #0]
 8010f4e:	1c5a      	adds	r2, r3, #1
 8010f50:	b291      	uxth	r1, r2
 8010f52:	4a13      	ldr	r2, [pc, #76]	; (8010fa0 <tcp_get_next_optbyte+0x5c>)
 8010f54:	8011      	strh	r1, [r2, #0]
 8010f56:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010f58:	4b12      	ldr	r3, [pc, #72]	; (8010fa4 <tcp_get_next_optbyte+0x60>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d004      	beq.n	8010f6a <tcp_get_next_optbyte+0x26>
 8010f60:	4b11      	ldr	r3, [pc, #68]	; (8010fa8 <tcp_get_next_optbyte+0x64>)
 8010f62:	881b      	ldrh	r3, [r3, #0]
 8010f64:	88fa      	ldrh	r2, [r7, #6]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d208      	bcs.n	8010f7c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010f6a:	4b10      	ldr	r3, [pc, #64]	; (8010fac <tcp_get_next_optbyte+0x68>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	3314      	adds	r3, #20
 8010f70:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010f72:	88fb      	ldrh	r3, [r7, #6]
 8010f74:	683a      	ldr	r2, [r7, #0]
 8010f76:	4413      	add	r3, r2
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	e00b      	b.n	8010f94 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010f7c:	88fb      	ldrh	r3, [r7, #6]
 8010f7e:	b2da      	uxtb	r2, r3
 8010f80:	4b09      	ldr	r3, [pc, #36]	; (8010fa8 <tcp_get_next_optbyte+0x64>)
 8010f82:	881b      	ldrh	r3, [r3, #0]
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	1ad3      	subs	r3, r2, r3
 8010f88:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010f8a:	4b06      	ldr	r3, [pc, #24]	; (8010fa4 <tcp_get_next_optbyte+0x60>)
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	797b      	ldrb	r3, [r7, #5]
 8010f90:	4413      	add	r3, r2
 8010f92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	20011978 	.word	0x20011978
 8010fa4:	20011974 	.word	0x20011974
 8010fa8:	20011972 	.word	0x20011972
 8010fac:	2001196c 	.word	0x2001196c

08010fb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d106      	bne.n	8010fcc <tcp_parseopt+0x1c>
 8010fbe:	4b32      	ldr	r3, [pc, #200]	; (8011088 <tcp_parseopt+0xd8>)
 8010fc0:	f240 727d 	movw	r2, #1917	; 0x77d
 8010fc4:	4931      	ldr	r1, [pc, #196]	; (801108c <tcp_parseopt+0xdc>)
 8010fc6:	4832      	ldr	r0, [pc, #200]	; (8011090 <tcp_parseopt+0xe0>)
 8010fc8:	f004 ff86 	bl	8015ed8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010fcc:	4b31      	ldr	r3, [pc, #196]	; (8011094 <tcp_parseopt+0xe4>)
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d055      	beq.n	8011080 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010fd4:	4b30      	ldr	r3, [pc, #192]	; (8011098 <tcp_parseopt+0xe8>)
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	801a      	strh	r2, [r3, #0]
 8010fda:	e045      	b.n	8011068 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010fdc:	f7ff ffb2 	bl	8010f44 <tcp_get_next_optbyte>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010fe4:	7bfb      	ldrb	r3, [r7, #15]
 8010fe6:	2b02      	cmp	r3, #2
 8010fe8:	d006      	beq.n	8010ff8 <tcp_parseopt+0x48>
 8010fea:	2b02      	cmp	r3, #2
 8010fec:	dc2b      	bgt.n	8011046 <tcp_parseopt+0x96>
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d041      	beq.n	8011076 <tcp_parseopt+0xc6>
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d127      	bne.n	8011046 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010ff6:	e037      	b.n	8011068 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010ff8:	f7ff ffa4 	bl	8010f44 <tcp_get_next_optbyte>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b04      	cmp	r3, #4
 8011000:	d13b      	bne.n	801107a <tcp_parseopt+0xca>
 8011002:	4b25      	ldr	r3, [pc, #148]	; (8011098 <tcp_parseopt+0xe8>)
 8011004:	881b      	ldrh	r3, [r3, #0]
 8011006:	3301      	adds	r3, #1
 8011008:	4a22      	ldr	r2, [pc, #136]	; (8011094 <tcp_parseopt+0xe4>)
 801100a:	8812      	ldrh	r2, [r2, #0]
 801100c:	4293      	cmp	r3, r2
 801100e:	da34      	bge.n	801107a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011010:	f7ff ff98 	bl	8010f44 <tcp_get_next_optbyte>
 8011014:	4603      	mov	r3, r0
 8011016:	b29b      	uxth	r3, r3
 8011018:	021b      	lsls	r3, r3, #8
 801101a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801101c:	f7ff ff92 	bl	8010f44 <tcp_get_next_optbyte>
 8011020:	4603      	mov	r3, r0
 8011022:	b29a      	uxth	r2, r3
 8011024:	89bb      	ldrh	r3, [r7, #12]
 8011026:	4313      	orrs	r3, r2
 8011028:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801102a:	89bb      	ldrh	r3, [r7, #12]
 801102c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011030:	d804      	bhi.n	801103c <tcp_parseopt+0x8c>
 8011032:	89bb      	ldrh	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d001      	beq.n	801103c <tcp_parseopt+0x8c>
 8011038:	89ba      	ldrh	r2, [r7, #12]
 801103a:	e001      	b.n	8011040 <tcp_parseopt+0x90>
 801103c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011044:	e010      	b.n	8011068 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011046:	f7ff ff7d 	bl	8010f44 <tcp_get_next_optbyte>
 801104a:	4603      	mov	r3, r0
 801104c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801104e:	7afb      	ldrb	r3, [r7, #11]
 8011050:	2b01      	cmp	r3, #1
 8011052:	d914      	bls.n	801107e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011054:	7afb      	ldrb	r3, [r7, #11]
 8011056:	b29a      	uxth	r2, r3
 8011058:	4b0f      	ldr	r3, [pc, #60]	; (8011098 <tcp_parseopt+0xe8>)
 801105a:	881b      	ldrh	r3, [r3, #0]
 801105c:	4413      	add	r3, r2
 801105e:	b29b      	uxth	r3, r3
 8011060:	3b02      	subs	r3, #2
 8011062:	b29a      	uxth	r2, r3
 8011064:	4b0c      	ldr	r3, [pc, #48]	; (8011098 <tcp_parseopt+0xe8>)
 8011066:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011068:	4b0b      	ldr	r3, [pc, #44]	; (8011098 <tcp_parseopt+0xe8>)
 801106a:	881a      	ldrh	r2, [r3, #0]
 801106c:	4b09      	ldr	r3, [pc, #36]	; (8011094 <tcp_parseopt+0xe4>)
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	429a      	cmp	r2, r3
 8011072:	d3b3      	bcc.n	8010fdc <tcp_parseopt+0x2c>
 8011074:	e004      	b.n	8011080 <tcp_parseopt+0xd0>
          return;
 8011076:	bf00      	nop
 8011078:	e002      	b.n	8011080 <tcp_parseopt+0xd0>
            return;
 801107a:	bf00      	nop
 801107c:	e000      	b.n	8011080 <tcp_parseopt+0xd0>
            return;
 801107e:	bf00      	nop
      }
    }
  }
}
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	08018e64 	.word	0x08018e64
 801108c:	080192c8 	.word	0x080192c8
 8011090:	08018eb0 	.word	0x08018eb0
 8011094:	20011970 	.word	0x20011970
 8011098:	20011978 	.word	0x20011978

0801109c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801109c:	b480      	push	{r7}
 801109e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80110a0:	4b05      	ldr	r3, [pc, #20]	; (80110b8 <tcp_trigger_input_pcb_close+0x1c>)
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	f043 0310 	orr.w	r3, r3, #16
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	4b03      	ldr	r3, [pc, #12]	; (80110b8 <tcp_trigger_input_pcb_close+0x1c>)
 80110ac:	701a      	strb	r2, [r3, #0]
}
 80110ae:	bf00      	nop
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr
 80110b8:	20011989 	.word	0x20011989

080110bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00a      	beq.n	80110e4 <tcp_route+0x28>
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	7a1b      	ldrb	r3, [r3, #8]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d006      	beq.n	80110e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	7a1b      	ldrb	r3, [r3, #8]
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fb f800 	bl	800c0e0 <netif_get_by_index>
 80110e0:	4603      	mov	r3, r0
 80110e2:	e003      	b.n	80110ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f003 f96d 	bl	80143c4 <ip4_route>
 80110ea:	4603      	mov	r3, r0
  }
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80110f4:	b590      	push	{r4, r7, lr}
 80110f6:	b087      	sub	sp, #28
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	603b      	str	r3, [r7, #0]
 8011100:	4613      	mov	r3, r2
 8011102:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d105      	bne.n	8011116 <tcp_create_segment+0x22>
 801110a:	4b44      	ldr	r3, [pc, #272]	; (801121c <tcp_create_segment+0x128>)
 801110c:	22a3      	movs	r2, #163	; 0xa3
 801110e:	4944      	ldr	r1, [pc, #272]	; (8011220 <tcp_create_segment+0x12c>)
 8011110:	4844      	ldr	r0, [pc, #272]	; (8011224 <tcp_create_segment+0x130>)
 8011112:	f004 fee1 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d105      	bne.n	8011128 <tcp_create_segment+0x34>
 801111c:	4b3f      	ldr	r3, [pc, #252]	; (801121c <tcp_create_segment+0x128>)
 801111e:	22a4      	movs	r2, #164	; 0xa4
 8011120:	4941      	ldr	r1, [pc, #260]	; (8011228 <tcp_create_segment+0x134>)
 8011122:	4840      	ldr	r0, [pc, #256]	; (8011224 <tcp_create_segment+0x130>)
 8011124:	f004 fed8 	bl	8015ed8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011128:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	b2db      	uxtb	r3, r3
 8011130:	f003 0304 	and.w	r3, r3, #4
 8011134:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011136:	2002      	movs	r0, #2
 8011138:	f7fa fc4a 	bl	800b9d0 <memp_malloc>
 801113c:	6138      	str	r0, [r7, #16]
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d104      	bne.n	801114e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011144:	68b8      	ldr	r0, [r7, #8]
 8011146:	f7fb fb59 	bl	800c7fc <pbuf_free>
    return NULL;
 801114a:	2300      	movs	r3, #0
 801114c:	e061      	b.n	8011212 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011154:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	2200      	movs	r2, #0
 801115a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	891a      	ldrh	r2, [r3, #8]
 8011166:	7dfb      	ldrb	r3, [r7, #23]
 8011168:	b29b      	uxth	r3, r3
 801116a:	429a      	cmp	r2, r3
 801116c:	d205      	bcs.n	801117a <tcp_create_segment+0x86>
 801116e:	4b2b      	ldr	r3, [pc, #172]	; (801121c <tcp_create_segment+0x128>)
 8011170:	22b0      	movs	r2, #176	; 0xb0
 8011172:	492e      	ldr	r1, [pc, #184]	; (801122c <tcp_create_segment+0x138>)
 8011174:	482b      	ldr	r0, [pc, #172]	; (8011224 <tcp_create_segment+0x130>)
 8011176:	f004 feaf 	bl	8015ed8 <iprintf>
  seg->len = p->tot_len - optlen;
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	891a      	ldrh	r2, [r3, #8]
 801117e:	7dfb      	ldrb	r3, [r7, #23]
 8011180:	b29b      	uxth	r3, r3
 8011182:	1ad3      	subs	r3, r2, r3
 8011184:	b29a      	uxth	r2, r3
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801118a:	2114      	movs	r1, #20
 801118c:	68b8      	ldr	r0, [r7, #8]
 801118e:	f7fb fa9f 	bl	800c6d0 <pbuf_add_header>
 8011192:	4603      	mov	r3, r0
 8011194:	2b00      	cmp	r3, #0
 8011196:	d004      	beq.n	80111a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011198:	6938      	ldr	r0, [r7, #16]
 801119a:	f7fd f800 	bl	800e19e <tcp_seg_free>
    return NULL;
 801119e:	2300      	movs	r3, #0
 80111a0:	e037      	b.n	8011212 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	685a      	ldr	r2, [r3, #4]
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	8ada      	ldrh	r2, [r3, #22]
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	68dc      	ldr	r4, [r3, #12]
 80111b4:	4610      	mov	r0, r2
 80111b6:	f7f9 fe1b 	bl	800adf0 <lwip_htons>
 80111ba:	4603      	mov	r3, r0
 80111bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	8b1a      	ldrh	r2, [r3, #24]
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	68dc      	ldr	r4, [r3, #12]
 80111c6:	4610      	mov	r0, r2
 80111c8:	f7f9 fe12 	bl	800adf0 <lwip_htons>
 80111cc:	4603      	mov	r3, r0
 80111ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	68dc      	ldr	r4, [r3, #12]
 80111d4:	6838      	ldr	r0, [r7, #0]
 80111d6:	f7f9 fe20 	bl	800ae1a <lwip_htonl>
 80111da:	4603      	mov	r3, r0
 80111dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80111de:	7dfb      	ldrb	r3, [r7, #23]
 80111e0:	089b      	lsrs	r3, r3, #2
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	3305      	adds	r3, #5
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	031b      	lsls	r3, r3, #12
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	4313      	orrs	r3, r2
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	68dc      	ldr	r4, [r3, #12]
 80111fa:	4610      	mov	r0, r2
 80111fc:	f7f9 fdf8 	bl	800adf0 <lwip_htons>
 8011200:	4603      	mov	r3, r0
 8011202:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	2200      	movs	r2, #0
 801120a:	749a      	strb	r2, [r3, #18]
 801120c:	2200      	movs	r2, #0
 801120e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011210:	693b      	ldr	r3, [r7, #16]
}
 8011212:	4618      	mov	r0, r3
 8011214:	371c      	adds	r7, #28
 8011216:	46bd      	mov	sp, r7
 8011218:	bd90      	pop	{r4, r7, pc}
 801121a:	bf00      	nop
 801121c:	080192e4 	.word	0x080192e4
 8011220:	08019318 	.word	0x08019318
 8011224:	08019338 	.word	0x08019338
 8011228:	08019360 	.word	0x08019360
 801122c:	08019384 	.word	0x08019384

08011230 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b086      	sub	sp, #24
 8011234:	af00      	add	r7, sp, #0
 8011236:	607b      	str	r3, [r7, #4]
 8011238:	4603      	mov	r3, r0
 801123a:	73fb      	strb	r3, [r7, #15]
 801123c:	460b      	mov	r3, r1
 801123e:	81bb      	strh	r3, [r7, #12]
 8011240:	4613      	mov	r3, r2
 8011242:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011244:	89bb      	ldrh	r3, [r7, #12]
 8011246:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d105      	bne.n	801125a <tcp_pbuf_prealloc+0x2a>
 801124e:	4b30      	ldr	r3, [pc, #192]	; (8011310 <tcp_pbuf_prealloc+0xe0>)
 8011250:	22e8      	movs	r2, #232	; 0xe8
 8011252:	4930      	ldr	r1, [pc, #192]	; (8011314 <tcp_pbuf_prealloc+0xe4>)
 8011254:	4830      	ldr	r0, [pc, #192]	; (8011318 <tcp_pbuf_prealloc+0xe8>)
 8011256:	f004 fe3f 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801125a:	6a3b      	ldr	r3, [r7, #32]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d105      	bne.n	801126c <tcp_pbuf_prealloc+0x3c>
 8011260:	4b2b      	ldr	r3, [pc, #172]	; (8011310 <tcp_pbuf_prealloc+0xe0>)
 8011262:	22e9      	movs	r2, #233	; 0xe9
 8011264:	492d      	ldr	r1, [pc, #180]	; (801131c <tcp_pbuf_prealloc+0xec>)
 8011266:	482c      	ldr	r0, [pc, #176]	; (8011318 <tcp_pbuf_prealloc+0xe8>)
 8011268:	f004 fe36 	bl	8015ed8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801126c:	89ba      	ldrh	r2, [r7, #12]
 801126e:	897b      	ldrh	r3, [r7, #10]
 8011270:	429a      	cmp	r2, r3
 8011272:	d221      	bcs.n	80112b8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011278:	f003 0302 	and.w	r3, r3, #2
 801127c:	2b00      	cmp	r3, #0
 801127e:	d111      	bne.n	80112a4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011280:	6a3b      	ldr	r3, [r7, #32]
 8011282:	8b5b      	ldrh	r3, [r3, #26]
 8011284:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011288:	2b00      	cmp	r3, #0
 801128a:	d115      	bne.n	80112b8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801128c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011290:	2b00      	cmp	r3, #0
 8011292:	d007      	beq.n	80112a4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011298:	2b00      	cmp	r3, #0
 801129a:	d103      	bne.n	80112a4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d009      	beq.n	80112b8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80112a4:	89bb      	ldrh	r3, [r7, #12]
 80112a6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80112aa:	f023 0203 	bic.w	r2, r3, #3
 80112ae:	897b      	ldrh	r3, [r7, #10]
 80112b0:	4293      	cmp	r3, r2
 80112b2:	bf28      	it	cs
 80112b4:	4613      	movcs	r3, r2
 80112b6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80112b8:	8af9      	ldrh	r1, [r7, #22]
 80112ba:	7bfb      	ldrb	r3, [r7, #15]
 80112bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fa ffb7 	bl	800c234 <pbuf_alloc>
 80112c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d101      	bne.n	80112d2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80112ce:	2300      	movs	r3, #0
 80112d0:	e019      	b.n	8011306 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d006      	beq.n	80112e8 <tcp_pbuf_prealloc+0xb8>
 80112da:	4b0d      	ldr	r3, [pc, #52]	; (8011310 <tcp_pbuf_prealloc+0xe0>)
 80112dc:	f240 120b 	movw	r2, #267	; 0x10b
 80112e0:	490f      	ldr	r1, [pc, #60]	; (8011320 <tcp_pbuf_prealloc+0xf0>)
 80112e2:	480d      	ldr	r0, [pc, #52]	; (8011318 <tcp_pbuf_prealloc+0xe8>)
 80112e4:	f004 fdf8 	bl	8015ed8 <iprintf>
  *oversize = p->len - length;
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	895a      	ldrh	r2, [r3, #10]
 80112ec:	89bb      	ldrh	r3, [r7, #12]
 80112ee:	1ad3      	subs	r3, r2, r3
 80112f0:	b29a      	uxth	r2, r3
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	89ba      	ldrh	r2, [r7, #12]
 80112fa:	811a      	strh	r2, [r3, #8]
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	891a      	ldrh	r2, [r3, #8]
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	815a      	strh	r2, [r3, #10]
  return p;
 8011304:	693b      	ldr	r3, [r7, #16]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	080192e4 	.word	0x080192e4
 8011314:	0801939c 	.word	0x0801939c
 8011318:	08019338 	.word	0x08019338
 801131c:	080193c0 	.word	0x080193c0
 8011320:	080193e0 	.word	0x080193e0

08011324 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b082      	sub	sp, #8
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	460b      	mov	r3, r1
 801132e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d106      	bne.n	8011344 <tcp_write_checks+0x20>
 8011336:	4b33      	ldr	r3, [pc, #204]	; (8011404 <tcp_write_checks+0xe0>)
 8011338:	f240 1233 	movw	r2, #307	; 0x133
 801133c:	4932      	ldr	r1, [pc, #200]	; (8011408 <tcp_write_checks+0xe4>)
 801133e:	4833      	ldr	r0, [pc, #204]	; (801140c <tcp_write_checks+0xe8>)
 8011340:	f004 fdca 	bl	8015ed8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	7d1b      	ldrb	r3, [r3, #20]
 8011348:	2b04      	cmp	r3, #4
 801134a:	d00e      	beq.n	801136a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011350:	2b07      	cmp	r3, #7
 8011352:	d00a      	beq.n	801136a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011358:	2b02      	cmp	r3, #2
 801135a:	d006      	beq.n	801136a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011360:	2b03      	cmp	r3, #3
 8011362:	d002      	beq.n	801136a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011364:	f06f 030a 	mvn.w	r3, #10
 8011368:	e048      	b.n	80113fc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801136a:	887b      	ldrh	r3, [r7, #2]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d101      	bne.n	8011374 <tcp_write_checks+0x50>
    return ERR_OK;
 8011370:	2300      	movs	r3, #0
 8011372:	e043      	b.n	80113fc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801137a:	887a      	ldrh	r2, [r7, #2]
 801137c:	429a      	cmp	r2, r3
 801137e:	d909      	bls.n	8011394 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	8b5b      	ldrh	r3, [r3, #26]
 8011384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011388:	b29a      	uxth	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801138e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011392:	e033      	b.n	80113fc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801139a:	2b08      	cmp	r3, #8
 801139c:	d909      	bls.n	80113b2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	8b5b      	ldrh	r3, [r3, #26]
 80113a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80113ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113b0:	e024      	b.n	80113fc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00f      	beq.n	80113dc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d11a      	bne.n	80113fa <tcp_write_checks+0xd6>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d116      	bne.n	80113fa <tcp_write_checks+0xd6>
 80113cc:	4b0d      	ldr	r3, [pc, #52]	; (8011404 <tcp_write_checks+0xe0>)
 80113ce:	f240 1255 	movw	r2, #341	; 0x155
 80113d2:	490f      	ldr	r1, [pc, #60]	; (8011410 <tcp_write_checks+0xec>)
 80113d4:	480d      	ldr	r0, [pc, #52]	; (801140c <tcp_write_checks+0xe8>)
 80113d6:	f004 fd7f 	bl	8015ed8 <iprintf>
 80113da:	e00e      	b.n	80113fa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d103      	bne.n	80113ec <tcp_write_checks+0xc8>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d006      	beq.n	80113fa <tcp_write_checks+0xd6>
 80113ec:	4b05      	ldr	r3, [pc, #20]	; (8011404 <tcp_write_checks+0xe0>)
 80113ee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80113f2:	4908      	ldr	r1, [pc, #32]	; (8011414 <tcp_write_checks+0xf0>)
 80113f4:	4805      	ldr	r0, [pc, #20]	; (801140c <tcp_write_checks+0xe8>)
 80113f6:	f004 fd6f 	bl	8015ed8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	080192e4 	.word	0x080192e4
 8011408:	080193f4 	.word	0x080193f4
 801140c:	08019338 	.word	0x08019338
 8011410:	08019414 	.word	0x08019414
 8011414:	08019450 	.word	0x08019450

08011418 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011418:	b590      	push	{r4, r7, lr}
 801141a:	b09b      	sub	sp, #108	; 0x6c
 801141c:	af04      	add	r7, sp, #16
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	4611      	mov	r1, r2
 8011424:	461a      	mov	r2, r3
 8011426:	460b      	mov	r3, r1
 8011428:	80fb      	strh	r3, [r7, #6]
 801142a:	4613      	mov	r3, r2
 801142c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801142e:	2300      	movs	r3, #0
 8011430:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011432:	2300      	movs	r3, #0
 8011434:	653b      	str	r3, [r7, #80]	; 0x50
 8011436:	2300      	movs	r3, #0
 8011438:	64fb      	str	r3, [r7, #76]	; 0x4c
 801143a:	2300      	movs	r3, #0
 801143c:	64bb      	str	r3, [r7, #72]	; 0x48
 801143e:	2300      	movs	r3, #0
 8011440:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011442:	2300      	movs	r3, #0
 8011444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011448:	2300      	movs	r3, #0
 801144a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011452:	2300      	movs	r3, #0
 8011454:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011456:	2300      	movs	r3, #0
 8011458:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d109      	bne.n	8011474 <tcp_write+0x5c>
 8011460:	4ba4      	ldr	r3, [pc, #656]	; (80116f4 <tcp_write+0x2dc>)
 8011462:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011466:	49a4      	ldr	r1, [pc, #656]	; (80116f8 <tcp_write+0x2e0>)
 8011468:	48a4      	ldr	r0, [pc, #656]	; (80116fc <tcp_write+0x2e4>)
 801146a:	f004 fd35 	bl	8015ed8 <iprintf>
 801146e:	f06f 030f 	mvn.w	r3, #15
 8011472:	e32a      	b.n	8011aca <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801147a:	085b      	lsrs	r3, r3, #1
 801147c:	b29a      	uxth	r2, r3
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011482:	4293      	cmp	r3, r2
 8011484:	bf28      	it	cs
 8011486:	4613      	movcs	r3, r2
 8011488:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801148a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801148c:	2b00      	cmp	r3, #0
 801148e:	d102      	bne.n	8011496 <tcp_write+0x7e>
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011494:	e000      	b.n	8011498 <tcp_write+0x80>
 8011496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011498:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d109      	bne.n	80114b4 <tcp_write+0x9c>
 80114a0:	4b94      	ldr	r3, [pc, #592]	; (80116f4 <tcp_write+0x2dc>)
 80114a2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80114a6:	4996      	ldr	r1, [pc, #600]	; (8011700 <tcp_write+0x2e8>)
 80114a8:	4894      	ldr	r0, [pc, #592]	; (80116fc <tcp_write+0x2e4>)
 80114aa:	f004 fd15 	bl	8015ed8 <iprintf>
 80114ae:	f06f 030f 	mvn.w	r3, #15
 80114b2:	e30a      	b.n	8011aca <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80114b4:	88fb      	ldrh	r3, [r7, #6]
 80114b6:	4619      	mov	r1, r3
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f7ff ff33 	bl	8011324 <tcp_write_checks>
 80114be:	4603      	mov	r3, r0
 80114c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80114c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d002      	beq.n	80114d2 <tcp_write+0xba>
    return err;
 80114cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80114d0:	e2fb      	b.n	8011aca <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80114dc:	2300      	movs	r3, #0
 80114de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f000 80f6 	beq.w	80116d8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114f0:	653b      	str	r3, [r7, #80]	; 0x50
 80114f2:	e002      	b.n	80114fa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80114f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80114fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1f8      	bne.n	80114f4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011504:	7a9b      	ldrb	r3, [r3, #10]
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	b29b      	uxth	r3, r3
 801150a:	f003 0304 	and.w	r3, r3, #4
 801150e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011510:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011514:	891b      	ldrh	r3, [r3, #8]
 8011516:	4619      	mov	r1, r3
 8011518:	8c3b      	ldrh	r3, [r7, #32]
 801151a:	440b      	add	r3, r1
 801151c:	429a      	cmp	r2, r3
 801151e:	da06      	bge.n	801152e <tcp_write+0x116>
 8011520:	4b74      	ldr	r3, [pc, #464]	; (80116f4 <tcp_write+0x2dc>)
 8011522:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011526:	4977      	ldr	r1, [pc, #476]	; (8011704 <tcp_write+0x2ec>)
 8011528:	4874      	ldr	r0, [pc, #464]	; (80116fc <tcp_write+0x2e4>)
 801152a:	f004 fcd5 	bl	8015ed8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801152e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011530:	891a      	ldrh	r2, [r3, #8]
 8011532:	8c3b      	ldrh	r3, [r7, #32]
 8011534:	4413      	add	r3, r2
 8011536:	b29b      	uxth	r3, r3
 8011538:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011544:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011546:	8a7b      	ldrh	r3, [r7, #18]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d026      	beq.n	801159a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801154c:	8a7b      	ldrh	r3, [r7, #18]
 801154e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011550:	429a      	cmp	r2, r3
 8011552:	d206      	bcs.n	8011562 <tcp_write+0x14a>
 8011554:	4b67      	ldr	r3, [pc, #412]	; (80116f4 <tcp_write+0x2dc>)
 8011556:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801155a:	496b      	ldr	r1, [pc, #428]	; (8011708 <tcp_write+0x2f0>)
 801155c:	4867      	ldr	r0, [pc, #412]	; (80116fc <tcp_write+0x2e4>)
 801155e:	f004 fcbb 	bl	8015ed8 <iprintf>
      seg = last_unsent;
 8011562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011564:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011566:	8a7b      	ldrh	r3, [r7, #18]
 8011568:	88fa      	ldrh	r2, [r7, #6]
 801156a:	4293      	cmp	r3, r2
 801156c:	bf28      	it	cs
 801156e:	4613      	movcs	r3, r2
 8011570:	b29b      	uxth	r3, r3
 8011572:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011574:	4293      	cmp	r3, r2
 8011576:	bf28      	it	cs
 8011578:	4613      	movcs	r3, r2
 801157a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801157c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011580:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011582:	4413      	add	r3, r2
 8011584:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011588:	8a7a      	ldrh	r2, [r7, #18]
 801158a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	b29b      	uxth	r3, r3
 8011590:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011592:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801159a:	8a7b      	ldrh	r3, [r7, #18]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00b      	beq.n	80115b8 <tcp_write+0x1a0>
 80115a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115a4:	88fb      	ldrh	r3, [r7, #6]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d006      	beq.n	80115b8 <tcp_write+0x1a0>
 80115aa:	4b52      	ldr	r3, [pc, #328]	; (80116f4 <tcp_write+0x2dc>)
 80115ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115b0:	4956      	ldr	r1, [pc, #344]	; (801170c <tcp_write+0x2f4>)
 80115b2:	4852      	ldr	r0, [pc, #328]	; (80116fc <tcp_write+0x2e4>)
 80115b4:	f004 fc90 	bl	8015ed8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80115b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115bc:	88fb      	ldrh	r3, [r7, #6]
 80115be:	429a      	cmp	r2, r3
 80115c0:	f080 8167 	bcs.w	8011892 <tcp_write+0x47a>
 80115c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	f000 8163 	beq.w	8011892 <tcp_write+0x47a>
 80115cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ce:	891b      	ldrh	r3, [r3, #8]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f000 815e 	beq.w	8011892 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80115d6:	88fa      	ldrh	r2, [r7, #6]
 80115d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80115dc:	1ad2      	subs	r2, r2, r3
 80115de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80115e0:	4293      	cmp	r3, r2
 80115e2:	bfa8      	it	ge
 80115e4:	4613      	movge	r3, r2
 80115e6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80115e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ea:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80115ec:	797b      	ldrb	r3, [r7, #5]
 80115ee:	f003 0301 	and.w	r3, r3, #1
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d027      	beq.n	8011646 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80115f6:	f107 0012 	add.w	r0, r7, #18
 80115fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80115fc:	8bf9      	ldrh	r1, [r7, #30]
 80115fe:	2301      	movs	r3, #1
 8011600:	9302      	str	r3, [sp, #8]
 8011602:	797b      	ldrb	r3, [r7, #5]
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	4603      	mov	r3, r0
 801160c:	2000      	movs	r0, #0
 801160e:	f7ff fe0f 	bl	8011230 <tcp_pbuf_prealloc>
 8011612:	6578      	str	r0, [r7, #84]	; 0x54
 8011614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011616:	2b00      	cmp	r3, #0
 8011618:	f000 8225 	beq.w	8011a66 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801161c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801161e:	6858      	ldr	r0, [r3, #4]
 8011620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011624:	68ba      	ldr	r2, [r7, #8]
 8011626:	4413      	add	r3, r2
 8011628:	8bfa      	ldrh	r2, [r7, #30]
 801162a:	4619      	mov	r1, r3
 801162c:	f004 fb8f 	bl	8015d4e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011630:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011632:	f7fb f971 	bl	800c918 <pbuf_clen>
 8011636:	4603      	mov	r3, r0
 8011638:	461a      	mov	r2, r3
 801163a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801163e:	4413      	add	r3, r2
 8011640:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011644:	e041      	b.n	80116ca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	637b      	str	r3, [r7, #52]	; 0x34
 801164c:	e002      	b.n	8011654 <tcp_write+0x23c>
 801164e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	637b      	str	r3, [r7, #52]	; 0x34
 8011654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1f8      	bne.n	801164e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801165e:	7b1b      	ldrb	r3, [r3, #12]
 8011660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011664:	2b00      	cmp	r3, #0
 8011666:	d115      	bne.n	8011694 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801166e:	8952      	ldrh	r2, [r2, #10]
 8011670:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011672:	68ba      	ldr	r2, [r7, #8]
 8011674:	429a      	cmp	r2, r3
 8011676:	d10d      	bne.n	8011694 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801167c:	2b00      	cmp	r3, #0
 801167e:	d006      	beq.n	801168e <tcp_write+0x276>
 8011680:	4b1c      	ldr	r3, [pc, #112]	; (80116f4 <tcp_write+0x2dc>)
 8011682:	f240 2231 	movw	r2, #561	; 0x231
 8011686:	4922      	ldr	r1, [pc, #136]	; (8011710 <tcp_write+0x2f8>)
 8011688:	481c      	ldr	r0, [pc, #112]	; (80116fc <tcp_write+0x2e4>)
 801168a:	f004 fc25 	bl	8015ed8 <iprintf>
          extendlen = seglen;
 801168e:	8bfb      	ldrh	r3, [r7, #30]
 8011690:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011692:	e01a      	b.n	80116ca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011694:	8bfb      	ldrh	r3, [r7, #30]
 8011696:	2201      	movs	r2, #1
 8011698:	4619      	mov	r1, r3
 801169a:	2000      	movs	r0, #0
 801169c:	f7fa fdca 	bl	800c234 <pbuf_alloc>
 80116a0:	6578      	str	r0, [r7, #84]	; 0x54
 80116a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f000 81e0 	beq.w	8011a6a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80116aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116ae:	68ba      	ldr	r2, [r7, #8]
 80116b0:	441a      	add	r2, r3
 80116b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80116b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80116b8:	f7fb f92e 	bl	800c918 <pbuf_clen>
 80116bc:	4603      	mov	r3, r0
 80116be:	461a      	mov	r2, r3
 80116c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80116c4:	4413      	add	r3, r2
 80116c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80116ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116ce:	8bfb      	ldrh	r3, [r7, #30]
 80116d0:	4413      	add	r3, r2
 80116d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80116d6:	e0dc      	b.n	8011892 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80116de:	2b00      	cmp	r3, #0
 80116e0:	f000 80d7 	beq.w	8011892 <tcp_write+0x47a>
 80116e4:	4b03      	ldr	r3, [pc, #12]	; (80116f4 <tcp_write+0x2dc>)
 80116e6:	f240 224a 	movw	r2, #586	; 0x24a
 80116ea:	490a      	ldr	r1, [pc, #40]	; (8011714 <tcp_write+0x2fc>)
 80116ec:	4803      	ldr	r0, [pc, #12]	; (80116fc <tcp_write+0x2e4>)
 80116ee:	f004 fbf3 	bl	8015ed8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80116f2:	e0ce      	b.n	8011892 <tcp_write+0x47a>
 80116f4:	080192e4 	.word	0x080192e4
 80116f8:	08019484 	.word	0x08019484
 80116fc:	08019338 	.word	0x08019338
 8011700:	0801949c 	.word	0x0801949c
 8011704:	080194d0 	.word	0x080194d0
 8011708:	080194e8 	.word	0x080194e8
 801170c:	08019508 	.word	0x08019508
 8011710:	08019528 	.word	0x08019528
 8011714:	08019554 	.word	0x08019554
    struct pbuf *p;
    u16_t left = len - pos;
 8011718:	88fa      	ldrh	r2, [r7, #6]
 801171a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801171e:	1ad3      	subs	r3, r2, r3
 8011720:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011722:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011726:	b29b      	uxth	r3, r3
 8011728:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801172e:	8b7a      	ldrh	r2, [r7, #26]
 8011730:	8bbb      	ldrh	r3, [r7, #28]
 8011732:	4293      	cmp	r3, r2
 8011734:	bf28      	it	cs
 8011736:	4613      	movcs	r3, r2
 8011738:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801173a:	797b      	ldrb	r3, [r7, #5]
 801173c:	f003 0301 	and.w	r3, r3, #1
 8011740:	2b00      	cmp	r3, #0
 8011742:	d036      	beq.n	80117b2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011748:	b29a      	uxth	r2, r3
 801174a:	8b3b      	ldrh	r3, [r7, #24]
 801174c:	4413      	add	r3, r2
 801174e:	b299      	uxth	r1, r3
 8011750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011752:	2b00      	cmp	r3, #0
 8011754:	bf0c      	ite	eq
 8011756:	2301      	moveq	r3, #1
 8011758:	2300      	movne	r3, #0
 801175a:	b2db      	uxtb	r3, r3
 801175c:	f107 0012 	add.w	r0, r7, #18
 8011760:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011762:	9302      	str	r3, [sp, #8]
 8011764:	797b      	ldrb	r3, [r7, #5]
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	9300      	str	r3, [sp, #0]
 801176c:	4603      	mov	r3, r0
 801176e:	2036      	movs	r0, #54	; 0x36
 8011770:	f7ff fd5e 	bl	8011230 <tcp_pbuf_prealloc>
 8011774:	6338      	str	r0, [r7, #48]	; 0x30
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	2b00      	cmp	r3, #0
 801177a:	f000 8178 	beq.w	8011a6e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	895b      	ldrh	r3, [r3, #10]
 8011782:	8b3a      	ldrh	r2, [r7, #24]
 8011784:	429a      	cmp	r2, r3
 8011786:	d906      	bls.n	8011796 <tcp_write+0x37e>
 8011788:	4b8c      	ldr	r3, [pc, #560]	; (80119bc <tcp_write+0x5a4>)
 801178a:	f240 2266 	movw	r2, #614	; 0x266
 801178e:	498c      	ldr	r1, [pc, #560]	; (80119c0 <tcp_write+0x5a8>)
 8011790:	488c      	ldr	r0, [pc, #560]	; (80119c4 <tcp_write+0x5ac>)
 8011792:	f004 fba1 	bl	8015ed8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011798:	685a      	ldr	r2, [r3, #4]
 801179a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801179e:	18d0      	adds	r0, r2, r3
 80117a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117a4:	68ba      	ldr	r2, [r7, #8]
 80117a6:	4413      	add	r3, r2
 80117a8:	8b3a      	ldrh	r2, [r7, #24]
 80117aa:	4619      	mov	r1, r3
 80117ac:	f004 facf 	bl	8015d4e <memcpy>
 80117b0:	e02f      	b.n	8011812 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80117b2:	8a7b      	ldrh	r3, [r7, #18]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d006      	beq.n	80117c6 <tcp_write+0x3ae>
 80117b8:	4b80      	ldr	r3, [pc, #512]	; (80119bc <tcp_write+0x5a4>)
 80117ba:	f240 2271 	movw	r2, #625	; 0x271
 80117be:	4982      	ldr	r1, [pc, #520]	; (80119c8 <tcp_write+0x5b0>)
 80117c0:	4880      	ldr	r0, [pc, #512]	; (80119c4 <tcp_write+0x5ac>)
 80117c2:	f004 fb89 	bl	8015ed8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80117c6:	8b3b      	ldrh	r3, [r7, #24]
 80117c8:	2201      	movs	r2, #1
 80117ca:	4619      	mov	r1, r3
 80117cc:	2036      	movs	r0, #54	; 0x36
 80117ce:	f7fa fd31 	bl	800c234 <pbuf_alloc>
 80117d2:	6178      	str	r0, [r7, #20]
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f000 814b 	beq.w	8011a72 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80117dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117e0:	68ba      	ldr	r2, [r7, #8]
 80117e2:	441a      	add	r2, r3
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80117e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117f2:	4619      	mov	r1, r3
 80117f4:	2036      	movs	r0, #54	; 0x36
 80117f6:	f7fa fd1d 	bl	800c234 <pbuf_alloc>
 80117fa:	6338      	str	r0, [r7, #48]	; 0x30
 80117fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d103      	bne.n	801180a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011802:	6978      	ldr	r0, [r7, #20]
 8011804:	f7fa fffa 	bl	800c7fc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011808:	e136      	b.n	8011a78 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801180a:	6979      	ldr	r1, [r7, #20]
 801180c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801180e:	f7fb f8c3 	bl	800c998 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011814:	f7fb f880 	bl	800c918 <pbuf_clen>
 8011818:	4603      	mov	r3, r0
 801181a:	461a      	mov	r2, r3
 801181c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011820:	4413      	add	r3, r2
 8011822:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011826:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801182a:	2b09      	cmp	r3, #9
 801182c:	d903      	bls.n	8011836 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801182e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011830:	f7fa ffe4 	bl	800c7fc <pbuf_free>
      goto memerr;
 8011834:	e120      	b.n	8011a78 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801183a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801183e:	441a      	add	r2, r3
 8011840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011844:	9300      	str	r3, [sp, #0]
 8011846:	4613      	mov	r3, r2
 8011848:	2200      	movs	r2, #0
 801184a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801184c:	68f8      	ldr	r0, [r7, #12]
 801184e:	f7ff fc51 	bl	80110f4 <tcp_create_segment>
 8011852:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011856:	2b00      	cmp	r3, #0
 8011858:	f000 810d 	beq.w	8011a76 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801185e:	2b00      	cmp	r3, #0
 8011860:	d102      	bne.n	8011868 <tcp_write+0x450>
      queue = seg;
 8011862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011864:	647b      	str	r3, [r7, #68]	; 0x44
 8011866:	e00c      	b.n	8011882 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801186a:	2b00      	cmp	r3, #0
 801186c:	d106      	bne.n	801187c <tcp_write+0x464>
 801186e:	4b53      	ldr	r3, [pc, #332]	; (80119bc <tcp_write+0x5a4>)
 8011870:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011874:	4955      	ldr	r1, [pc, #340]	; (80119cc <tcp_write+0x5b4>)
 8011876:	4853      	ldr	r0, [pc, #332]	; (80119c4 <tcp_write+0x5ac>)
 8011878:	f004 fb2e 	bl	8015ed8 <iprintf>
      prev_seg->next = seg;
 801187c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801187e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011880:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011884:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011886:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801188a:	8b3b      	ldrh	r3, [r7, #24]
 801188c:	4413      	add	r3, r2
 801188e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011892:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011896:	88fb      	ldrh	r3, [r7, #6]
 8011898:	429a      	cmp	r2, r3
 801189a:	f4ff af3d 	bcc.w	8011718 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801189e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d02c      	beq.n	80118fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80118a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118aa:	e01e      	b.n	80118ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80118ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ae:	891a      	ldrh	r2, [r3, #8]
 80118b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80118b2:	4413      	add	r3, r2
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80118ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d110      	bne.n	80118e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80118c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118c8:	8952      	ldrh	r2, [r2, #10]
 80118ca:	4413      	add	r3, r2
 80118cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80118ce:	68b9      	ldr	r1, [r7, #8]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f004 fa3c 	bl	8015d4e <memcpy>
        p->len += oversize_used;
 80118d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d8:	895a      	ldrh	r2, [r3, #10]
 80118da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80118dc:	4413      	add	r3, r2
 80118de:	b29a      	uxth	r2, r3
 80118e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1dd      	bne.n	80118ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80118f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118f2:	891a      	ldrh	r2, [r3, #8]
 80118f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80118f6:	4413      	add	r3, r2
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80118fe:	8a7a      	ldrh	r2, [r7, #18]
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011908:	2b00      	cmp	r3, #0
 801190a:	d018      	beq.n	801193e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801190c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801190e:	2b00      	cmp	r3, #0
 8011910:	d106      	bne.n	8011920 <tcp_write+0x508>
 8011912:	4b2a      	ldr	r3, [pc, #168]	; (80119bc <tcp_write+0x5a4>)
 8011914:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011918:	492d      	ldr	r1, [pc, #180]	; (80119d0 <tcp_write+0x5b8>)
 801191a:	482a      	ldr	r0, [pc, #168]	; (80119c4 <tcp_write+0x5ac>)
 801191c:	f004 fadc 	bl	8015ed8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011926:	4618      	mov	r0, r3
 8011928:	f7fb f836 	bl	800c998 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801192e:	891a      	ldrh	r2, [r3, #8]
 8011930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011932:	891b      	ldrh	r3, [r3, #8]
 8011934:	4413      	add	r3, r2
 8011936:	b29a      	uxth	r2, r3
 8011938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801193a:	811a      	strh	r2, [r3, #8]
 801193c:	e037      	b.n	80119ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 801193e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011940:	2b00      	cmp	r3, #0
 8011942:	d034      	beq.n	80119ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011946:	2b00      	cmp	r3, #0
 8011948:	d003      	beq.n	8011952 <tcp_write+0x53a>
 801194a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d106      	bne.n	8011960 <tcp_write+0x548>
 8011952:	4b1a      	ldr	r3, [pc, #104]	; (80119bc <tcp_write+0x5a4>)
 8011954:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011958:	491e      	ldr	r1, [pc, #120]	; (80119d4 <tcp_write+0x5bc>)
 801195a:	481a      	ldr	r0, [pc, #104]	; (80119c4 <tcp_write+0x5ac>)
 801195c:	f004 fabc 	bl	8015ed8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	62bb      	str	r3, [r7, #40]	; 0x28
 8011966:	e009      	b.n	801197c <tcp_write+0x564>
      p->tot_len += extendlen;
 8011968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196a:	891a      	ldrh	r2, [r3, #8]
 801196c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801196e:	4413      	add	r3, r2
 8011970:	b29a      	uxth	r2, r3
 8011972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011974:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	62bb      	str	r3, [r7, #40]	; 0x28
 801197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1f1      	bne.n	8011968 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011986:	891a      	ldrh	r2, [r3, #8]
 8011988:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801198a:	4413      	add	r3, r2
 801198c:	b29a      	uxth	r2, r3
 801198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011990:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011994:	895a      	ldrh	r2, [r3, #10]
 8011996:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011998:	4413      	add	r3, r2
 801199a:	b29a      	uxth	r2, r3
 801199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80119a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119a2:	891a      	ldrh	r2, [r3, #8]
 80119a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119a6:	4413      	add	r3, r2
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80119ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d111      	bne.n	80119d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80119ba:	e010      	b.n	80119de <tcp_write+0x5c6>
 80119bc:	080192e4 	.word	0x080192e4
 80119c0:	08019584 	.word	0x08019584
 80119c4:	08019338 	.word	0x08019338
 80119c8:	080195c4 	.word	0x080195c4
 80119cc:	080195d4 	.word	0x080195d4
 80119d0:	080195e8 	.word	0x080195e8
 80119d4:	08019620 	.word	0x08019620
  } else {
    last_unsent->next = queue;
 80119d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80119e2:	88fb      	ldrh	r3, [r7, #6]
 80119e4:	441a      	add	r2, r3
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	1ad3      	subs	r3, r2, r3
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011a02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00e      	beq.n	8011a2e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d10a      	bne.n	8011a2e <tcp_write+0x616>
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d106      	bne.n	8011a2e <tcp_write+0x616>
 8011a20:	4b2c      	ldr	r3, [pc, #176]	; (8011ad4 <tcp_write+0x6bc>)
 8011a22:	f240 3212 	movw	r2, #786	; 0x312
 8011a26:	492c      	ldr	r1, [pc, #176]	; (8011ad8 <tcp_write+0x6c0>)
 8011a28:	482c      	ldr	r0, [pc, #176]	; (8011adc <tcp_write+0x6c4>)
 8011a2a:	f004 fa55 	bl	8015ed8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d016      	beq.n	8011a62 <tcp_write+0x64a>
 8011a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d012      	beq.n	8011a62 <tcp_write+0x64a>
 8011a3c:	797b      	ldrb	r3, [r7, #5]
 8011a3e:	f003 0302 	and.w	r3, r3, #2
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d10d      	bne.n	8011a62 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	899b      	ldrh	r3, [r3, #12]
 8011a4c:	b29c      	uxth	r4, r3
 8011a4e:	2008      	movs	r0, #8
 8011a50:	f7f9 f9ce 	bl	800adf0 <lwip_htons>
 8011a54:	4603      	mov	r3, r0
 8011a56:	461a      	mov	r2, r3
 8011a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	4322      	orrs	r2, r4
 8011a5e:	b292      	uxth	r2, r2
 8011a60:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011a62:	2300      	movs	r3, #0
 8011a64:	e031      	b.n	8011aca <tcp_write+0x6b2>
          goto memerr;
 8011a66:	bf00      	nop
 8011a68:	e006      	b.n	8011a78 <tcp_write+0x660>
            goto memerr;
 8011a6a:	bf00      	nop
 8011a6c:	e004      	b.n	8011a78 <tcp_write+0x660>
        goto memerr;
 8011a6e:	bf00      	nop
 8011a70:	e002      	b.n	8011a78 <tcp_write+0x660>
        goto memerr;
 8011a72:	bf00      	nop
 8011a74:	e000      	b.n	8011a78 <tcp_write+0x660>
      goto memerr;
 8011a76:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	8b5b      	ldrh	r3, [r3, #26]
 8011a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d002      	beq.n	8011a92 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011a8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011a8e:	f7fa feb5 	bl	800c7fc <pbuf_free>
  }
  if (queue != NULL) {
 8011a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <tcp_write+0x686>
    tcp_segs_free(queue);
 8011a98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011a9a:	f7fc fb6b 	bl	800e174 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d00e      	beq.n	8011ac6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10a      	bne.n	8011ac6 <tcp_write+0x6ae>
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d106      	bne.n	8011ac6 <tcp_write+0x6ae>
 8011ab8:	4b06      	ldr	r3, [pc, #24]	; (8011ad4 <tcp_write+0x6bc>)
 8011aba:	f240 3227 	movw	r2, #807	; 0x327
 8011abe:	4906      	ldr	r1, [pc, #24]	; (8011ad8 <tcp_write+0x6c0>)
 8011ac0:	4806      	ldr	r0, [pc, #24]	; (8011adc <tcp_write+0x6c4>)
 8011ac2:	f004 fa09 	bl	8015ed8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	375c      	adds	r7, #92	; 0x5c
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd90      	pop	{r4, r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	080192e4 	.word	0x080192e4
 8011ad8:	08019658 	.word	0x08019658
 8011adc:	08019338 	.word	0x08019338

08011ae0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011ae0:	b590      	push	{r4, r7, lr}
 8011ae2:	b08b      	sub	sp, #44	; 0x2c
 8011ae4:	af02      	add	r7, sp, #8
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	460b      	mov	r3, r1
 8011aea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011aec:	2300      	movs	r3, #0
 8011aee:	61fb      	str	r3, [r7, #28]
 8011af0:	2300      	movs	r3, #0
 8011af2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011af4:	2300      	movs	r3, #0
 8011af6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d106      	bne.n	8011b0c <tcp_split_unsent_seg+0x2c>
 8011afe:	4b95      	ldr	r3, [pc, #596]	; (8011d54 <tcp_split_unsent_seg+0x274>)
 8011b00:	f240 324b 	movw	r2, #843	; 0x34b
 8011b04:	4994      	ldr	r1, [pc, #592]	; (8011d58 <tcp_split_unsent_seg+0x278>)
 8011b06:	4895      	ldr	r0, [pc, #596]	; (8011d5c <tcp_split_unsent_seg+0x27c>)
 8011b08:	f004 f9e6 	bl	8015ed8 <iprintf>

  useg = pcb->unsent;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b10:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d102      	bne.n	8011b1e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b1c:	e116      	b.n	8011d4c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011b1e:	887b      	ldrh	r3, [r7, #2]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d109      	bne.n	8011b38 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011b24:	4b8b      	ldr	r3, [pc, #556]	; (8011d54 <tcp_split_unsent_seg+0x274>)
 8011b26:	f240 3253 	movw	r2, #851	; 0x353
 8011b2a:	498d      	ldr	r1, [pc, #564]	; (8011d60 <tcp_split_unsent_seg+0x280>)
 8011b2c:	488b      	ldr	r0, [pc, #556]	; (8011d5c <tcp_split_unsent_seg+0x27c>)
 8011b2e:	f004 f9d3 	bl	8015ed8 <iprintf>
    return ERR_VAL;
 8011b32:	f06f 0305 	mvn.w	r3, #5
 8011b36:	e109      	b.n	8011d4c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	891b      	ldrh	r3, [r3, #8]
 8011b3c:	887a      	ldrh	r2, [r7, #2]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d301      	bcc.n	8011b46 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011b42:	2300      	movs	r3, #0
 8011b44:	e102      	b.n	8011d4c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b4a:	887a      	ldrh	r2, [r7, #2]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d906      	bls.n	8011b5e <tcp_split_unsent_seg+0x7e>
 8011b50:	4b80      	ldr	r3, [pc, #512]	; (8011d54 <tcp_split_unsent_seg+0x274>)
 8011b52:	f240 325b 	movw	r2, #859	; 0x35b
 8011b56:	4983      	ldr	r1, [pc, #524]	; (8011d64 <tcp_split_unsent_seg+0x284>)
 8011b58:	4880      	ldr	r0, [pc, #512]	; (8011d5c <tcp_split_unsent_seg+0x27c>)
 8011b5a:	f004 f9bd 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	891b      	ldrh	r3, [r3, #8]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d106      	bne.n	8011b74 <tcp_split_unsent_seg+0x94>
 8011b66:	4b7b      	ldr	r3, [pc, #492]	; (8011d54 <tcp_split_unsent_seg+0x274>)
 8011b68:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011b6c:	497e      	ldr	r1, [pc, #504]	; (8011d68 <tcp_split_unsent_seg+0x288>)
 8011b6e:	487b      	ldr	r0, [pc, #492]	; (8011d5c <tcp_split_unsent_seg+0x27c>)
 8011b70:	f004 f9b2 	bl	8015ed8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	7a9b      	ldrb	r3, [r3, #10]
 8011b78:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011b7a:	7bfb      	ldrb	r3, [r7, #15]
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	f003 0304 	and.w	r3, r3, #4
 8011b84:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	891a      	ldrh	r2, [r3, #8]
 8011b8a:	887b      	ldrh	r3, [r7, #2]
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011b90:	7bbb      	ldrb	r3, [r7, #14]
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	89bb      	ldrh	r3, [r7, #12]
 8011b96:	4413      	add	r3, r2
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	2036      	movs	r0, #54	; 0x36
 8011ba2:	f7fa fb47 	bl	800c234 <pbuf_alloc>
 8011ba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	f000 80b7 	beq.w	8011d1e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	891a      	ldrh	r2, [r3, #8]
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	891b      	ldrh	r3, [r3, #8]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	b29a      	uxth	r2, r3
 8011bbe:	887b      	ldrh	r3, [r7, #2]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	6858      	ldr	r0, [r3, #4]
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	685a      	ldr	r2, [r3, #4]
 8011bcc:	7bbb      	ldrb	r3, [r7, #14]
 8011bce:	18d1      	adds	r1, r2, r3
 8011bd0:	897b      	ldrh	r3, [r7, #10]
 8011bd2:	89ba      	ldrh	r2, [r7, #12]
 8011bd4:	f7fb f808 	bl	800cbe8 <pbuf_copy_partial>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	461a      	mov	r2, r3
 8011bdc:	89bb      	ldrh	r3, [r7, #12]
 8011bde:	4293      	cmp	r3, r2
 8011be0:	f040 809f 	bne.w	8011d22 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	899b      	ldrh	r3, [r3, #12]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f9 f8ff 	bl	800adf0 <lwip_htons>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011bfa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011c00:	7efb      	ldrb	r3, [r7, #27]
 8011c02:	f003 0308 	and.w	r3, r3, #8
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d007      	beq.n	8011c1a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011c0a:	7efb      	ldrb	r3, [r7, #27]
 8011c0c:	f023 0308 	bic.w	r3, r3, #8
 8011c10:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011c12:	7ebb      	ldrb	r3, [r7, #26]
 8011c14:	f043 0308 	orr.w	r3, r3, #8
 8011c18:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011c1a:	7efb      	ldrb	r3, [r7, #27]
 8011c1c:	f003 0301 	and.w	r3, r3, #1
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d007      	beq.n	8011c34 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011c24:	7efb      	ldrb	r3, [r7, #27]
 8011c26:	f023 0301 	bic.w	r3, r3, #1
 8011c2a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011c2c:	7ebb      	ldrb	r3, [r7, #26]
 8011c2e:	f043 0301 	orr.w	r3, r3, #1
 8011c32:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7f9 f8ed 	bl	800ae1a <lwip_htonl>
 8011c40:	4602      	mov	r2, r0
 8011c42:	887b      	ldrh	r3, [r7, #2]
 8011c44:	18d1      	adds	r1, r2, r3
 8011c46:	7eba      	ldrb	r2, [r7, #26]
 8011c48:	7bfb      	ldrb	r3, [r7, #15]
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	6939      	ldr	r1, [r7, #16]
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f7ff fa4f 	bl	80110f4 <tcp_create_segment>
 8011c56:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d063      	beq.n	8011d26 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fa fe58 	bl	800c918 <pbuf_clen>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c72:	1a9b      	subs	r3, r3, r2
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	6858      	ldr	r0, [r3, #4]
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	891a      	ldrh	r2, [r3, #8]
 8011c86:	89bb      	ldrh	r3, [r7, #12]
 8011c88:	1ad3      	subs	r3, r2, r3
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	f7fa fc2f 	bl	800c4f0 <pbuf_realloc>
  useg->len -= remainder;
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	891a      	ldrh	r2, [r3, #8]
 8011c96:	89bb      	ldrh	r3, [r7, #12]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	899b      	ldrh	r3, [r3, #12]
 8011ca6:	b29c      	uxth	r4, r3
 8011ca8:	7efb      	ldrb	r3, [r7, #27]
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7f9 f89f 	bl	800adf0 <lwip_htons>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	4322      	orrs	r2, r4
 8011cbc:	b292      	uxth	r2, r2
 8011cbe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fa fe27 	bl	800c918 <pbuf_clen>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	461a      	mov	r2, r3
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cd4:	4413      	add	r3, r2
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fa fe18 	bl	800c918 <pbuf_clen>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	461a      	mov	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cf2:	4413      	add	r3, r2
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	69fa      	ldr	r2, [r7, #28]
 8011d08:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d103      	bne.n	8011d1a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	e016      	b.n	8011d4c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011d1e:	bf00      	nop
 8011d20:	e002      	b.n	8011d28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d22:	bf00      	nop
 8011d24:	e000      	b.n	8011d28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d26:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d006      	beq.n	8011d3c <tcp_split_unsent_seg+0x25c>
 8011d2e:	4b09      	ldr	r3, [pc, #36]	; (8011d54 <tcp_split_unsent_seg+0x274>)
 8011d30:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011d34:	490d      	ldr	r1, [pc, #52]	; (8011d6c <tcp_split_unsent_seg+0x28c>)
 8011d36:	4809      	ldr	r0, [pc, #36]	; (8011d5c <tcp_split_unsent_seg+0x27c>)
 8011d38:	f004 f8ce 	bl	8015ed8 <iprintf>
  if (p != NULL) {
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011d42:	6938      	ldr	r0, [r7, #16]
 8011d44:	f7fa fd5a 	bl	800c7fc <pbuf_free>
  }

  return ERR_MEM;
 8011d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3724      	adds	r7, #36	; 0x24
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd90      	pop	{r4, r7, pc}
 8011d54:	080192e4 	.word	0x080192e4
 8011d58:	08019678 	.word	0x08019678
 8011d5c:	08019338 	.word	0x08019338
 8011d60:	0801969c 	.word	0x0801969c
 8011d64:	080196c0 	.word	0x080196c0
 8011d68:	080196d0 	.word	0x080196d0
 8011d6c:	080196e0 	.word	0x080196e0

08011d70 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011d70:	b590      	push	{r4, r7, lr}
 8011d72:	b085      	sub	sp, #20
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d106      	bne.n	8011d8c <tcp_send_fin+0x1c>
 8011d7e:	4b21      	ldr	r3, [pc, #132]	; (8011e04 <tcp_send_fin+0x94>)
 8011d80:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011d84:	4920      	ldr	r1, [pc, #128]	; (8011e08 <tcp_send_fin+0x98>)
 8011d86:	4821      	ldr	r0, [pc, #132]	; (8011e0c <tcp_send_fin+0x9c>)
 8011d88:	f004 f8a6 	bl	8015ed8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d02e      	beq.n	8011df2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d98:	60fb      	str	r3, [r7, #12]
 8011d9a:	e002      	b.n	8011da2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1f8      	bne.n	8011d9c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	68db      	ldr	r3, [r3, #12]
 8011dae:	899b      	ldrh	r3, [r3, #12]
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7f9 f81c 	bl	800adf0 <lwip_htons>
 8011db8:	4603      	mov	r3, r0
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	f003 0307 	and.w	r3, r3, #7
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d116      	bne.n	8011df2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	68db      	ldr	r3, [r3, #12]
 8011dc8:	899b      	ldrh	r3, [r3, #12]
 8011dca:	b29c      	uxth	r4, r3
 8011dcc:	2001      	movs	r0, #1
 8011dce:	f7f9 f80f 	bl	800adf0 <lwip_htons>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	4322      	orrs	r2, r4
 8011ddc:	b292      	uxth	r2, r2
 8011dde:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	8b5b      	ldrh	r3, [r3, #26]
 8011de4:	f043 0320 	orr.w	r3, r3, #32
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	e004      	b.n	8011dfc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011df2:	2101      	movs	r1, #1
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 f80b 	bl	8011e10 <tcp_enqueue_flags>
 8011dfa:	4603      	mov	r3, r0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3714      	adds	r7, #20
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd90      	pop	{r4, r7, pc}
 8011e04:	080192e4 	.word	0x080192e4
 8011e08:	080196ec 	.word	0x080196ec
 8011e0c:	08019338 	.word	0x08019338

08011e10 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b08a      	sub	sp, #40	; 0x28
 8011e14:	af02      	add	r7, sp, #8
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011e20:	2300      	movs	r3, #0
 8011e22:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011e24:	78fb      	ldrb	r3, [r7, #3]
 8011e26:	f003 0303 	and.w	r3, r3, #3
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d106      	bne.n	8011e3c <tcp_enqueue_flags+0x2c>
 8011e2e:	4b67      	ldr	r3, [pc, #412]	; (8011fcc <tcp_enqueue_flags+0x1bc>)
 8011e30:	f240 4211 	movw	r2, #1041	; 0x411
 8011e34:	4966      	ldr	r1, [pc, #408]	; (8011fd0 <tcp_enqueue_flags+0x1c0>)
 8011e36:	4867      	ldr	r0, [pc, #412]	; (8011fd4 <tcp_enqueue_flags+0x1c4>)
 8011e38:	f004 f84e 	bl	8015ed8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d106      	bne.n	8011e50 <tcp_enqueue_flags+0x40>
 8011e42:	4b62      	ldr	r3, [pc, #392]	; (8011fcc <tcp_enqueue_flags+0x1bc>)
 8011e44:	f240 4213 	movw	r2, #1043	; 0x413
 8011e48:	4963      	ldr	r1, [pc, #396]	; (8011fd8 <tcp_enqueue_flags+0x1c8>)
 8011e4a:	4862      	ldr	r0, [pc, #392]	; (8011fd4 <tcp_enqueue_flags+0x1c4>)
 8011e4c:	f004 f844 	bl	8015ed8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011e50:	78fb      	ldrb	r3, [r7, #3]
 8011e52:	f003 0302 	and.w	r3, r3, #2
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d001      	beq.n	8011e5e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e5e:	7ffb      	ldrb	r3, [r7, #31]
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	f003 0304 	and.w	r3, r3, #4
 8011e68:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011e6a:	7dfb      	ldrb	r3, [r7, #23]
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e72:	4619      	mov	r1, r3
 8011e74:	2036      	movs	r0, #54	; 0x36
 8011e76:	f7fa f9dd 	bl	800c234 <pbuf_alloc>
 8011e7a:	6138      	str	r0, [r7, #16]
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d109      	bne.n	8011e96 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	8b5b      	ldrh	r3, [r3, #26]
 8011e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e94:	e095      	b.n	8011fc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	895a      	ldrh	r2, [r3, #10]
 8011e9a:	7dfb      	ldrb	r3, [r7, #23]
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d206      	bcs.n	8011eb0 <tcp_enqueue_flags+0xa0>
 8011ea2:	4b4a      	ldr	r3, [pc, #296]	; (8011fcc <tcp_enqueue_flags+0x1bc>)
 8011ea4:	f240 4239 	movw	r2, #1081	; 0x439
 8011ea8:	494c      	ldr	r1, [pc, #304]	; (8011fdc <tcp_enqueue_flags+0x1cc>)
 8011eaa:	484a      	ldr	r0, [pc, #296]	; (8011fd4 <tcp_enqueue_flags+0x1c4>)
 8011eac:	f004 f814 	bl	8015ed8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011eb4:	78fa      	ldrb	r2, [r7, #3]
 8011eb6:	7ffb      	ldrb	r3, [r7, #31]
 8011eb8:	9300      	str	r3, [sp, #0]
 8011eba:	460b      	mov	r3, r1
 8011ebc:	6939      	ldr	r1, [r7, #16]
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f7ff f918 	bl	80110f4 <tcp_create_segment>
 8011ec4:	60f8      	str	r0, [r7, #12]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d109      	bne.n	8011ee0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	8b5b      	ldrh	r3, [r3, #26]
 8011ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ede:	e070      	b.n	8011fc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	f003 0303 	and.w	r3, r3, #3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d006      	beq.n	8011efa <tcp_enqueue_flags+0xea>
 8011eec:	4b37      	ldr	r3, [pc, #220]	; (8011fcc <tcp_enqueue_flags+0x1bc>)
 8011eee:	f240 4242 	movw	r2, #1090	; 0x442
 8011ef2:	493b      	ldr	r1, [pc, #236]	; (8011fe0 <tcp_enqueue_flags+0x1d0>)
 8011ef4:	4837      	ldr	r0, [pc, #220]	; (8011fd4 <tcp_enqueue_flags+0x1c4>)
 8011ef6:	f003 ffef 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	891b      	ldrh	r3, [r3, #8]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d006      	beq.n	8011f10 <tcp_enqueue_flags+0x100>
 8011f02:	4b32      	ldr	r3, [pc, #200]	; (8011fcc <tcp_enqueue_flags+0x1bc>)
 8011f04:	f240 4243 	movw	r2, #1091	; 0x443
 8011f08:	4936      	ldr	r1, [pc, #216]	; (8011fe4 <tcp_enqueue_flags+0x1d4>)
 8011f0a:	4832      	ldr	r0, [pc, #200]	; (8011fd4 <tcp_enqueue_flags+0x1c4>)
 8011f0c:	f003 ffe4 	bl	8015ed8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d103      	bne.n	8011f20 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f1e:	e00d      	b.n	8011f3c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f24:	61bb      	str	r3, [r7, #24]
 8011f26:	e002      	b.n	8011f2e <tcp_enqueue_flags+0x11e>
 8011f28:	69bb      	ldr	r3, [r7, #24]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	61bb      	str	r3, [r7, #24]
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1f8      	bne.n	8011f28 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011f44:	78fb      	ldrb	r3, [r7, #3]
 8011f46:	f003 0302 	and.w	r3, r3, #2
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d104      	bne.n	8011f58 <tcp_enqueue_flags+0x148>
 8011f4e:	78fb      	ldrb	r3, [r7, #3]
 8011f50:	f003 0301 	and.w	r3, r3, #1
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d004      	beq.n	8011f62 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f5c:	1c5a      	adds	r2, r3, #1
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011f62:	78fb      	ldrb	r3, [r7, #3]
 8011f64:	f003 0301 	and.w	r3, r3, #1
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d006      	beq.n	8011f7a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	8b5b      	ldrh	r3, [r3, #26]
 8011f70:	f043 0320 	orr.w	r3, r3, #32
 8011f74:	b29a      	uxth	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fa fcca 	bl	800c918 <pbuf_clen>
 8011f84:	4603      	mov	r3, r0
 8011f86:	461a      	mov	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f8e:	4413      	add	r3, r2
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d00e      	beq.n	8011fc0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10a      	bne.n	8011fc0 <tcp_enqueue_flags+0x1b0>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d106      	bne.n	8011fc0 <tcp_enqueue_flags+0x1b0>
 8011fb2:	4b06      	ldr	r3, [pc, #24]	; (8011fcc <tcp_enqueue_flags+0x1bc>)
 8011fb4:	f240 4265 	movw	r2, #1125	; 0x465
 8011fb8:	490b      	ldr	r1, [pc, #44]	; (8011fe8 <tcp_enqueue_flags+0x1d8>)
 8011fba:	4806      	ldr	r0, [pc, #24]	; (8011fd4 <tcp_enqueue_flags+0x1c4>)
 8011fbc:	f003 ff8c 	bl	8015ed8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011fc0:	2300      	movs	r3, #0
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3720      	adds	r7, #32
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	080192e4 	.word	0x080192e4
 8011fd0:	08019708 	.word	0x08019708
 8011fd4:	08019338 	.word	0x08019338
 8011fd8:	08019760 	.word	0x08019760
 8011fdc:	08019780 	.word	0x08019780
 8011fe0:	080197bc 	.word	0x080197bc
 8011fe4:	080197d4 	.word	0x080197d4
 8011fe8:	08019800 	.word	0x08019800

08011fec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011fec:	b5b0      	push	{r4, r5, r7, lr}
 8011fee:	b08a      	sub	sp, #40	; 0x28
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d106      	bne.n	8012008 <tcp_output+0x1c>
 8011ffa:	4b8a      	ldr	r3, [pc, #552]	; (8012224 <tcp_output+0x238>)
 8011ffc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012000:	4989      	ldr	r1, [pc, #548]	; (8012228 <tcp_output+0x23c>)
 8012002:	488a      	ldr	r0, [pc, #552]	; (801222c <tcp_output+0x240>)
 8012004:	f003 ff68 	bl	8015ed8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	7d1b      	ldrb	r3, [r3, #20]
 801200c:	2b01      	cmp	r3, #1
 801200e:	d106      	bne.n	801201e <tcp_output+0x32>
 8012010:	4b84      	ldr	r3, [pc, #528]	; (8012224 <tcp_output+0x238>)
 8012012:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012016:	4986      	ldr	r1, [pc, #536]	; (8012230 <tcp_output+0x244>)
 8012018:	4884      	ldr	r0, [pc, #528]	; (801222c <tcp_output+0x240>)
 801201a:	f003 ff5d 	bl	8015ed8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801201e:	4b85      	ldr	r3, [pc, #532]	; (8012234 <tcp_output+0x248>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	429a      	cmp	r2, r3
 8012026:	d101      	bne.n	801202c <tcp_output+0x40>
    return ERR_OK;
 8012028:	2300      	movs	r3, #0
 801202a:	e1ce      	b.n	80123ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012038:	4293      	cmp	r3, r2
 801203a:	bf28      	it	cs
 801203c:	4613      	movcs	r3, r2
 801203e:	b29b      	uxth	r3, r3
 8012040:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012046:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204a:	2b00      	cmp	r3, #0
 801204c:	d10b      	bne.n	8012066 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	8b5b      	ldrh	r3, [r3, #26]
 8012052:	f003 0302 	and.w	r3, r3, #2
 8012056:	2b00      	cmp	r3, #0
 8012058:	f000 81aa 	beq.w	80123b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 fded 	bl	8012c3c <tcp_send_empty_ack>
 8012062:	4603      	mov	r3, r0
 8012064:	e1b1      	b.n	80123ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012066:	6879      	ldr	r1, [r7, #4]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	3304      	adds	r3, #4
 801206c:	461a      	mov	r2, r3
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7ff f824 	bl	80110bc <tcp_route>
 8012074:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d102      	bne.n	8012082 <tcp_output+0x96>
    return ERR_RTE;
 801207c:	f06f 0303 	mvn.w	r3, #3
 8012080:	e1a3      	b.n	80123ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d003      	beq.n	8012090 <tcp_output+0xa4>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d111      	bne.n	80120b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d002      	beq.n	801209c <tcp_output+0xb0>
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	3304      	adds	r3, #4
 801209a:	e000      	b.n	801209e <tcp_output+0xb2>
 801209c:	2300      	movs	r3, #0
 801209e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d102      	bne.n	80120ac <tcp_output+0xc0>
      return ERR_RTE;
 80120a6:	f06f 0303 	mvn.w	r3, #3
 80120aa:	e18e      	b.n	80123ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7f8 fead 	bl	800ae1a <lwip_htonl>
 80120c0:	4602      	mov	r2, r0
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120c6:	1ad3      	subs	r3, r2, r3
 80120c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120ca:	8912      	ldrh	r2, [r2, #8]
 80120cc:	4413      	add	r3, r2
 80120ce:	69ba      	ldr	r2, [r7, #24]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d227      	bcs.n	8012124 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120da:	461a      	mov	r2, r3
 80120dc:	69bb      	ldr	r3, [r7, #24]
 80120de:	4293      	cmp	r3, r2
 80120e0:	d114      	bne.n	801210c <tcp_output+0x120>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d110      	bne.n	801210c <tcp_output+0x120>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d10b      	bne.n	801210c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2200      	movs	r2, #0
 80120f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2201      	movs	r2, #1
 8012100:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2200      	movs	r2, #0
 8012108:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	8b5b      	ldrh	r3, [r3, #26]
 8012110:	f003 0302 	and.w	r3, r3, #2
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 814d 	beq.w	80123b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 fd8e 	bl	8012c3c <tcp_send_empty_ack>
 8012120:	4603      	mov	r3, r0
 8012122:	e152      	b.n	80123ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012130:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012132:	6a3b      	ldr	r3, [r7, #32]
 8012134:	2b00      	cmp	r3, #0
 8012136:	f000 811c 	beq.w	8012372 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801213a:	e002      	b.n	8012142 <tcp_output+0x156>
 801213c:	6a3b      	ldr	r3, [r7, #32]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	623b      	str	r3, [r7, #32]
 8012142:	6a3b      	ldr	r3, [r7, #32]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1f8      	bne.n	801213c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801214a:	e112      	b.n	8012372 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214e:	68db      	ldr	r3, [r3, #12]
 8012150:	899b      	ldrh	r3, [r3, #12]
 8012152:	b29b      	uxth	r3, r3
 8012154:	4618      	mov	r0, r3
 8012156:	f7f8 fe4b 	bl	800adf0 <lwip_htons>
 801215a:	4603      	mov	r3, r0
 801215c:	b2db      	uxtb	r3, r3
 801215e:	f003 0304 	and.w	r3, r3, #4
 8012162:	2b00      	cmp	r3, #0
 8012164:	d006      	beq.n	8012174 <tcp_output+0x188>
 8012166:	4b2f      	ldr	r3, [pc, #188]	; (8012224 <tcp_output+0x238>)
 8012168:	f240 5236 	movw	r2, #1334	; 0x536
 801216c:	4932      	ldr	r1, [pc, #200]	; (8012238 <tcp_output+0x24c>)
 801216e:	482f      	ldr	r0, [pc, #188]	; (801222c <tcp_output+0x240>)
 8012170:	f003 feb2 	bl	8015ed8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012178:	2b00      	cmp	r3, #0
 801217a:	d01f      	beq.n	80121bc <tcp_output+0x1d0>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	8b5b      	ldrh	r3, [r3, #26]
 8012180:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012184:	2b00      	cmp	r3, #0
 8012186:	d119      	bne.n	80121bc <tcp_output+0x1d0>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00b      	beq.n	80121a8 <tcp_output+0x1bc>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d110      	bne.n	80121bc <tcp_output+0x1d0>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801219e:	891a      	ldrh	r2, [r3, #8]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d209      	bcs.n	80121bc <tcp_output+0x1d0>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d004      	beq.n	80121bc <tcp_output+0x1d0>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121b8:	2b08      	cmp	r3, #8
 80121ba:	d901      	bls.n	80121c0 <tcp_output+0x1d4>
 80121bc:	2301      	movs	r3, #1
 80121be:	e000      	b.n	80121c2 <tcp_output+0x1d6>
 80121c0:	2300      	movs	r3, #0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d106      	bne.n	80121d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8b5b      	ldrh	r3, [r3, #26]
 80121ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f000 80e4 	beq.w	801239c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	7d1b      	ldrb	r3, [r3, #20]
 80121d8:	2b02      	cmp	r3, #2
 80121da:	d00d      	beq.n	80121f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80121dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	899b      	ldrh	r3, [r3, #12]
 80121e2:	b29c      	uxth	r4, r3
 80121e4:	2010      	movs	r0, #16
 80121e6:	f7f8 fe03 	bl	800adf0 <lwip_htons>
 80121ea:	4603      	mov	r3, r0
 80121ec:	461a      	mov	r2, r3
 80121ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	4322      	orrs	r2, r4
 80121f4:	b292      	uxth	r2, r2
 80121f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80121f8:	697a      	ldr	r2, [r7, #20]
 80121fa:	6879      	ldr	r1, [r7, #4]
 80121fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121fe:	f000 f909 	bl	8012414 <tcp_output_segment>
 8012202:	4603      	mov	r3, r0
 8012204:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d016      	beq.n	801223c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	8b5b      	ldrh	r3, [r3, #26]
 8012212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012216:	b29a      	uxth	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	835a      	strh	r2, [r3, #26]
      return err;
 801221c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012220:	e0d3      	b.n	80123ca <tcp_output+0x3de>
 8012222:	bf00      	nop
 8012224:	080192e4 	.word	0x080192e4
 8012228:	08019828 	.word	0x08019828
 801222c:	08019338 	.word	0x08019338
 8012230:	08019840 	.word	0x08019840
 8012234:	20011990 	.word	0x20011990
 8012238:	08019868 	.word	0x08019868
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	7d1b      	ldrb	r3, [r3, #20]
 8012248:	2b02      	cmp	r3, #2
 801224a:	d006      	beq.n	801225a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8b5b      	ldrh	r3, [r3, #26]
 8012250:	f023 0303 	bic.w	r3, r3, #3
 8012254:	b29a      	uxth	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	f7f8 fdda 	bl	800ae1a <lwip_htonl>
 8012266:	4604      	mov	r4, r0
 8012268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226a:	891b      	ldrh	r3, [r3, #8]
 801226c:	461d      	mov	r5, r3
 801226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012270:	68db      	ldr	r3, [r3, #12]
 8012272:	899b      	ldrh	r3, [r3, #12]
 8012274:	b29b      	uxth	r3, r3
 8012276:	4618      	mov	r0, r3
 8012278:	f7f8 fdba 	bl	800adf0 <lwip_htons>
 801227c:	4603      	mov	r3, r0
 801227e:	b2db      	uxtb	r3, r3
 8012280:	f003 0303 	and.w	r3, r3, #3
 8012284:	2b00      	cmp	r3, #0
 8012286:	d001      	beq.n	801228c <tcp_output+0x2a0>
 8012288:	2301      	movs	r3, #1
 801228a:	e000      	b.n	801228e <tcp_output+0x2a2>
 801228c:	2300      	movs	r3, #0
 801228e:	442b      	add	r3, r5
 8012290:	4423      	add	r3, r4
 8012292:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	1ad3      	subs	r3, r2, r3
 801229c:	2b00      	cmp	r3, #0
 801229e:	da02      	bge.n	80122a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	68ba      	ldr	r2, [r7, #8]
 80122a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80122a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a8:	891b      	ldrh	r3, [r3, #8]
 80122aa:	461c      	mov	r4, r3
 80122ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	899b      	ldrh	r3, [r3, #12]
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7f8 fd9b 	bl	800adf0 <lwip_htons>
 80122ba:	4603      	mov	r3, r0
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	f003 0303 	and.w	r3, r3, #3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <tcp_output+0x2de>
 80122c6:	2301      	movs	r3, #1
 80122c8:	e000      	b.n	80122cc <tcp_output+0x2e0>
 80122ca:	2300      	movs	r3, #0
 80122cc:	4423      	add	r3, r4
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d049      	beq.n	8012366 <tcp_output+0x37a>
      seg->next = NULL;
 80122d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d4:	2200      	movs	r2, #0
 80122d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d105      	bne.n	80122ec <tcp_output+0x300>
        pcb->unacked = seg;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80122e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e8:	623b      	str	r3, [r7, #32]
 80122ea:	e03f      	b.n	801236c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80122ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ee:	68db      	ldr	r3, [r3, #12]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7f8 fd91 	bl	800ae1a <lwip_htonl>
 80122f8:	4604      	mov	r4, r0
 80122fa:	6a3b      	ldr	r3, [r7, #32]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	f7f8 fd8a 	bl	800ae1a <lwip_htonl>
 8012306:	4603      	mov	r3, r0
 8012308:	1ae3      	subs	r3, r4, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	da24      	bge.n	8012358 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	3370      	adds	r3, #112	; 0x70
 8012312:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012314:	e002      	b.n	801231c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d011      	beq.n	8012348 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	4618      	mov	r0, r3
 801232e:	f7f8 fd74 	bl	800ae1a <lwip_htonl>
 8012332:	4604      	mov	r4, r0
 8012334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	4618      	mov	r0, r3
 801233c:	f7f8 fd6d 	bl	800ae1a <lwip_htonl>
 8012340:	4603      	mov	r3, r0
 8012342:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012344:	2b00      	cmp	r3, #0
 8012346:	dbe6      	blt.n	8012316 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	681a      	ldr	r2, [r3, #0]
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	e009      	b.n	801236c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801235c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801235e:	6a3b      	ldr	r3, [r7, #32]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	623b      	str	r3, [r7, #32]
 8012364:	e002      	b.n	801236c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012368:	f7fb ff19 	bl	800e19e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012370:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012374:	2b00      	cmp	r3, #0
 8012376:	d012      	beq.n	801239e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	4618      	mov	r0, r3
 8012380:	f7f8 fd4b 	bl	800ae1a <lwip_htonl>
 8012384:	4602      	mov	r2, r0
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801238e:	8912      	ldrh	r2, [r2, #8]
 8012390:	4413      	add	r3, r2
  while (seg != NULL &&
 8012392:	69ba      	ldr	r2, [r7, #24]
 8012394:	429a      	cmp	r2, r3
 8012396:	f4bf aed9 	bcs.w	801214c <tcp_output+0x160>
 801239a:	e000      	b.n	801239e <tcp_output+0x3b2>
      break;
 801239c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d108      	bne.n	80123b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2200      	movs	r2, #0
 80123aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80123ae:	e004      	b.n	80123ba <tcp_output+0x3ce>
    goto output_done;
 80123b0:	bf00      	nop
 80123b2:	e002      	b.n	80123ba <tcp_output+0x3ce>
    goto output_done;
 80123b4:	bf00      	nop
 80123b6:	e000      	b.n	80123ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80123b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	8b5b      	ldrh	r3, [r3, #26]
 80123be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80123c8:	2300      	movs	r3, #0
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3728      	adds	r7, #40	; 0x28
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bdb0      	pop	{r4, r5, r7, pc}
 80123d2:	bf00      	nop

080123d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d106      	bne.n	80123f0 <tcp_output_segment_busy+0x1c>
 80123e2:	4b09      	ldr	r3, [pc, #36]	; (8012408 <tcp_output_segment_busy+0x34>)
 80123e4:	f240 529a 	movw	r2, #1434	; 0x59a
 80123e8:	4908      	ldr	r1, [pc, #32]	; (801240c <tcp_output_segment_busy+0x38>)
 80123ea:	4809      	ldr	r0, [pc, #36]	; (8012410 <tcp_output_segment_busy+0x3c>)
 80123ec:	f003 fd74 	bl	8015ed8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	7b9b      	ldrb	r3, [r3, #14]
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d001      	beq.n	80123fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e000      	b.n	8012400 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80123fe:	2300      	movs	r3, #0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3708      	adds	r7, #8
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	080192e4 	.word	0x080192e4
 801240c:	08019880 	.word	0x08019880
 8012410:	08019338 	.word	0x08019338

08012414 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012414:	b5b0      	push	{r4, r5, r7, lr}
 8012416:	b08c      	sub	sp, #48	; 0x30
 8012418:	af04      	add	r7, sp, #16
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d106      	bne.n	8012434 <tcp_output_segment+0x20>
 8012426:	4b6c      	ldr	r3, [pc, #432]	; (80125d8 <tcp_output_segment+0x1c4>)
 8012428:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801242c:	496b      	ldr	r1, [pc, #428]	; (80125dc <tcp_output_segment+0x1c8>)
 801242e:	486c      	ldr	r0, [pc, #432]	; (80125e0 <tcp_output_segment+0x1cc>)
 8012430:	f003 fd52 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d106      	bne.n	8012448 <tcp_output_segment+0x34>
 801243a:	4b67      	ldr	r3, [pc, #412]	; (80125d8 <tcp_output_segment+0x1c4>)
 801243c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012440:	4968      	ldr	r1, [pc, #416]	; (80125e4 <tcp_output_segment+0x1d0>)
 8012442:	4867      	ldr	r0, [pc, #412]	; (80125e0 <tcp_output_segment+0x1cc>)
 8012444:	f003 fd48 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d106      	bne.n	801245c <tcp_output_segment+0x48>
 801244e:	4b62      	ldr	r3, [pc, #392]	; (80125d8 <tcp_output_segment+0x1c4>)
 8012450:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012454:	4964      	ldr	r1, [pc, #400]	; (80125e8 <tcp_output_segment+0x1d4>)
 8012456:	4862      	ldr	r0, [pc, #392]	; (80125e0 <tcp_output_segment+0x1cc>)
 8012458:	f003 fd3e 	bl	8015ed8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f7ff ffb9 	bl	80123d4 <tcp_output_segment_busy>
 8012462:	4603      	mov	r3, r0
 8012464:	2b00      	cmp	r3, #0
 8012466:	d001      	beq.n	801246c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012468:	2300      	movs	r3, #0
 801246a:	e0b1      	b.n	80125d0 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	68dc      	ldr	r4, [r3, #12]
 8012474:	4610      	mov	r0, r2
 8012476:	f7f8 fcd0 	bl	800ae1a <lwip_htonl>
 801247a:	4603      	mov	r3, r0
 801247c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	68dc      	ldr	r4, [r3, #12]
 8012486:	4610      	mov	r0, r2
 8012488:	f7f8 fcb2 	bl	800adf0 <lwip_htons>
 801248c:	4603      	mov	r3, r0
 801248e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012494:	68ba      	ldr	r2, [r7, #8]
 8012496:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012498:	441a      	add	r2, r3
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	3314      	adds	r3, #20
 80124a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	7a9b      	ldrb	r3, [r3, #10]
 80124aa:	f003 0301 	and.w	r3, r3, #1
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d015      	beq.n	80124de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	3304      	adds	r3, #4
 80124b6:	461a      	mov	r2, r3
 80124b8:	6879      	ldr	r1, [r7, #4]
 80124ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 80124be:	f7fc fa33 	bl	800e928 <tcp_eff_send_mss_netif>
 80124c2:	4603      	mov	r3, r0
 80124c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80124c6:	8b7b      	ldrh	r3, [r7, #26]
 80124c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7f8 fca4 	bl	800ae1a <lwip_htonl>
 80124d2:	4602      	mov	r2, r0
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	3304      	adds	r3, #4
 80124dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	da02      	bge.n	80124ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	2200      	movs	r2, #0
 80124ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d10c      	bne.n	8012510 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80124f6:	4b3d      	ldr	r3, [pc, #244]	; (80125ec <tcp_output_segment+0x1d8>)
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	4618      	mov	r0, r3
 8012506:	f7f8 fc88 	bl	800ae1a <lwip_htonl>
 801250a:	4602      	mov	r2, r0
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	68da      	ldr	r2, [r3, #12]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	8959      	ldrh	r1, [r3, #10]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	8b3a      	ldrh	r2, [r7, #24]
 801252a:	1a8a      	subs	r2, r1, r2
 801252c:	b292      	uxth	r2, r2
 801252e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	8919      	ldrh	r1, [r3, #8]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	8b3a      	ldrh	r2, [r7, #24]
 801253c:	1a8a      	subs	r2, r1, r2
 801253e:	b292      	uxth	r2, r2
 8012540:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	68fa      	ldr	r2, [r7, #12]
 8012548:	68d2      	ldr	r2, [r2, #12]
 801254a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	68db      	ldr	r3, [r3, #12]
 8012550:	2200      	movs	r2, #0
 8012552:	741a      	strb	r2, [r3, #16]
 8012554:	2200      	movs	r2, #0
 8012556:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	f103 0214 	add.w	r2, r3, #20
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	7a9b      	ldrb	r3, [r3, #10]
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	f003 0304 	and.w	r3, r3, #4
 801256a:	4413      	add	r3, r2
 801256c:	69fa      	ldr	r2, [r7, #28]
 801256e:	429a      	cmp	r2, r3
 8012570:	d006      	beq.n	8012580 <tcp_output_segment+0x16c>
 8012572:	4b19      	ldr	r3, [pc, #100]	; (80125d8 <tcp_output_segment+0x1c4>)
 8012574:	f240 621c 	movw	r2, #1564	; 0x61c
 8012578:	491d      	ldr	r1, [pc, #116]	; (80125f0 <tcp_output_segment+0x1dc>)
 801257a:	4819      	ldr	r0, [pc, #100]	; (80125e0 <tcp_output_segment+0x1cc>)
 801257c:	f003 fcac 	bl	8015ed8 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012588:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801258a:	68bd      	ldr	r5, [r7, #8]
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012590:	68fa      	ldr	r2, [r7, #12]
 8012592:	68d4      	ldr	r4, [r2, #12]
 8012594:	9300      	str	r3, [sp, #0]
 8012596:	462b      	mov	r3, r5
 8012598:	460a      	mov	r2, r1
 801259a:	2106      	movs	r1, #6
 801259c:	f7f8 fd5a 	bl	800b054 <ip_chksum_pseudo>
 80125a0:	4603      	mov	r3, r0
 80125a2:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	6858      	ldr	r0, [r3, #4]
 80125a8:	68b9      	ldr	r1, [r7, #8]
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	1d1c      	adds	r4, r3, #4
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	7add      	ldrb	r5, [r3, #11]
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	7a9b      	ldrb	r3, [r3, #10]
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	9202      	str	r2, [sp, #8]
 80125ba:	2206      	movs	r2, #6
 80125bc:	9201      	str	r2, [sp, #4]
 80125be:	9300      	str	r3, [sp, #0]
 80125c0:	462b      	mov	r3, r5
 80125c2:	4622      	mov	r2, r4
 80125c4:	f002 f8b2 	bl	801472c <ip4_output_if>
 80125c8:	4603      	mov	r3, r0
 80125ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80125cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3720      	adds	r7, #32
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bdb0      	pop	{r4, r5, r7, pc}
 80125d8:	080192e4 	.word	0x080192e4
 80125dc:	080198a8 	.word	0x080198a8
 80125e0:	08019338 	.word	0x08019338
 80125e4:	080198c8 	.word	0x080198c8
 80125e8:	080198e8 	.word	0x080198e8
 80125ec:	20011944 	.word	0x20011944
 80125f0:	0801990c 	.word	0x0801990c

080125f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80125f4:	b5b0      	push	{r4, r5, r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d106      	bne.n	8012610 <tcp_rexmit_rto_prepare+0x1c>
 8012602:	4b31      	ldr	r3, [pc, #196]	; (80126c8 <tcp_rexmit_rto_prepare+0xd4>)
 8012604:	f240 6263 	movw	r2, #1635	; 0x663
 8012608:	4930      	ldr	r1, [pc, #192]	; (80126cc <tcp_rexmit_rto_prepare+0xd8>)
 801260a:	4831      	ldr	r0, [pc, #196]	; (80126d0 <tcp_rexmit_rto_prepare+0xdc>)
 801260c:	f003 fc64 	bl	8015ed8 <iprintf>

  if (pcb->unacked == NULL) {
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012618:	f06f 0305 	mvn.w	r3, #5
 801261c:	e050      	b.n	80126c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012622:	60fb      	str	r3, [r7, #12]
 8012624:	e00b      	b.n	801263e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7ff fed4 	bl	80123d4 <tcp_output_segment_busy>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012632:	f06f 0305 	mvn.w	r3, #5
 8012636:	e043      	b.n	80126c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	60fb      	str	r3, [r7, #12]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d1ef      	bne.n	8012626 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012646:	68f8      	ldr	r0, [r7, #12]
 8012648:	f7ff fec4 	bl	80123d4 <tcp_output_segment_busy>
 801264c:	4603      	mov	r3, r0
 801264e:	2b00      	cmp	r3, #0
 8012650:	d002      	beq.n	8012658 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012652:	f06f 0305 	mvn.w	r3, #5
 8012656:	e033      	b.n	80126c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2200      	movs	r2, #0
 801266c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	8b5b      	ldrh	r3, [r3, #26]
 8012672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012676:	b29a      	uxth	r2, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	4618      	mov	r0, r3
 8012684:	f7f8 fbc9 	bl	800ae1a <lwip_htonl>
 8012688:	4604      	mov	r4, r0
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	891b      	ldrh	r3, [r3, #8]
 801268e:	461d      	mov	r5, r3
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	899b      	ldrh	r3, [r3, #12]
 8012696:	b29b      	uxth	r3, r3
 8012698:	4618      	mov	r0, r3
 801269a:	f7f8 fba9 	bl	800adf0 <lwip_htons>
 801269e:	4603      	mov	r3, r0
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	f003 0303 	and.w	r3, r3, #3
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <tcp_rexmit_rto_prepare+0xba>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e000      	b.n	80126b0 <tcp_rexmit_rto_prepare+0xbc>
 80126ae:	2300      	movs	r3, #0
 80126b0:	442b      	add	r3, r5
 80126b2:	18e2      	adds	r2, r4, r3
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2200      	movs	r2, #0
 80126bc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80126be:	2300      	movs	r3, #0
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3710      	adds	r7, #16
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bdb0      	pop	{r4, r5, r7, pc}
 80126c8:	080192e4 	.word	0x080192e4
 80126cc:	08019920 	.word	0x08019920
 80126d0:	08019338 	.word	0x08019338

080126d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d106      	bne.n	80126f0 <tcp_rexmit_rto_commit+0x1c>
 80126e2:	4b0d      	ldr	r3, [pc, #52]	; (8012718 <tcp_rexmit_rto_commit+0x44>)
 80126e4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80126e8:	490c      	ldr	r1, [pc, #48]	; (801271c <tcp_rexmit_rto_commit+0x48>)
 80126ea:	480d      	ldr	r0, [pc, #52]	; (8012720 <tcp_rexmit_rto_commit+0x4c>)
 80126ec:	f003 fbf4 	bl	8015ed8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126f6:	2bff      	cmp	r3, #255	; 0xff
 80126f8:	d007      	beq.n	801270a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012700:	3301      	adds	r3, #1
 8012702:	b2da      	uxtb	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f7ff fc6e 	bl	8011fec <tcp_output>
}
 8012710:	bf00      	nop
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	080192e4 	.word	0x080192e4
 801271c:	08019944 	.word	0x08019944
 8012720:	08019338 	.word	0x08019338

08012724 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d106      	bne.n	8012740 <tcp_rexmit_rto+0x1c>
 8012732:	4b0a      	ldr	r3, [pc, #40]	; (801275c <tcp_rexmit_rto+0x38>)
 8012734:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012738:	4909      	ldr	r1, [pc, #36]	; (8012760 <tcp_rexmit_rto+0x3c>)
 801273a:	480a      	ldr	r0, [pc, #40]	; (8012764 <tcp_rexmit_rto+0x40>)
 801273c:	f003 fbcc 	bl	8015ed8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7ff ff57 	bl	80125f4 <tcp_rexmit_rto_prepare>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d102      	bne.n	8012752 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7ff ffc1 	bl	80126d4 <tcp_rexmit_rto_commit>
  }
}
 8012752:	bf00      	nop
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	080192e4 	.word	0x080192e4
 8012760:	08019968 	.word	0x08019968
 8012764:	08019338 	.word	0x08019338

08012768 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012768:	b590      	push	{r4, r7, lr}
 801276a:	b085      	sub	sp, #20
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d106      	bne.n	8012784 <tcp_rexmit+0x1c>
 8012776:	4b2f      	ldr	r3, [pc, #188]	; (8012834 <tcp_rexmit+0xcc>)
 8012778:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801277c:	492e      	ldr	r1, [pc, #184]	; (8012838 <tcp_rexmit+0xd0>)
 801277e:	482f      	ldr	r0, [pc, #188]	; (801283c <tcp_rexmit+0xd4>)
 8012780:	f003 fbaa 	bl	8015ed8 <iprintf>

  if (pcb->unacked == NULL) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012788:	2b00      	cmp	r3, #0
 801278a:	d102      	bne.n	8012792 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801278c:	f06f 0305 	mvn.w	r3, #5
 8012790:	e04c      	b.n	801282c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012796:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012798:	68b8      	ldr	r0, [r7, #8]
 801279a:	f7ff fe1b 	bl	80123d4 <tcp_output_segment_busy>
 801279e:	4603      	mov	r3, r0
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d002      	beq.n	80127aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80127a4:	f06f 0305 	mvn.w	r3, #5
 80127a8:	e040      	b.n	801282c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	336c      	adds	r3, #108	; 0x6c
 80127b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80127b8:	e002      	b.n	80127c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d011      	beq.n	80127ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7f8 fb22 	bl	800ae1a <lwip_htonl>
 80127d6:	4604      	mov	r4, r0
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	4618      	mov	r0, r3
 80127e0:	f7f8 fb1b 	bl	800ae1a <lwip_htonl>
 80127e4:	4603      	mov	r3, r0
 80127e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	dbe6      	blt.n	80127ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	68ba      	ldr	r2, [r7, #8]
 80127f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d103      	bne.n	801280a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2200      	movs	r2, #0
 8012806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012810:	2bff      	cmp	r3, #255	; 0xff
 8012812:	d007      	beq.n	8012824 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801281a:	3301      	adds	r3, #1
 801281c:	b2da      	uxtb	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2200      	movs	r2, #0
 8012828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801282a:	2300      	movs	r3, #0
}
 801282c:	4618      	mov	r0, r3
 801282e:	3714      	adds	r7, #20
 8012830:	46bd      	mov	sp, r7
 8012832:	bd90      	pop	{r4, r7, pc}
 8012834:	080192e4 	.word	0x080192e4
 8012838:	08019984 	.word	0x08019984
 801283c:	08019338 	.word	0x08019338

08012840 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d106      	bne.n	801285c <tcp_rexmit_fast+0x1c>
 801284e:	4b2a      	ldr	r3, [pc, #168]	; (80128f8 <tcp_rexmit_fast+0xb8>)
 8012850:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012854:	4929      	ldr	r1, [pc, #164]	; (80128fc <tcp_rexmit_fast+0xbc>)
 8012856:	482a      	ldr	r0, [pc, #168]	; (8012900 <tcp_rexmit_fast+0xc0>)
 8012858:	f003 fb3e 	bl	8015ed8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012860:	2b00      	cmp	r3, #0
 8012862:	d045      	beq.n	80128f0 <tcp_rexmit_fast+0xb0>
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	8b5b      	ldrh	r3, [r3, #26]
 8012868:	f003 0304 	and.w	r3, r3, #4
 801286c:	2b00      	cmp	r3, #0
 801286e:	d13f      	bne.n	80128f0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7ff ff79 	bl	8012768 <tcp_rexmit>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d139      	bne.n	80128f0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012888:	4293      	cmp	r3, r2
 801288a:	bf28      	it	cs
 801288c:	4613      	movcs	r3, r2
 801288e:	b29b      	uxth	r3, r3
 8012890:	2b00      	cmp	r3, #0
 8012892:	da00      	bge.n	8012896 <tcp_rexmit_fast+0x56>
 8012894:	3301      	adds	r3, #1
 8012896:	105b      	asrs	r3, r3, #1
 8012898:	b29a      	uxth	r2, r3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80128a6:	461a      	mov	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d206      	bcs.n	80128c0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	b29a      	uxth	r2, r3
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128ca:	4619      	mov	r1, r3
 80128cc:	0049      	lsls	r1, r1, #1
 80128ce:	440b      	add	r3, r1
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	4413      	add	r3, r2
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	8b5b      	ldrh	r3, [r3, #26]
 80128e0:	f043 0304 	orr.w	r3, r3, #4
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2200      	movs	r2, #0
 80128ee:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80128f0:	bf00      	nop
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	080192e4 	.word	0x080192e4
 80128fc:	0801999c 	.word	0x0801999c
 8012900:	08019338 	.word	0x08019338

08012904 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b086      	sub	sp, #24
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	607b      	str	r3, [r7, #4]
 801290e:	460b      	mov	r3, r1
 8012910:	817b      	strh	r3, [r7, #10]
 8012912:	4613      	mov	r3, r2
 8012914:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012916:	897a      	ldrh	r2, [r7, #10]
 8012918:	893b      	ldrh	r3, [r7, #8]
 801291a:	4413      	add	r3, r2
 801291c:	b29b      	uxth	r3, r3
 801291e:	3314      	adds	r3, #20
 8012920:	b29b      	uxth	r3, r3
 8012922:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012926:	4619      	mov	r1, r3
 8012928:	2022      	movs	r0, #34	; 0x22
 801292a:	f7f9 fc83 	bl	800c234 <pbuf_alloc>
 801292e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d04d      	beq.n	80129d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012936:	897b      	ldrh	r3, [r7, #10]
 8012938:	3313      	adds	r3, #19
 801293a:	697a      	ldr	r2, [r7, #20]
 801293c:	8952      	ldrh	r2, [r2, #10]
 801293e:	4293      	cmp	r3, r2
 8012940:	db06      	blt.n	8012950 <tcp_output_alloc_header_common+0x4c>
 8012942:	4b26      	ldr	r3, [pc, #152]	; (80129dc <tcp_output_alloc_header_common+0xd8>)
 8012944:	f240 7223 	movw	r2, #1827	; 0x723
 8012948:	4925      	ldr	r1, [pc, #148]	; (80129e0 <tcp_output_alloc_header_common+0xdc>)
 801294a:	4826      	ldr	r0, [pc, #152]	; (80129e4 <tcp_output_alloc_header_common+0xe0>)
 801294c:	f003 fac4 	bl	8015ed8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012956:	8c3b      	ldrh	r3, [r7, #32]
 8012958:	4618      	mov	r0, r3
 801295a:	f7f8 fa49 	bl	800adf0 <lwip_htons>
 801295e:	4603      	mov	r3, r0
 8012960:	461a      	mov	r2, r3
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012968:	4618      	mov	r0, r3
 801296a:	f7f8 fa41 	bl	800adf0 <lwip_htons>
 801296e:	4603      	mov	r3, r0
 8012970:	461a      	mov	r2, r3
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f7f8 fa4c 	bl	800ae1a <lwip_htonl>
 8012982:	4602      	mov	r2, r0
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012988:	897b      	ldrh	r3, [r7, #10]
 801298a:	089b      	lsrs	r3, r3, #2
 801298c:	b29b      	uxth	r3, r3
 801298e:	3305      	adds	r3, #5
 8012990:	b29b      	uxth	r3, r3
 8012992:	031b      	lsls	r3, r3, #12
 8012994:	b29a      	uxth	r2, r3
 8012996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801299a:	b29b      	uxth	r3, r3
 801299c:	4313      	orrs	r3, r2
 801299e:	b29b      	uxth	r3, r3
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7f8 fa25 	bl	800adf0 <lwip_htons>
 80129a6:	4603      	mov	r3, r0
 80129a8:	461a      	mov	r2, r3
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80129ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7f8 fa1d 	bl	800adf0 <lwip_htons>
 80129b6:	4603      	mov	r3, r0
 80129b8:	461a      	mov	r2, r3
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	2200      	movs	r2, #0
 80129c2:	741a      	strb	r2, [r3, #16]
 80129c4:	2200      	movs	r2, #0
 80129c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	2200      	movs	r2, #0
 80129cc:	749a      	strb	r2, [r3, #18]
 80129ce:	2200      	movs	r2, #0
 80129d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80129d2:	697b      	ldr	r3, [r7, #20]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3718      	adds	r7, #24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	080192e4 	.word	0x080192e4
 80129e0:	080199bc 	.word	0x080199bc
 80129e4:	08019338 	.word	0x08019338

080129e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80129e8:	b5b0      	push	{r4, r5, r7, lr}
 80129ea:	b08a      	sub	sp, #40	; 0x28
 80129ec:	af04      	add	r7, sp, #16
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	607b      	str	r3, [r7, #4]
 80129f2:	460b      	mov	r3, r1
 80129f4:	817b      	strh	r3, [r7, #10]
 80129f6:	4613      	mov	r3, r2
 80129f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d106      	bne.n	8012a0e <tcp_output_alloc_header+0x26>
 8012a00:	4b15      	ldr	r3, [pc, #84]	; (8012a58 <tcp_output_alloc_header+0x70>)
 8012a02:	f240 7242 	movw	r2, #1858	; 0x742
 8012a06:	4915      	ldr	r1, [pc, #84]	; (8012a5c <tcp_output_alloc_header+0x74>)
 8012a08:	4815      	ldr	r0, [pc, #84]	; (8012a60 <tcp_output_alloc_header+0x78>)
 8012a0a:	f003 fa65 	bl	8015ed8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	8adb      	ldrh	r3, [r3, #22]
 8012a16:	68fa      	ldr	r2, [r7, #12]
 8012a18:	8b12      	ldrh	r2, [r2, #24]
 8012a1a:	68f9      	ldr	r1, [r7, #12]
 8012a1c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012a1e:	893d      	ldrh	r5, [r7, #8]
 8012a20:	897c      	ldrh	r4, [r7, #10]
 8012a22:	9103      	str	r1, [sp, #12]
 8012a24:	2110      	movs	r1, #16
 8012a26:	9102      	str	r1, [sp, #8]
 8012a28:	9201      	str	r2, [sp, #4]
 8012a2a:	9300      	str	r3, [sp, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	462a      	mov	r2, r5
 8012a30:	4621      	mov	r1, r4
 8012a32:	f7ff ff67 	bl	8012904 <tcp_output_alloc_header_common>
 8012a36:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d006      	beq.n	8012a4c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a42:	68fa      	ldr	r2, [r7, #12]
 8012a44:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012a46:	441a      	add	r2, r3
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012a4c:	697b      	ldr	r3, [r7, #20]
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3718      	adds	r7, #24
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bdb0      	pop	{r4, r5, r7, pc}
 8012a56:	bf00      	nop
 8012a58:	080192e4 	.word	0x080192e4
 8012a5c:	080199ec 	.word	0x080199ec
 8012a60:	08019338 	.word	0x08019338

08012a64 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b088      	sub	sp, #32
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	4611      	mov	r1, r2
 8012a70:	461a      	mov	r2, r3
 8012a72:	460b      	mov	r3, r1
 8012a74:	71fb      	strb	r3, [r7, #7]
 8012a76:	4613      	mov	r3, r2
 8012a78:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <tcp_output_fill_options+0x2e>
 8012a84:	4b13      	ldr	r3, [pc, #76]	; (8012ad4 <tcp_output_fill_options+0x70>)
 8012a86:	f240 7256 	movw	r2, #1878	; 0x756
 8012a8a:	4913      	ldr	r1, [pc, #76]	; (8012ad8 <tcp_output_fill_options+0x74>)
 8012a8c:	4813      	ldr	r0, [pc, #76]	; (8012adc <tcp_output_fill_options+0x78>)
 8012a8e:	f003 fa23 	bl	8015ed8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	3314      	adds	r3, #20
 8012a9c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012a9e:	69bb      	ldr	r3, [r7, #24]
 8012aa0:	f103 0214 	add.w	r2, r3, #20
 8012aa4:	8bfb      	ldrh	r3, [r7, #30]
 8012aa6:	009b      	lsls	r3, r3, #2
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	79fb      	ldrb	r3, [r7, #7]
 8012aac:	009b      	lsls	r3, r3, #2
 8012aae:	f003 0304 	and.w	r3, r3, #4
 8012ab2:	440b      	add	r3, r1
 8012ab4:	4413      	add	r3, r2
 8012ab6:	697a      	ldr	r2, [r7, #20]
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d006      	beq.n	8012aca <tcp_output_fill_options+0x66>
 8012abc:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <tcp_output_fill_options+0x70>)
 8012abe:	f240 7275 	movw	r2, #1909	; 0x775
 8012ac2:	4907      	ldr	r1, [pc, #28]	; (8012ae0 <tcp_output_fill_options+0x7c>)
 8012ac4:	4805      	ldr	r0, [pc, #20]	; (8012adc <tcp_output_fill_options+0x78>)
 8012ac6:	f003 fa07 	bl	8015ed8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012aca:	bf00      	nop
 8012acc:	3720      	adds	r7, #32
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	080192e4 	.word	0x080192e4
 8012ad8:	08019a14 	.word	0x08019a14
 8012adc:	08019338 	.word	0x08019338
 8012ae0:	0801990c 	.word	0x0801990c

08012ae4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b08c      	sub	sp, #48	; 0x30
 8012ae8:	af04      	add	r7, sp, #16
 8012aea:	60f8      	str	r0, [r7, #12]
 8012aec:	60b9      	str	r1, [r7, #8]
 8012aee:	607a      	str	r2, [r7, #4]
 8012af0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d106      	bne.n	8012b06 <tcp_output_control_segment+0x22>
 8012af8:	4b24      	ldr	r3, [pc, #144]	; (8012b8c <tcp_output_control_segment+0xa8>)
 8012afa:	f240 7287 	movw	r2, #1927	; 0x787
 8012afe:	4924      	ldr	r1, [pc, #144]	; (8012b90 <tcp_output_control_segment+0xac>)
 8012b00:	4824      	ldr	r0, [pc, #144]	; (8012b94 <tcp_output_control_segment+0xb0>)
 8012b02:	f003 f9e9 	bl	8015ed8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012b06:	683a      	ldr	r2, [r7, #0]
 8012b08:	6879      	ldr	r1, [r7, #4]
 8012b0a:	68f8      	ldr	r0, [r7, #12]
 8012b0c:	f7fe fad6 	bl	80110bc <tcp_route>
 8012b10:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8012b12:	69bb      	ldr	r3, [r7, #24]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d102      	bne.n	8012b1e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012b18:	23fc      	movs	r3, #252	; 0xfc
 8012b1a:	77fb      	strb	r3, [r7, #31]
 8012b1c:	e02c      	b.n	8012b78 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	891a      	ldrh	r2, [r3, #8]
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2106      	movs	r1, #6
 8012b30:	68b8      	ldr	r0, [r7, #8]
 8012b32:	f7f8 fa8f 	bl	800b054 <ip_chksum_pseudo>
 8012b36:	4603      	mov	r3, r0
 8012b38:	461a      	mov	r2, r3
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d006      	beq.n	8012b52 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	7adb      	ldrb	r3, [r3, #11]
 8012b48:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	7a9b      	ldrb	r3, [r3, #10]
 8012b4e:	777b      	strb	r3, [r7, #29]
 8012b50:	e003      	b.n	8012b5a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012b52:	23ff      	movs	r3, #255	; 0xff
 8012b54:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8012b56:	2300      	movs	r3, #0
 8012b58:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012b5a:	7fba      	ldrb	r2, [r7, #30]
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	9302      	str	r3, [sp, #8]
 8012b60:	2306      	movs	r3, #6
 8012b62:	9301      	str	r3, [sp, #4]
 8012b64:	7f7b      	ldrb	r3, [r7, #29]
 8012b66:	9300      	str	r3, [sp, #0]
 8012b68:	4613      	mov	r3, r2
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	6879      	ldr	r1, [r7, #4]
 8012b6e:	68b8      	ldr	r0, [r7, #8]
 8012b70:	f001 fddc 	bl	801472c <ip4_output_if>
 8012b74:	4603      	mov	r3, r0
 8012b76:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012b78:	68b8      	ldr	r0, [r7, #8]
 8012b7a:	f7f9 fe3f 	bl	800c7fc <pbuf_free>
  return err;
 8012b7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3720      	adds	r7, #32
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	080192e4 	.word	0x080192e4
 8012b90:	08019a3c 	.word	0x08019a3c
 8012b94:	08019338 	.word	0x08019338

08012b98 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012b98:	b590      	push	{r4, r7, lr}
 8012b9a:	b08b      	sub	sp, #44	; 0x2c
 8012b9c:	af04      	add	r7, sp, #16
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	607a      	str	r2, [r7, #4]
 8012ba4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d106      	bne.n	8012bba <tcp_rst+0x22>
 8012bac:	4b1f      	ldr	r3, [pc, #124]	; (8012c2c <tcp_rst+0x94>)
 8012bae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012bb2:	491f      	ldr	r1, [pc, #124]	; (8012c30 <tcp_rst+0x98>)
 8012bb4:	481f      	ldr	r0, [pc, #124]	; (8012c34 <tcp_rst+0x9c>)
 8012bb6:	f003 f98f 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d106      	bne.n	8012bce <tcp_rst+0x36>
 8012bc0:	4b1a      	ldr	r3, [pc, #104]	; (8012c2c <tcp_rst+0x94>)
 8012bc2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012bc6:	491c      	ldr	r1, [pc, #112]	; (8012c38 <tcp_rst+0xa0>)
 8012bc8:	481a      	ldr	r0, [pc, #104]	; (8012c34 <tcp_rst+0x9c>)
 8012bca:	f003 f985 	bl	8015ed8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012bce:	2300      	movs	r3, #0
 8012bd0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012bd2:	f246 0308 	movw	r3, #24584	; 0x6008
 8012bd6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012bd8:	7dfb      	ldrb	r3, [r7, #23]
 8012bda:	b29c      	uxth	r4, r3
 8012bdc:	68b8      	ldr	r0, [r7, #8]
 8012bde:	f7f8 f91c 	bl	800ae1a <lwip_htonl>
 8012be2:	4602      	mov	r2, r0
 8012be4:	8abb      	ldrh	r3, [r7, #20]
 8012be6:	9303      	str	r3, [sp, #12]
 8012be8:	2314      	movs	r3, #20
 8012bea:	9302      	str	r3, [sp, #8]
 8012bec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012bee:	9301      	str	r3, [sp, #4]
 8012bf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012bf2:	9300      	str	r3, [sp, #0]
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff fe82 	bl	8012904 <tcp_output_alloc_header_common>
 8012c00:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d00c      	beq.n	8012c22 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c08:	7dfb      	ldrb	r3, [r7, #23]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	6939      	ldr	r1, [r7, #16]
 8012c0e:	68f8      	ldr	r0, [r7, #12]
 8012c10:	f7ff ff28 	bl	8012a64 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c16:	683a      	ldr	r2, [r7, #0]
 8012c18:	6939      	ldr	r1, [r7, #16]
 8012c1a:	68f8      	ldr	r0, [r7, #12]
 8012c1c:	f7ff ff62 	bl	8012ae4 <tcp_output_control_segment>
 8012c20:	e000      	b.n	8012c24 <tcp_rst+0x8c>
    return;
 8012c22:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012c24:	371c      	adds	r7, #28
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd90      	pop	{r4, r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	080192e4 	.word	0x080192e4
 8012c30:	08019a68 	.word	0x08019a68
 8012c34:	08019338 	.word	0x08019338
 8012c38:	08019a84 	.word	0x08019a84

08012c3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012c3c:	b590      	push	{r4, r7, lr}
 8012c3e:	b087      	sub	sp, #28
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012c44:	2300      	movs	r3, #0
 8012c46:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d106      	bne.n	8012c60 <tcp_send_empty_ack+0x24>
 8012c52:	4b28      	ldr	r3, [pc, #160]	; (8012cf4 <tcp_send_empty_ack+0xb8>)
 8012c54:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012c58:	4927      	ldr	r1, [pc, #156]	; (8012cf8 <tcp_send_empty_ack+0xbc>)
 8012c5a:	4828      	ldr	r0, [pc, #160]	; (8012cfc <tcp_send_empty_ack+0xc0>)
 8012c5c:	f003 f93c 	bl	8015ed8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c60:	7dfb      	ldrb	r3, [r7, #23]
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	f003 0304 	and.w	r3, r3, #4
 8012c6a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012c6c:	7d7b      	ldrb	r3, [r7, #21]
 8012c6e:	b29c      	uxth	r4, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7f8 f8d0 	bl	800ae1a <lwip_htonl>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	4621      	mov	r1, r4
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7ff feb1 	bl	80129e8 <tcp_output_alloc_header>
 8012c86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d109      	bne.n	8012ca2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	8b5b      	ldrh	r3, [r3, #26]
 8012c92:	f043 0303 	orr.w	r3, r3, #3
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012c9c:	f06f 0301 	mvn.w	r3, #1
 8012ca0:	e023      	b.n	8012cea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012ca2:	7dbb      	ldrb	r3, [r7, #22]
 8012ca4:	7dfa      	ldrb	r2, [r7, #23]
 8012ca6:	6939      	ldr	r1, [r7, #16]
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7ff fedb 	bl	8012a64 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	6939      	ldr	r1, [r7, #16]
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f7ff ff14 	bl	8012ae4 <tcp_output_control_segment>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d007      	beq.n	8012cd8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	8b5b      	ldrh	r3, [r3, #26]
 8012ccc:	f043 0303 	orr.w	r3, r3, #3
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	835a      	strh	r2, [r3, #26]
 8012cd6:	e006      	b.n	8012ce6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	8b5b      	ldrh	r3, [r3, #26]
 8012cdc:	f023 0303 	bic.w	r3, r3, #3
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	371c      	adds	r7, #28
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd90      	pop	{r4, r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	080192e4 	.word	0x080192e4
 8012cf8:	08019aa0 	.word	0x08019aa0
 8012cfc:	08019338 	.word	0x08019338

08012d00 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012d00:	b590      	push	{r4, r7, lr}
 8012d02:	b087      	sub	sp, #28
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d08:	2300      	movs	r3, #0
 8012d0a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d106      	bne.n	8012d20 <tcp_keepalive+0x20>
 8012d12:	4b18      	ldr	r3, [pc, #96]	; (8012d74 <tcp_keepalive+0x74>)
 8012d14:	f640 0224 	movw	r2, #2084	; 0x824
 8012d18:	4917      	ldr	r1, [pc, #92]	; (8012d78 <tcp_keepalive+0x78>)
 8012d1a:	4818      	ldr	r0, [pc, #96]	; (8012d7c <tcp_keepalive+0x7c>)
 8012d1c:	f003 f8dc 	bl	8015ed8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012d20:	7dfb      	ldrb	r3, [r7, #23]
 8012d22:	b29c      	uxth	r4, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d28:	3b01      	subs	r3, #1
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7f8 f875 	bl	800ae1a <lwip_htonl>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2200      	movs	r2, #0
 8012d34:	4621      	mov	r1, r4
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7ff fe56 	bl	80129e8 <tcp_output_alloc_header>
 8012d3c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d102      	bne.n	8012d4a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d48:	e010      	b.n	8012d6c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	6939      	ldr	r1, [r7, #16]
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f7ff fe87 	bl	8012a64 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	3304      	adds	r3, #4
 8012d5c:	6939      	ldr	r1, [r7, #16]
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7ff fec0 	bl	8012ae4 <tcp_output_control_segment>
 8012d64:	4603      	mov	r3, r0
 8012d66:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	371c      	adds	r7, #28
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd90      	pop	{r4, r7, pc}
 8012d74:	080192e4 	.word	0x080192e4
 8012d78:	08019ac0 	.word	0x08019ac0
 8012d7c:	08019338 	.word	0x08019338

08012d80 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012d80:	b590      	push	{r4, r7, lr}
 8012d82:	b08b      	sub	sp, #44	; 0x2c
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d88:	2300      	movs	r3, #0
 8012d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d106      	bne.n	8012da2 <tcp_zero_window_probe+0x22>
 8012d94:	4b4c      	ldr	r3, [pc, #304]	; (8012ec8 <tcp_zero_window_probe+0x148>)
 8012d96:	f640 024f 	movw	r2, #2127	; 0x84f
 8012d9a:	494c      	ldr	r1, [pc, #304]	; (8012ecc <tcp_zero_window_probe+0x14c>)
 8012d9c:	484c      	ldr	r0, [pc, #304]	; (8012ed0 <tcp_zero_window_probe+0x150>)
 8012d9e:	f003 f89b 	bl	8015ed8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012da6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012da8:	6a3b      	ldr	r3, [r7, #32]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d101      	bne.n	8012db2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012dae:	2300      	movs	r3, #0
 8012db0:	e086      	b.n	8012ec0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012db8:	2bff      	cmp	r3, #255	; 0xff
 8012dba:	d007      	beq.n	8012dcc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012dcc:	6a3b      	ldr	r3, [r7, #32]
 8012dce:	68db      	ldr	r3, [r3, #12]
 8012dd0:	899b      	ldrh	r3, [r3, #12]
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7f8 f80b 	bl	800adf0 <lwip_htons>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	f003 0301 	and.w	r3, r3, #1
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d005      	beq.n	8012df2 <tcp_zero_window_probe+0x72>
 8012de6:	6a3b      	ldr	r3, [r7, #32]
 8012de8:	891b      	ldrh	r3, [r3, #8]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d101      	bne.n	8012df2 <tcp_zero_window_probe+0x72>
 8012dee:	2301      	movs	r3, #1
 8012df0:	e000      	b.n	8012df4 <tcp_zero_window_probe+0x74>
 8012df2:	2300      	movs	r3, #0
 8012df4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012df6:	7ffb      	ldrb	r3, [r7, #31]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	bf0c      	ite	eq
 8012dfc:	2301      	moveq	r3, #1
 8012dfe:	2300      	movne	r3, #0
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e08:	b299      	uxth	r1, r3
 8012e0a:	6a3b      	ldr	r3, [r7, #32]
 8012e0c:	68db      	ldr	r3, [r3, #12]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	8bba      	ldrh	r2, [r7, #28]
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7ff fde8 	bl	80129e8 <tcp_output_alloc_header>
 8012e18:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d102      	bne.n	8012e26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e24:	e04c      	b.n	8012ec0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	685b      	ldr	r3, [r3, #4]
 8012e2a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012e2c:	7ffb      	ldrb	r3, [r7, #31]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d011      	beq.n	8012e56 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	899b      	ldrh	r3, [r3, #12]
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	b21b      	sxth	r3, r3
 8012e3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e3e:	b21c      	sxth	r4, r3
 8012e40:	2011      	movs	r0, #17
 8012e42:	f7f7 ffd5 	bl	800adf0 <lwip_htons>
 8012e46:	4603      	mov	r3, r0
 8012e48:	b21b      	sxth	r3, r3
 8012e4a:	4323      	orrs	r3, r4
 8012e4c:	b21b      	sxth	r3, r3
 8012e4e:	b29a      	uxth	r2, r3
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	819a      	strh	r2, [r3, #12]
 8012e54:	e010      	b.n	8012e78 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	3314      	adds	r3, #20
 8012e5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012e5e:	6a3b      	ldr	r3, [r7, #32]
 8012e60:	6858      	ldr	r0, [r3, #4]
 8012e62:	6a3b      	ldr	r3, [r7, #32]
 8012e64:	685b      	ldr	r3, [r3, #4]
 8012e66:	891a      	ldrh	r2, [r3, #8]
 8012e68:	6a3b      	ldr	r3, [r7, #32]
 8012e6a:	891b      	ldrh	r3, [r3, #8]
 8012e6c:	1ad3      	subs	r3, r2, r3
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	2201      	movs	r2, #1
 8012e72:	6939      	ldr	r1, [r7, #16]
 8012e74:	f7f9 feb8 	bl	800cbe8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012e78:	6a3b      	ldr	r3, [r7, #32]
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7f7 ffcb 	bl	800ae1a <lwip_htonl>
 8012e84:	4603      	mov	r3, r0
 8012e86:	3301      	adds	r3, #1
 8012e88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	da02      	bge.n	8012e9c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	69b9      	ldr	r1, [r7, #24]
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7ff fddd 	bl	8012a64 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	3304      	adds	r3, #4
 8012eb0:	69b9      	ldr	r1, [r7, #24]
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f7ff fe16 	bl	8012ae4 <tcp_output_control_segment>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012ebc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	372c      	adds	r7, #44	; 0x2c
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd90      	pop	{r4, r7, pc}
 8012ec8:	080192e4 	.word	0x080192e4
 8012ecc:	08019adc 	.word	0x08019adc
 8012ed0:	08019338 	.word	0x08019338

08012ed4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012edc:	f7f9 ff72 	bl	800cdc4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012ee0:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <tcpip_tcp_timer+0x38>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d103      	bne.n	8012ef0 <tcpip_tcp_timer+0x1c>
 8012ee8:	4b09      	ldr	r3, [pc, #36]	; (8012f10 <tcpip_tcp_timer+0x3c>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d005      	beq.n	8012efc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	4908      	ldr	r1, [pc, #32]	; (8012f14 <tcpip_tcp_timer+0x40>)
 8012ef4:	20fa      	movs	r0, #250	; 0xfa
 8012ef6:	f000 f8f3 	bl	80130e0 <sys_timeout>
 8012efa:	e003      	b.n	8012f04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012efc:	4b06      	ldr	r3, [pc, #24]	; (8012f18 <tcpip_tcp_timer+0x44>)
 8012efe:	2200      	movs	r2, #0
 8012f00:	601a      	str	r2, [r3, #0]
  }
}
 8012f02:	bf00      	nop
 8012f04:	bf00      	nop
 8012f06:	3708      	adds	r7, #8
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	20011950 	.word	0x20011950
 8012f10:	20011954 	.word	0x20011954
 8012f14:	08012ed5 	.word	0x08012ed5
 8012f18:	2001199c 	.word	0x2001199c

08012f1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012f20:	4b0a      	ldr	r3, [pc, #40]	; (8012f4c <tcp_timer_needed+0x30>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10f      	bne.n	8012f48 <tcp_timer_needed+0x2c>
 8012f28:	4b09      	ldr	r3, [pc, #36]	; (8012f50 <tcp_timer_needed+0x34>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d103      	bne.n	8012f38 <tcp_timer_needed+0x1c>
 8012f30:	4b08      	ldr	r3, [pc, #32]	; (8012f54 <tcp_timer_needed+0x38>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d007      	beq.n	8012f48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012f38:	4b04      	ldr	r3, [pc, #16]	; (8012f4c <tcp_timer_needed+0x30>)
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f3e:	2200      	movs	r2, #0
 8012f40:	4905      	ldr	r1, [pc, #20]	; (8012f58 <tcp_timer_needed+0x3c>)
 8012f42:	20fa      	movs	r0, #250	; 0xfa
 8012f44:	f000 f8cc 	bl	80130e0 <sys_timeout>
  }
}
 8012f48:	bf00      	nop
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	2001199c 	.word	0x2001199c
 8012f50:	20011950 	.word	0x20011950
 8012f54:	20011954 	.word	0x20011954
 8012f58:	08012ed5 	.word	0x08012ed5

08012f5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b086      	sub	sp, #24
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012f68:	2009      	movs	r0, #9
 8012f6a:	f7f8 fd31 	bl	800b9d0 <memp_malloc>
 8012f6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d109      	bne.n	8012f8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d151      	bne.n	8013020 <sys_timeout_abs+0xc4>
 8012f7c:	4b2a      	ldr	r3, [pc, #168]	; (8013028 <sys_timeout_abs+0xcc>)
 8012f7e:	22be      	movs	r2, #190	; 0xbe
 8012f80:	492a      	ldr	r1, [pc, #168]	; (801302c <sys_timeout_abs+0xd0>)
 8012f82:	482b      	ldr	r0, [pc, #172]	; (8013030 <sys_timeout_abs+0xd4>)
 8012f84:	f002 ffa8 	bl	8015ed8 <iprintf>
    return;
 8012f88:	e04a      	b.n	8013020 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	68ba      	ldr	r2, [r7, #8]
 8012f94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	68fa      	ldr	r2, [r7, #12]
 8012fa0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012fa2:	4b24      	ldr	r3, [pc, #144]	; (8013034 <sys_timeout_abs+0xd8>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d103      	bne.n	8012fb2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012faa:	4a22      	ldr	r2, [pc, #136]	; (8013034 <sys_timeout_abs+0xd8>)
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	6013      	str	r3, [r2, #0]
    return;
 8012fb0:	e037      	b.n	8013022 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	685a      	ldr	r2, [r3, #4]
 8012fb6:	4b1f      	ldr	r3, [pc, #124]	; (8013034 <sys_timeout_abs+0xd8>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	1ad3      	subs	r3, r2, r3
 8012fbe:	0fdb      	lsrs	r3, r3, #31
 8012fc0:	f003 0301 	and.w	r3, r3, #1
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d007      	beq.n	8012fda <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012fca:	4b1a      	ldr	r3, [pc, #104]	; (8013034 <sys_timeout_abs+0xd8>)
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012fd2:	4a18      	ldr	r2, [pc, #96]	; (8013034 <sys_timeout_abs+0xd8>)
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	6013      	str	r3, [r2, #0]
 8012fd8:	e023      	b.n	8013022 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012fda:	4b16      	ldr	r3, [pc, #88]	; (8013034 <sys_timeout_abs+0xd8>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	617b      	str	r3, [r7, #20]
 8012fe0:	e01a      	b.n	8013018 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d00b      	beq.n	8013002 <sys_timeout_abs+0xa6>
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	685a      	ldr	r2, [r3, #4]
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	0fdb      	lsrs	r3, r3, #31
 8012ff8:	f003 0301 	and.w	r3, r3, #1
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d007      	beq.n	8013012 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	681a      	ldr	r2, [r3, #0]
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	693a      	ldr	r2, [r7, #16]
 801300e:	601a      	str	r2, [r3, #0]
        break;
 8013010:	e007      	b.n	8013022 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	617b      	str	r3, [r7, #20]
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d1e1      	bne.n	8012fe2 <sys_timeout_abs+0x86>
 801301e:	e000      	b.n	8013022 <sys_timeout_abs+0xc6>
    return;
 8013020:	bf00      	nop
      }
    }
  }
}
 8013022:	3718      	adds	r7, #24
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	08019b00 	.word	0x08019b00
 801302c:	08019b34 	.word	0x08019b34
 8013030:	08019b74 	.word	0x08019b74
 8013034:	20011994 	.word	0x20011994

08013038 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b086      	sub	sp, #24
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	4798      	blx	r3

  now = sys_now();
 801304a:	f7f1 fb33 	bl	80046b4 <sys_now>
 801304e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	681a      	ldr	r2, [r3, #0]
 8013054:	4b0f      	ldr	r3, [pc, #60]	; (8013094 <lwip_cyclic_timer+0x5c>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4413      	add	r3, r2
 801305a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801305c:	68fa      	ldr	r2, [r7, #12]
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	1ad3      	subs	r3, r2, r3
 8013062:	0fdb      	lsrs	r3, r3, #31
 8013064:	f003 0301 	and.w	r3, r3, #1
 8013068:	b2db      	uxtb	r3, r3
 801306a:	2b00      	cmp	r3, #0
 801306c:	d009      	beq.n	8013082 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	4413      	add	r3, r2
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	4907      	ldr	r1, [pc, #28]	; (8013098 <lwip_cyclic_timer+0x60>)
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff ff6e 	bl	8012f5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013080:	e004      	b.n	801308c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	4904      	ldr	r1, [pc, #16]	; (8013098 <lwip_cyclic_timer+0x60>)
 8013086:	68f8      	ldr	r0, [r7, #12]
 8013088:	f7ff ff68 	bl	8012f5c <sys_timeout_abs>
}
 801308c:	bf00      	nop
 801308e:	3718      	adds	r7, #24
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	20011998 	.word	0x20011998
 8013098:	08013039 	.word	0x08013039

0801309c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130a2:	2301      	movs	r3, #1
 80130a4:	607b      	str	r3, [r7, #4]
 80130a6:	e00e      	b.n	80130c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80130a8:	4a0b      	ldr	r2, [pc, #44]	; (80130d8 <sys_timeouts_init+0x3c>)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	00db      	lsls	r3, r3, #3
 80130b4:	4a08      	ldr	r2, [pc, #32]	; (80130d8 <sys_timeouts_init+0x3c>)
 80130b6:	4413      	add	r3, r2
 80130b8:	461a      	mov	r2, r3
 80130ba:	4908      	ldr	r1, [pc, #32]	; (80130dc <sys_timeouts_init+0x40>)
 80130bc:	f000 f810 	bl	80130e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	3301      	adds	r3, #1
 80130c4:	607b      	str	r3, [r7, #4]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2b02      	cmp	r3, #2
 80130ca:	d9ed      	bls.n	80130a8 <sys_timeouts_init+0xc>
  }
}
 80130cc:	bf00      	nop
 80130ce:	bf00      	nop
 80130d0:	3708      	adds	r7, #8
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
 80130d6:	bf00      	nop
 80130d8:	0801a428 	.word	0x0801a428
 80130dc:	08013039 	.word	0x08013039

080130e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b086      	sub	sp, #24
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	60f8      	str	r0, [r7, #12]
 80130e8:	60b9      	str	r1, [r7, #8]
 80130ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130f2:	d306      	bcc.n	8013102 <sys_timeout+0x22>
 80130f4:	4b0a      	ldr	r3, [pc, #40]	; (8013120 <sys_timeout+0x40>)
 80130f6:	f240 1229 	movw	r2, #297	; 0x129
 80130fa:	490a      	ldr	r1, [pc, #40]	; (8013124 <sys_timeout+0x44>)
 80130fc:	480a      	ldr	r0, [pc, #40]	; (8013128 <sys_timeout+0x48>)
 80130fe:	f002 feeb 	bl	8015ed8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013102:	f7f1 fad7 	bl	80046b4 <sys_now>
 8013106:	4602      	mov	r2, r0
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	4413      	add	r3, r2
 801310c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	68b9      	ldr	r1, [r7, #8]
 8013112:	6978      	ldr	r0, [r7, #20]
 8013114:	f7ff ff22 	bl	8012f5c <sys_timeout_abs>
#endif
}
 8013118:	bf00      	nop
 801311a:	3718      	adds	r7, #24
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	08019b00 	.word	0x08019b00
 8013124:	08019b9c 	.word	0x08019b9c
 8013128:	08019b74 	.word	0x08019b74

0801312c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b084      	sub	sp, #16
 8013130:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013132:	f7f1 fabf 	bl	80046b4 <sys_now>
 8013136:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013138:	4b17      	ldr	r3, [pc, #92]	; (8013198 <sys_check_timeouts+0x6c>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d022      	beq.n	801318a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	1ad3      	subs	r3, r2, r3
 801314c:	0fdb      	lsrs	r3, r3, #31
 801314e:	f003 0301 	and.w	r3, r3, #1
 8013152:	b2db      	uxtb	r3, r3
 8013154:	2b00      	cmp	r3, #0
 8013156:	d11a      	bne.n	801318e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	4a0e      	ldr	r2, [pc, #56]	; (8013198 <sys_check_timeouts+0x6c>)
 801315e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	689b      	ldr	r3, [r3, #8]
 8013164:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	4a0a      	ldr	r2, [pc, #40]	; (801319c <sys_check_timeouts+0x70>)
 8013172:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013174:	68b9      	ldr	r1, [r7, #8]
 8013176:	2009      	movs	r0, #9
 8013178:	f7f8 fca0 	bl	800babc <memp_free>
    if (handler != NULL) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d0da      	beq.n	8013138 <sys_check_timeouts+0xc>
      handler(arg);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6838      	ldr	r0, [r7, #0]
 8013186:	4798      	blx	r3
  do {
 8013188:	e7d6      	b.n	8013138 <sys_check_timeouts+0xc>
      return;
 801318a:	bf00      	nop
 801318c:	e000      	b.n	8013190 <sys_check_timeouts+0x64>
      return;
 801318e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013190:	3710      	adds	r7, #16
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	20011994 	.word	0x20011994
 801319c:	20011998 	.word	0x20011998

080131a0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80131a6:	4b16      	ldr	r3, [pc, #88]	; (8013200 <sys_timeouts_sleeptime+0x60>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d102      	bne.n	80131b4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80131ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131b2:	e020      	b.n	80131f6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80131b4:	f7f1 fa7e 	bl	80046b4 <sys_now>
 80131b8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80131ba:	4b11      	ldr	r3, [pc, #68]	; (8013200 <sys_timeouts_sleeptime+0x60>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	685a      	ldr	r2, [r3, #4]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	1ad3      	subs	r3, r2, r3
 80131c4:	0fdb      	lsrs	r3, r3, #31
 80131c6:	f003 0301 	and.w	r3, r3, #1
 80131ca:	b2db      	uxtb	r3, r3
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80131d0:	2300      	movs	r3, #0
 80131d2:	e010      	b.n	80131f6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80131d4:	4b0a      	ldr	r3, [pc, #40]	; (8013200 <sys_timeouts_sleeptime+0x60>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	685a      	ldr	r2, [r3, #4]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	da06      	bge.n	80131f4 <sys_timeouts_sleeptime+0x54>
 80131e6:	4b07      	ldr	r3, [pc, #28]	; (8013204 <sys_timeouts_sleeptime+0x64>)
 80131e8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80131ec:	4906      	ldr	r1, [pc, #24]	; (8013208 <sys_timeouts_sleeptime+0x68>)
 80131ee:	4807      	ldr	r0, [pc, #28]	; (801320c <sys_timeouts_sleeptime+0x6c>)
 80131f0:	f002 fe72 	bl	8015ed8 <iprintf>
    return ret;
 80131f4:	683b      	ldr	r3, [r7, #0]
  }
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3708      	adds	r7, #8
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	20011994 	.word	0x20011994
 8013204:	08019b00 	.word	0x08019b00
 8013208:	08019bd4 	.word	0x08019bd4
 801320c:	08019b74 	.word	0x08019b74

08013210 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013218:	4915      	ldr	r1, [pc, #84]	; (8013270 <etharp_free_entry+0x60>)
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	4613      	mov	r3, r2
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	4413      	add	r3, r2
 8013222:	00db      	lsls	r3, r3, #3
 8013224:	440b      	add	r3, r1
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d013      	beq.n	8013254 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801322c:	4910      	ldr	r1, [pc, #64]	; (8013270 <etharp_free_entry+0x60>)
 801322e:	687a      	ldr	r2, [r7, #4]
 8013230:	4613      	mov	r3, r2
 8013232:	005b      	lsls	r3, r3, #1
 8013234:	4413      	add	r3, r2
 8013236:	00db      	lsls	r3, r3, #3
 8013238:	440b      	add	r3, r1
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4618      	mov	r0, r3
 801323e:	f7f9 fadd 	bl	800c7fc <pbuf_free>
    arp_table[i].q = NULL;
 8013242:	490b      	ldr	r1, [pc, #44]	; (8013270 <etharp_free_entry+0x60>)
 8013244:	687a      	ldr	r2, [r7, #4]
 8013246:	4613      	mov	r3, r2
 8013248:	005b      	lsls	r3, r3, #1
 801324a:	4413      	add	r3, r2
 801324c:	00db      	lsls	r3, r3, #3
 801324e:	440b      	add	r3, r1
 8013250:	2200      	movs	r2, #0
 8013252:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013254:	4906      	ldr	r1, [pc, #24]	; (8013270 <etharp_free_entry+0x60>)
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	4613      	mov	r3, r2
 801325a:	005b      	lsls	r3, r3, #1
 801325c:	4413      	add	r3, r2
 801325e:	00db      	lsls	r3, r3, #3
 8013260:	440b      	add	r3, r1
 8013262:	3314      	adds	r3, #20
 8013264:	2200      	movs	r2, #0
 8013266:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013268:	bf00      	nop
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	200119a0 	.word	0x200119a0

08013274 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801327a:	2300      	movs	r3, #0
 801327c:	607b      	str	r3, [r7, #4]
 801327e:	e096      	b.n	80133ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013280:	494f      	ldr	r1, [pc, #316]	; (80133c0 <etharp_tmr+0x14c>)
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	4613      	mov	r3, r2
 8013286:	005b      	lsls	r3, r3, #1
 8013288:	4413      	add	r3, r2
 801328a:	00db      	lsls	r3, r3, #3
 801328c:	440b      	add	r3, r1
 801328e:	3314      	adds	r3, #20
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013294:	78fb      	ldrb	r3, [r7, #3]
 8013296:	2b00      	cmp	r3, #0
 8013298:	f000 8086 	beq.w	80133a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801329c:	4948      	ldr	r1, [pc, #288]	; (80133c0 <etharp_tmr+0x14c>)
 801329e:	687a      	ldr	r2, [r7, #4]
 80132a0:	4613      	mov	r3, r2
 80132a2:	005b      	lsls	r3, r3, #1
 80132a4:	4413      	add	r3, r2
 80132a6:	00db      	lsls	r3, r3, #3
 80132a8:	440b      	add	r3, r1
 80132aa:	3312      	adds	r3, #18
 80132ac:	881b      	ldrh	r3, [r3, #0]
 80132ae:	3301      	adds	r3, #1
 80132b0:	b298      	uxth	r0, r3
 80132b2:	4943      	ldr	r1, [pc, #268]	; (80133c0 <etharp_tmr+0x14c>)
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	4613      	mov	r3, r2
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	4413      	add	r3, r2
 80132bc:	00db      	lsls	r3, r3, #3
 80132be:	440b      	add	r3, r1
 80132c0:	3312      	adds	r3, #18
 80132c2:	4602      	mov	r2, r0
 80132c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80132c6:	493e      	ldr	r1, [pc, #248]	; (80133c0 <etharp_tmr+0x14c>)
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	4613      	mov	r3, r2
 80132cc:	005b      	lsls	r3, r3, #1
 80132ce:	4413      	add	r3, r2
 80132d0:	00db      	lsls	r3, r3, #3
 80132d2:	440b      	add	r3, r1
 80132d4:	3312      	adds	r3, #18
 80132d6:	881b      	ldrh	r3, [r3, #0]
 80132d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80132dc:	d215      	bcs.n	801330a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80132de:	4938      	ldr	r1, [pc, #224]	; (80133c0 <etharp_tmr+0x14c>)
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	4613      	mov	r3, r2
 80132e4:	005b      	lsls	r3, r3, #1
 80132e6:	4413      	add	r3, r2
 80132e8:	00db      	lsls	r3, r3, #3
 80132ea:	440b      	add	r3, r1
 80132ec:	3314      	adds	r3, #20
 80132ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	d10e      	bne.n	8013312 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80132f4:	4932      	ldr	r1, [pc, #200]	; (80133c0 <etharp_tmr+0x14c>)
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	4613      	mov	r3, r2
 80132fa:	005b      	lsls	r3, r3, #1
 80132fc:	4413      	add	r3, r2
 80132fe:	00db      	lsls	r3, r3, #3
 8013300:	440b      	add	r3, r1
 8013302:	3312      	adds	r3, #18
 8013304:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013306:	2b04      	cmp	r3, #4
 8013308:	d903      	bls.n	8013312 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f7ff ff80 	bl	8013210 <etharp_free_entry>
 8013310:	e04a      	b.n	80133a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013312:	492b      	ldr	r1, [pc, #172]	; (80133c0 <etharp_tmr+0x14c>)
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	4613      	mov	r3, r2
 8013318:	005b      	lsls	r3, r3, #1
 801331a:	4413      	add	r3, r2
 801331c:	00db      	lsls	r3, r3, #3
 801331e:	440b      	add	r3, r1
 8013320:	3314      	adds	r3, #20
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	2b03      	cmp	r3, #3
 8013326:	d10a      	bne.n	801333e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013328:	4925      	ldr	r1, [pc, #148]	; (80133c0 <etharp_tmr+0x14c>)
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	4613      	mov	r3, r2
 801332e:	005b      	lsls	r3, r3, #1
 8013330:	4413      	add	r3, r2
 8013332:	00db      	lsls	r3, r3, #3
 8013334:	440b      	add	r3, r1
 8013336:	3314      	adds	r3, #20
 8013338:	2204      	movs	r2, #4
 801333a:	701a      	strb	r2, [r3, #0]
 801333c:	e034      	b.n	80133a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801333e:	4920      	ldr	r1, [pc, #128]	; (80133c0 <etharp_tmr+0x14c>)
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	4613      	mov	r3, r2
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	4413      	add	r3, r2
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	440b      	add	r3, r1
 801334c:	3314      	adds	r3, #20
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	2b04      	cmp	r3, #4
 8013352:	d10a      	bne.n	801336a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013354:	491a      	ldr	r1, [pc, #104]	; (80133c0 <etharp_tmr+0x14c>)
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	4613      	mov	r3, r2
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	4413      	add	r3, r2
 801335e:	00db      	lsls	r3, r3, #3
 8013360:	440b      	add	r3, r1
 8013362:	3314      	adds	r3, #20
 8013364:	2202      	movs	r2, #2
 8013366:	701a      	strb	r2, [r3, #0]
 8013368:	e01e      	b.n	80133a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801336a:	4915      	ldr	r1, [pc, #84]	; (80133c0 <etharp_tmr+0x14c>)
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	4613      	mov	r3, r2
 8013370:	005b      	lsls	r3, r3, #1
 8013372:	4413      	add	r3, r2
 8013374:	00db      	lsls	r3, r3, #3
 8013376:	440b      	add	r3, r1
 8013378:	3314      	adds	r3, #20
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	2b01      	cmp	r3, #1
 801337e:	d113      	bne.n	80133a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013380:	490f      	ldr	r1, [pc, #60]	; (80133c0 <etharp_tmr+0x14c>)
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	4613      	mov	r3, r2
 8013386:	005b      	lsls	r3, r3, #1
 8013388:	4413      	add	r3, r2
 801338a:	00db      	lsls	r3, r3, #3
 801338c:	440b      	add	r3, r1
 801338e:	3308      	adds	r3, #8
 8013390:	6818      	ldr	r0, [r3, #0]
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	4613      	mov	r3, r2
 8013396:	005b      	lsls	r3, r3, #1
 8013398:	4413      	add	r3, r2
 801339a:	00db      	lsls	r3, r3, #3
 801339c:	4a08      	ldr	r2, [pc, #32]	; (80133c0 <etharp_tmr+0x14c>)
 801339e:	4413      	add	r3, r2
 80133a0:	3304      	adds	r3, #4
 80133a2:	4619      	mov	r1, r3
 80133a4:	f000 fe6e 	bl	8014084 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	3301      	adds	r3, #1
 80133ac:	607b      	str	r3, [r7, #4]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2b09      	cmp	r3, #9
 80133b2:	f77f af65 	ble.w	8013280 <etharp_tmr+0xc>
      }
    }
  }
}
 80133b6:	bf00      	nop
 80133b8:	bf00      	nop
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	200119a0 	.word	0x200119a0

080133c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b08a      	sub	sp, #40	; 0x28
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	460b      	mov	r3, r1
 80133ce:	607a      	str	r2, [r7, #4]
 80133d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80133d2:	230a      	movs	r3, #10
 80133d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80133d6:	230a      	movs	r3, #10
 80133d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80133da:	230a      	movs	r3, #10
 80133dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80133e2:	230a      	movs	r3, #10
 80133e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80133e6:	2300      	movs	r3, #0
 80133e8:	83bb      	strh	r3, [r7, #28]
 80133ea:	2300      	movs	r3, #0
 80133ec:	837b      	strh	r3, [r7, #26]
 80133ee:	2300      	movs	r3, #0
 80133f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80133f2:	2300      	movs	r3, #0
 80133f4:	843b      	strh	r3, [r7, #32]
 80133f6:	e0ae      	b.n	8013556 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80133f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133fc:	49a6      	ldr	r1, [pc, #664]	; (8013698 <etharp_find_entry+0x2d4>)
 80133fe:	4613      	mov	r3, r2
 8013400:	005b      	lsls	r3, r3, #1
 8013402:	4413      	add	r3, r2
 8013404:	00db      	lsls	r3, r3, #3
 8013406:	440b      	add	r3, r1
 8013408:	3314      	adds	r3, #20
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801340e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013412:	2b0a      	cmp	r3, #10
 8013414:	d105      	bne.n	8013422 <etharp_find_entry+0x5e>
 8013416:	7dfb      	ldrb	r3, [r7, #23]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d102      	bne.n	8013422 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801341c:	8c3b      	ldrh	r3, [r7, #32]
 801341e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013420:	e095      	b.n	801354e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013422:	7dfb      	ldrb	r3, [r7, #23]
 8013424:	2b00      	cmp	r3, #0
 8013426:	f000 8092 	beq.w	801354e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801342a:	7dfb      	ldrb	r3, [r7, #23]
 801342c:	2b01      	cmp	r3, #1
 801342e:	d009      	beq.n	8013444 <etharp_find_entry+0x80>
 8013430:	7dfb      	ldrb	r3, [r7, #23]
 8013432:	2b01      	cmp	r3, #1
 8013434:	d806      	bhi.n	8013444 <etharp_find_entry+0x80>
 8013436:	4b99      	ldr	r3, [pc, #612]	; (801369c <etharp_find_entry+0x2d8>)
 8013438:	f240 1223 	movw	r2, #291	; 0x123
 801343c:	4998      	ldr	r1, [pc, #608]	; (80136a0 <etharp_find_entry+0x2dc>)
 801343e:	4899      	ldr	r0, [pc, #612]	; (80136a4 <etharp_find_entry+0x2e0>)
 8013440:	f002 fd4a 	bl	8015ed8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d020      	beq.n	801348c <etharp_find_entry+0xc8>
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	6819      	ldr	r1, [r3, #0]
 801344e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013452:	4891      	ldr	r0, [pc, #580]	; (8013698 <etharp_find_entry+0x2d4>)
 8013454:	4613      	mov	r3, r2
 8013456:	005b      	lsls	r3, r3, #1
 8013458:	4413      	add	r3, r2
 801345a:	00db      	lsls	r3, r3, #3
 801345c:	4403      	add	r3, r0
 801345e:	3304      	adds	r3, #4
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	4299      	cmp	r1, r3
 8013464:	d112      	bne.n	801348c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00c      	beq.n	8013486 <etharp_find_entry+0xc2>
 801346c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013470:	4989      	ldr	r1, [pc, #548]	; (8013698 <etharp_find_entry+0x2d4>)
 8013472:	4613      	mov	r3, r2
 8013474:	005b      	lsls	r3, r3, #1
 8013476:	4413      	add	r3, r2
 8013478:	00db      	lsls	r3, r3, #3
 801347a:	440b      	add	r3, r1
 801347c:	3308      	adds	r3, #8
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	429a      	cmp	r2, r3
 8013484:	d102      	bne.n	801348c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013486:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801348a:	e100      	b.n	801368e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801348c:	7dfb      	ldrb	r3, [r7, #23]
 801348e:	2b01      	cmp	r3, #1
 8013490:	d140      	bne.n	8013514 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013496:	4980      	ldr	r1, [pc, #512]	; (8013698 <etharp_find_entry+0x2d4>)
 8013498:	4613      	mov	r3, r2
 801349a:	005b      	lsls	r3, r3, #1
 801349c:	4413      	add	r3, r2
 801349e:	00db      	lsls	r3, r3, #3
 80134a0:	440b      	add	r3, r1
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d01a      	beq.n	80134de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80134a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134ac:	497a      	ldr	r1, [pc, #488]	; (8013698 <etharp_find_entry+0x2d4>)
 80134ae:	4613      	mov	r3, r2
 80134b0:	005b      	lsls	r3, r3, #1
 80134b2:	4413      	add	r3, r2
 80134b4:	00db      	lsls	r3, r3, #3
 80134b6:	440b      	add	r3, r1
 80134b8:	3312      	adds	r3, #18
 80134ba:	881b      	ldrh	r3, [r3, #0]
 80134bc:	8bba      	ldrh	r2, [r7, #28]
 80134be:	429a      	cmp	r2, r3
 80134c0:	d845      	bhi.n	801354e <etharp_find_entry+0x18a>
            old_queue = i;
 80134c2:	8c3b      	ldrh	r3, [r7, #32]
 80134c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80134c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134ca:	4973      	ldr	r1, [pc, #460]	; (8013698 <etharp_find_entry+0x2d4>)
 80134cc:	4613      	mov	r3, r2
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	4413      	add	r3, r2
 80134d2:	00db      	lsls	r3, r3, #3
 80134d4:	440b      	add	r3, r1
 80134d6:	3312      	adds	r3, #18
 80134d8:	881b      	ldrh	r3, [r3, #0]
 80134da:	83bb      	strh	r3, [r7, #28]
 80134dc:	e037      	b.n	801354e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80134de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134e2:	496d      	ldr	r1, [pc, #436]	; (8013698 <etharp_find_entry+0x2d4>)
 80134e4:	4613      	mov	r3, r2
 80134e6:	005b      	lsls	r3, r3, #1
 80134e8:	4413      	add	r3, r2
 80134ea:	00db      	lsls	r3, r3, #3
 80134ec:	440b      	add	r3, r1
 80134ee:	3312      	adds	r3, #18
 80134f0:	881b      	ldrh	r3, [r3, #0]
 80134f2:	8b7a      	ldrh	r2, [r7, #26]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d82a      	bhi.n	801354e <etharp_find_entry+0x18a>
            old_pending = i;
 80134f8:	8c3b      	ldrh	r3, [r7, #32]
 80134fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80134fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013500:	4965      	ldr	r1, [pc, #404]	; (8013698 <etharp_find_entry+0x2d4>)
 8013502:	4613      	mov	r3, r2
 8013504:	005b      	lsls	r3, r3, #1
 8013506:	4413      	add	r3, r2
 8013508:	00db      	lsls	r3, r3, #3
 801350a:	440b      	add	r3, r1
 801350c:	3312      	adds	r3, #18
 801350e:	881b      	ldrh	r3, [r3, #0]
 8013510:	837b      	strh	r3, [r7, #26]
 8013512:	e01c      	b.n	801354e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013514:	7dfb      	ldrb	r3, [r7, #23]
 8013516:	2b01      	cmp	r3, #1
 8013518:	d919      	bls.n	801354e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801351a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801351e:	495e      	ldr	r1, [pc, #376]	; (8013698 <etharp_find_entry+0x2d4>)
 8013520:	4613      	mov	r3, r2
 8013522:	005b      	lsls	r3, r3, #1
 8013524:	4413      	add	r3, r2
 8013526:	00db      	lsls	r3, r3, #3
 8013528:	440b      	add	r3, r1
 801352a:	3312      	adds	r3, #18
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	8b3a      	ldrh	r2, [r7, #24]
 8013530:	429a      	cmp	r2, r3
 8013532:	d80c      	bhi.n	801354e <etharp_find_entry+0x18a>
            old_stable = i;
 8013534:	8c3b      	ldrh	r3, [r7, #32]
 8013536:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013538:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801353c:	4956      	ldr	r1, [pc, #344]	; (8013698 <etharp_find_entry+0x2d4>)
 801353e:	4613      	mov	r3, r2
 8013540:	005b      	lsls	r3, r3, #1
 8013542:	4413      	add	r3, r2
 8013544:	00db      	lsls	r3, r3, #3
 8013546:	440b      	add	r3, r1
 8013548:	3312      	adds	r3, #18
 801354a:	881b      	ldrh	r3, [r3, #0]
 801354c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801354e:	8c3b      	ldrh	r3, [r7, #32]
 8013550:	3301      	adds	r3, #1
 8013552:	b29b      	uxth	r3, r3
 8013554:	843b      	strh	r3, [r7, #32]
 8013556:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801355a:	2b09      	cmp	r3, #9
 801355c:	f77f af4c 	ble.w	80133f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013560:	7afb      	ldrb	r3, [r7, #11]
 8013562:	f003 0302 	and.w	r3, r3, #2
 8013566:	2b00      	cmp	r3, #0
 8013568:	d108      	bne.n	801357c <etharp_find_entry+0x1b8>
 801356a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801356e:	2b0a      	cmp	r3, #10
 8013570:	d107      	bne.n	8013582 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013572:	7afb      	ldrb	r3, [r7, #11]
 8013574:	f003 0301 	and.w	r3, r3, #1
 8013578:	2b00      	cmp	r3, #0
 801357a:	d102      	bne.n	8013582 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801357c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013580:	e085      	b.n	801368e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013582:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013586:	2b09      	cmp	r3, #9
 8013588:	dc02      	bgt.n	8013590 <etharp_find_entry+0x1cc>
    i = empty;
 801358a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801358c:	843b      	strh	r3, [r7, #32]
 801358e:	e039      	b.n	8013604 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013590:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013594:	2b09      	cmp	r3, #9
 8013596:	dc14      	bgt.n	80135c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801359a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801359c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135a0:	493d      	ldr	r1, [pc, #244]	; (8013698 <etharp_find_entry+0x2d4>)
 80135a2:	4613      	mov	r3, r2
 80135a4:	005b      	lsls	r3, r3, #1
 80135a6:	4413      	add	r3, r2
 80135a8:	00db      	lsls	r3, r3, #3
 80135aa:	440b      	add	r3, r1
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d018      	beq.n	80135e4 <etharp_find_entry+0x220>
 80135b2:	4b3a      	ldr	r3, [pc, #232]	; (801369c <etharp_find_entry+0x2d8>)
 80135b4:	f240 126d 	movw	r2, #365	; 0x16d
 80135b8:	493b      	ldr	r1, [pc, #236]	; (80136a8 <etharp_find_entry+0x2e4>)
 80135ba:	483a      	ldr	r0, [pc, #232]	; (80136a4 <etharp_find_entry+0x2e0>)
 80135bc:	f002 fc8c 	bl	8015ed8 <iprintf>
 80135c0:	e010      	b.n	80135e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80135c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80135c6:	2b09      	cmp	r3, #9
 80135c8:	dc02      	bgt.n	80135d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80135ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135cc:	843b      	strh	r3, [r7, #32]
 80135ce:	e009      	b.n	80135e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80135d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80135d4:	2b09      	cmp	r3, #9
 80135d6:	dc02      	bgt.n	80135de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80135d8:	8bfb      	ldrh	r3, [r7, #30]
 80135da:	843b      	strh	r3, [r7, #32]
 80135dc:	e002      	b.n	80135e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80135de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135e2:	e054      	b.n	801368e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80135e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80135e8:	2b09      	cmp	r3, #9
 80135ea:	dd06      	ble.n	80135fa <etharp_find_entry+0x236>
 80135ec:	4b2b      	ldr	r3, [pc, #172]	; (801369c <etharp_find_entry+0x2d8>)
 80135ee:	f240 127f 	movw	r2, #383	; 0x17f
 80135f2:	492e      	ldr	r1, [pc, #184]	; (80136ac <etharp_find_entry+0x2e8>)
 80135f4:	482b      	ldr	r0, [pc, #172]	; (80136a4 <etharp_find_entry+0x2e0>)
 80135f6:	f002 fc6f 	bl	8015ed8 <iprintf>
    etharp_free_entry(i);
 80135fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80135fe:	4618      	mov	r0, r3
 8013600:	f7ff fe06 	bl	8013210 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013604:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013608:	2b09      	cmp	r3, #9
 801360a:	dd06      	ble.n	801361a <etharp_find_entry+0x256>
 801360c:	4b23      	ldr	r3, [pc, #140]	; (801369c <etharp_find_entry+0x2d8>)
 801360e:	f240 1283 	movw	r2, #387	; 0x183
 8013612:	4926      	ldr	r1, [pc, #152]	; (80136ac <etharp_find_entry+0x2e8>)
 8013614:	4823      	ldr	r0, [pc, #140]	; (80136a4 <etharp_find_entry+0x2e0>)
 8013616:	f002 fc5f 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801361a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801361e:	491e      	ldr	r1, [pc, #120]	; (8013698 <etharp_find_entry+0x2d4>)
 8013620:	4613      	mov	r3, r2
 8013622:	005b      	lsls	r3, r3, #1
 8013624:	4413      	add	r3, r2
 8013626:	00db      	lsls	r3, r3, #3
 8013628:	440b      	add	r3, r1
 801362a:	3314      	adds	r3, #20
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d006      	beq.n	8013640 <etharp_find_entry+0x27c>
 8013632:	4b1a      	ldr	r3, [pc, #104]	; (801369c <etharp_find_entry+0x2d8>)
 8013634:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013638:	491d      	ldr	r1, [pc, #116]	; (80136b0 <etharp_find_entry+0x2ec>)
 801363a:	481a      	ldr	r0, [pc, #104]	; (80136a4 <etharp_find_entry+0x2e0>)
 801363c:	f002 fc4c 	bl	8015ed8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00b      	beq.n	801365e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013646:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	6819      	ldr	r1, [r3, #0]
 801364e:	4812      	ldr	r0, [pc, #72]	; (8013698 <etharp_find_entry+0x2d4>)
 8013650:	4613      	mov	r3, r2
 8013652:	005b      	lsls	r3, r3, #1
 8013654:	4413      	add	r3, r2
 8013656:	00db      	lsls	r3, r3, #3
 8013658:	4403      	add	r3, r0
 801365a:	3304      	adds	r3, #4
 801365c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801365e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013662:	490d      	ldr	r1, [pc, #52]	; (8013698 <etharp_find_entry+0x2d4>)
 8013664:	4613      	mov	r3, r2
 8013666:	005b      	lsls	r3, r3, #1
 8013668:	4413      	add	r3, r2
 801366a:	00db      	lsls	r3, r3, #3
 801366c:	440b      	add	r3, r1
 801366e:	3312      	adds	r3, #18
 8013670:	2200      	movs	r2, #0
 8013672:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013674:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013678:	4907      	ldr	r1, [pc, #28]	; (8013698 <etharp_find_entry+0x2d4>)
 801367a:	4613      	mov	r3, r2
 801367c:	005b      	lsls	r3, r3, #1
 801367e:	4413      	add	r3, r2
 8013680:	00db      	lsls	r3, r3, #3
 8013682:	440b      	add	r3, r1
 8013684:	3308      	adds	r3, #8
 8013686:	687a      	ldr	r2, [r7, #4]
 8013688:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801368a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3728      	adds	r7, #40	; 0x28
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	200119a0 	.word	0x200119a0
 801369c:	08019be8 	.word	0x08019be8
 80136a0:	08019c20 	.word	0x08019c20
 80136a4:	08019c60 	.word	0x08019c60
 80136a8:	08019c88 	.word	0x08019c88
 80136ac:	08019ca0 	.word	0x08019ca0
 80136b0:	08019cb4 	.word	0x08019cb4

080136b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b088      	sub	sp, #32
 80136b8:	af02      	add	r7, sp, #8
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	607a      	str	r2, [r7, #4]
 80136c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80136c8:	2b06      	cmp	r3, #6
 80136ca:	d006      	beq.n	80136da <etharp_update_arp_entry+0x26>
 80136cc:	4b48      	ldr	r3, [pc, #288]	; (80137f0 <etharp_update_arp_entry+0x13c>)
 80136ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80136d2:	4948      	ldr	r1, [pc, #288]	; (80137f4 <etharp_update_arp_entry+0x140>)
 80136d4:	4848      	ldr	r0, [pc, #288]	; (80137f8 <etharp_update_arp_entry+0x144>)
 80136d6:	f002 fbff 	bl	8015ed8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d012      	beq.n	8013706 <etharp_update_arp_entry+0x52>
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d00e      	beq.n	8013706 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	68f9      	ldr	r1, [r7, #12]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f001 f8f4 	bl	80148dc <ip4_addr_isbroadcast_u32>
 80136f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d105      	bne.n	8013706 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013702:	2be0      	cmp	r3, #224	; 0xe0
 8013704:	d102      	bne.n	801370c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013706:	f06f 030f 	mvn.w	r3, #15
 801370a:	e06c      	b.n	80137e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801370c:	78fb      	ldrb	r3, [r7, #3]
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	4619      	mov	r1, r3
 8013712:	68b8      	ldr	r0, [r7, #8]
 8013714:	f7ff fe56 	bl	80133c4 <etharp_find_entry>
 8013718:	4603      	mov	r3, r0
 801371a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801371c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013720:	2b00      	cmp	r3, #0
 8013722:	da02      	bge.n	801372a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013724:	8afb      	ldrh	r3, [r7, #22]
 8013726:	b25b      	sxtb	r3, r3
 8013728:	e05d      	b.n	80137e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801372a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801372e:	4933      	ldr	r1, [pc, #204]	; (80137fc <etharp_update_arp_entry+0x148>)
 8013730:	4613      	mov	r3, r2
 8013732:	005b      	lsls	r3, r3, #1
 8013734:	4413      	add	r3, r2
 8013736:	00db      	lsls	r3, r3, #3
 8013738:	440b      	add	r3, r1
 801373a:	3314      	adds	r3, #20
 801373c:	2202      	movs	r2, #2
 801373e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013744:	492d      	ldr	r1, [pc, #180]	; (80137fc <etharp_update_arp_entry+0x148>)
 8013746:	4613      	mov	r3, r2
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	4413      	add	r3, r2
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	440b      	add	r3, r1
 8013750:	3308      	adds	r3, #8
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801375a:	4613      	mov	r3, r2
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	4413      	add	r3, r2
 8013760:	00db      	lsls	r3, r3, #3
 8013762:	3308      	adds	r3, #8
 8013764:	4a25      	ldr	r2, [pc, #148]	; (80137fc <etharp_update_arp_entry+0x148>)
 8013766:	4413      	add	r3, r2
 8013768:	3304      	adds	r3, #4
 801376a:	2206      	movs	r2, #6
 801376c:	6879      	ldr	r1, [r7, #4]
 801376e:	4618      	mov	r0, r3
 8013770:	f002 faed 	bl	8015d4e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013774:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013778:	4920      	ldr	r1, [pc, #128]	; (80137fc <etharp_update_arp_entry+0x148>)
 801377a:	4613      	mov	r3, r2
 801377c:	005b      	lsls	r3, r3, #1
 801377e:	4413      	add	r3, r2
 8013780:	00db      	lsls	r3, r3, #3
 8013782:	440b      	add	r3, r1
 8013784:	3312      	adds	r3, #18
 8013786:	2200      	movs	r2, #0
 8013788:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801378a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801378e:	491b      	ldr	r1, [pc, #108]	; (80137fc <etharp_update_arp_entry+0x148>)
 8013790:	4613      	mov	r3, r2
 8013792:	005b      	lsls	r3, r3, #1
 8013794:	4413      	add	r3, r2
 8013796:	00db      	lsls	r3, r3, #3
 8013798:	440b      	add	r3, r1
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d021      	beq.n	80137e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80137a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137a4:	4915      	ldr	r1, [pc, #84]	; (80137fc <etharp_update_arp_entry+0x148>)
 80137a6:	4613      	mov	r3, r2
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	4413      	add	r3, r2
 80137ac:	00db      	lsls	r3, r3, #3
 80137ae:	440b      	add	r3, r1
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80137b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137b8:	4910      	ldr	r1, [pc, #64]	; (80137fc <etharp_update_arp_entry+0x148>)
 80137ba:	4613      	mov	r3, r2
 80137bc:	005b      	lsls	r3, r3, #1
 80137be:	4413      	add	r3, r2
 80137c0:	00db      	lsls	r3, r3, #3
 80137c2:	440b      	add	r3, r1
 80137c4:	2200      	movs	r2, #0
 80137c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80137ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6939      	ldr	r1, [r7, #16]
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f001 ff8d 	bl	80156f8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80137de:	6938      	ldr	r0, [r7, #16]
 80137e0:	f7f9 f80c 	bl	800c7fc <pbuf_free>
  }
  return ERR_OK;
 80137e4:	2300      	movs	r3, #0
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3718      	adds	r7, #24
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	08019be8 	.word	0x08019be8
 80137f4:	08019ce0 	.word	0x08019ce0
 80137f8:	08019c60 	.word	0x08019c60
 80137fc:	200119a0 	.word	0x200119a0

08013800 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b084      	sub	sp, #16
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013808:	2300      	movs	r3, #0
 801380a:	60fb      	str	r3, [r7, #12]
 801380c:	e01e      	b.n	801384c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801380e:	4913      	ldr	r1, [pc, #76]	; (801385c <etharp_cleanup_netif+0x5c>)
 8013810:	68fa      	ldr	r2, [r7, #12]
 8013812:	4613      	mov	r3, r2
 8013814:	005b      	lsls	r3, r3, #1
 8013816:	4413      	add	r3, r2
 8013818:	00db      	lsls	r3, r3, #3
 801381a:	440b      	add	r3, r1
 801381c:	3314      	adds	r3, #20
 801381e:	781b      	ldrb	r3, [r3, #0]
 8013820:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013822:	7afb      	ldrb	r3, [r7, #11]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00e      	beq.n	8013846 <etharp_cleanup_netif+0x46>
 8013828:	490c      	ldr	r1, [pc, #48]	; (801385c <etharp_cleanup_netif+0x5c>)
 801382a:	68fa      	ldr	r2, [r7, #12]
 801382c:	4613      	mov	r3, r2
 801382e:	005b      	lsls	r3, r3, #1
 8013830:	4413      	add	r3, r2
 8013832:	00db      	lsls	r3, r3, #3
 8013834:	440b      	add	r3, r1
 8013836:	3308      	adds	r3, #8
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	429a      	cmp	r2, r3
 801383e:	d102      	bne.n	8013846 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013840:	68f8      	ldr	r0, [r7, #12]
 8013842:	f7ff fce5 	bl	8013210 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	3301      	adds	r3, #1
 801384a:	60fb      	str	r3, [r7, #12]
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2b09      	cmp	r3, #9
 8013850:	dddd      	ble.n	801380e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013852:	bf00      	nop
 8013854:	bf00      	nop
 8013856:	3710      	adds	r7, #16
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}
 801385c:	200119a0 	.word	0x200119a0

08013860 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013860:	b5b0      	push	{r4, r5, r7, lr}
 8013862:	b08a      	sub	sp, #40	; 0x28
 8013864:	af04      	add	r7, sp, #16
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d107      	bne.n	8013880 <etharp_input+0x20>
 8013870:	4b3d      	ldr	r3, [pc, #244]	; (8013968 <etharp_input+0x108>)
 8013872:	f240 228a 	movw	r2, #650	; 0x28a
 8013876:	493d      	ldr	r1, [pc, #244]	; (801396c <etharp_input+0x10c>)
 8013878:	483d      	ldr	r0, [pc, #244]	; (8013970 <etharp_input+0x110>)
 801387a:	f002 fb2d 	bl	8015ed8 <iprintf>
 801387e:	e06f      	b.n	8013960 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	b29b      	uxth	r3, r3
 801388c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013890:	d10c      	bne.n	80138ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013896:	2b06      	cmp	r3, #6
 8013898:	d108      	bne.n	80138ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801389e:	2b04      	cmp	r3, #4
 80138a0:	d104      	bne.n	80138ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	885b      	ldrh	r3, [r3, #2]
 80138a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80138a8:	2b08      	cmp	r3, #8
 80138aa:	d003      	beq.n	80138b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f7f8 ffa5 	bl	800c7fc <pbuf_free>
    return;
 80138b2:	e055      	b.n	8013960 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	330e      	adds	r3, #14
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	3318      	adds	r3, #24
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	3304      	adds	r3, #4
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d102      	bne.n	80138d4 <etharp_input+0x74>
    for_us = 0;
 80138ce:	2300      	movs	r3, #0
 80138d0:	75fb      	strb	r3, [r7, #23]
 80138d2:	e009      	b.n	80138e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	3304      	adds	r3, #4
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	429a      	cmp	r2, r3
 80138de:	bf0c      	ite	eq
 80138e0:	2301      	moveq	r3, #1
 80138e2:	2300      	movne	r3, #0
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	f103 0208 	add.w	r2, r3, #8
 80138ee:	7dfb      	ldrb	r3, [r7, #23]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d001      	beq.n	80138f8 <etharp_input+0x98>
 80138f4:	2301      	movs	r3, #1
 80138f6:	e000      	b.n	80138fa <etharp_input+0x9a>
 80138f8:	2302      	movs	r3, #2
 80138fa:	f107 010c 	add.w	r1, r7, #12
 80138fe:	6838      	ldr	r0, [r7, #0]
 8013900:	f7ff fed8 	bl	80136b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	88db      	ldrh	r3, [r3, #6]
 8013908:	b29b      	uxth	r3, r3
 801390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801390e:	d003      	beq.n	8013918 <etharp_input+0xb8>
 8013910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013914:	d01e      	beq.n	8013954 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013916:	e020      	b.n	801395a <etharp_input+0xfa>
      if (for_us) {
 8013918:	7dfb      	ldrb	r3, [r7, #23]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d01c      	beq.n	8013958 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013934:	693a      	ldr	r2, [r7, #16]
 8013936:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013938:	2102      	movs	r1, #2
 801393a:	9103      	str	r1, [sp, #12]
 801393c:	f107 010c 	add.w	r1, r7, #12
 8013940:	9102      	str	r1, [sp, #8]
 8013942:	9201      	str	r2, [sp, #4]
 8013944:	9300      	str	r3, [sp, #0]
 8013946:	462b      	mov	r3, r5
 8013948:	4622      	mov	r2, r4
 801394a:	4601      	mov	r1, r0
 801394c:	6838      	ldr	r0, [r7, #0]
 801394e:	f000 faeb 	bl	8013f28 <etharp_raw>
      break;
 8013952:	e001      	b.n	8013958 <etharp_input+0xf8>
      break;
 8013954:	bf00      	nop
 8013956:	e000      	b.n	801395a <etharp_input+0xfa>
      break;
 8013958:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f7f8 ff4e 	bl	800c7fc <pbuf_free>
}
 8013960:	3718      	adds	r7, #24
 8013962:	46bd      	mov	sp, r7
 8013964:	bdb0      	pop	{r4, r5, r7, pc}
 8013966:	bf00      	nop
 8013968:	08019be8 	.word	0x08019be8
 801396c:	08019d38 	.word	0x08019d38
 8013970:	08019c60 	.word	0x08019c60

08013974 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b086      	sub	sp, #24
 8013978:	af02      	add	r7, sp, #8
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	4613      	mov	r3, r2
 8013980:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013982:	79fa      	ldrb	r2, [r7, #7]
 8013984:	4944      	ldr	r1, [pc, #272]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 8013986:	4613      	mov	r3, r2
 8013988:	005b      	lsls	r3, r3, #1
 801398a:	4413      	add	r3, r2
 801398c:	00db      	lsls	r3, r3, #3
 801398e:	440b      	add	r3, r1
 8013990:	3314      	adds	r3, #20
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d806      	bhi.n	80139a6 <etharp_output_to_arp_index+0x32>
 8013998:	4b40      	ldr	r3, [pc, #256]	; (8013a9c <etharp_output_to_arp_index+0x128>)
 801399a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801399e:	4940      	ldr	r1, [pc, #256]	; (8013aa0 <etharp_output_to_arp_index+0x12c>)
 80139a0:	4840      	ldr	r0, [pc, #256]	; (8013aa4 <etharp_output_to_arp_index+0x130>)
 80139a2:	f002 fa99 	bl	8015ed8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80139a6:	79fa      	ldrb	r2, [r7, #7]
 80139a8:	493b      	ldr	r1, [pc, #236]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 80139aa:	4613      	mov	r3, r2
 80139ac:	005b      	lsls	r3, r3, #1
 80139ae:	4413      	add	r3, r2
 80139b0:	00db      	lsls	r3, r3, #3
 80139b2:	440b      	add	r3, r1
 80139b4:	3314      	adds	r3, #20
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	2b02      	cmp	r3, #2
 80139ba:	d153      	bne.n	8013a64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80139bc:	79fa      	ldrb	r2, [r7, #7]
 80139be:	4936      	ldr	r1, [pc, #216]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 80139c0:	4613      	mov	r3, r2
 80139c2:	005b      	lsls	r3, r3, #1
 80139c4:	4413      	add	r3, r2
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	440b      	add	r3, r1
 80139ca:	3312      	adds	r3, #18
 80139cc:	881b      	ldrh	r3, [r3, #0]
 80139ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80139d2:	d919      	bls.n	8013a08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80139d4:	79fa      	ldrb	r2, [r7, #7]
 80139d6:	4613      	mov	r3, r2
 80139d8:	005b      	lsls	r3, r3, #1
 80139da:	4413      	add	r3, r2
 80139dc:	00db      	lsls	r3, r3, #3
 80139de:	4a2e      	ldr	r2, [pc, #184]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 80139e0:	4413      	add	r3, r2
 80139e2:	3304      	adds	r3, #4
 80139e4:	4619      	mov	r1, r3
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f000 fb4c 	bl	8014084 <etharp_request>
 80139ec:	4603      	mov	r3, r0
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d138      	bne.n	8013a64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80139f2:	79fa      	ldrb	r2, [r7, #7]
 80139f4:	4928      	ldr	r1, [pc, #160]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 80139f6:	4613      	mov	r3, r2
 80139f8:	005b      	lsls	r3, r3, #1
 80139fa:	4413      	add	r3, r2
 80139fc:	00db      	lsls	r3, r3, #3
 80139fe:	440b      	add	r3, r1
 8013a00:	3314      	adds	r3, #20
 8013a02:	2203      	movs	r2, #3
 8013a04:	701a      	strb	r2, [r3, #0]
 8013a06:	e02d      	b.n	8013a64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013a08:	79fa      	ldrb	r2, [r7, #7]
 8013a0a:	4923      	ldr	r1, [pc, #140]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	005b      	lsls	r3, r3, #1
 8013a10:	4413      	add	r3, r2
 8013a12:	00db      	lsls	r3, r3, #3
 8013a14:	440b      	add	r3, r1
 8013a16:	3312      	adds	r3, #18
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013a1e:	d321      	bcc.n	8013a64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013a20:	79fa      	ldrb	r2, [r7, #7]
 8013a22:	4613      	mov	r3, r2
 8013a24:	005b      	lsls	r3, r3, #1
 8013a26:	4413      	add	r3, r2
 8013a28:	00db      	lsls	r3, r3, #3
 8013a2a:	4a1b      	ldr	r2, [pc, #108]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 8013a2c:	4413      	add	r3, r2
 8013a2e:	1d19      	adds	r1, r3, #4
 8013a30:	79fa      	ldrb	r2, [r7, #7]
 8013a32:	4613      	mov	r3, r2
 8013a34:	005b      	lsls	r3, r3, #1
 8013a36:	4413      	add	r3, r2
 8013a38:	00db      	lsls	r3, r3, #3
 8013a3a:	3308      	adds	r3, #8
 8013a3c:	4a16      	ldr	r2, [pc, #88]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 8013a3e:	4413      	add	r3, r2
 8013a40:	3304      	adds	r3, #4
 8013a42:	461a      	mov	r2, r3
 8013a44:	68f8      	ldr	r0, [r7, #12]
 8013a46:	f000 fafb 	bl	8014040 <etharp_request_dst>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d109      	bne.n	8013a64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013a50:	79fa      	ldrb	r2, [r7, #7]
 8013a52:	4911      	ldr	r1, [pc, #68]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 8013a54:	4613      	mov	r3, r2
 8013a56:	005b      	lsls	r3, r3, #1
 8013a58:	4413      	add	r3, r2
 8013a5a:	00db      	lsls	r3, r3, #3
 8013a5c:	440b      	add	r3, r1
 8013a5e:	3314      	adds	r3, #20
 8013a60:	2203      	movs	r2, #3
 8013a62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013a6a:	79fa      	ldrb	r2, [r7, #7]
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	005b      	lsls	r3, r3, #1
 8013a70:	4413      	add	r3, r2
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	3308      	adds	r3, #8
 8013a76:	4a08      	ldr	r2, [pc, #32]	; (8013a98 <etharp_output_to_arp_index+0x124>)
 8013a78:	4413      	add	r3, r2
 8013a7a:	3304      	adds	r3, #4
 8013a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a80:	9200      	str	r2, [sp, #0]
 8013a82:	460a      	mov	r2, r1
 8013a84:	68b9      	ldr	r1, [r7, #8]
 8013a86:	68f8      	ldr	r0, [r7, #12]
 8013a88:	f001 fe36 	bl	80156f8 <ethernet_output>
 8013a8c:	4603      	mov	r3, r0
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	200119a0 	.word	0x200119a0
 8013a9c:	08019be8 	.word	0x08019be8
 8013aa0:	08019d58 	.word	0x08019d58
 8013aa4:	08019c60 	.word	0x08019c60

08013aa8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b08a      	sub	sp, #40	; 0x28
 8013aac:	af02      	add	r7, sp, #8
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d106      	bne.n	8013acc <etharp_output+0x24>
 8013abe:	4b73      	ldr	r3, [pc, #460]	; (8013c8c <etharp_output+0x1e4>)
 8013ac0:	f240 321e 	movw	r2, #798	; 0x31e
 8013ac4:	4972      	ldr	r1, [pc, #456]	; (8013c90 <etharp_output+0x1e8>)
 8013ac6:	4873      	ldr	r0, [pc, #460]	; (8013c94 <etharp_output+0x1ec>)
 8013ac8:	f002 fa06 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d106      	bne.n	8013ae0 <etharp_output+0x38>
 8013ad2:	4b6e      	ldr	r3, [pc, #440]	; (8013c8c <etharp_output+0x1e4>)
 8013ad4:	f240 321f 	movw	r2, #799	; 0x31f
 8013ad8:	496f      	ldr	r1, [pc, #444]	; (8013c98 <etharp_output+0x1f0>)
 8013ada:	486e      	ldr	r0, [pc, #440]	; (8013c94 <etharp_output+0x1ec>)
 8013adc:	f002 f9fc 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d106      	bne.n	8013af4 <etharp_output+0x4c>
 8013ae6:	4b69      	ldr	r3, [pc, #420]	; (8013c8c <etharp_output+0x1e4>)
 8013ae8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013aec:	496b      	ldr	r1, [pc, #428]	; (8013c9c <etharp_output+0x1f4>)
 8013aee:	4869      	ldr	r0, [pc, #420]	; (8013c94 <etharp_output+0x1ec>)
 8013af0:	f002 f9f2 	bl	8015ed8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	68f9      	ldr	r1, [r7, #12]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f000 feee 	bl	80148dc <ip4_addr_isbroadcast_u32>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d002      	beq.n	8013b0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013b06:	4b66      	ldr	r3, [pc, #408]	; (8013ca0 <etharp_output+0x1f8>)
 8013b08:	61fb      	str	r3, [r7, #28]
 8013b0a:	e0af      	b.n	8013c6c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b14:	2be0      	cmp	r3, #224	; 0xe0
 8013b16:	d118      	bne.n	8013b4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013b20:	235e      	movs	r3, #94	; 0x5e
 8013b22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	3301      	adds	r3, #1
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b2e:	b2db      	uxtb	r3, r3
 8013b30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	3302      	adds	r3, #2
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3303      	adds	r3, #3
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013b42:	f107 0310 	add.w	r3, r7, #16
 8013b46:	61fb      	str	r3, [r7, #28]
 8013b48:	e090      	b.n	8013c6c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	3304      	adds	r3, #4
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	405a      	eors	r2, r3
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	3308      	adds	r3, #8
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	4013      	ands	r3, r2
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d012      	beq.n	8013b88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013b68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d00b      	beq.n	8013b88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	330c      	adds	r3, #12
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d003      	beq.n	8013b82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	330c      	adds	r3, #12
 8013b7e:	61bb      	str	r3, [r7, #24]
 8013b80:	e002      	b.n	8013b88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013b82:	f06f 0303 	mvn.w	r3, #3
 8013b86:	e07d      	b.n	8013c84 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013b88:	4b46      	ldr	r3, [pc, #280]	; (8013ca4 <etharp_output+0x1fc>)
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4a46      	ldr	r2, [pc, #280]	; (8013ca8 <etharp_output+0x200>)
 8013b90:	460b      	mov	r3, r1
 8013b92:	005b      	lsls	r3, r3, #1
 8013b94:	440b      	add	r3, r1
 8013b96:	00db      	lsls	r3, r3, #3
 8013b98:	4413      	add	r3, r2
 8013b9a:	3314      	adds	r3, #20
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	2b01      	cmp	r3, #1
 8013ba0:	d925      	bls.n	8013bee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013ba2:	4b40      	ldr	r3, [pc, #256]	; (8013ca4 <etharp_output+0x1fc>)
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	4a3f      	ldr	r2, [pc, #252]	; (8013ca8 <etharp_output+0x200>)
 8013baa:	460b      	mov	r3, r1
 8013bac:	005b      	lsls	r3, r3, #1
 8013bae:	440b      	add	r3, r1
 8013bb0:	00db      	lsls	r3, r3, #3
 8013bb2:	4413      	add	r3, r2
 8013bb4:	3308      	adds	r3, #8
 8013bb6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d117      	bne.n	8013bee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013bbe:	69bb      	ldr	r3, [r7, #24]
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	4b38      	ldr	r3, [pc, #224]	; (8013ca4 <etharp_output+0x1fc>)
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	4937      	ldr	r1, [pc, #220]	; (8013ca8 <etharp_output+0x200>)
 8013bca:	4603      	mov	r3, r0
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	4403      	add	r3, r0
 8013bd0:	00db      	lsls	r3, r3, #3
 8013bd2:	440b      	add	r3, r1
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d108      	bne.n	8013bee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013bdc:	4b31      	ldr	r3, [pc, #196]	; (8013ca4 <etharp_output+0x1fc>)
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	461a      	mov	r2, r3
 8013be2:	68b9      	ldr	r1, [r7, #8]
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f7ff fec5 	bl	8013974 <etharp_output_to_arp_index>
 8013bea:	4603      	mov	r3, r0
 8013bec:	e04a      	b.n	8013c84 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013bee:	2300      	movs	r3, #0
 8013bf0:	75fb      	strb	r3, [r7, #23]
 8013bf2:	e031      	b.n	8013c58 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013bf4:	7dfa      	ldrb	r2, [r7, #23]
 8013bf6:	492c      	ldr	r1, [pc, #176]	; (8013ca8 <etharp_output+0x200>)
 8013bf8:	4613      	mov	r3, r2
 8013bfa:	005b      	lsls	r3, r3, #1
 8013bfc:	4413      	add	r3, r2
 8013bfe:	00db      	lsls	r3, r3, #3
 8013c00:	440b      	add	r3, r1
 8013c02:	3314      	adds	r3, #20
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	2b01      	cmp	r3, #1
 8013c08:	d923      	bls.n	8013c52 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013c0a:	7dfa      	ldrb	r2, [r7, #23]
 8013c0c:	4926      	ldr	r1, [pc, #152]	; (8013ca8 <etharp_output+0x200>)
 8013c0e:	4613      	mov	r3, r2
 8013c10:	005b      	lsls	r3, r3, #1
 8013c12:	4413      	add	r3, r2
 8013c14:	00db      	lsls	r3, r3, #3
 8013c16:	440b      	add	r3, r1
 8013c18:	3308      	adds	r3, #8
 8013c1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013c1c:	68fa      	ldr	r2, [r7, #12]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	d117      	bne.n	8013c52 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	6819      	ldr	r1, [r3, #0]
 8013c26:	7dfa      	ldrb	r2, [r7, #23]
 8013c28:	481f      	ldr	r0, [pc, #124]	; (8013ca8 <etharp_output+0x200>)
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	005b      	lsls	r3, r3, #1
 8013c2e:	4413      	add	r3, r2
 8013c30:	00db      	lsls	r3, r3, #3
 8013c32:	4403      	add	r3, r0
 8013c34:	3304      	adds	r3, #4
 8013c36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013c38:	4299      	cmp	r1, r3
 8013c3a:	d10a      	bne.n	8013c52 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013c3c:	4a19      	ldr	r2, [pc, #100]	; (8013ca4 <etharp_output+0x1fc>)
 8013c3e:	7dfb      	ldrb	r3, [r7, #23]
 8013c40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013c42:	7dfb      	ldrb	r3, [r7, #23]
 8013c44:	461a      	mov	r2, r3
 8013c46:	68b9      	ldr	r1, [r7, #8]
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f7ff fe93 	bl	8013974 <etharp_output_to_arp_index>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	e018      	b.n	8013c84 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013c52:	7dfb      	ldrb	r3, [r7, #23]
 8013c54:	3301      	adds	r3, #1
 8013c56:	75fb      	strb	r3, [r7, #23]
 8013c58:	7dfb      	ldrb	r3, [r7, #23]
 8013c5a:	2b09      	cmp	r3, #9
 8013c5c:	d9ca      	bls.n	8013bf4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013c5e:	68ba      	ldr	r2, [r7, #8]
 8013c60:	69b9      	ldr	r1, [r7, #24]
 8013c62:	68f8      	ldr	r0, [r7, #12]
 8013c64:	f000 f822 	bl	8013cac <etharp_query>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	e00b      	b.n	8013c84 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013c72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013c76:	9300      	str	r3, [sp, #0]
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	68b9      	ldr	r1, [r7, #8]
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f001 fd3b 	bl	80156f8 <ethernet_output>
 8013c82:	4603      	mov	r3, r0
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3720      	adds	r7, #32
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	08019be8 	.word	0x08019be8
 8013c90:	08019d38 	.word	0x08019d38
 8013c94:	08019c60 	.word	0x08019c60
 8013c98:	08019d88 	.word	0x08019d88
 8013c9c:	08019d28 	.word	0x08019d28
 8013ca0:	0801a444 	.word	0x0801a444
 8013ca4:	20011a90 	.word	0x20011a90
 8013ca8:	200119a0 	.word	0x200119a0

08013cac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b08c      	sub	sp, #48	; 0x30
 8013cb0:	af02      	add	r7, sp, #8
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	3326      	adds	r3, #38	; 0x26
 8013cbc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013cbe:	23ff      	movs	r3, #255	; 0xff
 8013cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	68f9      	ldr	r1, [r7, #12]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f000 fe04 	bl	80148dc <ip4_addr_isbroadcast_u32>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d10c      	bne.n	8013cf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013ce2:	2be0      	cmp	r3, #224	; 0xe0
 8013ce4:	d006      	beq.n	8013cf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d003      	beq.n	8013cf4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d102      	bne.n	8013cfa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013cf4:	f06f 030f 	mvn.w	r3, #15
 8013cf8:	e101      	b.n	8013efe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013cfa:	68fa      	ldr	r2, [r7, #12]
 8013cfc:	2101      	movs	r1, #1
 8013cfe:	68b8      	ldr	r0, [r7, #8]
 8013d00:	f7ff fb60 	bl	80133c4 <etharp_find_entry>
 8013d04:	4603      	mov	r3, r0
 8013d06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013d08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	da02      	bge.n	8013d16 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013d10:	8a7b      	ldrh	r3, [r7, #18]
 8013d12:	b25b      	sxtb	r3, r3
 8013d14:	e0f3      	b.n	8013efe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013d16:	8a7b      	ldrh	r3, [r7, #18]
 8013d18:	2b7e      	cmp	r3, #126	; 0x7e
 8013d1a:	d906      	bls.n	8013d2a <etharp_query+0x7e>
 8013d1c:	4b7a      	ldr	r3, [pc, #488]	; (8013f08 <etharp_query+0x25c>)
 8013d1e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013d22:	497a      	ldr	r1, [pc, #488]	; (8013f0c <etharp_query+0x260>)
 8013d24:	487a      	ldr	r0, [pc, #488]	; (8013f10 <etharp_query+0x264>)
 8013d26:	f002 f8d7 	bl	8015ed8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013d2a:	8a7b      	ldrh	r3, [r7, #18]
 8013d2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013d2e:	7c7a      	ldrb	r2, [r7, #17]
 8013d30:	4978      	ldr	r1, [pc, #480]	; (8013f14 <etharp_query+0x268>)
 8013d32:	4613      	mov	r3, r2
 8013d34:	005b      	lsls	r3, r3, #1
 8013d36:	4413      	add	r3, r2
 8013d38:	00db      	lsls	r3, r3, #3
 8013d3a:	440b      	add	r3, r1
 8013d3c:	3314      	adds	r3, #20
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d115      	bne.n	8013d70 <etharp_query+0xc4>
    is_new_entry = 1;
 8013d44:	2301      	movs	r3, #1
 8013d46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013d48:	7c7a      	ldrb	r2, [r7, #17]
 8013d4a:	4972      	ldr	r1, [pc, #456]	; (8013f14 <etharp_query+0x268>)
 8013d4c:	4613      	mov	r3, r2
 8013d4e:	005b      	lsls	r3, r3, #1
 8013d50:	4413      	add	r3, r2
 8013d52:	00db      	lsls	r3, r3, #3
 8013d54:	440b      	add	r3, r1
 8013d56:	3314      	adds	r3, #20
 8013d58:	2201      	movs	r2, #1
 8013d5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013d5c:	7c7a      	ldrb	r2, [r7, #17]
 8013d5e:	496d      	ldr	r1, [pc, #436]	; (8013f14 <etharp_query+0x268>)
 8013d60:	4613      	mov	r3, r2
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	00db      	lsls	r3, r3, #3
 8013d68:	440b      	add	r3, r1
 8013d6a:	3308      	adds	r3, #8
 8013d6c:	68fa      	ldr	r2, [r7, #12]
 8013d6e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013d70:	7c7a      	ldrb	r2, [r7, #17]
 8013d72:	4968      	ldr	r1, [pc, #416]	; (8013f14 <etharp_query+0x268>)
 8013d74:	4613      	mov	r3, r2
 8013d76:	005b      	lsls	r3, r3, #1
 8013d78:	4413      	add	r3, r2
 8013d7a:	00db      	lsls	r3, r3, #3
 8013d7c:	440b      	add	r3, r1
 8013d7e:	3314      	adds	r3, #20
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	2b01      	cmp	r3, #1
 8013d84:	d011      	beq.n	8013daa <etharp_query+0xfe>
 8013d86:	7c7a      	ldrb	r2, [r7, #17]
 8013d88:	4962      	ldr	r1, [pc, #392]	; (8013f14 <etharp_query+0x268>)
 8013d8a:	4613      	mov	r3, r2
 8013d8c:	005b      	lsls	r3, r3, #1
 8013d8e:	4413      	add	r3, r2
 8013d90:	00db      	lsls	r3, r3, #3
 8013d92:	440b      	add	r3, r1
 8013d94:	3314      	adds	r3, #20
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	d806      	bhi.n	8013daa <etharp_query+0xfe>
 8013d9c:	4b5a      	ldr	r3, [pc, #360]	; (8013f08 <etharp_query+0x25c>)
 8013d9e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013da2:	495d      	ldr	r1, [pc, #372]	; (8013f18 <etharp_query+0x26c>)
 8013da4:	485a      	ldr	r0, [pc, #360]	; (8013f10 <etharp_query+0x264>)
 8013da6:	f002 f897 	bl	8015ed8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013daa:	6a3b      	ldr	r3, [r7, #32]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d102      	bne.n	8013db6 <etharp_query+0x10a>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d10c      	bne.n	8013dd0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013db6:	68b9      	ldr	r1, [r7, #8]
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f000 f963 	bl	8014084 <etharp_request>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d102      	bne.n	8013dd0 <etharp_query+0x124>
      return result;
 8013dca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013dce:	e096      	b.n	8013efe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d106      	bne.n	8013de4 <etharp_query+0x138>
 8013dd6:	4b4c      	ldr	r3, [pc, #304]	; (8013f08 <etharp_query+0x25c>)
 8013dd8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013ddc:	494f      	ldr	r1, [pc, #316]	; (8013f1c <etharp_query+0x270>)
 8013dde:	484c      	ldr	r0, [pc, #304]	; (8013f10 <etharp_query+0x264>)
 8013de0:	f002 f87a 	bl	8015ed8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013de4:	7c7a      	ldrb	r2, [r7, #17]
 8013de6:	494b      	ldr	r1, [pc, #300]	; (8013f14 <etharp_query+0x268>)
 8013de8:	4613      	mov	r3, r2
 8013dea:	005b      	lsls	r3, r3, #1
 8013dec:	4413      	add	r3, r2
 8013dee:	00db      	lsls	r3, r3, #3
 8013df0:	440b      	add	r3, r1
 8013df2:	3314      	adds	r3, #20
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	2b01      	cmp	r3, #1
 8013df8:	d917      	bls.n	8013e2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013dfa:	4a49      	ldr	r2, [pc, #292]	; (8013f20 <etharp_query+0x274>)
 8013dfc:	7c7b      	ldrb	r3, [r7, #17]
 8013dfe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013e00:	7c7a      	ldrb	r2, [r7, #17]
 8013e02:	4613      	mov	r3, r2
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	00db      	lsls	r3, r3, #3
 8013e0a:	3308      	adds	r3, #8
 8013e0c:	4a41      	ldr	r2, [pc, #260]	; (8013f14 <etharp_query+0x268>)
 8013e0e:	4413      	add	r3, r2
 8013e10:	3304      	adds	r3, #4
 8013e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e16:	9200      	str	r2, [sp, #0]
 8013e18:	697a      	ldr	r2, [r7, #20]
 8013e1a:	6879      	ldr	r1, [r7, #4]
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f001 fc6b 	bl	80156f8 <ethernet_output>
 8013e22:	4603      	mov	r3, r0
 8013e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e28:	e067      	b.n	8013efa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013e2a:	7c7a      	ldrb	r2, [r7, #17]
 8013e2c:	4939      	ldr	r1, [pc, #228]	; (8013f14 <etharp_query+0x268>)
 8013e2e:	4613      	mov	r3, r2
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	4413      	add	r3, r2
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	440b      	add	r3, r1
 8013e38:	3314      	adds	r3, #20
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d15c      	bne.n	8013efa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013e40:	2300      	movs	r3, #0
 8013e42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013e48:	e01c      	b.n	8013e84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013e4a:	69fb      	ldr	r3, [r7, #28]
 8013e4c:	895a      	ldrh	r2, [r3, #10]
 8013e4e:	69fb      	ldr	r3, [r7, #28]
 8013e50:	891b      	ldrh	r3, [r3, #8]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d10a      	bne.n	8013e6c <etharp_query+0x1c0>
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d006      	beq.n	8013e6c <etharp_query+0x1c0>
 8013e5e:	4b2a      	ldr	r3, [pc, #168]	; (8013f08 <etharp_query+0x25c>)
 8013e60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013e64:	492f      	ldr	r1, [pc, #188]	; (8013f24 <etharp_query+0x278>)
 8013e66:	482a      	ldr	r0, [pc, #168]	; (8013f10 <etharp_query+0x264>)
 8013e68:	f002 f836 	bl	8015ed8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	7b1b      	ldrb	r3, [r3, #12]
 8013e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d002      	beq.n	8013e7e <etharp_query+0x1d2>
        copy_needed = 1;
 8013e78:	2301      	movs	r3, #1
 8013e7a:	61bb      	str	r3, [r7, #24]
        break;
 8013e7c:	e005      	b.n	8013e8a <etharp_query+0x1de>
      }
      p = p->next;
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013e84:	69fb      	ldr	r3, [r7, #28]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d1df      	bne.n	8013e4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d007      	beq.n	8013ea0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013e96:	200e      	movs	r0, #14
 8013e98:	f7f8 ff18 	bl	800cccc <pbuf_clone>
 8013e9c:	61f8      	str	r0, [r7, #28]
 8013e9e:	e004      	b.n	8013eaa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ea4:	69f8      	ldr	r0, [r7, #28]
 8013ea6:	f7f8 fd4f 	bl	800c948 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013eaa:	69fb      	ldr	r3, [r7, #28]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d021      	beq.n	8013ef4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013eb0:	7c7a      	ldrb	r2, [r7, #17]
 8013eb2:	4918      	ldr	r1, [pc, #96]	; (8013f14 <etharp_query+0x268>)
 8013eb4:	4613      	mov	r3, r2
 8013eb6:	005b      	lsls	r3, r3, #1
 8013eb8:	4413      	add	r3, r2
 8013eba:	00db      	lsls	r3, r3, #3
 8013ebc:	440b      	add	r3, r1
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d00a      	beq.n	8013eda <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013ec4:	7c7a      	ldrb	r2, [r7, #17]
 8013ec6:	4913      	ldr	r1, [pc, #76]	; (8013f14 <etharp_query+0x268>)
 8013ec8:	4613      	mov	r3, r2
 8013eca:	005b      	lsls	r3, r3, #1
 8013ecc:	4413      	add	r3, r2
 8013ece:	00db      	lsls	r3, r3, #3
 8013ed0:	440b      	add	r3, r1
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7f8 fc91 	bl	800c7fc <pbuf_free>
      }
      arp_table[i].q = p;
 8013eda:	7c7a      	ldrb	r2, [r7, #17]
 8013edc:	490d      	ldr	r1, [pc, #52]	; (8013f14 <etharp_query+0x268>)
 8013ede:	4613      	mov	r3, r2
 8013ee0:	005b      	lsls	r3, r3, #1
 8013ee2:	4413      	add	r3, r2
 8013ee4:	00db      	lsls	r3, r3, #3
 8013ee6:	440b      	add	r3, r1
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013eec:	2300      	movs	r3, #0
 8013eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013ef2:	e002      	b.n	8013efa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013ef4:	23ff      	movs	r3, #255	; 0xff
 8013ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013efa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3728      	adds	r7, #40	; 0x28
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	08019be8 	.word	0x08019be8
 8013f0c:	08019d94 	.word	0x08019d94
 8013f10:	08019c60 	.word	0x08019c60
 8013f14:	200119a0 	.word	0x200119a0
 8013f18:	08019da4 	.word	0x08019da4
 8013f1c:	08019d88 	.word	0x08019d88
 8013f20:	20011a90 	.word	0x20011a90
 8013f24:	08019dcc 	.word	0x08019dcc

08013f28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b08a      	sub	sp, #40	; 0x28
 8013f2c:	af02      	add	r7, sp, #8
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
 8013f34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013f36:	2300      	movs	r3, #0
 8013f38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d106      	bne.n	8013f4e <etharp_raw+0x26>
 8013f40:	4b3a      	ldr	r3, [pc, #232]	; (801402c <etharp_raw+0x104>)
 8013f42:	f240 4257 	movw	r2, #1111	; 0x457
 8013f46:	493a      	ldr	r1, [pc, #232]	; (8014030 <etharp_raw+0x108>)
 8013f48:	483a      	ldr	r0, [pc, #232]	; (8014034 <etharp_raw+0x10c>)
 8013f4a:	f001 ffc5 	bl	8015ed8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013f4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f52:	211c      	movs	r1, #28
 8013f54:	200e      	movs	r0, #14
 8013f56:	f7f8 f96d 	bl	800c234 <pbuf_alloc>
 8013f5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013f5c:	69bb      	ldr	r3, [r7, #24]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d102      	bne.n	8013f68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f66:	e05d      	b.n	8014024 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013f68:	69bb      	ldr	r3, [r7, #24]
 8013f6a:	895b      	ldrh	r3, [r3, #10]
 8013f6c:	2b1b      	cmp	r3, #27
 8013f6e:	d806      	bhi.n	8013f7e <etharp_raw+0x56>
 8013f70:	4b2e      	ldr	r3, [pc, #184]	; (801402c <etharp_raw+0x104>)
 8013f72:	f240 4262 	movw	r2, #1122	; 0x462
 8013f76:	4930      	ldr	r1, [pc, #192]	; (8014038 <etharp_raw+0x110>)
 8013f78:	482e      	ldr	r0, [pc, #184]	; (8014034 <etharp_raw+0x10c>)
 8013f7a:	f001 ffad 	bl	8015ed8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013f84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7f6 ff32 	bl	800adf0 <lwip_htons>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	461a      	mov	r2, r3
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013f9a:	2b06      	cmp	r3, #6
 8013f9c:	d006      	beq.n	8013fac <etharp_raw+0x84>
 8013f9e:	4b23      	ldr	r3, [pc, #140]	; (801402c <etharp_raw+0x104>)
 8013fa0:	f240 4269 	movw	r2, #1129	; 0x469
 8013fa4:	4925      	ldr	r1, [pc, #148]	; (801403c <etharp_raw+0x114>)
 8013fa6:	4823      	ldr	r0, [pc, #140]	; (8014034 <etharp_raw+0x10c>)
 8013fa8:	f001 ff96 	bl	8015ed8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	3308      	adds	r3, #8
 8013fb0:	2206      	movs	r2, #6
 8013fb2:	6839      	ldr	r1, [r7, #0]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f001 feca 	bl	8015d4e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	3312      	adds	r3, #18
 8013fbe:	2206      	movs	r2, #6
 8013fc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f001 fec3 	bl	8015d4e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	330e      	adds	r3, #14
 8013fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fce:	6812      	ldr	r2, [r2, #0]
 8013fd0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	3318      	adds	r3, #24
 8013fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fd8:	6812      	ldr	r2, [r2, #0]
 8013fda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	701a      	strb	r2, [r3, #0]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	f042 0201 	orr.w	r2, r2, #1
 8013fe8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	2200      	movs	r2, #0
 8013fee:	f042 0208 	orr.w	r2, r2, #8
 8013ff2:	709a      	strb	r2, [r3, #2]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	2206      	movs	r2, #6
 8013ffc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	2204      	movs	r2, #4
 8014002:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014004:	f640 0306 	movw	r3, #2054	; 0x806
 8014008:	9300      	str	r3, [sp, #0]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	68ba      	ldr	r2, [r7, #8]
 801400e:	69b9      	ldr	r1, [r7, #24]
 8014010:	68f8      	ldr	r0, [r7, #12]
 8014012:	f001 fb71 	bl	80156f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014016:	69b8      	ldr	r0, [r7, #24]
 8014018:	f7f8 fbf0 	bl	800c7fc <pbuf_free>
  p = NULL;
 801401c:	2300      	movs	r3, #0
 801401e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014020:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014024:	4618      	mov	r0, r3
 8014026:	3720      	adds	r7, #32
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	08019be8 	.word	0x08019be8
 8014030:	08019d38 	.word	0x08019d38
 8014034:	08019c60 	.word	0x08019c60
 8014038:	08019de8 	.word	0x08019de8
 801403c:	08019e1c 	.word	0x08019e1c

08014040 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b088      	sub	sp, #32
 8014044:	af04      	add	r7, sp, #16
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801405c:	2201      	movs	r2, #1
 801405e:	9203      	str	r2, [sp, #12]
 8014060:	68ba      	ldr	r2, [r7, #8]
 8014062:	9202      	str	r2, [sp, #8]
 8014064:	4a06      	ldr	r2, [pc, #24]	; (8014080 <etharp_request_dst+0x40>)
 8014066:	9201      	str	r2, [sp, #4]
 8014068:	9300      	str	r3, [sp, #0]
 801406a:	4603      	mov	r3, r0
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	68f8      	ldr	r0, [r7, #12]
 8014070:	f7ff ff5a 	bl	8013f28 <etharp_raw>
 8014074:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014076:	4618      	mov	r0, r3
 8014078:	3710      	adds	r7, #16
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	0801a44c 	.word	0x0801a44c

08014084 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801408e:	4a05      	ldr	r2, [pc, #20]	; (80140a4 <etharp_request+0x20>)
 8014090:	6839      	ldr	r1, [r7, #0]
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7ff ffd4 	bl	8014040 <etharp_request_dst>
 8014098:	4603      	mov	r3, r0
}
 801409a:	4618      	mov	r0, r3
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop
 80140a4:	0801a444 	.word	0x0801a444

080140a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b08e      	sub	sp, #56	; 0x38
 80140ac:	af04      	add	r7, sp, #16
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80140b2:	4b79      	ldr	r3, [pc, #484]	; (8014298 <icmp_input+0x1f0>)
 80140b4:	689b      	ldr	r3, [r3, #8]
 80140b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80140b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	f003 030f 	and.w	r3, r3, #15
 80140c0:	b2db      	uxtb	r3, r3
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80140c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140ca:	2b13      	cmp	r3, #19
 80140cc:	f240 80cd 	bls.w	801426a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	895b      	ldrh	r3, [r3, #10]
 80140d4:	2b03      	cmp	r3, #3
 80140d6:	f240 80ca 	bls.w	801426e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80140e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f000 80b7 	beq.w	801425c <icmp_input+0x1b4>
 80140ee:	2b08      	cmp	r3, #8
 80140f0:	f040 80b7 	bne.w	8014262 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80140f4:	4b69      	ldr	r3, [pc, #420]	; (801429c <icmp_input+0x1f4>)
 80140f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80140f8:	4b67      	ldr	r3, [pc, #412]	; (8014298 <icmp_input+0x1f0>)
 80140fa:	695b      	ldr	r3, [r3, #20]
 80140fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014100:	2be0      	cmp	r3, #224	; 0xe0
 8014102:	f000 80bb 	beq.w	801427c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014106:	4b64      	ldr	r3, [pc, #400]	; (8014298 <icmp_input+0x1f0>)
 8014108:	695b      	ldr	r3, [r3, #20]
 801410a:	4a63      	ldr	r2, [pc, #396]	; (8014298 <icmp_input+0x1f0>)
 801410c:	6812      	ldr	r2, [r2, #0]
 801410e:	4611      	mov	r1, r2
 8014110:	4618      	mov	r0, r3
 8014112:	f000 fbe3 	bl	80148dc <ip4_addr_isbroadcast_u32>
 8014116:	4603      	mov	r3, r0
 8014118:	2b00      	cmp	r3, #0
 801411a:	f040 80b1 	bne.w	8014280 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	891b      	ldrh	r3, [r3, #8]
 8014122:	2b07      	cmp	r3, #7
 8014124:	f240 80a5 	bls.w	8014272 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801412a:	330e      	adds	r3, #14
 801412c:	4619      	mov	r1, r3
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f7f8 face 	bl	800c6d0 <pbuf_add_header>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d04b      	beq.n	80141d2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	891a      	ldrh	r2, [r3, #8]
 801413e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014140:	4413      	add	r3, r2
 8014142:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	891b      	ldrh	r3, [r3, #8]
 8014148:	8b7a      	ldrh	r2, [r7, #26]
 801414a:	429a      	cmp	r2, r3
 801414c:	f0c0 809a 	bcc.w	8014284 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014150:	8b7b      	ldrh	r3, [r7, #26]
 8014152:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014156:	4619      	mov	r1, r3
 8014158:	200e      	movs	r0, #14
 801415a:	f7f8 f86b 	bl	800c234 <pbuf_alloc>
 801415e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	2b00      	cmp	r3, #0
 8014164:	f000 8090 	beq.w	8014288 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	895b      	ldrh	r3, [r3, #10]
 801416c:	461a      	mov	r2, r3
 801416e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014170:	3308      	adds	r3, #8
 8014172:	429a      	cmp	r2, r3
 8014174:	d203      	bcs.n	801417e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014176:	6978      	ldr	r0, [r7, #20]
 8014178:	f7f8 fb40 	bl	800c7fc <pbuf_free>
          goto icmperr;
 801417c:	e085      	b.n	801428a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014186:	4618      	mov	r0, r3
 8014188:	f001 fde1 	bl	8015d4e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801418c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801418e:	4619      	mov	r1, r3
 8014190:	6978      	ldr	r0, [r7, #20]
 8014192:	f7f8 faad 	bl	800c6f0 <pbuf_remove_header>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d009      	beq.n	80141b0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801419c:	4b40      	ldr	r3, [pc, #256]	; (80142a0 <icmp_input+0x1f8>)
 801419e:	22b6      	movs	r2, #182	; 0xb6
 80141a0:	4940      	ldr	r1, [pc, #256]	; (80142a4 <icmp_input+0x1fc>)
 80141a2:	4841      	ldr	r0, [pc, #260]	; (80142a8 <icmp_input+0x200>)
 80141a4:	f001 fe98 	bl	8015ed8 <iprintf>
          pbuf_free(r);
 80141a8:	6978      	ldr	r0, [r7, #20]
 80141aa:	f7f8 fb27 	bl	800c7fc <pbuf_free>
          goto icmperr;
 80141ae:	e06c      	b.n	801428a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80141b0:	6879      	ldr	r1, [r7, #4]
 80141b2:	6978      	ldr	r0, [r7, #20]
 80141b4:	f7f8 fc46 	bl	800ca44 <pbuf_copy>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d003      	beq.n	80141c6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80141be:	6978      	ldr	r0, [r7, #20]
 80141c0:	f7f8 fb1c 	bl	800c7fc <pbuf_free>
          goto icmperr;
 80141c4:	e061      	b.n	801428a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7f8 fb18 	bl	800c7fc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	607b      	str	r3, [r7, #4]
 80141d0:	e00f      	b.n	80141f2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80141d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141d4:	330e      	adds	r3, #14
 80141d6:	4619      	mov	r1, r3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7f8 fa89 	bl	800c6f0 <pbuf_remove_header>
 80141de:	4603      	mov	r3, r0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d006      	beq.n	80141f2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80141e4:	4b2e      	ldr	r3, [pc, #184]	; (80142a0 <icmp_input+0x1f8>)
 80141e6:	22c7      	movs	r2, #199	; 0xc7
 80141e8:	4930      	ldr	r1, [pc, #192]	; (80142ac <icmp_input+0x204>)
 80141ea:	482f      	ldr	r0, [pc, #188]	; (80142a8 <icmp_input+0x200>)
 80141ec:	f001 fe74 	bl	8015ed8 <iprintf>
          goto icmperr;
 80141f0:	e04b      	b.n	801428a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80141f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141fa:	4619      	mov	r1, r3
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f7f8 fa67 	bl	800c6d0 <pbuf_add_header>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d12b      	bne.n	8014260 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801420e:	69fb      	ldr	r3, [r7, #28]
 8014210:	681a      	ldr	r2, [r3, #0]
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014216:	4b20      	ldr	r3, [pc, #128]	; (8014298 <icmp_input+0x1f0>)
 8014218:	691a      	ldr	r2, [r3, #16]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	2200      	movs	r2, #0
 8014222:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	2200      	movs	r2, #0
 8014228:	709a      	strb	r2, [r3, #2]
 801422a:	2200      	movs	r2, #0
 801422c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	22ff      	movs	r2, #255	; 0xff
 8014232:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	2200      	movs	r2, #0
 8014238:	729a      	strb	r2, [r3, #10]
 801423a:	2200      	movs	r2, #0
 801423c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	9302      	str	r3, [sp, #8]
 8014242:	2301      	movs	r3, #1
 8014244:	9301      	str	r3, [sp, #4]
 8014246:	2300      	movs	r3, #0
 8014248:	9300      	str	r3, [sp, #0]
 801424a:	23ff      	movs	r3, #255	; 0xff
 801424c:	2200      	movs	r2, #0
 801424e:	69f9      	ldr	r1, [r7, #28]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 fa6b 	bl	801472c <ip4_output_if>
 8014256:	4603      	mov	r3, r0
 8014258:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801425a:	e001      	b.n	8014260 <icmp_input+0x1b8>
      break;
 801425c:	bf00      	nop
 801425e:	e000      	b.n	8014262 <icmp_input+0x1ba>
      break;
 8014260:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f7f8 faca 	bl	800c7fc <pbuf_free>
  return;
 8014268:	e013      	b.n	8014292 <icmp_input+0x1ea>
    goto lenerr;
 801426a:	bf00      	nop
 801426c:	e002      	b.n	8014274 <icmp_input+0x1cc>
    goto lenerr;
 801426e:	bf00      	nop
 8014270:	e000      	b.n	8014274 <icmp_input+0x1cc>
        goto lenerr;
 8014272:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f7f8 fac1 	bl	800c7fc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801427a:	e00a      	b.n	8014292 <icmp_input+0x1ea>
        goto icmperr;
 801427c:	bf00      	nop
 801427e:	e004      	b.n	801428a <icmp_input+0x1e2>
        goto icmperr;
 8014280:	bf00      	nop
 8014282:	e002      	b.n	801428a <icmp_input+0x1e2>
          goto icmperr;
 8014284:	bf00      	nop
 8014286:	e000      	b.n	801428a <icmp_input+0x1e2>
          goto icmperr;
 8014288:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7f8 fab6 	bl	800c7fc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014290:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014292:	3728      	adds	r7, #40	; 0x28
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	200098b8 	.word	0x200098b8
 801429c:	200098cc 	.word	0x200098cc
 80142a0:	08019e60 	.word	0x08019e60
 80142a4:	08019e98 	.word	0x08019e98
 80142a8:	08019ed0 	.word	0x08019ed0
 80142ac:	08019ef8 	.word	0x08019ef8

080142b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	460b      	mov	r3, r1
 80142ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80142bc:	78fb      	ldrb	r3, [r7, #3]
 80142be:	461a      	mov	r2, r3
 80142c0:	2103      	movs	r1, #3
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f000 f814 	bl	80142f0 <icmp_send_response>
}
 80142c8:	bf00      	nop
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	460b      	mov	r3, r1
 80142da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80142dc:	78fb      	ldrb	r3, [r7, #3]
 80142de:	461a      	mov	r2, r3
 80142e0:	210b      	movs	r1, #11
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f000 f804 	bl	80142f0 <icmp_send_response>
}
 80142e8:	bf00      	nop
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b08c      	sub	sp, #48	; 0x30
 80142f4:	af04      	add	r7, sp, #16
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	460b      	mov	r3, r1
 80142fa:	70fb      	strb	r3, [r7, #3]
 80142fc:	4613      	mov	r3, r2
 80142fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014300:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014304:	2124      	movs	r1, #36	; 0x24
 8014306:	2022      	movs	r0, #34	; 0x22
 8014308:	f7f7 ff94 	bl	800c234 <pbuf_alloc>
 801430c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d04c      	beq.n	80143ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014314:	69fb      	ldr	r3, [r7, #28]
 8014316:	895b      	ldrh	r3, [r3, #10]
 8014318:	2b23      	cmp	r3, #35	; 0x23
 801431a:	d806      	bhi.n	801432a <icmp_send_response+0x3a>
 801431c:	4b26      	ldr	r3, [pc, #152]	; (80143b8 <icmp_send_response+0xc8>)
 801431e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014322:	4926      	ldr	r1, [pc, #152]	; (80143bc <icmp_send_response+0xcc>)
 8014324:	4826      	ldr	r0, [pc, #152]	; (80143c0 <icmp_send_response+0xd0>)
 8014326:	f001 fdd7 	bl	8015ed8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	78fa      	ldrb	r2, [r7, #3]
 801433a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	78ba      	ldrb	r2, [r7, #2]
 8014340:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	2200      	movs	r2, #0
 8014346:	711a      	strb	r2, [r3, #4]
 8014348:	2200      	movs	r2, #0
 801434a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	2200      	movs	r2, #0
 8014350:	719a      	strb	r2, [r3, #6]
 8014352:	2200      	movs	r2, #0
 8014354:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014356:	69fb      	ldr	r3, [r7, #28]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	f103 0008 	add.w	r0, r3, #8
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	221c      	movs	r2, #28
 8014364:	4619      	mov	r1, r3
 8014366:	f001 fcf2 	bl	8015d4e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	68db      	ldr	r3, [r3, #12]
 801436e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014370:	f107 030c 	add.w	r3, r7, #12
 8014374:	4618      	mov	r0, r3
 8014376:	f000 f825 	bl	80143c4 <ip4_route>
 801437a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d011      	beq.n	80143a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	2200      	movs	r2, #0
 8014386:	709a      	strb	r2, [r3, #2]
 8014388:	2200      	movs	r2, #0
 801438a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801438c:	f107 020c 	add.w	r2, r7, #12
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	9302      	str	r3, [sp, #8]
 8014394:	2301      	movs	r3, #1
 8014396:	9301      	str	r3, [sp, #4]
 8014398:	2300      	movs	r3, #0
 801439a:	9300      	str	r3, [sp, #0]
 801439c:	23ff      	movs	r3, #255	; 0xff
 801439e:	2100      	movs	r1, #0
 80143a0:	69f8      	ldr	r0, [r7, #28]
 80143a2:	f000 f9c3 	bl	801472c <ip4_output_if>
  }
  pbuf_free(q);
 80143a6:	69f8      	ldr	r0, [r7, #28]
 80143a8:	f7f8 fa28 	bl	800c7fc <pbuf_free>
 80143ac:	e000      	b.n	80143b0 <icmp_send_response+0xc0>
    return;
 80143ae:	bf00      	nop
}
 80143b0:	3720      	adds	r7, #32
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bd80      	pop	{r7, pc}
 80143b6:	bf00      	nop
 80143b8:	08019e60 	.word	0x08019e60
 80143bc:	08019f2c 	.word	0x08019f2c
 80143c0:	08019ed0 	.word	0x08019ed0

080143c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b085      	sub	sp, #20
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80143cc:	4b33      	ldr	r3, [pc, #204]	; (801449c <ip4_route+0xd8>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	60fb      	str	r3, [r7, #12]
 80143d2:	e036      	b.n	8014442 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143da:	f003 0301 	and.w	r3, r3, #1
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d02b      	beq.n	801443c <ip4_route+0x78>
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143ea:	089b      	lsrs	r3, r3, #2
 80143ec:	f003 0301 	and.w	r3, r3, #1
 80143f0:	b2db      	uxtb	r3, r3
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d022      	beq.n	801443c <ip4_route+0x78>
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	3304      	adds	r3, #4
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d01d      	beq.n	801443c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	3304      	adds	r3, #4
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	405a      	eors	r2, r3
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	3308      	adds	r3, #8
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4013      	ands	r3, r2
 8014414:	2b00      	cmp	r3, #0
 8014416:	d101      	bne.n	801441c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	e038      	b.n	801448e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014422:	f003 0302 	and.w	r3, r3, #2
 8014426:	2b00      	cmp	r3, #0
 8014428:	d108      	bne.n	801443c <ip4_route+0x78>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	330c      	adds	r3, #12
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	429a      	cmp	r2, r3
 8014436:	d101      	bne.n	801443c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	e028      	b.n	801448e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	60fb      	str	r3, [r7, #12]
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d1c5      	bne.n	80143d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014448:	4b15      	ldr	r3, [pc, #84]	; (80144a0 <ip4_route+0xdc>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d01a      	beq.n	8014486 <ip4_route+0xc2>
 8014450:	4b13      	ldr	r3, [pc, #76]	; (80144a0 <ip4_route+0xdc>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014458:	f003 0301 	and.w	r3, r3, #1
 801445c:	2b00      	cmp	r3, #0
 801445e:	d012      	beq.n	8014486 <ip4_route+0xc2>
 8014460:	4b0f      	ldr	r3, [pc, #60]	; (80144a0 <ip4_route+0xdc>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014468:	f003 0304 	and.w	r3, r3, #4
 801446c:	2b00      	cmp	r3, #0
 801446e:	d00a      	beq.n	8014486 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014470:	4b0b      	ldr	r3, [pc, #44]	; (80144a0 <ip4_route+0xdc>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	3304      	adds	r3, #4
 8014476:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014478:	2b00      	cmp	r3, #0
 801447a:	d004      	beq.n	8014486 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	b2db      	uxtb	r3, r3
 8014482:	2b7f      	cmp	r3, #127	; 0x7f
 8014484:	d101      	bne.n	801448a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014486:	2300      	movs	r3, #0
 8014488:	e001      	b.n	801448e <ip4_route+0xca>
  }

  return netif_default;
 801448a:	4b05      	ldr	r3, [pc, #20]	; (80144a0 <ip4_route+0xdc>)
 801448c:	681b      	ldr	r3, [r3, #0]
}
 801448e:	4618      	mov	r0, r3
 8014490:	3714      	adds	r7, #20
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop
 801449c:	20011938 	.word	0x20011938
 80144a0:	2001193c 	.word	0x2001193c

080144a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144b2:	f003 0301 	and.w	r3, r3, #1
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d016      	beq.n	80144ea <ip4_input_accept+0x46>
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	3304      	adds	r3, #4
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d011      	beq.n	80144ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80144c6:	4b0b      	ldr	r3, [pc, #44]	; (80144f4 <ip4_input_accept+0x50>)
 80144c8:	695a      	ldr	r2, [r3, #20]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	3304      	adds	r3, #4
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d008      	beq.n	80144e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80144d4:	4b07      	ldr	r3, [pc, #28]	; (80144f4 <ip4_input_accept+0x50>)
 80144d6:	695b      	ldr	r3, [r3, #20]
 80144d8:	6879      	ldr	r1, [r7, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	f000 f9fe 	bl	80148dc <ip4_addr_isbroadcast_u32>
 80144e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d001      	beq.n	80144ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80144e6:	2301      	movs	r3, #1
 80144e8:	e000      	b.n	80144ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80144ea:	2300      	movs	r3, #0
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3708      	adds	r7, #8
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}
 80144f4:	200098b8 	.word	0x200098b8

080144f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b086      	sub	sp, #24
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	091b      	lsrs	r3, r3, #4
 801450e:	b2db      	uxtb	r3, r3
 8014510:	2b04      	cmp	r3, #4
 8014512:	d004      	beq.n	801451e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f7f8 f971 	bl	800c7fc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801451a:	2300      	movs	r3, #0
 801451c:	e0fd      	b.n	801471a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	f003 030f 	and.w	r3, r3, #15
 8014526:	b2db      	uxtb	r3, r3
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	b2db      	uxtb	r3, r3
 801452c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	885b      	ldrh	r3, [r3, #2]
 8014532:	b29b      	uxth	r3, r3
 8014534:	4618      	mov	r0, r3
 8014536:	f7f6 fc5b 	bl	800adf0 <lwip_htons>
 801453a:	4603      	mov	r3, r0
 801453c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	891b      	ldrh	r3, [r3, #8]
 8014542:	89ba      	ldrh	r2, [r7, #12]
 8014544:	429a      	cmp	r2, r3
 8014546:	d204      	bcs.n	8014552 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014548:	89bb      	ldrh	r3, [r7, #12]
 801454a:	4619      	mov	r1, r3
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f7f7 ffcf 	bl	800c4f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	895b      	ldrh	r3, [r3, #10]
 8014556:	89fa      	ldrh	r2, [r7, #14]
 8014558:	429a      	cmp	r2, r3
 801455a:	d807      	bhi.n	801456c <ip4_input+0x74>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	891b      	ldrh	r3, [r3, #8]
 8014560:	89ba      	ldrh	r2, [r7, #12]
 8014562:	429a      	cmp	r2, r3
 8014564:	d802      	bhi.n	801456c <ip4_input+0x74>
 8014566:	89fb      	ldrh	r3, [r7, #14]
 8014568:	2b13      	cmp	r3, #19
 801456a:	d804      	bhi.n	8014576 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7f8 f945 	bl	800c7fc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014572:	2300      	movs	r3, #0
 8014574:	e0d1      	b.n	801471a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	691b      	ldr	r3, [r3, #16]
 801457a:	4a6a      	ldr	r2, [pc, #424]	; (8014724 <ip4_input+0x22c>)
 801457c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	68db      	ldr	r3, [r3, #12]
 8014582:	4a68      	ldr	r2, [pc, #416]	; (8014724 <ip4_input+0x22c>)
 8014584:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014586:	4b67      	ldr	r3, [pc, #412]	; (8014724 <ip4_input+0x22c>)
 8014588:	695b      	ldr	r3, [r3, #20]
 801458a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801458e:	2be0      	cmp	r3, #224	; 0xe0
 8014590:	d112      	bne.n	80145b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014598:	f003 0301 	and.w	r3, r3, #1
 801459c:	b2db      	uxtb	r3, r3
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d007      	beq.n	80145b2 <ip4_input+0xba>
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	3304      	adds	r3, #4
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d002      	beq.n	80145b2 <ip4_input+0xba>
      netif = inp;
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	613b      	str	r3, [r7, #16]
 80145b0:	e02a      	b.n	8014608 <ip4_input+0x110>
    } else {
      netif = NULL;
 80145b2:	2300      	movs	r3, #0
 80145b4:	613b      	str	r3, [r7, #16]
 80145b6:	e027      	b.n	8014608 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80145b8:	6838      	ldr	r0, [r7, #0]
 80145ba:	f7ff ff73 	bl	80144a4 <ip4_input_accept>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d002      	beq.n	80145ca <ip4_input+0xd2>
      netif = inp;
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	613b      	str	r3, [r7, #16]
 80145c8:	e01e      	b.n	8014608 <ip4_input+0x110>
    } else {
      netif = NULL;
 80145ca:	2300      	movs	r3, #0
 80145cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80145ce:	4b55      	ldr	r3, [pc, #340]	; (8014724 <ip4_input+0x22c>)
 80145d0:	695b      	ldr	r3, [r3, #20]
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	2b7f      	cmp	r3, #127	; 0x7f
 80145d6:	d017      	beq.n	8014608 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80145d8:	4b53      	ldr	r3, [pc, #332]	; (8014728 <ip4_input+0x230>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	613b      	str	r3, [r7, #16]
 80145de:	e00e      	b.n	80145fe <ip4_input+0x106>
          if (netif == inp) {
 80145e0:	693a      	ldr	r2, [r7, #16]
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d006      	beq.n	80145f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80145e8:	6938      	ldr	r0, [r7, #16]
 80145ea:	f7ff ff5b 	bl	80144a4 <ip4_input_accept>
 80145ee:	4603      	mov	r3, r0
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d108      	bne.n	8014606 <ip4_input+0x10e>
 80145f4:	e000      	b.n	80145f8 <ip4_input+0x100>
            continue;
 80145f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	613b      	str	r3, [r7, #16]
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1ed      	bne.n	80145e0 <ip4_input+0xe8>
 8014604:	e000      	b.n	8014608 <ip4_input+0x110>
            break;
 8014606:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014608:	4b46      	ldr	r3, [pc, #280]	; (8014724 <ip4_input+0x22c>)
 801460a:	691b      	ldr	r3, [r3, #16]
 801460c:	6839      	ldr	r1, [r7, #0]
 801460e:	4618      	mov	r0, r3
 8014610:	f000 f964 	bl	80148dc <ip4_addr_isbroadcast_u32>
 8014614:	4603      	mov	r3, r0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d105      	bne.n	8014626 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801461a:	4b42      	ldr	r3, [pc, #264]	; (8014724 <ip4_input+0x22c>)
 801461c:	691b      	ldr	r3, [r3, #16]
 801461e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014622:	2be0      	cmp	r3, #224	; 0xe0
 8014624:	d104      	bne.n	8014630 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f7f8 f8e8 	bl	800c7fc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801462c:	2300      	movs	r3, #0
 801462e:	e074      	b.n	801471a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d104      	bne.n	8014640 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f7f8 f8e0 	bl	800c7fc <pbuf_free>
    return ERR_OK;
 801463c:	2300      	movs	r3, #0
 801463e:	e06c      	b.n	801471a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	88db      	ldrh	r3, [r3, #6]
 8014644:	b29b      	uxth	r3, r3
 8014646:	461a      	mov	r2, r3
 8014648:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801464c:	4013      	ands	r3, r2
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00b      	beq.n	801466a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f000 fc88 	bl	8014f68 <ip4_reass>
 8014658:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d101      	bne.n	8014664 <ip4_input+0x16c>
      return ERR_OK;
 8014660:	2300      	movs	r3, #0
 8014662:	e05a      	b.n	801471a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801466a:	4a2e      	ldr	r2, [pc, #184]	; (8014724 <ip4_input+0x22c>)
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014670:	4a2c      	ldr	r2, [pc, #176]	; (8014724 <ip4_input+0x22c>)
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014676:	4a2b      	ldr	r2, [pc, #172]	; (8014724 <ip4_input+0x22c>)
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	f003 030f 	and.w	r3, r3, #15
 8014684:	b2db      	uxtb	r3, r3
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	b2db      	uxtb	r3, r3
 801468a:	b29a      	uxth	r2, r3
 801468c:	4b25      	ldr	r3, [pc, #148]	; (8014724 <ip4_input+0x22c>)
 801468e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014690:	89fb      	ldrh	r3, [r7, #14]
 8014692:	4619      	mov	r1, r3
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7f8 f82b 	bl	800c6f0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	7a5b      	ldrb	r3, [r3, #9]
 801469e:	2b01      	cmp	r3, #1
 80146a0:	d006      	beq.n	80146b0 <ip4_input+0x1b8>
 80146a2:	2b06      	cmp	r3, #6
 80146a4:	d109      	bne.n	80146ba <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80146a6:	6839      	ldr	r1, [r7, #0]
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f7fa f9fb 	bl	800eaa4 <tcp_input>
        break;
 80146ae:	e021      	b.n	80146f4 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80146b0:	6839      	ldr	r1, [r7, #0]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff fcf8 	bl	80140a8 <icmp_input>
        break;
 80146b8:	e01c      	b.n	80146f4 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80146ba:	4b1a      	ldr	r3, [pc, #104]	; (8014724 <ip4_input+0x22c>)
 80146bc:	695b      	ldr	r3, [r3, #20]
 80146be:	6939      	ldr	r1, [r7, #16]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f000 f90b 	bl	80148dc <ip4_addr_isbroadcast_u32>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d10f      	bne.n	80146ec <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80146cc:	4b15      	ldr	r3, [pc, #84]	; (8014724 <ip4_input+0x22c>)
 80146ce:	695b      	ldr	r3, [r3, #20]
 80146d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80146d4:	2be0      	cmp	r3, #224	; 0xe0
 80146d6:	d009      	beq.n	80146ec <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80146d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146dc:	4619      	mov	r1, r3
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f7f8 f879 	bl	800c7d6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80146e4:	2102      	movs	r1, #2
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f7ff fde2 	bl	80142b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f7f8 f885 	bl	800c7fc <pbuf_free>
        break;
 80146f2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80146f4:	4b0b      	ldr	r3, [pc, #44]	; (8014724 <ip4_input+0x22c>)
 80146f6:	2200      	movs	r2, #0
 80146f8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80146fa:	4b0a      	ldr	r3, [pc, #40]	; (8014724 <ip4_input+0x22c>)
 80146fc:	2200      	movs	r2, #0
 80146fe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014700:	4b08      	ldr	r3, [pc, #32]	; (8014724 <ip4_input+0x22c>)
 8014702:	2200      	movs	r2, #0
 8014704:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014706:	4b07      	ldr	r3, [pc, #28]	; (8014724 <ip4_input+0x22c>)
 8014708:	2200      	movs	r2, #0
 801470a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801470c:	4b05      	ldr	r3, [pc, #20]	; (8014724 <ip4_input+0x22c>)
 801470e:	2200      	movs	r2, #0
 8014710:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014712:	4b04      	ldr	r3, [pc, #16]	; (8014724 <ip4_input+0x22c>)
 8014714:	2200      	movs	r2, #0
 8014716:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014718:	2300      	movs	r3, #0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3718      	adds	r7, #24
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	200098b8 	.word	0x200098b8
 8014728:	20011938 	.word	0x20011938

0801472c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b08a      	sub	sp, #40	; 0x28
 8014730:	af04      	add	r7, sp, #16
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
 8014738:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d009      	beq.n	8014758 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d003      	beq.n	8014752 <ip4_output_if+0x26>
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d102      	bne.n	8014758 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014754:	3304      	adds	r3, #4
 8014756:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014758:	78fa      	ldrb	r2, [r7, #3]
 801475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475c:	9302      	str	r3, [sp, #8]
 801475e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014762:	9301      	str	r3, [sp, #4]
 8014764:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014768:	9300      	str	r3, [sp, #0]
 801476a:	4613      	mov	r3, r2
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	6979      	ldr	r1, [r7, #20]
 8014770:	68f8      	ldr	r0, [r7, #12]
 8014772:	f000 f805 	bl	8014780 <ip4_output_if_src>
 8014776:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014778:	4618      	mov	r0, r3
 801477a:	3718      	adds	r7, #24
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b088      	sub	sp, #32
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	7b9b      	ldrb	r3, [r3, #14]
 8014792:	2b01      	cmp	r3, #1
 8014794:	d006      	beq.n	80147a4 <ip4_output_if_src+0x24>
 8014796:	4b4b      	ldr	r3, [pc, #300]	; (80148c4 <ip4_output_if_src+0x144>)
 8014798:	f44f 7255 	mov.w	r2, #852	; 0x354
 801479c:	494a      	ldr	r1, [pc, #296]	; (80148c8 <ip4_output_if_src+0x148>)
 801479e:	484b      	ldr	r0, [pc, #300]	; (80148cc <ip4_output_if_src+0x14c>)
 80147a0:	f001 fb9a 	bl	8015ed8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d060      	beq.n	801486c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80147aa:	2314      	movs	r3, #20
 80147ac:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80147ae:	2114      	movs	r1, #20
 80147b0:	68f8      	ldr	r0, [r7, #12]
 80147b2:	f7f7 ff8d 	bl	800c6d0 <pbuf_add_header>
 80147b6:	4603      	mov	r3, r0
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d002      	beq.n	80147c2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80147bc:	f06f 0301 	mvn.w	r3, #1
 80147c0:	e07c      	b.n	80148bc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	895b      	ldrh	r3, [r3, #10]
 80147cc:	2b13      	cmp	r3, #19
 80147ce:	d806      	bhi.n	80147de <ip4_output_if_src+0x5e>
 80147d0:	4b3c      	ldr	r3, [pc, #240]	; (80148c4 <ip4_output_if_src+0x144>)
 80147d2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80147d6:	493e      	ldr	r1, [pc, #248]	; (80148d0 <ip4_output_if_src+0x150>)
 80147d8:	483c      	ldr	r0, [pc, #240]	; (80148cc <ip4_output_if_src+0x14c>)
 80147da:	f001 fb7d 	bl	8015ed8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	78fa      	ldrb	r2, [r7, #3]
 80147e2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80147e4:	69fb      	ldr	r3, [r7, #28]
 80147e6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80147ea:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80147f4:	8b7b      	ldrh	r3, [r7, #26]
 80147f6:	089b      	lsrs	r3, r3, #2
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	b2db      	uxtb	r3, r3
 80147fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014800:	b2da      	uxtb	r2, r3
 8014802:	69fb      	ldr	r3, [r7, #28]
 8014804:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801480c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	891b      	ldrh	r3, [r3, #8]
 8014812:	4618      	mov	r0, r3
 8014814:	f7f6 faec 	bl	800adf0 <lwip_htons>
 8014818:	4603      	mov	r3, r0
 801481a:	461a      	mov	r2, r3
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	2200      	movs	r2, #0
 8014824:	719a      	strb	r2, [r3, #6]
 8014826:	2200      	movs	r2, #0
 8014828:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801482a:	4b2a      	ldr	r3, [pc, #168]	; (80148d4 <ip4_output_if_src+0x154>)
 801482c:	881b      	ldrh	r3, [r3, #0]
 801482e:	4618      	mov	r0, r3
 8014830:	f7f6 fade 	bl	800adf0 <lwip_htons>
 8014834:	4603      	mov	r3, r0
 8014836:	461a      	mov	r2, r3
 8014838:	69fb      	ldr	r3, [r7, #28]
 801483a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801483c:	4b25      	ldr	r3, [pc, #148]	; (80148d4 <ip4_output_if_src+0x154>)
 801483e:	881b      	ldrh	r3, [r3, #0]
 8014840:	3301      	adds	r3, #1
 8014842:	b29a      	uxth	r2, r3
 8014844:	4b23      	ldr	r3, [pc, #140]	; (80148d4 <ip4_output_if_src+0x154>)
 8014846:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d104      	bne.n	8014858 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801484e:	4b22      	ldr	r3, [pc, #136]	; (80148d8 <ip4_output_if_src+0x158>)
 8014850:	681a      	ldr	r2, [r3, #0]
 8014852:	69fb      	ldr	r3, [r7, #28]
 8014854:	60da      	str	r2, [r3, #12]
 8014856:	e003      	b.n	8014860 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014860:	69fb      	ldr	r3, [r7, #28]
 8014862:	2200      	movs	r2, #0
 8014864:	729a      	strb	r2, [r3, #10]
 8014866:	2200      	movs	r2, #0
 8014868:	72da      	strb	r2, [r3, #11]
 801486a:	e00f      	b.n	801488c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	895b      	ldrh	r3, [r3, #10]
 8014870:	2b13      	cmp	r3, #19
 8014872:	d802      	bhi.n	801487a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014874:	f06f 0301 	mvn.w	r3, #1
 8014878:	e020      	b.n	80148bc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014880:	69fb      	ldr	r3, [r7, #28]
 8014882:	691b      	ldr	r3, [r3, #16]
 8014884:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014886:	f107 0314 	add.w	r3, r7, #20
 801488a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014890:	2b00      	cmp	r3, #0
 8014892:	d00c      	beq.n	80148ae <ip4_output_if_src+0x12e>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	891a      	ldrh	r2, [r3, #8]
 8014898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801489a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801489c:	429a      	cmp	r2, r3
 801489e:	d906      	bls.n	80148ae <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80148a0:	687a      	ldr	r2, [r7, #4]
 80148a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80148a4:	68f8      	ldr	r0, [r7, #12]
 80148a6:	f000 fd53 	bl	8015350 <ip4_frag>
 80148aa:	4603      	mov	r3, r0
 80148ac:	e006      	b.n	80148bc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80148ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b0:	695b      	ldr	r3, [r3, #20]
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	68f9      	ldr	r1, [r7, #12]
 80148b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148b8:	4798      	blx	r3
 80148ba:	4603      	mov	r3, r0
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3720      	adds	r7, #32
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}
 80148c4:	08019f58 	.word	0x08019f58
 80148c8:	08019f8c 	.word	0x08019f8c
 80148cc:	08019f98 	.word	0x08019f98
 80148d0:	08019fc0 	.word	0x08019fc0
 80148d4:	20011a92 	.word	0x20011a92
 80148d8:	0801a440 	.word	0x0801a440

080148dc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80148dc:	b480      	push	{r7}
 80148de:	b085      	sub	sp, #20
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148f0:	d002      	beq.n	80148f8 <ip4_addr_isbroadcast_u32+0x1c>
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d101      	bne.n	80148fc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80148f8:	2301      	movs	r3, #1
 80148fa:	e02a      	b.n	8014952 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014902:	f003 0302 	and.w	r3, r3, #2
 8014906:	2b00      	cmp	r3, #0
 8014908:	d101      	bne.n	801490e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801490a:	2300      	movs	r3, #0
 801490c:	e021      	b.n	8014952 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	3304      	adds	r3, #4
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	429a      	cmp	r2, r3
 8014918:	d101      	bne.n	801491e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801491a:	2300      	movs	r3, #0
 801491c:	e019      	b.n	8014952 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801491e:	68fa      	ldr	r2, [r7, #12]
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	3304      	adds	r3, #4
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	405a      	eors	r2, r3
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	3308      	adds	r3, #8
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	4013      	ands	r3, r2
 8014930:	2b00      	cmp	r3, #0
 8014932:	d10d      	bne.n	8014950 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	3308      	adds	r3, #8
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	43da      	mvns	r2, r3
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	3308      	adds	r3, #8
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014948:	429a      	cmp	r2, r3
 801494a:	d101      	bne.n	8014950 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801494c:	2301      	movs	r3, #1
 801494e:	e000      	b.n	8014952 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014950:	2300      	movs	r3, #0
  }
}
 8014952:	4618      	mov	r0, r3
 8014954:	3714      	adds	r7, #20
 8014956:	46bd      	mov	sp, r7
 8014958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495c:	4770      	bx	lr
	...

08014960 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014966:	2300      	movs	r3, #0
 8014968:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801496a:	4b12      	ldr	r3, [pc, #72]	; (80149b4 <ip_reass_tmr+0x54>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014970:	e018      	b.n	80149a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	7fdb      	ldrb	r3, [r3, #31]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d00b      	beq.n	8014992 <ip_reass_tmr+0x32>
      r->timer--;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	7fdb      	ldrb	r3, [r3, #31]
 801497e:	3b01      	subs	r3, #1
 8014980:	b2da      	uxtb	r2, r3
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	60fb      	str	r3, [r7, #12]
 8014990:	e008      	b.n	80149a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801499c:	68b9      	ldr	r1, [r7, #8]
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f000 f80a 	bl	80149b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d1e3      	bne.n	8014972 <ip_reass_tmr+0x12>
    }
  }
}
 80149aa:	bf00      	nop
 80149ac:	bf00      	nop
 80149ae:	3710      	adds	r7, #16
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	20011a94 	.word	0x20011a94

080149b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b088      	sub	sp, #32
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80149c2:	2300      	movs	r3, #0
 80149c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80149c6:	683a      	ldr	r2, [r7, #0]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d105      	bne.n	80149da <ip_reass_free_complete_datagram+0x22>
 80149ce:	4b45      	ldr	r3, [pc, #276]	; (8014ae4 <ip_reass_free_complete_datagram+0x12c>)
 80149d0:	22ab      	movs	r2, #171	; 0xab
 80149d2:	4945      	ldr	r1, [pc, #276]	; (8014ae8 <ip_reass_free_complete_datagram+0x130>)
 80149d4:	4845      	ldr	r0, [pc, #276]	; (8014aec <ip_reass_free_complete_datagram+0x134>)
 80149d6:	f001 fa7f 	bl	8015ed8 <iprintf>
  if (prev != NULL) {
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d00a      	beq.n	80149f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d005      	beq.n	80149f6 <ip_reass_free_complete_datagram+0x3e>
 80149ea:	4b3e      	ldr	r3, [pc, #248]	; (8014ae4 <ip_reass_free_complete_datagram+0x12c>)
 80149ec:	22ad      	movs	r2, #173	; 0xad
 80149ee:	4940      	ldr	r1, [pc, #256]	; (8014af0 <ip_reass_free_complete_datagram+0x138>)
 80149f0:	483e      	ldr	r0, [pc, #248]	; (8014aec <ip_reass_free_complete_datagram+0x134>)
 80149f2:	f001 fa71 	bl	8015ed8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	889b      	ldrh	r3, [r3, #4]
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d12a      	bne.n	8014a5e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	681a      	ldr	r2, [r3, #0]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	6858      	ldr	r0, [r3, #4]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	3308      	adds	r3, #8
 8014a1e:	2214      	movs	r2, #20
 8014a20:	4619      	mov	r1, r3
 8014a22:	f001 f994 	bl	8015d4e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014a26:	2101      	movs	r1, #1
 8014a28:	69b8      	ldr	r0, [r7, #24]
 8014a2a:	f7ff fc51 	bl	80142d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014a2e:	69b8      	ldr	r0, [r7, #24]
 8014a30:	f7f7 ff72 	bl	800c918 <pbuf_clen>
 8014a34:	4603      	mov	r3, r0
 8014a36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014a38:	8bfa      	ldrh	r2, [r7, #30]
 8014a3a:	8a7b      	ldrh	r3, [r7, #18]
 8014a3c:	4413      	add	r3, r2
 8014a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a42:	db05      	blt.n	8014a50 <ip_reass_free_complete_datagram+0x98>
 8014a44:	4b27      	ldr	r3, [pc, #156]	; (8014ae4 <ip_reass_free_complete_datagram+0x12c>)
 8014a46:	22bc      	movs	r2, #188	; 0xbc
 8014a48:	492a      	ldr	r1, [pc, #168]	; (8014af4 <ip_reass_free_complete_datagram+0x13c>)
 8014a4a:	4828      	ldr	r0, [pc, #160]	; (8014aec <ip_reass_free_complete_datagram+0x134>)
 8014a4c:	f001 fa44 	bl	8015ed8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014a50:	8bfa      	ldrh	r2, [r7, #30]
 8014a52:	8a7b      	ldrh	r3, [r7, #18]
 8014a54:	4413      	add	r3, r2
 8014a56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014a58:	69b8      	ldr	r0, [r7, #24]
 8014a5a:	f7f7 fecf 	bl	800c7fc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	685b      	ldr	r3, [r3, #4]
 8014a62:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014a64:	e01f      	b.n	8014aa6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014a66:	69bb      	ldr	r3, [r7, #24]
 8014a68:	685b      	ldr	r3, [r3, #4]
 8014a6a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014a6c:	69bb      	ldr	r3, [r7, #24]
 8014a6e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014a76:	68f8      	ldr	r0, [r7, #12]
 8014a78:	f7f7 ff4e 	bl	800c918 <pbuf_clen>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014a80:	8bfa      	ldrh	r2, [r7, #30]
 8014a82:	8a7b      	ldrh	r3, [r7, #18]
 8014a84:	4413      	add	r3, r2
 8014a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a8a:	db05      	blt.n	8014a98 <ip_reass_free_complete_datagram+0xe0>
 8014a8c:	4b15      	ldr	r3, [pc, #84]	; (8014ae4 <ip_reass_free_complete_datagram+0x12c>)
 8014a8e:	22cc      	movs	r2, #204	; 0xcc
 8014a90:	4918      	ldr	r1, [pc, #96]	; (8014af4 <ip_reass_free_complete_datagram+0x13c>)
 8014a92:	4816      	ldr	r0, [pc, #88]	; (8014aec <ip_reass_free_complete_datagram+0x134>)
 8014a94:	f001 fa20 	bl	8015ed8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014a98:	8bfa      	ldrh	r2, [r7, #30]
 8014a9a:	8a7b      	ldrh	r3, [r7, #18]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f7f7 feab 	bl	800c7fc <pbuf_free>
  while (p != NULL) {
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d1dc      	bne.n	8014a66 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014aac:	6839      	ldr	r1, [r7, #0]
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 f8c2 	bl	8014c38 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014ab4:	4b10      	ldr	r3, [pc, #64]	; (8014af8 <ip_reass_free_complete_datagram+0x140>)
 8014ab6:	881b      	ldrh	r3, [r3, #0]
 8014ab8:	8bfa      	ldrh	r2, [r7, #30]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d905      	bls.n	8014aca <ip_reass_free_complete_datagram+0x112>
 8014abe:	4b09      	ldr	r3, [pc, #36]	; (8014ae4 <ip_reass_free_complete_datagram+0x12c>)
 8014ac0:	22d2      	movs	r2, #210	; 0xd2
 8014ac2:	490e      	ldr	r1, [pc, #56]	; (8014afc <ip_reass_free_complete_datagram+0x144>)
 8014ac4:	4809      	ldr	r0, [pc, #36]	; (8014aec <ip_reass_free_complete_datagram+0x134>)
 8014ac6:	f001 fa07 	bl	8015ed8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014aca:	4b0b      	ldr	r3, [pc, #44]	; (8014af8 <ip_reass_free_complete_datagram+0x140>)
 8014acc:	881a      	ldrh	r2, [r3, #0]
 8014ace:	8bfb      	ldrh	r3, [r7, #30]
 8014ad0:	1ad3      	subs	r3, r2, r3
 8014ad2:	b29a      	uxth	r2, r3
 8014ad4:	4b08      	ldr	r3, [pc, #32]	; (8014af8 <ip_reass_free_complete_datagram+0x140>)
 8014ad6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014ad8:	8bfb      	ldrh	r3, [r7, #30]
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3720      	adds	r7, #32
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	08019ff0 	.word	0x08019ff0
 8014ae8:	0801a02c 	.word	0x0801a02c
 8014aec:	0801a038 	.word	0x0801a038
 8014af0:	0801a060 	.word	0x0801a060
 8014af4:	0801a074 	.word	0x0801a074
 8014af8:	20011a98 	.word	0x20011a98
 8014afc:	0801a094 	.word	0x0801a094

08014b00 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b08a      	sub	sp, #40	; 0x28
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014b12:	2300      	movs	r3, #0
 8014b14:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014b16:	2300      	movs	r3, #0
 8014b18:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014b1e:	4b28      	ldr	r3, [pc, #160]	; (8014bc0 <ip_reass_remove_oldest_datagram+0xc0>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014b24:	e030      	b.n	8014b88 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b28:	695a      	ldr	r2, [r3, #20]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	68db      	ldr	r3, [r3, #12]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d10c      	bne.n	8014b4c <ip_reass_remove_oldest_datagram+0x4c>
 8014b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b34:	699a      	ldr	r2, [r3, #24]
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	691b      	ldr	r3, [r3, #16]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d106      	bne.n	8014b4c <ip_reass_remove_oldest_datagram+0x4c>
 8014b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b40:	899a      	ldrh	r2, [r3, #12]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	889b      	ldrh	r3, [r3, #4]
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d014      	beq.n	8014b76 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014b52:	6a3b      	ldr	r3, [r7, #32]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d104      	bne.n	8014b62 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014b5c:	69fb      	ldr	r3, [r7, #28]
 8014b5e:	61bb      	str	r3, [r7, #24]
 8014b60:	e009      	b.n	8014b76 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b64:	7fda      	ldrb	r2, [r3, #31]
 8014b66:	6a3b      	ldr	r3, [r7, #32]
 8014b68:	7fdb      	ldrb	r3, [r3, #31]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d803      	bhi.n	8014b76 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b70:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d001      	beq.n	8014b82 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b80:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d1cb      	bne.n	8014b26 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014b8e:	6a3b      	ldr	r3, [r7, #32]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d008      	beq.n	8014ba6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014b94:	69b9      	ldr	r1, [r7, #24]
 8014b96:	6a38      	ldr	r0, [r7, #32]
 8014b98:	f7ff ff0e 	bl	80149b8 <ip_reass_free_complete_datagram>
 8014b9c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014b9e:	697a      	ldr	r2, [r7, #20]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014ba6:	697a      	ldr	r2, [r7, #20]
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	429a      	cmp	r2, r3
 8014bac:	da02      	bge.n	8014bb4 <ip_reass_remove_oldest_datagram+0xb4>
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	dcac      	bgt.n	8014b0e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014bb4:	697b      	ldr	r3, [r7, #20]
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3728      	adds	r7, #40	; 0x28
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	20011a94 	.word	0x20011a94

08014bc4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014bce:	2003      	movs	r0, #3
 8014bd0:	f7f6 fefe 	bl	800b9d0 <memp_malloc>
 8014bd4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d110      	bne.n	8014bfe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014bdc:	6839      	ldr	r1, [r7, #0]
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f7ff ff8e 	bl	8014b00 <ip_reass_remove_oldest_datagram>
 8014be4:	4602      	mov	r2, r0
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	4293      	cmp	r3, r2
 8014bea:	dc03      	bgt.n	8014bf4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014bec:	2003      	movs	r0, #3
 8014bee:	f7f6 feef 	bl	800b9d0 <memp_malloc>
 8014bf2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d101      	bne.n	8014bfe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	e016      	b.n	8014c2c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014bfe:	2220      	movs	r2, #32
 8014c00:	2100      	movs	r1, #0
 8014c02:	68f8      	ldr	r0, [r7, #12]
 8014c04:	f001 f8cb 	bl	8015d9e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	220f      	movs	r2, #15
 8014c0c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014c0e:	4b09      	ldr	r3, [pc, #36]	; (8014c34 <ip_reass_enqueue_new_datagram+0x70>)
 8014c10:	681a      	ldr	r2, [r3, #0]
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014c16:	4a07      	ldr	r2, [pc, #28]	; (8014c34 <ip_reass_enqueue_new_datagram+0x70>)
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	3308      	adds	r3, #8
 8014c20:	2214      	movs	r2, #20
 8014c22:	6879      	ldr	r1, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	f001 f892 	bl	8015d4e <memcpy>
  return ipr;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3710      	adds	r7, #16
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	20011a94 	.word	0x20011a94

08014c38 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014c42:	4b10      	ldr	r3, [pc, #64]	; (8014c84 <ip_reass_dequeue_datagram+0x4c>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d104      	bne.n	8014c56 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4a0c      	ldr	r2, [pc, #48]	; (8014c84 <ip_reass_dequeue_datagram+0x4c>)
 8014c52:	6013      	str	r3, [r2, #0]
 8014c54:	e00d      	b.n	8014c72 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d106      	bne.n	8014c6a <ip_reass_dequeue_datagram+0x32>
 8014c5c:	4b0a      	ldr	r3, [pc, #40]	; (8014c88 <ip_reass_dequeue_datagram+0x50>)
 8014c5e:	f240 1245 	movw	r2, #325	; 0x145
 8014c62:	490a      	ldr	r1, [pc, #40]	; (8014c8c <ip_reass_dequeue_datagram+0x54>)
 8014c64:	480a      	ldr	r0, [pc, #40]	; (8014c90 <ip_reass_dequeue_datagram+0x58>)
 8014c66:	f001 f937 	bl	8015ed8 <iprintf>
    prev->next = ipr->next;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	681a      	ldr	r2, [r3, #0]
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014c72:	6879      	ldr	r1, [r7, #4]
 8014c74:	2003      	movs	r0, #3
 8014c76:	f7f6 ff21 	bl	800babc <memp_free>
}
 8014c7a:	bf00      	nop
 8014c7c:	3708      	adds	r7, #8
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	bf00      	nop
 8014c84:	20011a94 	.word	0x20011a94
 8014c88:	08019ff0 	.word	0x08019ff0
 8014c8c:	0801a0b8 	.word	0x0801a0b8
 8014c90:	0801a038 	.word	0x0801a038

08014c94 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b08c      	sub	sp, #48	; 0x30
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014cae:	69fb      	ldr	r3, [r7, #28]
 8014cb0:	885b      	ldrh	r3, [r3, #2]
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7f6 f89b 	bl	800adf0 <lwip_htons>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	f003 030f 	and.w	r3, r3, #15
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014ccc:	7e7b      	ldrb	r3, [r7, #25]
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	8b7a      	ldrh	r2, [r7, #26]
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d202      	bcs.n	8014cdc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cda:	e135      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014cdc:	7e7b      	ldrb	r3, [r7, #25]
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	8b7a      	ldrh	r2, [r7, #26]
 8014ce2:	1ad3      	subs	r3, r2, r3
 8014ce4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014ce6:	69fb      	ldr	r3, [r7, #28]
 8014ce8:	88db      	ldrh	r3, [r3, #6]
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7f6 f87f 	bl	800adf0 <lwip_htons>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	00db      	lsls	r3, r3, #3
 8014cfc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d06:	2200      	movs	r2, #0
 8014d08:	701a      	strb	r2, [r3, #0]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	705a      	strb	r2, [r3, #1]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	709a      	strb	r2, [r3, #2]
 8014d12:	2200      	movs	r2, #0
 8014d14:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d18:	8afa      	ldrh	r2, [r7, #22]
 8014d1a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014d1c:	8afa      	ldrh	r2, [r7, #22]
 8014d1e:	8b7b      	ldrh	r3, [r7, #26]
 8014d20:	4413      	add	r3, r2
 8014d22:	b29a      	uxth	r2, r3
 8014d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d26:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2a:	88db      	ldrh	r3, [r3, #6]
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	8afa      	ldrh	r2, [r7, #22]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d902      	bls.n	8014d3a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d38:	e106      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8014d40:	e068      	b.n	8014e14 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d4a:	889b      	ldrh	r3, [r3, #4]
 8014d4c:	b29a      	uxth	r2, r3
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	889b      	ldrh	r3, [r3, #4]
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d235      	bcs.n	8014dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d5c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d020      	beq.n	8014da6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d66:	889b      	ldrh	r3, [r3, #4]
 8014d68:	b29a      	uxth	r2, r3
 8014d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d6c:	88db      	ldrh	r3, [r3, #6]
 8014d6e:	b29b      	uxth	r3, r3
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d307      	bcc.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d76:	88db      	ldrh	r3, [r3, #6]
 8014d78:	b29a      	uxth	r2, r3
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	889b      	ldrh	r3, [r3, #4]
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d902      	bls.n	8014d8a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d88:	e0de      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d8c:	68ba      	ldr	r2, [r7, #8]
 8014d8e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d92:	88db      	ldrh	r3, [r3, #6]
 8014d94:	b29a      	uxth	r2, r3
 8014d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d98:	889b      	ldrh	r3, [r3, #4]
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d03d      	beq.n	8014e1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014da0:	2300      	movs	r3, #0
 8014da2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014da4:	e03a      	b.n	8014e1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da8:	88db      	ldrh	r3, [r3, #6]
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	889b      	ldrh	r3, [r3, #4]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d902      	bls.n	8014dbc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dba:	e0c5      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	68ba      	ldr	r2, [r7, #8]
 8014dc0:	605a      	str	r2, [r3, #4]
      break;
 8014dc2:	e02b      	b.n	8014e1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc6:	889b      	ldrh	r3, [r3, #4]
 8014dc8:	b29a      	uxth	r2, r3
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	889b      	ldrh	r3, [r3, #4]
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d102      	bne.n	8014dda <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dd8:	e0b6      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ddc:	889b      	ldrh	r3, [r3, #4]
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	88db      	ldrh	r3, [r3, #6]
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d202      	bcs.n	8014df0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dee:	e0ab      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d009      	beq.n	8014e0a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df8:	88db      	ldrh	r3, [r3, #6]
 8014dfa:	b29a      	uxth	r2, r3
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	889b      	ldrh	r3, [r3, #4]
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d001      	beq.n	8014e0a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014e06:	2300      	movs	r3, #0
 8014e08:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d193      	bne.n	8014d42 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014e1a:	e000      	b.n	8014e1e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014e1c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d12d      	bne.n	8014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d01c      	beq.n	8014e64 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2c:	88db      	ldrh	r3, [r3, #6]
 8014e2e:	b29a      	uxth	r2, r3
 8014e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e32:	889b      	ldrh	r3, [r3, #4]
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d906      	bls.n	8014e48 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014e3a:	4b45      	ldr	r3, [pc, #276]	; (8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e3c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014e40:	4944      	ldr	r1, [pc, #272]	; (8014f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014e42:	4845      	ldr	r0, [pc, #276]	; (8014f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e44:	f001 f848 	bl	8015ed8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e4a:	68ba      	ldr	r2, [r7, #8]
 8014e4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e50:	88db      	ldrh	r3, [r3, #6]
 8014e52:	b29a      	uxth	r2, r3
 8014e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e56:	889b      	ldrh	r3, [r3, #4]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d010      	beq.n	8014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	623b      	str	r3, [r7, #32]
 8014e62:	e00d      	b.n	8014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	685b      	ldr	r3, [r3, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d006      	beq.n	8014e7a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014e6c:	4b38      	ldr	r3, [pc, #224]	; (8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e6e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014e72:	493a      	ldr	r1, [pc, #232]	; (8014f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014e74:	4838      	ldr	r0, [pc, #224]	; (8014f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e76:	f001 f82f 	bl	8015ed8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	68ba      	ldr	r2, [r7, #8]
 8014e7e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d105      	bne.n	8014e92 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	7f9b      	ldrb	r3, [r3, #30]
 8014e8a:	f003 0301 	and.w	r3, r3, #1
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d059      	beq.n	8014f46 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014e92:	6a3b      	ldr	r3, [r7, #32]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d04f      	beq.n	8014f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	685b      	ldr	r3, [r3, #4]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d006      	beq.n	8014eae <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	889b      	ldrh	r3, [r3, #4]
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d002      	beq.n	8014eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	623b      	str	r3, [r7, #32]
 8014eb2:	e041      	b.n	8014f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014ebe:	e012      	b.n	8014ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec8:	88db      	ldrh	r3, [r3, #6]
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ece:	889b      	ldrh	r3, [r3, #4]
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d002      	beq.n	8014edc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	623b      	str	r3, [r7, #32]
            break;
 8014eda:	e007      	b.n	8014eec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ede:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d1e9      	bne.n	8014ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014eec:	6a3b      	ldr	r3, [r7, #32]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d022      	beq.n	8014f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	685b      	ldr	r3, [r3, #4]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d106      	bne.n	8014f08 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014efa:	4b15      	ldr	r3, [pc, #84]	; (8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014efc:	f240 12df 	movw	r2, #479	; 0x1df
 8014f00:	4917      	ldr	r1, [pc, #92]	; (8014f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014f02:	4815      	ldr	r0, [pc, #84]	; (8014f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f04:	f000 ffe8 	bl	8015ed8 <iprintf>
          LWIP_ASSERT("sanity check",
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d106      	bne.n	8014f22 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014f14:	4b0e      	ldr	r3, [pc, #56]	; (8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014f1a:	4911      	ldr	r1, [pc, #68]	; (8014f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014f1c:	480e      	ldr	r0, [pc, #56]	; (8014f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f1e:	f000 ffdb 	bl	8015ed8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d006      	beq.n	8014f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014f2a:	4b09      	ldr	r3, [pc, #36]	; (8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f2c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014f30:	490c      	ldr	r1, [pc, #48]	; (8014f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014f32:	4809      	ldr	r0, [pc, #36]	; (8014f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f34:	f000 ffd0 	bl	8015ed8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014f38:	6a3b      	ldr	r3, [r7, #32]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	bf14      	ite	ne
 8014f3e:	2301      	movne	r3, #1
 8014f40:	2300      	moveq	r3, #0
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	e000      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014f46:	2300      	movs	r3, #0
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3730      	adds	r7, #48	; 0x30
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	08019ff0 	.word	0x08019ff0
 8014f54:	0801a0d4 	.word	0x0801a0d4
 8014f58:	0801a038 	.word	0x0801a038
 8014f5c:	0801a0f4 	.word	0x0801a0f4
 8014f60:	0801a12c 	.word	0x0801a12c
 8014f64:	0801a13c 	.word	0x0801a13c

08014f68 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b08e      	sub	sp, #56	; 0x38
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	f003 030f 	and.w	r3, r3, #15
 8014f7e:	b2db      	uxtb	r3, r3
 8014f80:	009b      	lsls	r3, r3, #2
 8014f82:	b2db      	uxtb	r3, r3
 8014f84:	2b14      	cmp	r3, #20
 8014f86:	f040 8171 	bne.w	801526c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f8c:	88db      	ldrh	r3, [r3, #6]
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7f5 ff2d 	bl	800adf0 <lwip_htons>
 8014f96:	4603      	mov	r3, r0
 8014f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	00db      	lsls	r3, r3, #3
 8014fa0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa4:	885b      	ldrh	r3, [r3, #2]
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7f5 ff21 	bl	800adf0 <lwip_htons>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	f003 030f 	and.w	r3, r3, #15
 8014fba:	b2db      	uxtb	r3, r3
 8014fbc:	009b      	lsls	r3, r3, #2
 8014fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	f0c0 8150 	bcc.w	8015270 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014fd8:	1ad3      	subs	r3, r2, r3
 8014fda:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f7f7 fc9b 	bl	800c918 <pbuf_clen>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014fe6:	4b8c      	ldr	r3, [pc, #560]	; (8015218 <ip4_reass+0x2b0>)
 8014fe8:	881b      	ldrh	r3, [r3, #0]
 8014fea:	461a      	mov	r2, r3
 8014fec:	8c3b      	ldrh	r3, [r7, #32]
 8014fee:	4413      	add	r3, r2
 8014ff0:	2b0a      	cmp	r3, #10
 8014ff2:	dd10      	ble.n	8015016 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014ff4:	8c3b      	ldrh	r3, [r7, #32]
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ffa:	f7ff fd81 	bl	8014b00 <ip_reass_remove_oldest_datagram>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b00      	cmp	r3, #0
 8015002:	f000 8137 	beq.w	8015274 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015006:	4b84      	ldr	r3, [pc, #528]	; (8015218 <ip4_reass+0x2b0>)
 8015008:	881b      	ldrh	r3, [r3, #0]
 801500a:	461a      	mov	r2, r3
 801500c:	8c3b      	ldrh	r3, [r7, #32]
 801500e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015010:	2b0a      	cmp	r3, #10
 8015012:	f300 812f 	bgt.w	8015274 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015016:	4b81      	ldr	r3, [pc, #516]	; (801521c <ip4_reass+0x2b4>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	633b      	str	r3, [r7, #48]	; 0x30
 801501c:	e015      	b.n	801504a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015020:	695a      	ldr	r2, [r3, #20]
 8015022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	429a      	cmp	r2, r3
 8015028:	d10c      	bne.n	8015044 <ip4_reass+0xdc>
 801502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502c:	699a      	ldr	r2, [r3, #24]
 801502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015030:	691b      	ldr	r3, [r3, #16]
 8015032:	429a      	cmp	r2, r3
 8015034:	d106      	bne.n	8015044 <ip4_reass+0xdc>
 8015036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015038:	899a      	ldrh	r2, [r3, #12]
 801503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801503c:	889b      	ldrh	r3, [r3, #4]
 801503e:	b29b      	uxth	r3, r3
 8015040:	429a      	cmp	r2, r3
 8015042:	d006      	beq.n	8015052 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	633b      	str	r3, [r7, #48]	; 0x30
 801504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801504c:	2b00      	cmp	r3, #0
 801504e:	d1e6      	bne.n	801501e <ip4_reass+0xb6>
 8015050:	e000      	b.n	8015054 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015052:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015056:	2b00      	cmp	r3, #0
 8015058:	d109      	bne.n	801506e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801505a:	8c3b      	ldrh	r3, [r7, #32]
 801505c:	4619      	mov	r1, r3
 801505e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015060:	f7ff fdb0 	bl	8014bc4 <ip_reass_enqueue_new_datagram>
 8015064:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015068:	2b00      	cmp	r3, #0
 801506a:	d11c      	bne.n	80150a6 <ip4_reass+0x13e>
      goto nullreturn;
 801506c:	e105      	b.n	801527a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015070:	88db      	ldrh	r3, [r3, #6]
 8015072:	b29b      	uxth	r3, r3
 8015074:	4618      	mov	r0, r3
 8015076:	f7f5 febb 	bl	800adf0 <lwip_htons>
 801507a:	4603      	mov	r3, r0
 801507c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015080:	2b00      	cmp	r3, #0
 8015082:	d110      	bne.n	80150a6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015086:	89db      	ldrh	r3, [r3, #14]
 8015088:	4618      	mov	r0, r3
 801508a:	f7f5 feb1 	bl	800adf0 <lwip_htons>
 801508e:	4603      	mov	r3, r0
 8015090:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015094:	2b00      	cmp	r3, #0
 8015096:	d006      	beq.n	80150a6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509a:	3308      	adds	r3, #8
 801509c:	2214      	movs	r2, #20
 801509e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80150a0:	4618      	mov	r0, r3
 80150a2:	f000 fe54 	bl	8015d4e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80150a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a8:	88db      	ldrh	r3, [r3, #6]
 80150aa:	b29b      	uxth	r3, r3
 80150ac:	f003 0320 	and.w	r3, r3, #32
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	bf0c      	ite	eq
 80150b4:	2301      	moveq	r3, #1
 80150b6:	2300      	movne	r3, #0
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80150bc:	69fb      	ldr	r3, [r7, #28]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d00e      	beq.n	80150e0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80150c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80150c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150c6:	4413      	add	r3, r2
 80150c8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80150ca:	8b7a      	ldrh	r2, [r7, #26]
 80150cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80150ce:	429a      	cmp	r2, r3
 80150d0:	f0c0 80a0 	bcc.w	8015214 <ip4_reass+0x2ac>
 80150d4:	8b7b      	ldrh	r3, [r7, #26]
 80150d6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80150da:	4293      	cmp	r3, r2
 80150dc:	f200 809a 	bhi.w	8015214 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80150e0:	69fa      	ldr	r2, [r7, #28]
 80150e2:	6879      	ldr	r1, [r7, #4]
 80150e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150e6:	f7ff fdd5 	bl	8014c94 <ip_reass_chain_frag_into_datagram_and_validate>
 80150ea:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150f2:	f000 809b 	beq.w	801522c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80150f6:	4b48      	ldr	r3, [pc, #288]	; (8015218 <ip4_reass+0x2b0>)
 80150f8:	881a      	ldrh	r2, [r3, #0]
 80150fa:	8c3b      	ldrh	r3, [r7, #32]
 80150fc:	4413      	add	r3, r2
 80150fe:	b29a      	uxth	r2, r3
 8015100:	4b45      	ldr	r3, [pc, #276]	; (8015218 <ip4_reass+0x2b0>)
 8015102:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015104:	69fb      	ldr	r3, [r7, #28]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d00d      	beq.n	8015126 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801510a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801510c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801510e:	4413      	add	r3, r2
 8015110:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015114:	8a7a      	ldrh	r2, [r7, #18]
 8015116:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511a:	7f9b      	ldrb	r3, [r3, #30]
 801511c:	f043 0301 	orr.w	r3, r3, #1
 8015120:	b2da      	uxtb	r2, r3
 8015122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015124:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	2b01      	cmp	r3, #1
 801512a:	d171      	bne.n	8015210 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801512e:	8b9b      	ldrh	r3, [r3, #28]
 8015130:	3314      	adds	r3, #20
 8015132:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	685b      	ldr	r3, [r3, #4]
 8015144:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015148:	3308      	adds	r3, #8
 801514a:	2214      	movs	r2, #20
 801514c:	4619      	mov	r1, r3
 801514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015150:	f000 fdfd 	bl	8015d4e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015154:	8a3b      	ldrh	r3, [r7, #16]
 8015156:	4618      	mov	r0, r3
 8015158:	f7f5 fe4a 	bl	800adf0 <lwip_htons>
 801515c:	4603      	mov	r3, r0
 801515e:	461a      	mov	r2, r3
 8015160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015162:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015166:	2200      	movs	r2, #0
 8015168:	719a      	strb	r2, [r3, #6]
 801516a:	2200      	movs	r2, #0
 801516c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015170:	2200      	movs	r2, #0
 8015172:	729a      	strb	r2, [r3, #10]
 8015174:	2200      	movs	r2, #0
 8015176:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801517e:	e00d      	b.n	801519c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015182:	685b      	ldr	r3, [r3, #4]
 8015184:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015186:	2114      	movs	r1, #20
 8015188:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801518a:	f7f7 fab1 	bl	800c6f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801518e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f7f7 fc01 	bl	800c998 <pbuf_cat>
      r = iprh->next_pbuf;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d1ee      	bne.n	8015180 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80151a2:	4b1e      	ldr	r3, [pc, #120]	; (801521c <ip4_reass+0x2b4>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d102      	bne.n	80151b2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80151ac:	2300      	movs	r3, #0
 80151ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80151b0:	e010      	b.n	80151d4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80151b2:	4b1a      	ldr	r3, [pc, #104]	; (801521c <ip4_reass+0x2b4>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80151b8:	e007      	b.n	80151ca <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80151ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d006      	beq.n	80151d2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80151c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80151ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d1f4      	bne.n	80151ba <ip4_reass+0x252>
 80151d0:	e000      	b.n	80151d4 <ip4_reass+0x26c>
          break;
 80151d2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80151d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80151d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151d8:	f7ff fd2e 	bl	8014c38 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f7f7 fb9b 	bl	800c918 <pbuf_clen>
 80151e2:	4603      	mov	r3, r0
 80151e4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80151e6:	4b0c      	ldr	r3, [pc, #48]	; (8015218 <ip4_reass+0x2b0>)
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	8c3a      	ldrh	r2, [r7, #32]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d906      	bls.n	80151fe <ip4_reass+0x296>
 80151f0:	4b0b      	ldr	r3, [pc, #44]	; (8015220 <ip4_reass+0x2b8>)
 80151f2:	f240 229b 	movw	r2, #667	; 0x29b
 80151f6:	490b      	ldr	r1, [pc, #44]	; (8015224 <ip4_reass+0x2bc>)
 80151f8:	480b      	ldr	r0, [pc, #44]	; (8015228 <ip4_reass+0x2c0>)
 80151fa:	f000 fe6d 	bl	8015ed8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80151fe:	4b06      	ldr	r3, [pc, #24]	; (8015218 <ip4_reass+0x2b0>)
 8015200:	881a      	ldrh	r2, [r3, #0]
 8015202:	8c3b      	ldrh	r3, [r7, #32]
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	b29a      	uxth	r2, r3
 8015208:	4b03      	ldr	r3, [pc, #12]	; (8015218 <ip4_reass+0x2b0>)
 801520a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	e038      	b.n	8015282 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015210:	2300      	movs	r3, #0
 8015212:	e036      	b.n	8015282 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015214:	bf00      	nop
 8015216:	e00a      	b.n	801522e <ip4_reass+0x2c6>
 8015218:	20011a98 	.word	0x20011a98
 801521c:	20011a94 	.word	0x20011a94
 8015220:	08019ff0 	.word	0x08019ff0
 8015224:	0801a160 	.word	0x0801a160
 8015228:	0801a038 	.word	0x0801a038
    goto nullreturn_ipr;
 801522c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015230:	2b00      	cmp	r3, #0
 8015232:	d106      	bne.n	8015242 <ip4_reass+0x2da>
 8015234:	4b15      	ldr	r3, [pc, #84]	; (801528c <ip4_reass+0x324>)
 8015236:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801523a:	4915      	ldr	r1, [pc, #84]	; (8015290 <ip4_reass+0x328>)
 801523c:	4815      	ldr	r0, [pc, #84]	; (8015294 <ip4_reass+0x32c>)
 801523e:	f000 fe4b 	bl	8015ed8 <iprintf>
  if (ipr->p == NULL) {
 8015242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d116      	bne.n	8015278 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801524a:	4b13      	ldr	r3, [pc, #76]	; (8015298 <ip4_reass+0x330>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015250:	429a      	cmp	r2, r3
 8015252:	d006      	beq.n	8015262 <ip4_reass+0x2fa>
 8015254:	4b0d      	ldr	r3, [pc, #52]	; (801528c <ip4_reass+0x324>)
 8015256:	f240 22ab 	movw	r2, #683	; 0x2ab
 801525a:	4910      	ldr	r1, [pc, #64]	; (801529c <ip4_reass+0x334>)
 801525c:	480d      	ldr	r0, [pc, #52]	; (8015294 <ip4_reass+0x32c>)
 801525e:	f000 fe3b 	bl	8015ed8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015262:	2100      	movs	r1, #0
 8015264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015266:	f7ff fce7 	bl	8014c38 <ip_reass_dequeue_datagram>
 801526a:	e006      	b.n	801527a <ip4_reass+0x312>
    goto nullreturn;
 801526c:	bf00      	nop
 801526e:	e004      	b.n	801527a <ip4_reass+0x312>
    goto nullreturn;
 8015270:	bf00      	nop
 8015272:	e002      	b.n	801527a <ip4_reass+0x312>
      goto nullreturn;
 8015274:	bf00      	nop
 8015276:	e000      	b.n	801527a <ip4_reass+0x312>
  }

nullreturn:
 8015278:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7f7 fabe 	bl	800c7fc <pbuf_free>
  return NULL;
 8015280:	2300      	movs	r3, #0
}
 8015282:	4618      	mov	r0, r3
 8015284:	3738      	adds	r7, #56	; 0x38
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	08019ff0 	.word	0x08019ff0
 8015290:	0801a17c 	.word	0x0801a17c
 8015294:	0801a038 	.word	0x0801a038
 8015298:	20011a94 	.word	0x20011a94
 801529c:	0801a188 	.word	0x0801a188

080152a0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80152a4:	2004      	movs	r0, #4
 80152a6:	f7f6 fb93 	bl	800b9d0 <memp_malloc>
 80152aa:	4603      	mov	r3, r0
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d106      	bne.n	80152cc <ip_frag_free_pbuf_custom_ref+0x1c>
 80152be:	4b07      	ldr	r3, [pc, #28]	; (80152dc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80152c0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80152c4:	4906      	ldr	r1, [pc, #24]	; (80152e0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80152c6:	4807      	ldr	r0, [pc, #28]	; (80152e4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80152c8:	f000 fe06 	bl	8015ed8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80152cc:	6879      	ldr	r1, [r7, #4]
 80152ce:	2004      	movs	r0, #4
 80152d0:	f7f6 fbf4 	bl	800babc <memp_free>
}
 80152d4:	bf00      	nop
 80152d6:	3708      	adds	r7, #8
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	08019ff0 	.word	0x08019ff0
 80152e0:	0801a1a8 	.word	0x0801a1a8
 80152e4:	0801a038 	.word	0x0801a038

080152e8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b084      	sub	sp, #16
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d106      	bne.n	8015308 <ipfrag_free_pbuf_custom+0x20>
 80152fa:	4b11      	ldr	r3, [pc, #68]	; (8015340 <ipfrag_free_pbuf_custom+0x58>)
 80152fc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015300:	4910      	ldr	r1, [pc, #64]	; (8015344 <ipfrag_free_pbuf_custom+0x5c>)
 8015302:	4811      	ldr	r0, [pc, #68]	; (8015348 <ipfrag_free_pbuf_custom+0x60>)
 8015304:	f000 fde8 	bl	8015ed8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015308:	68fa      	ldr	r2, [r7, #12]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	429a      	cmp	r2, r3
 801530e:	d006      	beq.n	801531e <ipfrag_free_pbuf_custom+0x36>
 8015310:	4b0b      	ldr	r3, [pc, #44]	; (8015340 <ipfrag_free_pbuf_custom+0x58>)
 8015312:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015316:	490d      	ldr	r1, [pc, #52]	; (801534c <ipfrag_free_pbuf_custom+0x64>)
 8015318:	480b      	ldr	r0, [pc, #44]	; (8015348 <ipfrag_free_pbuf_custom+0x60>)
 801531a:	f000 fddd 	bl	8015ed8 <iprintf>
  if (pcr->original != NULL) {
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	695b      	ldr	r3, [r3, #20]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d004      	beq.n	8015330 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	695b      	ldr	r3, [r3, #20]
 801532a:	4618      	mov	r0, r3
 801532c:	f7f7 fa66 	bl	800c7fc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f7ff ffbd 	bl	80152b0 <ip_frag_free_pbuf_custom_ref>
}
 8015336:	bf00      	nop
 8015338:	3710      	adds	r7, #16
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	08019ff0 	.word	0x08019ff0
 8015344:	0801a1b4 	.word	0x0801a1b4
 8015348:	0801a038 	.word	0x0801a038
 801534c:	0801a1c0 	.word	0x0801a1c0

08015350 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b094      	sub	sp, #80	; 0x50
 8015354:	af02      	add	r7, sp, #8
 8015356:	60f8      	str	r0, [r7, #12]
 8015358:	60b9      	str	r1, [r7, #8]
 801535a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801535c:	2300      	movs	r3, #0
 801535e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015366:	3b14      	subs	r3, #20
 8015368:	2b00      	cmp	r3, #0
 801536a:	da00      	bge.n	801536e <ip4_frag+0x1e>
 801536c:	3307      	adds	r3, #7
 801536e:	10db      	asrs	r3, r3, #3
 8015370:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015372:	2314      	movs	r3, #20
 8015374:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801537e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015382:	781b      	ldrb	r3, [r3, #0]
 8015384:	f003 030f 	and.w	r3, r3, #15
 8015388:	b2db      	uxtb	r3, r3
 801538a:	009b      	lsls	r3, r3, #2
 801538c:	b2db      	uxtb	r3, r3
 801538e:	2b14      	cmp	r3, #20
 8015390:	d002      	beq.n	8015398 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015392:	f06f 0305 	mvn.w	r3, #5
 8015396:	e110      	b.n	80155ba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	895b      	ldrh	r3, [r3, #10]
 801539c:	2b13      	cmp	r3, #19
 801539e:	d809      	bhi.n	80153b4 <ip4_frag+0x64>
 80153a0:	4b88      	ldr	r3, [pc, #544]	; (80155c4 <ip4_frag+0x274>)
 80153a2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80153a6:	4988      	ldr	r1, [pc, #544]	; (80155c8 <ip4_frag+0x278>)
 80153a8:	4888      	ldr	r0, [pc, #544]	; (80155cc <ip4_frag+0x27c>)
 80153aa:	f000 fd95 	bl	8015ed8 <iprintf>
 80153ae:	f06f 0305 	mvn.w	r3, #5
 80153b2:	e102      	b.n	80155ba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80153b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b6:	88db      	ldrh	r3, [r3, #6]
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7f5 fd18 	bl	800adf0 <lwip_htons>
 80153c0:	4603      	mov	r3, r0
 80153c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80153c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80153ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80153ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80153d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	891b      	ldrh	r3, [r3, #8]
 80153da:	3b14      	subs	r3, #20
 80153dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80153e0:	e0e1      	b.n	80155a6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80153e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153e4:	00db      	lsls	r3, r3, #3
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153ec:	4293      	cmp	r3, r2
 80153ee:	bf28      	it	cs
 80153f0:	4613      	movcs	r3, r2
 80153f2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80153f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153f8:	2114      	movs	r1, #20
 80153fa:	200e      	movs	r0, #14
 80153fc:	f7f6 ff1a 	bl	800c234 <pbuf_alloc>
 8015400:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015404:	2b00      	cmp	r3, #0
 8015406:	f000 80d5 	beq.w	80155b4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540c:	895b      	ldrh	r3, [r3, #10]
 801540e:	2b13      	cmp	r3, #19
 8015410:	d806      	bhi.n	8015420 <ip4_frag+0xd0>
 8015412:	4b6c      	ldr	r3, [pc, #432]	; (80155c4 <ip4_frag+0x274>)
 8015414:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015418:	496d      	ldr	r1, [pc, #436]	; (80155d0 <ip4_frag+0x280>)
 801541a:	486c      	ldr	r0, [pc, #432]	; (80155cc <ip4_frag+0x27c>)
 801541c:	f000 fd5c 	bl	8015ed8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	2214      	movs	r2, #20
 8015426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015428:	4618      	mov	r0, r3
 801542a:	f000 fc90 	bl	8015d4e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015434:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015436:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801543a:	e064      	b.n	8015506 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	895a      	ldrh	r2, [r3, #10]
 8015440:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015442:	1ad3      	subs	r3, r2, r3
 8015444:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	895b      	ldrh	r3, [r3, #10]
 801544a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801544c:	429a      	cmp	r2, r3
 801544e:	d906      	bls.n	801545e <ip4_frag+0x10e>
 8015450:	4b5c      	ldr	r3, [pc, #368]	; (80155c4 <ip4_frag+0x274>)
 8015452:	f240 322d 	movw	r2, #813	; 0x32d
 8015456:	495f      	ldr	r1, [pc, #380]	; (80155d4 <ip4_frag+0x284>)
 8015458:	485c      	ldr	r0, [pc, #368]	; (80155cc <ip4_frag+0x27c>)
 801545a:	f000 fd3d 	bl	8015ed8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801545e:	8bfa      	ldrh	r2, [r7, #30]
 8015460:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015464:	4293      	cmp	r3, r2
 8015466:	bf28      	it	cs
 8015468:	4613      	movcs	r3, r2
 801546a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801546e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015472:	2b00      	cmp	r3, #0
 8015474:	d105      	bne.n	8015482 <ip4_frag+0x132>
        poff = 0;
 8015476:	2300      	movs	r3, #0
 8015478:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	60fb      	str	r3, [r7, #12]
        continue;
 8015480:	e041      	b.n	8015506 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015482:	f7ff ff0d 	bl	80152a0 <ip_frag_alloc_pbuf_custom_ref>
 8015486:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d103      	bne.n	8015496 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801548e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015490:	f7f7 f9b4 	bl	800c7fc <pbuf_free>
        goto memerr;
 8015494:	e08f      	b.n	80155b6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015496:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801549c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801549e:	4413      	add	r3, r2
 80154a0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80154a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80154a8:	9201      	str	r2, [sp, #4]
 80154aa:	9300      	str	r3, [sp, #0]
 80154ac:	4603      	mov	r3, r0
 80154ae:	2241      	movs	r2, #65	; 0x41
 80154b0:	2000      	movs	r0, #0
 80154b2:	f7f6 ffe9 	bl	800c488 <pbuf_alloced_custom>
 80154b6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d106      	bne.n	80154cc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80154be:	69b8      	ldr	r0, [r7, #24]
 80154c0:	f7ff fef6 	bl	80152b0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80154c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154c6:	f7f7 f999 	bl	800c7fc <pbuf_free>
        goto memerr;
 80154ca:	e074      	b.n	80155b6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f7f7 fa3b 	bl	800c948 <pbuf_ref>
      pcr->original = p;
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	68fa      	ldr	r2, [r7, #12]
 80154d6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80154d8:	69bb      	ldr	r3, [r7, #24]
 80154da:	4a3f      	ldr	r2, [pc, #252]	; (80155d8 <ip4_frag+0x288>)
 80154dc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80154de:	6979      	ldr	r1, [r7, #20]
 80154e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154e2:	f7f7 fa59 	bl	800c998 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80154e6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80154ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80154f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d004      	beq.n	8015506 <ip4_frag+0x1b6>
        poff = 0;
 80154fc:	2300      	movs	r3, #0
 80154fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015506:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801550a:	2b00      	cmp	r3, #0
 801550c:	d196      	bne.n	801543c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801550e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015514:	4413      	add	r3, r2
 8015516:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801551c:	f1a3 0213 	sub.w	r2, r3, #19
 8015520:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015524:	429a      	cmp	r2, r3
 8015526:	bfcc      	ite	gt
 8015528:	2301      	movgt	r3, #1
 801552a:	2300      	movle	r3, #0
 801552c:	b2db      	uxtb	r3, r3
 801552e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015530:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015538:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801553a:	6a3b      	ldr	r3, [r7, #32]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d002      	beq.n	8015546 <ip4_frag+0x1f6>
 8015540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015542:	2b00      	cmp	r3, #0
 8015544:	d003      	beq.n	801554e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015546:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801554c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801554e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015550:	4618      	mov	r0, r3
 8015552:	f7f5 fc4d 	bl	800adf0 <lwip_htons>
 8015556:	4603      	mov	r3, r0
 8015558:	461a      	mov	r2, r3
 801555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801555c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801555e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015560:	3314      	adds	r3, #20
 8015562:	b29b      	uxth	r3, r3
 8015564:	4618      	mov	r0, r3
 8015566:	f7f5 fc43 	bl	800adf0 <lwip_htons>
 801556a:	4603      	mov	r3, r0
 801556c:	461a      	mov	r2, r3
 801556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015570:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015574:	2200      	movs	r2, #0
 8015576:	729a      	strb	r2, [r3, #10]
 8015578:	2200      	movs	r2, #0
 801557a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	695b      	ldr	r3, [r3, #20]
 8015580:	687a      	ldr	r2, [r7, #4]
 8015582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015584:	68b8      	ldr	r0, [r7, #8]
 8015586:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801558a:	f7f7 f937 	bl	800c7fc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801558e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015594:	1ad3      	subs	r3, r2, r3
 8015596:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801559a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801559e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80155a0:	4413      	add	r3, r2
 80155a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80155a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f47f af19 	bne.w	80153e2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80155b0:	2300      	movs	r3, #0
 80155b2:	e002      	b.n	80155ba <ip4_frag+0x26a>
      goto memerr;
 80155b4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80155b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3748      	adds	r7, #72	; 0x48
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	08019ff0 	.word	0x08019ff0
 80155c8:	0801a1cc 	.word	0x0801a1cc
 80155cc:	0801a038 	.word	0x0801a038
 80155d0:	0801a1e8 	.word	0x0801a1e8
 80155d4:	0801a208 	.word	0x0801a208
 80155d8:	080152e9 	.word	0x080152e9

080155dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b086      	sub	sp, #24
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80155e6:	230e      	movs	r3, #14
 80155e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	895b      	ldrh	r3, [r3, #10]
 80155ee:	2b0e      	cmp	r3, #14
 80155f0:	d96e      	bls.n	80156d0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	7bdb      	ldrb	r3, [r3, #15]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d106      	bne.n	8015608 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015600:	3301      	adds	r3, #1
 8015602:	b2da      	uxtb	r2, r3
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	7b1a      	ldrb	r2, [r3, #12]
 8015612:	7b5b      	ldrb	r3, [r3, #13]
 8015614:	021b      	lsls	r3, r3, #8
 8015616:	4313      	orrs	r3, r2
 8015618:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	f003 0301 	and.w	r3, r3, #1
 8015622:	2b00      	cmp	r3, #0
 8015624:	d023      	beq.n	801566e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	2b01      	cmp	r3, #1
 801562c:	d10f      	bne.n	801564e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	785b      	ldrb	r3, [r3, #1]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d11b      	bne.n	801566e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015636:	693b      	ldr	r3, [r7, #16]
 8015638:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801563a:	2b5e      	cmp	r3, #94	; 0x5e
 801563c:	d117      	bne.n	801566e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	7b5b      	ldrb	r3, [r3, #13]
 8015642:	f043 0310 	orr.w	r3, r3, #16
 8015646:	b2da      	uxtb	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	735a      	strb	r2, [r3, #13]
 801564c:	e00f      	b.n	801566e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	2206      	movs	r2, #6
 8015652:	4928      	ldr	r1, [pc, #160]	; (80156f4 <ethernet_input+0x118>)
 8015654:	4618      	mov	r0, r3
 8015656:	f000 fb6a 	bl	8015d2e <memcmp>
 801565a:	4603      	mov	r3, r0
 801565c:	2b00      	cmp	r3, #0
 801565e:	d106      	bne.n	801566e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	7b5b      	ldrb	r3, [r3, #13]
 8015664:	f043 0308 	orr.w	r3, r3, #8
 8015668:	b2da      	uxtb	r2, r3
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801566e:	89fb      	ldrh	r3, [r7, #14]
 8015670:	2b08      	cmp	r3, #8
 8015672:	d003      	beq.n	801567c <ethernet_input+0xa0>
 8015674:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015678:	d014      	beq.n	80156a4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801567a:	e032      	b.n	80156e2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015682:	f003 0308 	and.w	r3, r3, #8
 8015686:	2b00      	cmp	r3, #0
 8015688:	d024      	beq.n	80156d4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801568a:	8afb      	ldrh	r3, [r7, #22]
 801568c:	4619      	mov	r1, r3
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f7f7 f82e 	bl	800c6f0 <pbuf_remove_header>
 8015694:	4603      	mov	r3, r0
 8015696:	2b00      	cmp	r3, #0
 8015698:	d11e      	bne.n	80156d8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801569a:	6839      	ldr	r1, [r7, #0]
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7fe ff2b 	bl	80144f8 <ip4_input>
      break;
 80156a2:	e013      	b.n	80156cc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156aa:	f003 0308 	and.w	r3, r3, #8
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d014      	beq.n	80156dc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80156b2:	8afb      	ldrh	r3, [r7, #22]
 80156b4:	4619      	mov	r1, r3
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f7f7 f81a 	bl	800c6f0 <pbuf_remove_header>
 80156bc:	4603      	mov	r3, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d10e      	bne.n	80156e0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80156c2:	6839      	ldr	r1, [r7, #0]
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f7fe f8cb 	bl	8013860 <etharp_input>
      break;
 80156ca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80156cc:	2300      	movs	r3, #0
 80156ce:	e00c      	b.n	80156ea <ethernet_input+0x10e>
    goto free_and_return;
 80156d0:	bf00      	nop
 80156d2:	e006      	b.n	80156e2 <ethernet_input+0x106>
        goto free_and_return;
 80156d4:	bf00      	nop
 80156d6:	e004      	b.n	80156e2 <ethernet_input+0x106>
        goto free_and_return;
 80156d8:	bf00      	nop
 80156da:	e002      	b.n	80156e2 <ethernet_input+0x106>
        goto free_and_return;
 80156dc:	bf00      	nop
 80156de:	e000      	b.n	80156e2 <ethernet_input+0x106>
        goto free_and_return;
 80156e0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f7f7 f88a 	bl	800c7fc <pbuf_free>
  return ERR_OK;
 80156e8:	2300      	movs	r3, #0
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3718      	adds	r7, #24
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	0801a444 	.word	0x0801a444

080156f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b086      	sub	sp, #24
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
 8015704:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015706:	8c3b      	ldrh	r3, [r7, #32]
 8015708:	4618      	mov	r0, r3
 801570a:	f7f5 fb71 	bl	800adf0 <lwip_htons>
 801570e:	4603      	mov	r3, r0
 8015710:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015712:	210e      	movs	r1, #14
 8015714:	68b8      	ldr	r0, [r7, #8]
 8015716:	f7f6 ffdb 	bl	800c6d0 <pbuf_add_header>
 801571a:	4603      	mov	r3, r0
 801571c:	2b00      	cmp	r3, #0
 801571e:	d125      	bne.n	801576c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015726:	693b      	ldr	r3, [r7, #16]
 8015728:	8afa      	ldrh	r2, [r7, #22]
 801572a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801572c:	693b      	ldr	r3, [r7, #16]
 801572e:	2206      	movs	r2, #6
 8015730:	6839      	ldr	r1, [r7, #0]
 8015732:	4618      	mov	r0, r3
 8015734:	f000 fb0b 	bl	8015d4e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	3306      	adds	r3, #6
 801573c:	2206      	movs	r2, #6
 801573e:	6879      	ldr	r1, [r7, #4]
 8015740:	4618      	mov	r0, r3
 8015742:	f000 fb04 	bl	8015d4e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801574c:	2b06      	cmp	r3, #6
 801574e:	d006      	beq.n	801575e <ethernet_output+0x66>
 8015750:	4b0a      	ldr	r3, [pc, #40]	; (801577c <ethernet_output+0x84>)
 8015752:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015756:	490a      	ldr	r1, [pc, #40]	; (8015780 <ethernet_output+0x88>)
 8015758:	480a      	ldr	r0, [pc, #40]	; (8015784 <ethernet_output+0x8c>)
 801575a:	f000 fbbd 	bl	8015ed8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	699b      	ldr	r3, [r3, #24]
 8015762:	68b9      	ldr	r1, [r7, #8]
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	4798      	blx	r3
 8015768:	4603      	mov	r3, r0
 801576a:	e002      	b.n	8015772 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801576c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801576e:	f06f 0301 	mvn.w	r3, #1
}
 8015772:	4618      	mov	r0, r3
 8015774:	3718      	adds	r7, #24
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	0801a218 	.word	0x0801a218
 8015780:	0801a250 	.word	0x0801a250
 8015784:	0801a284 	.word	0x0801a284

08015788 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	2200      	movs	r2, #0
 8015796:	2104      	movs	r1, #4
 8015798:	4618      	mov	r0, r3
 801579a:	f7ef fdf1 	bl	8005380 <osMessageQueueNew>
 801579e:	4602      	mov	r2, r0
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d102      	bne.n	80157b2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80157ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157b0:	e000      	b.n	80157b4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80157b2:	2300      	movs	r3, #0
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7ef ff45 	bl	8005658 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7ef ff72 	bl	80056bc <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80157d8:	bf00      	nop
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6818      	ldr	r0, [r3, #0]
 80157ee:	4639      	mov	r1, r7
 80157f0:	2300      	movs	r3, #0
 80157f2:	2200      	movs	r2, #0
 80157f4:	f7ef fe4a 	bl	800548c <osMessageQueuePut>
 80157f8:	4603      	mov	r3, r0
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d102      	bne.n	8015804 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80157fe:	2300      	movs	r3, #0
 8015800:	73fb      	strb	r3, [r7, #15]
 8015802:	e001      	b.n	8015808 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015804:	23ff      	movs	r3, #255	; 0xff
 8015806:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801580c:	4618      	mov	r0, r3
 801580e:	3710      	adds	r7, #16
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b086      	sub	sp, #24
 8015818:	af00      	add	r7, sp, #0
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8015820:	f7ef f9da 	bl	8004bd8 <osKernelGetTickCount>
 8015824:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d013      	beq.n	8015854 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	6818      	ldr	r0, [r3, #0]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2200      	movs	r2, #0
 8015834:	68b9      	ldr	r1, [r7, #8]
 8015836:	f7ef fe9d 	bl	8005574 <osMessageQueueGet>
 801583a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d105      	bne.n	801584e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8015842:	f7ef f9c9 	bl	8004bd8 <osKernelGetTickCount>
 8015846:	4602      	mov	r2, r0
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	1ad3      	subs	r3, r2, r3
 801584c:	e00f      	b.n	801586e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801584e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015852:	e00c      	b.n	801586e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	6818      	ldr	r0, [r3, #0]
 8015858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801585c:	2200      	movs	r2, #0
 801585e:	68b9      	ldr	r1, [r7, #8]
 8015860:	f7ef fe88 	bl	8005574 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015864:	f7ef f9b8 	bl	8004bd8 <osKernelGetTickCount>
 8015868:	4602      	mov	r2, r0
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801586e:	4618      	mov	r0, r3
 8015870:	3718      	adds	r7, #24
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}

08015876 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015876:	b580      	push	{r7, lr}
 8015878:	b082      	sub	sp, #8
 801587a:	af00      	add	r7, sp, #0
 801587c:	6078      	str	r0, [r7, #4]
 801587e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	6818      	ldr	r0, [r3, #0]
 8015884:	2300      	movs	r3, #0
 8015886:	2200      	movs	r2, #0
 8015888:	6839      	ldr	r1, [r7, #0]
 801588a:	f7ef fe73 	bl	8005574 <osMessageQueueGet>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	d101      	bne.n	8015898 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8015894:	2300      	movs	r3, #0
 8015896:	e001      	b.n	801589c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801589c:	4618      	mov	r0, r3
 801589e:	3708      	adds	r7, #8
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80158a4:	b480      	push	{r7}
 80158a6:	b083      	sub	sp, #12
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d101      	bne.n	80158b8 <sys_mbox_valid+0x14>
    return 0;
 80158b4:	2300      	movs	r3, #0
 80158b6:	e000      	b.n	80158ba <sys_mbox_valid+0x16>
  else
    return 1;
 80158b8:	2301      	movs	r3, #1
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	370c      	adds	r7, #12
 80158be:	46bd      	mov	sp, r7
 80158c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c4:	4770      	bx	lr

080158c6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80158c6:	b480      	push	{r7}
 80158c8:	b083      	sub	sp, #12
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	2200      	movs	r2, #0
 80158d2:	601a      	str	r2, [r3, #0]
}
 80158d4:	bf00      	nop
 80158d6:	370c      	adds	r7, #12
 80158d8:	46bd      	mov	sp, r7
 80158da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158de:	4770      	bx	lr

080158e0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	460b      	mov	r3, r1
 80158ea:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80158ec:	78fb      	ldrb	r3, [r7, #3]
 80158ee:	2200      	movs	r2, #0
 80158f0:	4619      	mov	r1, r3
 80158f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158f6:	f7ef fbb3 	bl	8005060 <osSemaphoreNew>
 80158fa:	4602      	mov	r2, r0
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d102      	bne.n	801590e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801590c:	e009      	b.n	8015922 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801590e:	78fb      	ldrb	r3, [r7, #3]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d105      	bne.n	8015920 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2100      	movs	r1, #0
 801591a:	4618      	mov	r0, r3
 801591c:	f7ef fc3c 	bl	8005198 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015920:	2300      	movs	r3, #0
}
 8015922:	4618      	mov	r0, r3
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}

0801592a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801592a:	b580      	push	{r7, lr}
 801592c:	b084      	sub	sp, #16
 801592e:	af00      	add	r7, sp, #0
 8015930:	6078      	str	r0, [r7, #4]
 8015932:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8015934:	f7ef f950 	bl	8004bd8 <osKernelGetTickCount>
 8015938:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d011      	beq.n	8015964 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	6839      	ldr	r1, [r7, #0]
 8015946:	4618      	mov	r0, r3
 8015948:	f7ef fc26 	bl	8005198 <osSemaphoreAcquire>
 801594c:	4603      	mov	r3, r0
 801594e:	2b00      	cmp	r3, #0
 8015950:	d105      	bne.n	801595e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8015952:	f7ef f941 	bl	8004bd8 <osKernelGetTickCount>
 8015956:	4602      	mov	r2, r0
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	1ad3      	subs	r3, r2, r3
 801595c:	e012      	b.n	8015984 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801595e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015962:	e00f      	b.n	8015984 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8015964:	bf00      	nop
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801596e:	4618      	mov	r0, r3
 8015970:	f7ef fc12 	bl	8005198 <osSemaphoreAcquire>
 8015974:	4603      	mov	r3, r0
 8015976:	2b00      	cmp	r3, #0
 8015978:	d1f5      	bne.n	8015966 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801597a:	f7ef f92d 	bl	8004bd8 <osKernelGetTickCount>
 801597e:	4602      	mov	r2, r0
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015984:	4618      	mov	r0, r3
 8015986:	3710      	adds	r7, #16
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4618      	mov	r0, r3
 801599a:	f7ef fc63 	bl	8005264 <osSemaphoreRelease>
}
 801599e:	bf00      	nop
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}

080159a6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b082      	sub	sp, #8
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7ef fcae 	bl	8005314 <osSemaphoreDelete>
}
 80159b8:	bf00      	nop
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b083      	sub	sp, #12
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d101      	bne.n	80159d4 <sys_sem_valid+0x14>
    return 0;
 80159d0:	2300      	movs	r3, #0
 80159d2:	e000      	b.n	80159d6 <sys_sem_valid+0x16>
  else
    return 1;
 80159d4:	2301      	movs	r3, #1
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr

080159e2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80159e2:	b480      	push	{r7}
 80159e4:	b083      	sub	sp, #12
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2200      	movs	r2, #0
 80159ee:	601a      	str	r2, [r3, #0]
}
 80159f0:	bf00      	nop
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8015a00:	2000      	movs	r0, #0
 8015a02:	f7ef f9e5 	bl	8004dd0 <osMutexNew>
 8015a06:	4603      	mov	r3, r0
 8015a08:	4a01      	ldr	r2, [pc, #4]	; (8015a10 <sys_init+0x14>)
 8015a0a:	6013      	str	r3, [r2, #0]
#endif
}
 8015a0c:	bf00      	nop
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	20011a9c 	.word	0x20011a9c

08015a14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	f7ef f9d7 	bl	8004dd0 <osMutexNew>
 8015a22:	4602      	mov	r2, r0
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d102      	bne.n	8015a36 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a34:	e000      	b.n	8015a38 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015a36:	2300      	movs	r3, #0
}
 8015a38:	4618      	mov	r0, r3
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b082      	sub	sp, #8
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7ef fa57 	bl	8004f04 <osMutexAcquire>
#endif
}
 8015a56:	bf00      	nop
 8015a58:	3708      	adds	r7, #8
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}

08015a5e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015a5e:	b580      	push	{r7, lr}
 8015a60:	b082      	sub	sp, #8
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7ef faa8 	bl	8004fc0 <osMutexRelease>
}
 8015a70:	bf00      	nop
 8015a72:	3708      	adds	r7, #8
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b08e      	sub	sp, #56	; 0x38
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	60f8      	str	r0, [r7, #12]
 8015a80:	60b9      	str	r1, [r7, #8]
 8015a82:	607a      	str	r2, [r7, #4]
 8015a84:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8015a86:	f107 0314 	add.w	r3, r7, #20
 8015a8a:	2224      	movs	r2, #36	; 0x24
 8015a8c:	2100      	movs	r1, #0
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f000 f985 	bl	8015d9e <memset>
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	617b      	str	r3, [r7, #20]
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015aa0:	f107 0314 	add.w	r3, r7, #20
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	6879      	ldr	r1, [r7, #4]
 8015aa8:	68b8      	ldr	r0, [r7, #8]
 8015aaa:	f7ef f8bd 	bl	8004c28 <osThreadNew>
 8015aae:	4603      	mov	r3, r0
#endif
}
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	3738      	adds	r7, #56	; 0x38
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bd80      	pop	{r7, pc}

08015ab8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8015abc:	4b04      	ldr	r3, [pc, #16]	; (8015ad0 <sys_arch_protect+0x18>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7ef fa1d 	bl	8004f04 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8015aca:	2301      	movs	r3, #1
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	20011a9c 	.word	0x20011a9c

08015ad4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b082      	sub	sp, #8
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015adc:	4b04      	ldr	r3, [pc, #16]	; (8015af0 <sys_arch_unprotect+0x1c>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7ef fa6d 	bl	8004fc0 <osMutexRelease>
}
 8015ae6:	bf00      	nop
 8015ae8:	3708      	adds	r7, #8
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}
 8015aee:	bf00      	nop
 8015af0:	20011a9c 	.word	0x20011a9c

08015af4 <std>:
 8015af4:	2300      	movs	r3, #0
 8015af6:	b510      	push	{r4, lr}
 8015af8:	4604      	mov	r4, r0
 8015afa:	e9c0 3300 	strd	r3, r3, [r0]
 8015afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015b02:	6083      	str	r3, [r0, #8]
 8015b04:	8181      	strh	r1, [r0, #12]
 8015b06:	6643      	str	r3, [r0, #100]	; 0x64
 8015b08:	81c2      	strh	r2, [r0, #14]
 8015b0a:	6183      	str	r3, [r0, #24]
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	2208      	movs	r2, #8
 8015b10:	305c      	adds	r0, #92	; 0x5c
 8015b12:	f000 f944 	bl	8015d9e <memset>
 8015b16:	4b05      	ldr	r3, [pc, #20]	; (8015b2c <std+0x38>)
 8015b18:	6263      	str	r3, [r4, #36]	; 0x24
 8015b1a:	4b05      	ldr	r3, [pc, #20]	; (8015b30 <std+0x3c>)
 8015b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015b1e:	4b05      	ldr	r3, [pc, #20]	; (8015b34 <std+0x40>)
 8015b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b22:	4b05      	ldr	r3, [pc, #20]	; (8015b38 <std+0x44>)
 8015b24:	6224      	str	r4, [r4, #32]
 8015b26:	6323      	str	r3, [r4, #48]	; 0x30
 8015b28:	bd10      	pop	{r4, pc}
 8015b2a:	bf00      	nop
 8015b2c:	080160b9 	.word	0x080160b9
 8015b30:	080160db 	.word	0x080160db
 8015b34:	08016113 	.word	0x08016113
 8015b38:	08016137 	.word	0x08016137

08015b3c <_cleanup_r>:
 8015b3c:	4901      	ldr	r1, [pc, #4]	; (8015b44 <_cleanup_r+0x8>)
 8015b3e:	f000 b8af 	b.w	8015ca0 <_fwalk_reent>
 8015b42:	bf00      	nop
 8015b44:	080162f1 	.word	0x080162f1

08015b48 <__sfmoreglue>:
 8015b48:	b570      	push	{r4, r5, r6, lr}
 8015b4a:	2268      	movs	r2, #104	; 0x68
 8015b4c:	1e4d      	subs	r5, r1, #1
 8015b4e:	4355      	muls	r5, r2
 8015b50:	460e      	mov	r6, r1
 8015b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b56:	f000 f94b 	bl	8015df0 <_malloc_r>
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	b140      	cbz	r0, 8015b70 <__sfmoreglue+0x28>
 8015b5e:	2100      	movs	r1, #0
 8015b60:	e9c0 1600 	strd	r1, r6, [r0]
 8015b64:	300c      	adds	r0, #12
 8015b66:	60a0      	str	r0, [r4, #8]
 8015b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b6c:	f000 f917 	bl	8015d9e <memset>
 8015b70:	4620      	mov	r0, r4
 8015b72:	bd70      	pop	{r4, r5, r6, pc}

08015b74 <__sfp_lock_acquire>:
 8015b74:	4801      	ldr	r0, [pc, #4]	; (8015b7c <__sfp_lock_acquire+0x8>)
 8015b76:	f000 b8d8 	b.w	8015d2a <__retarget_lock_acquire_recursive>
 8015b7a:	bf00      	nop
 8015b7c:	20011aa1 	.word	0x20011aa1

08015b80 <__sfp_lock_release>:
 8015b80:	4801      	ldr	r0, [pc, #4]	; (8015b88 <__sfp_lock_release+0x8>)
 8015b82:	f000 b8d3 	b.w	8015d2c <__retarget_lock_release_recursive>
 8015b86:	bf00      	nop
 8015b88:	20011aa1 	.word	0x20011aa1

08015b8c <__sinit_lock_acquire>:
 8015b8c:	4801      	ldr	r0, [pc, #4]	; (8015b94 <__sinit_lock_acquire+0x8>)
 8015b8e:	f000 b8cc 	b.w	8015d2a <__retarget_lock_acquire_recursive>
 8015b92:	bf00      	nop
 8015b94:	20011aa2 	.word	0x20011aa2

08015b98 <__sinit_lock_release>:
 8015b98:	4801      	ldr	r0, [pc, #4]	; (8015ba0 <__sinit_lock_release+0x8>)
 8015b9a:	f000 b8c7 	b.w	8015d2c <__retarget_lock_release_recursive>
 8015b9e:	bf00      	nop
 8015ba0:	20011aa2 	.word	0x20011aa2

08015ba4 <__sinit>:
 8015ba4:	b510      	push	{r4, lr}
 8015ba6:	4604      	mov	r4, r0
 8015ba8:	f7ff fff0 	bl	8015b8c <__sinit_lock_acquire>
 8015bac:	69a3      	ldr	r3, [r4, #24]
 8015bae:	b11b      	cbz	r3, 8015bb8 <__sinit+0x14>
 8015bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bb4:	f7ff bff0 	b.w	8015b98 <__sinit_lock_release>
 8015bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8015bbe:	4b13      	ldr	r3, [pc, #76]	; (8015c0c <__sinit+0x68>)
 8015bc0:	4a13      	ldr	r2, [pc, #76]	; (8015c10 <__sinit+0x6c>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8015bc6:	42a3      	cmp	r3, r4
 8015bc8:	bf04      	itt	eq
 8015bca:	2301      	moveq	r3, #1
 8015bcc:	61a3      	streq	r3, [r4, #24]
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f000 f820 	bl	8015c14 <__sfp>
 8015bd4:	6060      	str	r0, [r4, #4]
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	f000 f81c 	bl	8015c14 <__sfp>
 8015bdc:	60a0      	str	r0, [r4, #8]
 8015bde:	4620      	mov	r0, r4
 8015be0:	f000 f818 	bl	8015c14 <__sfp>
 8015be4:	2200      	movs	r2, #0
 8015be6:	60e0      	str	r0, [r4, #12]
 8015be8:	2104      	movs	r1, #4
 8015bea:	6860      	ldr	r0, [r4, #4]
 8015bec:	f7ff ff82 	bl	8015af4 <std>
 8015bf0:	68a0      	ldr	r0, [r4, #8]
 8015bf2:	2201      	movs	r2, #1
 8015bf4:	2109      	movs	r1, #9
 8015bf6:	f7ff ff7d 	bl	8015af4 <std>
 8015bfa:	68e0      	ldr	r0, [r4, #12]
 8015bfc:	2202      	movs	r2, #2
 8015bfe:	2112      	movs	r1, #18
 8015c00:	f7ff ff78 	bl	8015af4 <std>
 8015c04:	2301      	movs	r3, #1
 8015c06:	61a3      	str	r3, [r4, #24]
 8015c08:	e7d2      	b.n	8015bb0 <__sinit+0xc>
 8015c0a:	bf00      	nop
 8015c0c:	0801a4b4 	.word	0x0801a4b4
 8015c10:	08015b3d 	.word	0x08015b3d

08015c14 <__sfp>:
 8015c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c16:	4607      	mov	r7, r0
 8015c18:	f7ff ffac 	bl	8015b74 <__sfp_lock_acquire>
 8015c1c:	4b1e      	ldr	r3, [pc, #120]	; (8015c98 <__sfp+0x84>)
 8015c1e:	681e      	ldr	r6, [r3, #0]
 8015c20:	69b3      	ldr	r3, [r6, #24]
 8015c22:	b913      	cbnz	r3, 8015c2a <__sfp+0x16>
 8015c24:	4630      	mov	r0, r6
 8015c26:	f7ff ffbd 	bl	8015ba4 <__sinit>
 8015c2a:	3648      	adds	r6, #72	; 0x48
 8015c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015c30:	3b01      	subs	r3, #1
 8015c32:	d503      	bpl.n	8015c3c <__sfp+0x28>
 8015c34:	6833      	ldr	r3, [r6, #0]
 8015c36:	b30b      	cbz	r3, 8015c7c <__sfp+0x68>
 8015c38:	6836      	ldr	r6, [r6, #0]
 8015c3a:	e7f7      	b.n	8015c2c <__sfp+0x18>
 8015c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015c40:	b9d5      	cbnz	r5, 8015c78 <__sfp+0x64>
 8015c42:	4b16      	ldr	r3, [pc, #88]	; (8015c9c <__sfp+0x88>)
 8015c44:	60e3      	str	r3, [r4, #12]
 8015c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8015c4c:	f000 f86c 	bl	8015d28 <__retarget_lock_init_recursive>
 8015c50:	f7ff ff96 	bl	8015b80 <__sfp_lock_release>
 8015c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015c5c:	6025      	str	r5, [r4, #0]
 8015c5e:	61a5      	str	r5, [r4, #24]
 8015c60:	2208      	movs	r2, #8
 8015c62:	4629      	mov	r1, r5
 8015c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c68:	f000 f899 	bl	8015d9e <memset>
 8015c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c74:	4620      	mov	r0, r4
 8015c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c78:	3468      	adds	r4, #104	; 0x68
 8015c7a:	e7d9      	b.n	8015c30 <__sfp+0x1c>
 8015c7c:	2104      	movs	r1, #4
 8015c7e:	4638      	mov	r0, r7
 8015c80:	f7ff ff62 	bl	8015b48 <__sfmoreglue>
 8015c84:	4604      	mov	r4, r0
 8015c86:	6030      	str	r0, [r6, #0]
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	d1d5      	bne.n	8015c38 <__sfp+0x24>
 8015c8c:	f7ff ff78 	bl	8015b80 <__sfp_lock_release>
 8015c90:	230c      	movs	r3, #12
 8015c92:	603b      	str	r3, [r7, #0]
 8015c94:	e7ee      	b.n	8015c74 <__sfp+0x60>
 8015c96:	bf00      	nop
 8015c98:	0801a4b4 	.word	0x0801a4b4
 8015c9c:	ffff0001 	.word	0xffff0001

08015ca0 <_fwalk_reent>:
 8015ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ca4:	4606      	mov	r6, r0
 8015ca6:	4688      	mov	r8, r1
 8015ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015cac:	2700      	movs	r7, #0
 8015cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8015cb6:	d505      	bpl.n	8015cc4 <_fwalk_reent+0x24>
 8015cb8:	6824      	ldr	r4, [r4, #0]
 8015cba:	2c00      	cmp	r4, #0
 8015cbc:	d1f7      	bne.n	8015cae <_fwalk_reent+0xe>
 8015cbe:	4638      	mov	r0, r7
 8015cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cc4:	89ab      	ldrh	r3, [r5, #12]
 8015cc6:	2b01      	cmp	r3, #1
 8015cc8:	d907      	bls.n	8015cda <_fwalk_reent+0x3a>
 8015cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	d003      	beq.n	8015cda <_fwalk_reent+0x3a>
 8015cd2:	4629      	mov	r1, r5
 8015cd4:	4630      	mov	r0, r6
 8015cd6:	47c0      	blx	r8
 8015cd8:	4307      	orrs	r7, r0
 8015cda:	3568      	adds	r5, #104	; 0x68
 8015cdc:	e7e9      	b.n	8015cb2 <_fwalk_reent+0x12>
	...

08015ce0 <__libc_init_array>:
 8015ce0:	b570      	push	{r4, r5, r6, lr}
 8015ce2:	4d0d      	ldr	r5, [pc, #52]	; (8015d18 <__libc_init_array+0x38>)
 8015ce4:	4c0d      	ldr	r4, [pc, #52]	; (8015d1c <__libc_init_array+0x3c>)
 8015ce6:	1b64      	subs	r4, r4, r5
 8015ce8:	10a4      	asrs	r4, r4, #2
 8015cea:	2600      	movs	r6, #0
 8015cec:	42a6      	cmp	r6, r4
 8015cee:	d109      	bne.n	8015d04 <__libc_init_array+0x24>
 8015cf0:	4d0b      	ldr	r5, [pc, #44]	; (8015d20 <__libc_init_array+0x40>)
 8015cf2:	4c0c      	ldr	r4, [pc, #48]	; (8015d24 <__libc_init_array+0x44>)
 8015cf4:	f001 f9e2 	bl	80170bc <_init>
 8015cf8:	1b64      	subs	r4, r4, r5
 8015cfa:	10a4      	asrs	r4, r4, #2
 8015cfc:	2600      	movs	r6, #0
 8015cfe:	42a6      	cmp	r6, r4
 8015d00:	d105      	bne.n	8015d0e <__libc_init_array+0x2e>
 8015d02:	bd70      	pop	{r4, r5, r6, pc}
 8015d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d08:	4798      	blx	r3
 8015d0a:	3601      	adds	r6, #1
 8015d0c:	e7ee      	b.n	8015cec <__libc_init_array+0xc>
 8015d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d12:	4798      	blx	r3
 8015d14:	3601      	adds	r6, #1
 8015d16:	e7f2      	b.n	8015cfe <__libc_init_array+0x1e>
 8015d18:	0801a5a4 	.word	0x0801a5a4
 8015d1c:	0801a5a4 	.word	0x0801a5a4
 8015d20:	0801a5a4 	.word	0x0801a5a4
 8015d24:	0801a5a8 	.word	0x0801a5a8

08015d28 <__retarget_lock_init_recursive>:
 8015d28:	4770      	bx	lr

08015d2a <__retarget_lock_acquire_recursive>:
 8015d2a:	4770      	bx	lr

08015d2c <__retarget_lock_release_recursive>:
 8015d2c:	4770      	bx	lr

08015d2e <memcmp>:
 8015d2e:	b510      	push	{r4, lr}
 8015d30:	3901      	subs	r1, #1
 8015d32:	4402      	add	r2, r0
 8015d34:	4290      	cmp	r0, r2
 8015d36:	d101      	bne.n	8015d3c <memcmp+0xe>
 8015d38:	2000      	movs	r0, #0
 8015d3a:	e005      	b.n	8015d48 <memcmp+0x1a>
 8015d3c:	7803      	ldrb	r3, [r0, #0]
 8015d3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015d42:	42a3      	cmp	r3, r4
 8015d44:	d001      	beq.n	8015d4a <memcmp+0x1c>
 8015d46:	1b18      	subs	r0, r3, r4
 8015d48:	bd10      	pop	{r4, pc}
 8015d4a:	3001      	adds	r0, #1
 8015d4c:	e7f2      	b.n	8015d34 <memcmp+0x6>

08015d4e <memcpy>:
 8015d4e:	440a      	add	r2, r1
 8015d50:	4291      	cmp	r1, r2
 8015d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015d56:	d100      	bne.n	8015d5a <memcpy+0xc>
 8015d58:	4770      	bx	lr
 8015d5a:	b510      	push	{r4, lr}
 8015d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d64:	4291      	cmp	r1, r2
 8015d66:	d1f9      	bne.n	8015d5c <memcpy+0xe>
 8015d68:	bd10      	pop	{r4, pc}

08015d6a <memmove>:
 8015d6a:	4288      	cmp	r0, r1
 8015d6c:	b510      	push	{r4, lr}
 8015d6e:	eb01 0402 	add.w	r4, r1, r2
 8015d72:	d902      	bls.n	8015d7a <memmove+0x10>
 8015d74:	4284      	cmp	r4, r0
 8015d76:	4623      	mov	r3, r4
 8015d78:	d807      	bhi.n	8015d8a <memmove+0x20>
 8015d7a:	1e43      	subs	r3, r0, #1
 8015d7c:	42a1      	cmp	r1, r4
 8015d7e:	d008      	beq.n	8015d92 <memmove+0x28>
 8015d80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d88:	e7f8      	b.n	8015d7c <memmove+0x12>
 8015d8a:	4402      	add	r2, r0
 8015d8c:	4601      	mov	r1, r0
 8015d8e:	428a      	cmp	r2, r1
 8015d90:	d100      	bne.n	8015d94 <memmove+0x2a>
 8015d92:	bd10      	pop	{r4, pc}
 8015d94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d9c:	e7f7      	b.n	8015d8e <memmove+0x24>

08015d9e <memset>:
 8015d9e:	4402      	add	r2, r0
 8015da0:	4603      	mov	r3, r0
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d100      	bne.n	8015da8 <memset+0xa>
 8015da6:	4770      	bx	lr
 8015da8:	f803 1b01 	strb.w	r1, [r3], #1
 8015dac:	e7f9      	b.n	8015da2 <memset+0x4>
	...

08015db0 <sbrk_aligned>:
 8015db0:	b570      	push	{r4, r5, r6, lr}
 8015db2:	4e0e      	ldr	r6, [pc, #56]	; (8015dec <sbrk_aligned+0x3c>)
 8015db4:	460c      	mov	r4, r1
 8015db6:	6831      	ldr	r1, [r6, #0]
 8015db8:	4605      	mov	r5, r0
 8015dba:	b911      	cbnz	r1, 8015dc2 <sbrk_aligned+0x12>
 8015dbc:	f000 f94c 	bl	8016058 <_sbrk_r>
 8015dc0:	6030      	str	r0, [r6, #0]
 8015dc2:	4621      	mov	r1, r4
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	f000 f947 	bl	8016058 <_sbrk_r>
 8015dca:	1c43      	adds	r3, r0, #1
 8015dcc:	d00a      	beq.n	8015de4 <sbrk_aligned+0x34>
 8015dce:	1cc4      	adds	r4, r0, #3
 8015dd0:	f024 0403 	bic.w	r4, r4, #3
 8015dd4:	42a0      	cmp	r0, r4
 8015dd6:	d007      	beq.n	8015de8 <sbrk_aligned+0x38>
 8015dd8:	1a21      	subs	r1, r4, r0
 8015dda:	4628      	mov	r0, r5
 8015ddc:	f000 f93c 	bl	8016058 <_sbrk_r>
 8015de0:	3001      	adds	r0, #1
 8015de2:	d101      	bne.n	8015de8 <sbrk_aligned+0x38>
 8015de4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015de8:	4620      	mov	r0, r4
 8015dea:	bd70      	pop	{r4, r5, r6, pc}
 8015dec:	20011aa8 	.word	0x20011aa8

08015df0 <_malloc_r>:
 8015df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015df4:	1ccd      	adds	r5, r1, #3
 8015df6:	f025 0503 	bic.w	r5, r5, #3
 8015dfa:	3508      	adds	r5, #8
 8015dfc:	2d0c      	cmp	r5, #12
 8015dfe:	bf38      	it	cc
 8015e00:	250c      	movcc	r5, #12
 8015e02:	2d00      	cmp	r5, #0
 8015e04:	4607      	mov	r7, r0
 8015e06:	db01      	blt.n	8015e0c <_malloc_r+0x1c>
 8015e08:	42a9      	cmp	r1, r5
 8015e0a:	d905      	bls.n	8015e18 <_malloc_r+0x28>
 8015e0c:	230c      	movs	r3, #12
 8015e0e:	603b      	str	r3, [r7, #0]
 8015e10:	2600      	movs	r6, #0
 8015e12:	4630      	mov	r0, r6
 8015e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e18:	4e2e      	ldr	r6, [pc, #184]	; (8015ed4 <_malloc_r+0xe4>)
 8015e1a:	f000 fad1 	bl	80163c0 <__malloc_lock>
 8015e1e:	6833      	ldr	r3, [r6, #0]
 8015e20:	461c      	mov	r4, r3
 8015e22:	bb34      	cbnz	r4, 8015e72 <_malloc_r+0x82>
 8015e24:	4629      	mov	r1, r5
 8015e26:	4638      	mov	r0, r7
 8015e28:	f7ff ffc2 	bl	8015db0 <sbrk_aligned>
 8015e2c:	1c43      	adds	r3, r0, #1
 8015e2e:	4604      	mov	r4, r0
 8015e30:	d14d      	bne.n	8015ece <_malloc_r+0xde>
 8015e32:	6834      	ldr	r4, [r6, #0]
 8015e34:	4626      	mov	r6, r4
 8015e36:	2e00      	cmp	r6, #0
 8015e38:	d140      	bne.n	8015ebc <_malloc_r+0xcc>
 8015e3a:	6823      	ldr	r3, [r4, #0]
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	4638      	mov	r0, r7
 8015e40:	eb04 0803 	add.w	r8, r4, r3
 8015e44:	f000 f908 	bl	8016058 <_sbrk_r>
 8015e48:	4580      	cmp	r8, r0
 8015e4a:	d13a      	bne.n	8015ec2 <_malloc_r+0xd2>
 8015e4c:	6821      	ldr	r1, [r4, #0]
 8015e4e:	3503      	adds	r5, #3
 8015e50:	1a6d      	subs	r5, r5, r1
 8015e52:	f025 0503 	bic.w	r5, r5, #3
 8015e56:	3508      	adds	r5, #8
 8015e58:	2d0c      	cmp	r5, #12
 8015e5a:	bf38      	it	cc
 8015e5c:	250c      	movcc	r5, #12
 8015e5e:	4629      	mov	r1, r5
 8015e60:	4638      	mov	r0, r7
 8015e62:	f7ff ffa5 	bl	8015db0 <sbrk_aligned>
 8015e66:	3001      	adds	r0, #1
 8015e68:	d02b      	beq.n	8015ec2 <_malloc_r+0xd2>
 8015e6a:	6823      	ldr	r3, [r4, #0]
 8015e6c:	442b      	add	r3, r5
 8015e6e:	6023      	str	r3, [r4, #0]
 8015e70:	e00e      	b.n	8015e90 <_malloc_r+0xa0>
 8015e72:	6822      	ldr	r2, [r4, #0]
 8015e74:	1b52      	subs	r2, r2, r5
 8015e76:	d41e      	bmi.n	8015eb6 <_malloc_r+0xc6>
 8015e78:	2a0b      	cmp	r2, #11
 8015e7a:	d916      	bls.n	8015eaa <_malloc_r+0xba>
 8015e7c:	1961      	adds	r1, r4, r5
 8015e7e:	42a3      	cmp	r3, r4
 8015e80:	6025      	str	r5, [r4, #0]
 8015e82:	bf18      	it	ne
 8015e84:	6059      	strne	r1, [r3, #4]
 8015e86:	6863      	ldr	r3, [r4, #4]
 8015e88:	bf08      	it	eq
 8015e8a:	6031      	streq	r1, [r6, #0]
 8015e8c:	5162      	str	r2, [r4, r5]
 8015e8e:	604b      	str	r3, [r1, #4]
 8015e90:	4638      	mov	r0, r7
 8015e92:	f104 060b 	add.w	r6, r4, #11
 8015e96:	f000 fa99 	bl	80163cc <__malloc_unlock>
 8015e9a:	f026 0607 	bic.w	r6, r6, #7
 8015e9e:	1d23      	adds	r3, r4, #4
 8015ea0:	1af2      	subs	r2, r6, r3
 8015ea2:	d0b6      	beq.n	8015e12 <_malloc_r+0x22>
 8015ea4:	1b9b      	subs	r3, r3, r6
 8015ea6:	50a3      	str	r3, [r4, r2]
 8015ea8:	e7b3      	b.n	8015e12 <_malloc_r+0x22>
 8015eaa:	6862      	ldr	r2, [r4, #4]
 8015eac:	42a3      	cmp	r3, r4
 8015eae:	bf0c      	ite	eq
 8015eb0:	6032      	streq	r2, [r6, #0]
 8015eb2:	605a      	strne	r2, [r3, #4]
 8015eb4:	e7ec      	b.n	8015e90 <_malloc_r+0xa0>
 8015eb6:	4623      	mov	r3, r4
 8015eb8:	6864      	ldr	r4, [r4, #4]
 8015eba:	e7b2      	b.n	8015e22 <_malloc_r+0x32>
 8015ebc:	4634      	mov	r4, r6
 8015ebe:	6876      	ldr	r6, [r6, #4]
 8015ec0:	e7b9      	b.n	8015e36 <_malloc_r+0x46>
 8015ec2:	230c      	movs	r3, #12
 8015ec4:	603b      	str	r3, [r7, #0]
 8015ec6:	4638      	mov	r0, r7
 8015ec8:	f000 fa80 	bl	80163cc <__malloc_unlock>
 8015ecc:	e7a1      	b.n	8015e12 <_malloc_r+0x22>
 8015ece:	6025      	str	r5, [r4, #0]
 8015ed0:	e7de      	b.n	8015e90 <_malloc_r+0xa0>
 8015ed2:	bf00      	nop
 8015ed4:	20011aa4 	.word	0x20011aa4

08015ed8 <iprintf>:
 8015ed8:	b40f      	push	{r0, r1, r2, r3}
 8015eda:	4b0a      	ldr	r3, [pc, #40]	; (8015f04 <iprintf+0x2c>)
 8015edc:	b513      	push	{r0, r1, r4, lr}
 8015ede:	681c      	ldr	r4, [r3, #0]
 8015ee0:	b124      	cbz	r4, 8015eec <iprintf+0x14>
 8015ee2:	69a3      	ldr	r3, [r4, #24]
 8015ee4:	b913      	cbnz	r3, 8015eec <iprintf+0x14>
 8015ee6:	4620      	mov	r0, r4
 8015ee8:	f7ff fe5c 	bl	8015ba4 <__sinit>
 8015eec:	ab05      	add	r3, sp, #20
 8015eee:	9a04      	ldr	r2, [sp, #16]
 8015ef0:	68a1      	ldr	r1, [r4, #8]
 8015ef2:	9301      	str	r3, [sp, #4]
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f000 fc41 	bl	801677c <_vfiprintf_r>
 8015efa:	b002      	add	sp, #8
 8015efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f00:	b004      	add	sp, #16
 8015f02:	4770      	bx	lr
 8015f04:	2000002c 	.word	0x2000002c

08015f08 <rand>:
 8015f08:	4b16      	ldr	r3, [pc, #88]	; (8015f64 <rand+0x5c>)
 8015f0a:	b510      	push	{r4, lr}
 8015f0c:	681c      	ldr	r4, [r3, #0]
 8015f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015f10:	b9b3      	cbnz	r3, 8015f40 <rand+0x38>
 8015f12:	2018      	movs	r0, #24
 8015f14:	f000 fa4c 	bl	80163b0 <malloc>
 8015f18:	63a0      	str	r0, [r4, #56]	; 0x38
 8015f1a:	b928      	cbnz	r0, 8015f28 <rand+0x20>
 8015f1c:	4602      	mov	r2, r0
 8015f1e:	4b12      	ldr	r3, [pc, #72]	; (8015f68 <rand+0x60>)
 8015f20:	4812      	ldr	r0, [pc, #72]	; (8015f6c <rand+0x64>)
 8015f22:	214e      	movs	r1, #78	; 0x4e
 8015f24:	f000 f930 	bl	8016188 <__assert_func>
 8015f28:	4a11      	ldr	r2, [pc, #68]	; (8015f70 <rand+0x68>)
 8015f2a:	4b12      	ldr	r3, [pc, #72]	; (8015f74 <rand+0x6c>)
 8015f2c:	e9c0 2300 	strd	r2, r3, [r0]
 8015f30:	4b11      	ldr	r3, [pc, #68]	; (8015f78 <rand+0x70>)
 8015f32:	6083      	str	r3, [r0, #8]
 8015f34:	230b      	movs	r3, #11
 8015f36:	8183      	strh	r3, [r0, #12]
 8015f38:	2201      	movs	r2, #1
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015f40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015f42:	4a0e      	ldr	r2, [pc, #56]	; (8015f7c <rand+0x74>)
 8015f44:	6920      	ldr	r0, [r4, #16]
 8015f46:	6963      	ldr	r3, [r4, #20]
 8015f48:	490d      	ldr	r1, [pc, #52]	; (8015f80 <rand+0x78>)
 8015f4a:	4342      	muls	r2, r0
 8015f4c:	fb01 2203 	mla	r2, r1, r3, r2
 8015f50:	fba0 0101 	umull	r0, r1, r0, r1
 8015f54:	1c43      	adds	r3, r0, #1
 8015f56:	eb42 0001 	adc.w	r0, r2, r1
 8015f5a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015f5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015f62:	bd10      	pop	{r4, pc}
 8015f64:	2000002c 	.word	0x2000002c
 8015f68:	0801a4b8 	.word	0x0801a4b8
 8015f6c:	0801a4cf 	.word	0x0801a4cf
 8015f70:	abcd330e 	.word	0xabcd330e
 8015f74:	e66d1234 	.word	0xe66d1234
 8015f78:	0005deec 	.word	0x0005deec
 8015f7c:	5851f42d 	.word	0x5851f42d
 8015f80:	4c957f2d 	.word	0x4c957f2d

08015f84 <cleanup_glue>:
 8015f84:	b538      	push	{r3, r4, r5, lr}
 8015f86:	460c      	mov	r4, r1
 8015f88:	6809      	ldr	r1, [r1, #0]
 8015f8a:	4605      	mov	r5, r0
 8015f8c:	b109      	cbz	r1, 8015f92 <cleanup_glue+0xe>
 8015f8e:	f7ff fff9 	bl	8015f84 <cleanup_glue>
 8015f92:	4621      	mov	r1, r4
 8015f94:	4628      	mov	r0, r5
 8015f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f9a:	f000 ba1d 	b.w	80163d8 <_free_r>
	...

08015fa0 <_reclaim_reent>:
 8015fa0:	4b2c      	ldr	r3, [pc, #176]	; (8016054 <_reclaim_reent+0xb4>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	4283      	cmp	r3, r0
 8015fa6:	b570      	push	{r4, r5, r6, lr}
 8015fa8:	4604      	mov	r4, r0
 8015faa:	d051      	beq.n	8016050 <_reclaim_reent+0xb0>
 8015fac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015fae:	b143      	cbz	r3, 8015fc2 <_reclaim_reent+0x22>
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d14a      	bne.n	801604c <_reclaim_reent+0xac>
 8015fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fb8:	6819      	ldr	r1, [r3, #0]
 8015fba:	b111      	cbz	r1, 8015fc2 <_reclaim_reent+0x22>
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	f000 fa0b 	bl	80163d8 <_free_r>
 8015fc2:	6961      	ldr	r1, [r4, #20]
 8015fc4:	b111      	cbz	r1, 8015fcc <_reclaim_reent+0x2c>
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f000 fa06 	bl	80163d8 <_free_r>
 8015fcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015fce:	b111      	cbz	r1, 8015fd6 <_reclaim_reent+0x36>
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	f000 fa01 	bl	80163d8 <_free_r>
 8015fd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015fd8:	b111      	cbz	r1, 8015fe0 <_reclaim_reent+0x40>
 8015fda:	4620      	mov	r0, r4
 8015fdc:	f000 f9fc 	bl	80163d8 <_free_r>
 8015fe0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015fe2:	b111      	cbz	r1, 8015fea <_reclaim_reent+0x4a>
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	f000 f9f7 	bl	80163d8 <_free_r>
 8015fea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015fec:	b111      	cbz	r1, 8015ff4 <_reclaim_reent+0x54>
 8015fee:	4620      	mov	r0, r4
 8015ff0:	f000 f9f2 	bl	80163d8 <_free_r>
 8015ff4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015ff6:	b111      	cbz	r1, 8015ffe <_reclaim_reent+0x5e>
 8015ff8:	4620      	mov	r0, r4
 8015ffa:	f000 f9ed 	bl	80163d8 <_free_r>
 8015ffe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016000:	b111      	cbz	r1, 8016008 <_reclaim_reent+0x68>
 8016002:	4620      	mov	r0, r4
 8016004:	f000 f9e8 	bl	80163d8 <_free_r>
 8016008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801600a:	b111      	cbz	r1, 8016012 <_reclaim_reent+0x72>
 801600c:	4620      	mov	r0, r4
 801600e:	f000 f9e3 	bl	80163d8 <_free_r>
 8016012:	69a3      	ldr	r3, [r4, #24]
 8016014:	b1e3      	cbz	r3, 8016050 <_reclaim_reent+0xb0>
 8016016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016018:	4620      	mov	r0, r4
 801601a:	4798      	blx	r3
 801601c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801601e:	b1b9      	cbz	r1, 8016050 <_reclaim_reent+0xb0>
 8016020:	4620      	mov	r0, r4
 8016022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016026:	f7ff bfad 	b.w	8015f84 <cleanup_glue>
 801602a:	5949      	ldr	r1, [r1, r5]
 801602c:	b941      	cbnz	r1, 8016040 <_reclaim_reent+0xa0>
 801602e:	3504      	adds	r5, #4
 8016030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016032:	2d80      	cmp	r5, #128	; 0x80
 8016034:	68d9      	ldr	r1, [r3, #12]
 8016036:	d1f8      	bne.n	801602a <_reclaim_reent+0x8a>
 8016038:	4620      	mov	r0, r4
 801603a:	f000 f9cd 	bl	80163d8 <_free_r>
 801603e:	e7ba      	b.n	8015fb6 <_reclaim_reent+0x16>
 8016040:	680e      	ldr	r6, [r1, #0]
 8016042:	4620      	mov	r0, r4
 8016044:	f000 f9c8 	bl	80163d8 <_free_r>
 8016048:	4631      	mov	r1, r6
 801604a:	e7ef      	b.n	801602c <_reclaim_reent+0x8c>
 801604c:	2500      	movs	r5, #0
 801604e:	e7ef      	b.n	8016030 <_reclaim_reent+0x90>
 8016050:	bd70      	pop	{r4, r5, r6, pc}
 8016052:	bf00      	nop
 8016054:	2000002c 	.word	0x2000002c

08016058 <_sbrk_r>:
 8016058:	b538      	push	{r3, r4, r5, lr}
 801605a:	4d06      	ldr	r5, [pc, #24]	; (8016074 <_sbrk_r+0x1c>)
 801605c:	2300      	movs	r3, #0
 801605e:	4604      	mov	r4, r0
 8016060:	4608      	mov	r0, r1
 8016062:	602b      	str	r3, [r5, #0]
 8016064:	f7ea fe0a 	bl	8000c7c <_sbrk>
 8016068:	1c43      	adds	r3, r0, #1
 801606a:	d102      	bne.n	8016072 <_sbrk_r+0x1a>
 801606c:	682b      	ldr	r3, [r5, #0]
 801606e:	b103      	cbz	r3, 8016072 <_sbrk_r+0x1a>
 8016070:	6023      	str	r3, [r4, #0]
 8016072:	bd38      	pop	{r3, r4, r5, pc}
 8016074:	20011aac 	.word	0x20011aac

08016078 <siprintf>:
 8016078:	b40e      	push	{r1, r2, r3}
 801607a:	b500      	push	{lr}
 801607c:	b09c      	sub	sp, #112	; 0x70
 801607e:	ab1d      	add	r3, sp, #116	; 0x74
 8016080:	9002      	str	r0, [sp, #8]
 8016082:	9006      	str	r0, [sp, #24]
 8016084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016088:	4809      	ldr	r0, [pc, #36]	; (80160b0 <siprintf+0x38>)
 801608a:	9107      	str	r1, [sp, #28]
 801608c:	9104      	str	r1, [sp, #16]
 801608e:	4909      	ldr	r1, [pc, #36]	; (80160b4 <siprintf+0x3c>)
 8016090:	f853 2b04 	ldr.w	r2, [r3], #4
 8016094:	9105      	str	r1, [sp, #20]
 8016096:	6800      	ldr	r0, [r0, #0]
 8016098:	9301      	str	r3, [sp, #4]
 801609a:	a902      	add	r1, sp, #8
 801609c:	f000 fa44 	bl	8016528 <_svfiprintf_r>
 80160a0:	9b02      	ldr	r3, [sp, #8]
 80160a2:	2200      	movs	r2, #0
 80160a4:	701a      	strb	r2, [r3, #0]
 80160a6:	b01c      	add	sp, #112	; 0x70
 80160a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80160ac:	b003      	add	sp, #12
 80160ae:	4770      	bx	lr
 80160b0:	2000002c 	.word	0x2000002c
 80160b4:	ffff0208 	.word	0xffff0208

080160b8 <__sread>:
 80160b8:	b510      	push	{r4, lr}
 80160ba:	460c      	mov	r4, r1
 80160bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160c0:	f000 fe20 	bl	8016d04 <_read_r>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	bfab      	itete	ge
 80160c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80160ca:	89a3      	ldrhlt	r3, [r4, #12]
 80160cc:	181b      	addge	r3, r3, r0
 80160ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80160d2:	bfac      	ite	ge
 80160d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80160d6:	81a3      	strhlt	r3, [r4, #12]
 80160d8:	bd10      	pop	{r4, pc}

080160da <__swrite>:
 80160da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160de:	461f      	mov	r7, r3
 80160e0:	898b      	ldrh	r3, [r1, #12]
 80160e2:	05db      	lsls	r3, r3, #23
 80160e4:	4605      	mov	r5, r0
 80160e6:	460c      	mov	r4, r1
 80160e8:	4616      	mov	r6, r2
 80160ea:	d505      	bpl.n	80160f8 <__swrite+0x1e>
 80160ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160f0:	2302      	movs	r3, #2
 80160f2:	2200      	movs	r2, #0
 80160f4:	f000 f94a 	bl	801638c <_lseek_r>
 80160f8:	89a3      	ldrh	r3, [r4, #12]
 80160fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016102:	81a3      	strh	r3, [r4, #12]
 8016104:	4632      	mov	r2, r6
 8016106:	463b      	mov	r3, r7
 8016108:	4628      	mov	r0, r5
 801610a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801610e:	f000 b829 	b.w	8016164 <_write_r>

08016112 <__sseek>:
 8016112:	b510      	push	{r4, lr}
 8016114:	460c      	mov	r4, r1
 8016116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801611a:	f000 f937 	bl	801638c <_lseek_r>
 801611e:	1c43      	adds	r3, r0, #1
 8016120:	89a3      	ldrh	r3, [r4, #12]
 8016122:	bf15      	itete	ne
 8016124:	6560      	strne	r0, [r4, #84]	; 0x54
 8016126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801612a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801612e:	81a3      	strheq	r3, [r4, #12]
 8016130:	bf18      	it	ne
 8016132:	81a3      	strhne	r3, [r4, #12]
 8016134:	bd10      	pop	{r4, pc}

08016136 <__sclose>:
 8016136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801613a:	f000 b843 	b.w	80161c4 <_close_r>

0801613e <strncpy>:
 801613e:	b510      	push	{r4, lr}
 8016140:	3901      	subs	r1, #1
 8016142:	4603      	mov	r3, r0
 8016144:	b132      	cbz	r2, 8016154 <strncpy+0x16>
 8016146:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801614a:	f803 4b01 	strb.w	r4, [r3], #1
 801614e:	3a01      	subs	r2, #1
 8016150:	2c00      	cmp	r4, #0
 8016152:	d1f7      	bne.n	8016144 <strncpy+0x6>
 8016154:	441a      	add	r2, r3
 8016156:	2100      	movs	r1, #0
 8016158:	4293      	cmp	r3, r2
 801615a:	d100      	bne.n	801615e <strncpy+0x20>
 801615c:	bd10      	pop	{r4, pc}
 801615e:	f803 1b01 	strb.w	r1, [r3], #1
 8016162:	e7f9      	b.n	8016158 <strncpy+0x1a>

08016164 <_write_r>:
 8016164:	b538      	push	{r3, r4, r5, lr}
 8016166:	4d07      	ldr	r5, [pc, #28]	; (8016184 <_write_r+0x20>)
 8016168:	4604      	mov	r4, r0
 801616a:	4608      	mov	r0, r1
 801616c:	4611      	mov	r1, r2
 801616e:	2200      	movs	r2, #0
 8016170:	602a      	str	r2, [r5, #0]
 8016172:	461a      	mov	r2, r3
 8016174:	f7ea fd31 	bl	8000bda <_write>
 8016178:	1c43      	adds	r3, r0, #1
 801617a:	d102      	bne.n	8016182 <_write_r+0x1e>
 801617c:	682b      	ldr	r3, [r5, #0]
 801617e:	b103      	cbz	r3, 8016182 <_write_r+0x1e>
 8016180:	6023      	str	r3, [r4, #0]
 8016182:	bd38      	pop	{r3, r4, r5, pc}
 8016184:	20011aac 	.word	0x20011aac

08016188 <__assert_func>:
 8016188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801618a:	4614      	mov	r4, r2
 801618c:	461a      	mov	r2, r3
 801618e:	4b09      	ldr	r3, [pc, #36]	; (80161b4 <__assert_func+0x2c>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	4605      	mov	r5, r0
 8016194:	68d8      	ldr	r0, [r3, #12]
 8016196:	b14c      	cbz	r4, 80161ac <__assert_func+0x24>
 8016198:	4b07      	ldr	r3, [pc, #28]	; (80161b8 <__assert_func+0x30>)
 801619a:	9100      	str	r1, [sp, #0]
 801619c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80161a0:	4906      	ldr	r1, [pc, #24]	; (80161bc <__assert_func+0x34>)
 80161a2:	462b      	mov	r3, r5
 80161a4:	f000 f8e0 	bl	8016368 <fiprintf>
 80161a8:	f000 fe7e 	bl	8016ea8 <abort>
 80161ac:	4b04      	ldr	r3, [pc, #16]	; (80161c0 <__assert_func+0x38>)
 80161ae:	461c      	mov	r4, r3
 80161b0:	e7f3      	b.n	801619a <__assert_func+0x12>
 80161b2:	bf00      	nop
 80161b4:	2000002c 	.word	0x2000002c
 80161b8:	0801a52a 	.word	0x0801a52a
 80161bc:	0801a537 	.word	0x0801a537
 80161c0:	0801a565 	.word	0x0801a565

080161c4 <_close_r>:
 80161c4:	b538      	push	{r3, r4, r5, lr}
 80161c6:	4d06      	ldr	r5, [pc, #24]	; (80161e0 <_close_r+0x1c>)
 80161c8:	2300      	movs	r3, #0
 80161ca:	4604      	mov	r4, r0
 80161cc:	4608      	mov	r0, r1
 80161ce:	602b      	str	r3, [r5, #0]
 80161d0:	f7ea fd1f 	bl	8000c12 <_close>
 80161d4:	1c43      	adds	r3, r0, #1
 80161d6:	d102      	bne.n	80161de <_close_r+0x1a>
 80161d8:	682b      	ldr	r3, [r5, #0]
 80161da:	b103      	cbz	r3, 80161de <_close_r+0x1a>
 80161dc:	6023      	str	r3, [r4, #0]
 80161de:	bd38      	pop	{r3, r4, r5, pc}
 80161e0:	20011aac 	.word	0x20011aac

080161e4 <__sflush_r>:
 80161e4:	898a      	ldrh	r2, [r1, #12]
 80161e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ea:	4605      	mov	r5, r0
 80161ec:	0710      	lsls	r0, r2, #28
 80161ee:	460c      	mov	r4, r1
 80161f0:	d458      	bmi.n	80162a4 <__sflush_r+0xc0>
 80161f2:	684b      	ldr	r3, [r1, #4]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	dc05      	bgt.n	8016204 <__sflush_r+0x20>
 80161f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	dc02      	bgt.n	8016204 <__sflush_r+0x20>
 80161fe:	2000      	movs	r0, #0
 8016200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016206:	2e00      	cmp	r6, #0
 8016208:	d0f9      	beq.n	80161fe <__sflush_r+0x1a>
 801620a:	2300      	movs	r3, #0
 801620c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016210:	682f      	ldr	r7, [r5, #0]
 8016212:	602b      	str	r3, [r5, #0]
 8016214:	d032      	beq.n	801627c <__sflush_r+0x98>
 8016216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016218:	89a3      	ldrh	r3, [r4, #12]
 801621a:	075a      	lsls	r2, r3, #29
 801621c:	d505      	bpl.n	801622a <__sflush_r+0x46>
 801621e:	6863      	ldr	r3, [r4, #4]
 8016220:	1ac0      	subs	r0, r0, r3
 8016222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016224:	b10b      	cbz	r3, 801622a <__sflush_r+0x46>
 8016226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016228:	1ac0      	subs	r0, r0, r3
 801622a:	2300      	movs	r3, #0
 801622c:	4602      	mov	r2, r0
 801622e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016230:	6a21      	ldr	r1, [r4, #32]
 8016232:	4628      	mov	r0, r5
 8016234:	47b0      	blx	r6
 8016236:	1c43      	adds	r3, r0, #1
 8016238:	89a3      	ldrh	r3, [r4, #12]
 801623a:	d106      	bne.n	801624a <__sflush_r+0x66>
 801623c:	6829      	ldr	r1, [r5, #0]
 801623e:	291d      	cmp	r1, #29
 8016240:	d82c      	bhi.n	801629c <__sflush_r+0xb8>
 8016242:	4a2a      	ldr	r2, [pc, #168]	; (80162ec <__sflush_r+0x108>)
 8016244:	40ca      	lsrs	r2, r1
 8016246:	07d6      	lsls	r6, r2, #31
 8016248:	d528      	bpl.n	801629c <__sflush_r+0xb8>
 801624a:	2200      	movs	r2, #0
 801624c:	6062      	str	r2, [r4, #4]
 801624e:	04d9      	lsls	r1, r3, #19
 8016250:	6922      	ldr	r2, [r4, #16]
 8016252:	6022      	str	r2, [r4, #0]
 8016254:	d504      	bpl.n	8016260 <__sflush_r+0x7c>
 8016256:	1c42      	adds	r2, r0, #1
 8016258:	d101      	bne.n	801625e <__sflush_r+0x7a>
 801625a:	682b      	ldr	r3, [r5, #0]
 801625c:	b903      	cbnz	r3, 8016260 <__sflush_r+0x7c>
 801625e:	6560      	str	r0, [r4, #84]	; 0x54
 8016260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016262:	602f      	str	r7, [r5, #0]
 8016264:	2900      	cmp	r1, #0
 8016266:	d0ca      	beq.n	80161fe <__sflush_r+0x1a>
 8016268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801626c:	4299      	cmp	r1, r3
 801626e:	d002      	beq.n	8016276 <__sflush_r+0x92>
 8016270:	4628      	mov	r0, r5
 8016272:	f000 f8b1 	bl	80163d8 <_free_r>
 8016276:	2000      	movs	r0, #0
 8016278:	6360      	str	r0, [r4, #52]	; 0x34
 801627a:	e7c1      	b.n	8016200 <__sflush_r+0x1c>
 801627c:	6a21      	ldr	r1, [r4, #32]
 801627e:	2301      	movs	r3, #1
 8016280:	4628      	mov	r0, r5
 8016282:	47b0      	blx	r6
 8016284:	1c41      	adds	r1, r0, #1
 8016286:	d1c7      	bne.n	8016218 <__sflush_r+0x34>
 8016288:	682b      	ldr	r3, [r5, #0]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d0c4      	beq.n	8016218 <__sflush_r+0x34>
 801628e:	2b1d      	cmp	r3, #29
 8016290:	d001      	beq.n	8016296 <__sflush_r+0xb2>
 8016292:	2b16      	cmp	r3, #22
 8016294:	d101      	bne.n	801629a <__sflush_r+0xb6>
 8016296:	602f      	str	r7, [r5, #0]
 8016298:	e7b1      	b.n	80161fe <__sflush_r+0x1a>
 801629a:	89a3      	ldrh	r3, [r4, #12]
 801629c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162a0:	81a3      	strh	r3, [r4, #12]
 80162a2:	e7ad      	b.n	8016200 <__sflush_r+0x1c>
 80162a4:	690f      	ldr	r7, [r1, #16]
 80162a6:	2f00      	cmp	r7, #0
 80162a8:	d0a9      	beq.n	80161fe <__sflush_r+0x1a>
 80162aa:	0793      	lsls	r3, r2, #30
 80162ac:	680e      	ldr	r6, [r1, #0]
 80162ae:	bf08      	it	eq
 80162b0:	694b      	ldreq	r3, [r1, #20]
 80162b2:	600f      	str	r7, [r1, #0]
 80162b4:	bf18      	it	ne
 80162b6:	2300      	movne	r3, #0
 80162b8:	eba6 0807 	sub.w	r8, r6, r7
 80162bc:	608b      	str	r3, [r1, #8]
 80162be:	f1b8 0f00 	cmp.w	r8, #0
 80162c2:	dd9c      	ble.n	80161fe <__sflush_r+0x1a>
 80162c4:	6a21      	ldr	r1, [r4, #32]
 80162c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80162c8:	4643      	mov	r3, r8
 80162ca:	463a      	mov	r2, r7
 80162cc:	4628      	mov	r0, r5
 80162ce:	47b0      	blx	r6
 80162d0:	2800      	cmp	r0, #0
 80162d2:	dc06      	bgt.n	80162e2 <__sflush_r+0xfe>
 80162d4:	89a3      	ldrh	r3, [r4, #12]
 80162d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162da:	81a3      	strh	r3, [r4, #12]
 80162dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162e0:	e78e      	b.n	8016200 <__sflush_r+0x1c>
 80162e2:	4407      	add	r7, r0
 80162e4:	eba8 0800 	sub.w	r8, r8, r0
 80162e8:	e7e9      	b.n	80162be <__sflush_r+0xda>
 80162ea:	bf00      	nop
 80162ec:	20400001 	.word	0x20400001

080162f0 <_fflush_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	690b      	ldr	r3, [r1, #16]
 80162f4:	4605      	mov	r5, r0
 80162f6:	460c      	mov	r4, r1
 80162f8:	b913      	cbnz	r3, 8016300 <_fflush_r+0x10>
 80162fa:	2500      	movs	r5, #0
 80162fc:	4628      	mov	r0, r5
 80162fe:	bd38      	pop	{r3, r4, r5, pc}
 8016300:	b118      	cbz	r0, 801630a <_fflush_r+0x1a>
 8016302:	6983      	ldr	r3, [r0, #24]
 8016304:	b90b      	cbnz	r3, 801630a <_fflush_r+0x1a>
 8016306:	f7ff fc4d 	bl	8015ba4 <__sinit>
 801630a:	4b14      	ldr	r3, [pc, #80]	; (801635c <_fflush_r+0x6c>)
 801630c:	429c      	cmp	r4, r3
 801630e:	d11b      	bne.n	8016348 <_fflush_r+0x58>
 8016310:	686c      	ldr	r4, [r5, #4]
 8016312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d0ef      	beq.n	80162fa <_fflush_r+0xa>
 801631a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801631c:	07d0      	lsls	r0, r2, #31
 801631e:	d404      	bmi.n	801632a <_fflush_r+0x3a>
 8016320:	0599      	lsls	r1, r3, #22
 8016322:	d402      	bmi.n	801632a <_fflush_r+0x3a>
 8016324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016326:	f7ff fd00 	bl	8015d2a <__retarget_lock_acquire_recursive>
 801632a:	4628      	mov	r0, r5
 801632c:	4621      	mov	r1, r4
 801632e:	f7ff ff59 	bl	80161e4 <__sflush_r>
 8016332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016334:	07da      	lsls	r2, r3, #31
 8016336:	4605      	mov	r5, r0
 8016338:	d4e0      	bmi.n	80162fc <_fflush_r+0xc>
 801633a:	89a3      	ldrh	r3, [r4, #12]
 801633c:	059b      	lsls	r3, r3, #22
 801633e:	d4dd      	bmi.n	80162fc <_fflush_r+0xc>
 8016340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016342:	f7ff fcf3 	bl	8015d2c <__retarget_lock_release_recursive>
 8016346:	e7d9      	b.n	80162fc <_fflush_r+0xc>
 8016348:	4b05      	ldr	r3, [pc, #20]	; (8016360 <_fflush_r+0x70>)
 801634a:	429c      	cmp	r4, r3
 801634c:	d101      	bne.n	8016352 <_fflush_r+0x62>
 801634e:	68ac      	ldr	r4, [r5, #8]
 8016350:	e7df      	b.n	8016312 <_fflush_r+0x22>
 8016352:	4b04      	ldr	r3, [pc, #16]	; (8016364 <_fflush_r+0x74>)
 8016354:	429c      	cmp	r4, r3
 8016356:	bf08      	it	eq
 8016358:	68ec      	ldreq	r4, [r5, #12]
 801635a:	e7da      	b.n	8016312 <_fflush_r+0x22>
 801635c:	0801a474 	.word	0x0801a474
 8016360:	0801a494 	.word	0x0801a494
 8016364:	0801a454 	.word	0x0801a454

08016368 <fiprintf>:
 8016368:	b40e      	push	{r1, r2, r3}
 801636a:	b503      	push	{r0, r1, lr}
 801636c:	4601      	mov	r1, r0
 801636e:	ab03      	add	r3, sp, #12
 8016370:	4805      	ldr	r0, [pc, #20]	; (8016388 <fiprintf+0x20>)
 8016372:	f853 2b04 	ldr.w	r2, [r3], #4
 8016376:	6800      	ldr	r0, [r0, #0]
 8016378:	9301      	str	r3, [sp, #4]
 801637a:	f000 f9ff 	bl	801677c <_vfiprintf_r>
 801637e:	b002      	add	sp, #8
 8016380:	f85d eb04 	ldr.w	lr, [sp], #4
 8016384:	b003      	add	sp, #12
 8016386:	4770      	bx	lr
 8016388:	2000002c 	.word	0x2000002c

0801638c <_lseek_r>:
 801638c:	b538      	push	{r3, r4, r5, lr}
 801638e:	4d07      	ldr	r5, [pc, #28]	; (80163ac <_lseek_r+0x20>)
 8016390:	4604      	mov	r4, r0
 8016392:	4608      	mov	r0, r1
 8016394:	4611      	mov	r1, r2
 8016396:	2200      	movs	r2, #0
 8016398:	602a      	str	r2, [r5, #0]
 801639a:	461a      	mov	r2, r3
 801639c:	f7ea fc60 	bl	8000c60 <_lseek>
 80163a0:	1c43      	adds	r3, r0, #1
 80163a2:	d102      	bne.n	80163aa <_lseek_r+0x1e>
 80163a4:	682b      	ldr	r3, [r5, #0]
 80163a6:	b103      	cbz	r3, 80163aa <_lseek_r+0x1e>
 80163a8:	6023      	str	r3, [r4, #0]
 80163aa:	bd38      	pop	{r3, r4, r5, pc}
 80163ac:	20011aac 	.word	0x20011aac

080163b0 <malloc>:
 80163b0:	4b02      	ldr	r3, [pc, #8]	; (80163bc <malloc+0xc>)
 80163b2:	4601      	mov	r1, r0
 80163b4:	6818      	ldr	r0, [r3, #0]
 80163b6:	f7ff bd1b 	b.w	8015df0 <_malloc_r>
 80163ba:	bf00      	nop
 80163bc:	2000002c 	.word	0x2000002c

080163c0 <__malloc_lock>:
 80163c0:	4801      	ldr	r0, [pc, #4]	; (80163c8 <__malloc_lock+0x8>)
 80163c2:	f7ff bcb2 	b.w	8015d2a <__retarget_lock_acquire_recursive>
 80163c6:	bf00      	nop
 80163c8:	20011aa0 	.word	0x20011aa0

080163cc <__malloc_unlock>:
 80163cc:	4801      	ldr	r0, [pc, #4]	; (80163d4 <__malloc_unlock+0x8>)
 80163ce:	f7ff bcad 	b.w	8015d2c <__retarget_lock_release_recursive>
 80163d2:	bf00      	nop
 80163d4:	20011aa0 	.word	0x20011aa0

080163d8 <_free_r>:
 80163d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163da:	2900      	cmp	r1, #0
 80163dc:	d044      	beq.n	8016468 <_free_r+0x90>
 80163de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163e2:	9001      	str	r0, [sp, #4]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	f1a1 0404 	sub.w	r4, r1, #4
 80163ea:	bfb8      	it	lt
 80163ec:	18e4      	addlt	r4, r4, r3
 80163ee:	f7ff ffe7 	bl	80163c0 <__malloc_lock>
 80163f2:	4a1e      	ldr	r2, [pc, #120]	; (801646c <_free_r+0x94>)
 80163f4:	9801      	ldr	r0, [sp, #4]
 80163f6:	6813      	ldr	r3, [r2, #0]
 80163f8:	b933      	cbnz	r3, 8016408 <_free_r+0x30>
 80163fa:	6063      	str	r3, [r4, #4]
 80163fc:	6014      	str	r4, [r2, #0]
 80163fe:	b003      	add	sp, #12
 8016400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016404:	f7ff bfe2 	b.w	80163cc <__malloc_unlock>
 8016408:	42a3      	cmp	r3, r4
 801640a:	d908      	bls.n	801641e <_free_r+0x46>
 801640c:	6825      	ldr	r5, [r4, #0]
 801640e:	1961      	adds	r1, r4, r5
 8016410:	428b      	cmp	r3, r1
 8016412:	bf01      	itttt	eq
 8016414:	6819      	ldreq	r1, [r3, #0]
 8016416:	685b      	ldreq	r3, [r3, #4]
 8016418:	1949      	addeq	r1, r1, r5
 801641a:	6021      	streq	r1, [r4, #0]
 801641c:	e7ed      	b.n	80163fa <_free_r+0x22>
 801641e:	461a      	mov	r2, r3
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	b10b      	cbz	r3, 8016428 <_free_r+0x50>
 8016424:	42a3      	cmp	r3, r4
 8016426:	d9fa      	bls.n	801641e <_free_r+0x46>
 8016428:	6811      	ldr	r1, [r2, #0]
 801642a:	1855      	adds	r5, r2, r1
 801642c:	42a5      	cmp	r5, r4
 801642e:	d10b      	bne.n	8016448 <_free_r+0x70>
 8016430:	6824      	ldr	r4, [r4, #0]
 8016432:	4421      	add	r1, r4
 8016434:	1854      	adds	r4, r2, r1
 8016436:	42a3      	cmp	r3, r4
 8016438:	6011      	str	r1, [r2, #0]
 801643a:	d1e0      	bne.n	80163fe <_free_r+0x26>
 801643c:	681c      	ldr	r4, [r3, #0]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	6053      	str	r3, [r2, #4]
 8016442:	4421      	add	r1, r4
 8016444:	6011      	str	r1, [r2, #0]
 8016446:	e7da      	b.n	80163fe <_free_r+0x26>
 8016448:	d902      	bls.n	8016450 <_free_r+0x78>
 801644a:	230c      	movs	r3, #12
 801644c:	6003      	str	r3, [r0, #0]
 801644e:	e7d6      	b.n	80163fe <_free_r+0x26>
 8016450:	6825      	ldr	r5, [r4, #0]
 8016452:	1961      	adds	r1, r4, r5
 8016454:	428b      	cmp	r3, r1
 8016456:	bf04      	itt	eq
 8016458:	6819      	ldreq	r1, [r3, #0]
 801645a:	685b      	ldreq	r3, [r3, #4]
 801645c:	6063      	str	r3, [r4, #4]
 801645e:	bf04      	itt	eq
 8016460:	1949      	addeq	r1, r1, r5
 8016462:	6021      	streq	r1, [r4, #0]
 8016464:	6054      	str	r4, [r2, #4]
 8016466:	e7ca      	b.n	80163fe <_free_r+0x26>
 8016468:	b003      	add	sp, #12
 801646a:	bd30      	pop	{r4, r5, pc}
 801646c:	20011aa4 	.word	0x20011aa4

08016470 <__ssputs_r>:
 8016470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016474:	688e      	ldr	r6, [r1, #8]
 8016476:	429e      	cmp	r6, r3
 8016478:	4682      	mov	sl, r0
 801647a:	460c      	mov	r4, r1
 801647c:	4690      	mov	r8, r2
 801647e:	461f      	mov	r7, r3
 8016480:	d838      	bhi.n	80164f4 <__ssputs_r+0x84>
 8016482:	898a      	ldrh	r2, [r1, #12]
 8016484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016488:	d032      	beq.n	80164f0 <__ssputs_r+0x80>
 801648a:	6825      	ldr	r5, [r4, #0]
 801648c:	6909      	ldr	r1, [r1, #16]
 801648e:	eba5 0901 	sub.w	r9, r5, r1
 8016492:	6965      	ldr	r5, [r4, #20]
 8016494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801649c:	3301      	adds	r3, #1
 801649e:	444b      	add	r3, r9
 80164a0:	106d      	asrs	r5, r5, #1
 80164a2:	429d      	cmp	r5, r3
 80164a4:	bf38      	it	cc
 80164a6:	461d      	movcc	r5, r3
 80164a8:	0553      	lsls	r3, r2, #21
 80164aa:	d531      	bpl.n	8016510 <__ssputs_r+0xa0>
 80164ac:	4629      	mov	r1, r5
 80164ae:	f7ff fc9f 	bl	8015df0 <_malloc_r>
 80164b2:	4606      	mov	r6, r0
 80164b4:	b950      	cbnz	r0, 80164cc <__ssputs_r+0x5c>
 80164b6:	230c      	movs	r3, #12
 80164b8:	f8ca 3000 	str.w	r3, [sl]
 80164bc:	89a3      	ldrh	r3, [r4, #12]
 80164be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164c2:	81a3      	strh	r3, [r4, #12]
 80164c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80164c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164cc:	6921      	ldr	r1, [r4, #16]
 80164ce:	464a      	mov	r2, r9
 80164d0:	f7ff fc3d 	bl	8015d4e <memcpy>
 80164d4:	89a3      	ldrh	r3, [r4, #12]
 80164d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80164da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164de:	81a3      	strh	r3, [r4, #12]
 80164e0:	6126      	str	r6, [r4, #16]
 80164e2:	6165      	str	r5, [r4, #20]
 80164e4:	444e      	add	r6, r9
 80164e6:	eba5 0509 	sub.w	r5, r5, r9
 80164ea:	6026      	str	r6, [r4, #0]
 80164ec:	60a5      	str	r5, [r4, #8]
 80164ee:	463e      	mov	r6, r7
 80164f0:	42be      	cmp	r6, r7
 80164f2:	d900      	bls.n	80164f6 <__ssputs_r+0x86>
 80164f4:	463e      	mov	r6, r7
 80164f6:	6820      	ldr	r0, [r4, #0]
 80164f8:	4632      	mov	r2, r6
 80164fa:	4641      	mov	r1, r8
 80164fc:	f7ff fc35 	bl	8015d6a <memmove>
 8016500:	68a3      	ldr	r3, [r4, #8]
 8016502:	1b9b      	subs	r3, r3, r6
 8016504:	60a3      	str	r3, [r4, #8]
 8016506:	6823      	ldr	r3, [r4, #0]
 8016508:	4433      	add	r3, r6
 801650a:	6023      	str	r3, [r4, #0]
 801650c:	2000      	movs	r0, #0
 801650e:	e7db      	b.n	80164c8 <__ssputs_r+0x58>
 8016510:	462a      	mov	r2, r5
 8016512:	f000 fd35 	bl	8016f80 <_realloc_r>
 8016516:	4606      	mov	r6, r0
 8016518:	2800      	cmp	r0, #0
 801651a:	d1e1      	bne.n	80164e0 <__ssputs_r+0x70>
 801651c:	6921      	ldr	r1, [r4, #16]
 801651e:	4650      	mov	r0, sl
 8016520:	f7ff ff5a 	bl	80163d8 <_free_r>
 8016524:	e7c7      	b.n	80164b6 <__ssputs_r+0x46>
	...

08016528 <_svfiprintf_r>:
 8016528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652c:	4698      	mov	r8, r3
 801652e:	898b      	ldrh	r3, [r1, #12]
 8016530:	061b      	lsls	r3, r3, #24
 8016532:	b09d      	sub	sp, #116	; 0x74
 8016534:	4607      	mov	r7, r0
 8016536:	460d      	mov	r5, r1
 8016538:	4614      	mov	r4, r2
 801653a:	d50e      	bpl.n	801655a <_svfiprintf_r+0x32>
 801653c:	690b      	ldr	r3, [r1, #16]
 801653e:	b963      	cbnz	r3, 801655a <_svfiprintf_r+0x32>
 8016540:	2140      	movs	r1, #64	; 0x40
 8016542:	f7ff fc55 	bl	8015df0 <_malloc_r>
 8016546:	6028      	str	r0, [r5, #0]
 8016548:	6128      	str	r0, [r5, #16]
 801654a:	b920      	cbnz	r0, 8016556 <_svfiprintf_r+0x2e>
 801654c:	230c      	movs	r3, #12
 801654e:	603b      	str	r3, [r7, #0]
 8016550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016554:	e0d1      	b.n	80166fa <_svfiprintf_r+0x1d2>
 8016556:	2340      	movs	r3, #64	; 0x40
 8016558:	616b      	str	r3, [r5, #20]
 801655a:	2300      	movs	r3, #0
 801655c:	9309      	str	r3, [sp, #36]	; 0x24
 801655e:	2320      	movs	r3, #32
 8016560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016564:	f8cd 800c 	str.w	r8, [sp, #12]
 8016568:	2330      	movs	r3, #48	; 0x30
 801656a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016714 <_svfiprintf_r+0x1ec>
 801656e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016572:	f04f 0901 	mov.w	r9, #1
 8016576:	4623      	mov	r3, r4
 8016578:	469a      	mov	sl, r3
 801657a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801657e:	b10a      	cbz	r2, 8016584 <_svfiprintf_r+0x5c>
 8016580:	2a25      	cmp	r2, #37	; 0x25
 8016582:	d1f9      	bne.n	8016578 <_svfiprintf_r+0x50>
 8016584:	ebba 0b04 	subs.w	fp, sl, r4
 8016588:	d00b      	beq.n	80165a2 <_svfiprintf_r+0x7a>
 801658a:	465b      	mov	r3, fp
 801658c:	4622      	mov	r2, r4
 801658e:	4629      	mov	r1, r5
 8016590:	4638      	mov	r0, r7
 8016592:	f7ff ff6d 	bl	8016470 <__ssputs_r>
 8016596:	3001      	adds	r0, #1
 8016598:	f000 80aa 	beq.w	80166f0 <_svfiprintf_r+0x1c8>
 801659c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801659e:	445a      	add	r2, fp
 80165a0:	9209      	str	r2, [sp, #36]	; 0x24
 80165a2:	f89a 3000 	ldrb.w	r3, [sl]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 80a2 	beq.w	80166f0 <_svfiprintf_r+0x1c8>
 80165ac:	2300      	movs	r3, #0
 80165ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80165b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165b6:	f10a 0a01 	add.w	sl, sl, #1
 80165ba:	9304      	str	r3, [sp, #16]
 80165bc:	9307      	str	r3, [sp, #28]
 80165be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165c2:	931a      	str	r3, [sp, #104]	; 0x68
 80165c4:	4654      	mov	r4, sl
 80165c6:	2205      	movs	r2, #5
 80165c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165cc:	4851      	ldr	r0, [pc, #324]	; (8016714 <_svfiprintf_r+0x1ec>)
 80165ce:	f7e9 fe27 	bl	8000220 <memchr>
 80165d2:	9a04      	ldr	r2, [sp, #16]
 80165d4:	b9d8      	cbnz	r0, 801660e <_svfiprintf_r+0xe6>
 80165d6:	06d0      	lsls	r0, r2, #27
 80165d8:	bf44      	itt	mi
 80165da:	2320      	movmi	r3, #32
 80165dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165e0:	0711      	lsls	r1, r2, #28
 80165e2:	bf44      	itt	mi
 80165e4:	232b      	movmi	r3, #43	; 0x2b
 80165e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165ea:	f89a 3000 	ldrb.w	r3, [sl]
 80165ee:	2b2a      	cmp	r3, #42	; 0x2a
 80165f0:	d015      	beq.n	801661e <_svfiprintf_r+0xf6>
 80165f2:	9a07      	ldr	r2, [sp, #28]
 80165f4:	4654      	mov	r4, sl
 80165f6:	2000      	movs	r0, #0
 80165f8:	f04f 0c0a 	mov.w	ip, #10
 80165fc:	4621      	mov	r1, r4
 80165fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016602:	3b30      	subs	r3, #48	; 0x30
 8016604:	2b09      	cmp	r3, #9
 8016606:	d94e      	bls.n	80166a6 <_svfiprintf_r+0x17e>
 8016608:	b1b0      	cbz	r0, 8016638 <_svfiprintf_r+0x110>
 801660a:	9207      	str	r2, [sp, #28]
 801660c:	e014      	b.n	8016638 <_svfiprintf_r+0x110>
 801660e:	eba0 0308 	sub.w	r3, r0, r8
 8016612:	fa09 f303 	lsl.w	r3, r9, r3
 8016616:	4313      	orrs	r3, r2
 8016618:	9304      	str	r3, [sp, #16]
 801661a:	46a2      	mov	sl, r4
 801661c:	e7d2      	b.n	80165c4 <_svfiprintf_r+0x9c>
 801661e:	9b03      	ldr	r3, [sp, #12]
 8016620:	1d19      	adds	r1, r3, #4
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	9103      	str	r1, [sp, #12]
 8016626:	2b00      	cmp	r3, #0
 8016628:	bfbb      	ittet	lt
 801662a:	425b      	neglt	r3, r3
 801662c:	f042 0202 	orrlt.w	r2, r2, #2
 8016630:	9307      	strge	r3, [sp, #28]
 8016632:	9307      	strlt	r3, [sp, #28]
 8016634:	bfb8      	it	lt
 8016636:	9204      	strlt	r2, [sp, #16]
 8016638:	7823      	ldrb	r3, [r4, #0]
 801663a:	2b2e      	cmp	r3, #46	; 0x2e
 801663c:	d10c      	bne.n	8016658 <_svfiprintf_r+0x130>
 801663e:	7863      	ldrb	r3, [r4, #1]
 8016640:	2b2a      	cmp	r3, #42	; 0x2a
 8016642:	d135      	bne.n	80166b0 <_svfiprintf_r+0x188>
 8016644:	9b03      	ldr	r3, [sp, #12]
 8016646:	1d1a      	adds	r2, r3, #4
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	9203      	str	r2, [sp, #12]
 801664c:	2b00      	cmp	r3, #0
 801664e:	bfb8      	it	lt
 8016650:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016654:	3402      	adds	r4, #2
 8016656:	9305      	str	r3, [sp, #20]
 8016658:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016724 <_svfiprintf_r+0x1fc>
 801665c:	7821      	ldrb	r1, [r4, #0]
 801665e:	2203      	movs	r2, #3
 8016660:	4650      	mov	r0, sl
 8016662:	f7e9 fddd 	bl	8000220 <memchr>
 8016666:	b140      	cbz	r0, 801667a <_svfiprintf_r+0x152>
 8016668:	2340      	movs	r3, #64	; 0x40
 801666a:	eba0 000a 	sub.w	r0, r0, sl
 801666e:	fa03 f000 	lsl.w	r0, r3, r0
 8016672:	9b04      	ldr	r3, [sp, #16]
 8016674:	4303      	orrs	r3, r0
 8016676:	3401      	adds	r4, #1
 8016678:	9304      	str	r3, [sp, #16]
 801667a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801667e:	4826      	ldr	r0, [pc, #152]	; (8016718 <_svfiprintf_r+0x1f0>)
 8016680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016684:	2206      	movs	r2, #6
 8016686:	f7e9 fdcb 	bl	8000220 <memchr>
 801668a:	2800      	cmp	r0, #0
 801668c:	d038      	beq.n	8016700 <_svfiprintf_r+0x1d8>
 801668e:	4b23      	ldr	r3, [pc, #140]	; (801671c <_svfiprintf_r+0x1f4>)
 8016690:	bb1b      	cbnz	r3, 80166da <_svfiprintf_r+0x1b2>
 8016692:	9b03      	ldr	r3, [sp, #12]
 8016694:	3307      	adds	r3, #7
 8016696:	f023 0307 	bic.w	r3, r3, #7
 801669a:	3308      	adds	r3, #8
 801669c:	9303      	str	r3, [sp, #12]
 801669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166a0:	4433      	add	r3, r6
 80166a2:	9309      	str	r3, [sp, #36]	; 0x24
 80166a4:	e767      	b.n	8016576 <_svfiprintf_r+0x4e>
 80166a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80166aa:	460c      	mov	r4, r1
 80166ac:	2001      	movs	r0, #1
 80166ae:	e7a5      	b.n	80165fc <_svfiprintf_r+0xd4>
 80166b0:	2300      	movs	r3, #0
 80166b2:	3401      	adds	r4, #1
 80166b4:	9305      	str	r3, [sp, #20]
 80166b6:	4619      	mov	r1, r3
 80166b8:	f04f 0c0a 	mov.w	ip, #10
 80166bc:	4620      	mov	r0, r4
 80166be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166c2:	3a30      	subs	r2, #48	; 0x30
 80166c4:	2a09      	cmp	r2, #9
 80166c6:	d903      	bls.n	80166d0 <_svfiprintf_r+0x1a8>
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d0c5      	beq.n	8016658 <_svfiprintf_r+0x130>
 80166cc:	9105      	str	r1, [sp, #20]
 80166ce:	e7c3      	b.n	8016658 <_svfiprintf_r+0x130>
 80166d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80166d4:	4604      	mov	r4, r0
 80166d6:	2301      	movs	r3, #1
 80166d8:	e7f0      	b.n	80166bc <_svfiprintf_r+0x194>
 80166da:	ab03      	add	r3, sp, #12
 80166dc:	9300      	str	r3, [sp, #0]
 80166de:	462a      	mov	r2, r5
 80166e0:	4b0f      	ldr	r3, [pc, #60]	; (8016720 <_svfiprintf_r+0x1f8>)
 80166e2:	a904      	add	r1, sp, #16
 80166e4:	4638      	mov	r0, r7
 80166e6:	f3af 8000 	nop.w
 80166ea:	1c42      	adds	r2, r0, #1
 80166ec:	4606      	mov	r6, r0
 80166ee:	d1d6      	bne.n	801669e <_svfiprintf_r+0x176>
 80166f0:	89ab      	ldrh	r3, [r5, #12]
 80166f2:	065b      	lsls	r3, r3, #25
 80166f4:	f53f af2c 	bmi.w	8016550 <_svfiprintf_r+0x28>
 80166f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166fa:	b01d      	add	sp, #116	; 0x74
 80166fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016700:	ab03      	add	r3, sp, #12
 8016702:	9300      	str	r3, [sp, #0]
 8016704:	462a      	mov	r2, r5
 8016706:	4b06      	ldr	r3, [pc, #24]	; (8016720 <_svfiprintf_r+0x1f8>)
 8016708:	a904      	add	r1, sp, #16
 801670a:	4638      	mov	r0, r7
 801670c:	f000 f9d4 	bl	8016ab8 <_printf_i>
 8016710:	e7eb      	b.n	80166ea <_svfiprintf_r+0x1c2>
 8016712:	bf00      	nop
 8016714:	0801a566 	.word	0x0801a566
 8016718:	0801a570 	.word	0x0801a570
 801671c:	00000000 	.word	0x00000000
 8016720:	08016471 	.word	0x08016471
 8016724:	0801a56c 	.word	0x0801a56c

08016728 <__sfputc_r>:
 8016728:	6893      	ldr	r3, [r2, #8]
 801672a:	3b01      	subs	r3, #1
 801672c:	2b00      	cmp	r3, #0
 801672e:	b410      	push	{r4}
 8016730:	6093      	str	r3, [r2, #8]
 8016732:	da08      	bge.n	8016746 <__sfputc_r+0x1e>
 8016734:	6994      	ldr	r4, [r2, #24]
 8016736:	42a3      	cmp	r3, r4
 8016738:	db01      	blt.n	801673e <__sfputc_r+0x16>
 801673a:	290a      	cmp	r1, #10
 801673c:	d103      	bne.n	8016746 <__sfputc_r+0x1e>
 801673e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016742:	f000 baf1 	b.w	8016d28 <__swbuf_r>
 8016746:	6813      	ldr	r3, [r2, #0]
 8016748:	1c58      	adds	r0, r3, #1
 801674a:	6010      	str	r0, [r2, #0]
 801674c:	7019      	strb	r1, [r3, #0]
 801674e:	4608      	mov	r0, r1
 8016750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016754:	4770      	bx	lr

08016756 <__sfputs_r>:
 8016756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016758:	4606      	mov	r6, r0
 801675a:	460f      	mov	r7, r1
 801675c:	4614      	mov	r4, r2
 801675e:	18d5      	adds	r5, r2, r3
 8016760:	42ac      	cmp	r4, r5
 8016762:	d101      	bne.n	8016768 <__sfputs_r+0x12>
 8016764:	2000      	movs	r0, #0
 8016766:	e007      	b.n	8016778 <__sfputs_r+0x22>
 8016768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801676c:	463a      	mov	r2, r7
 801676e:	4630      	mov	r0, r6
 8016770:	f7ff ffda 	bl	8016728 <__sfputc_r>
 8016774:	1c43      	adds	r3, r0, #1
 8016776:	d1f3      	bne.n	8016760 <__sfputs_r+0xa>
 8016778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801677c <_vfiprintf_r>:
 801677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016780:	460d      	mov	r5, r1
 8016782:	b09d      	sub	sp, #116	; 0x74
 8016784:	4614      	mov	r4, r2
 8016786:	4698      	mov	r8, r3
 8016788:	4606      	mov	r6, r0
 801678a:	b118      	cbz	r0, 8016794 <_vfiprintf_r+0x18>
 801678c:	6983      	ldr	r3, [r0, #24]
 801678e:	b90b      	cbnz	r3, 8016794 <_vfiprintf_r+0x18>
 8016790:	f7ff fa08 	bl	8015ba4 <__sinit>
 8016794:	4b89      	ldr	r3, [pc, #548]	; (80169bc <_vfiprintf_r+0x240>)
 8016796:	429d      	cmp	r5, r3
 8016798:	d11b      	bne.n	80167d2 <_vfiprintf_r+0x56>
 801679a:	6875      	ldr	r5, [r6, #4]
 801679c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801679e:	07d9      	lsls	r1, r3, #31
 80167a0:	d405      	bmi.n	80167ae <_vfiprintf_r+0x32>
 80167a2:	89ab      	ldrh	r3, [r5, #12]
 80167a4:	059a      	lsls	r2, r3, #22
 80167a6:	d402      	bmi.n	80167ae <_vfiprintf_r+0x32>
 80167a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167aa:	f7ff fabe 	bl	8015d2a <__retarget_lock_acquire_recursive>
 80167ae:	89ab      	ldrh	r3, [r5, #12]
 80167b0:	071b      	lsls	r3, r3, #28
 80167b2:	d501      	bpl.n	80167b8 <_vfiprintf_r+0x3c>
 80167b4:	692b      	ldr	r3, [r5, #16]
 80167b6:	b9eb      	cbnz	r3, 80167f4 <_vfiprintf_r+0x78>
 80167b8:	4629      	mov	r1, r5
 80167ba:	4630      	mov	r0, r6
 80167bc:	f000 fb06 	bl	8016dcc <__swsetup_r>
 80167c0:	b1c0      	cbz	r0, 80167f4 <_vfiprintf_r+0x78>
 80167c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80167c4:	07dc      	lsls	r4, r3, #31
 80167c6:	d50e      	bpl.n	80167e6 <_vfiprintf_r+0x6a>
 80167c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167cc:	b01d      	add	sp, #116	; 0x74
 80167ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d2:	4b7b      	ldr	r3, [pc, #492]	; (80169c0 <_vfiprintf_r+0x244>)
 80167d4:	429d      	cmp	r5, r3
 80167d6:	d101      	bne.n	80167dc <_vfiprintf_r+0x60>
 80167d8:	68b5      	ldr	r5, [r6, #8]
 80167da:	e7df      	b.n	801679c <_vfiprintf_r+0x20>
 80167dc:	4b79      	ldr	r3, [pc, #484]	; (80169c4 <_vfiprintf_r+0x248>)
 80167de:	429d      	cmp	r5, r3
 80167e0:	bf08      	it	eq
 80167e2:	68f5      	ldreq	r5, [r6, #12]
 80167e4:	e7da      	b.n	801679c <_vfiprintf_r+0x20>
 80167e6:	89ab      	ldrh	r3, [r5, #12]
 80167e8:	0598      	lsls	r0, r3, #22
 80167ea:	d4ed      	bmi.n	80167c8 <_vfiprintf_r+0x4c>
 80167ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167ee:	f7ff fa9d 	bl	8015d2c <__retarget_lock_release_recursive>
 80167f2:	e7e9      	b.n	80167c8 <_vfiprintf_r+0x4c>
 80167f4:	2300      	movs	r3, #0
 80167f6:	9309      	str	r3, [sp, #36]	; 0x24
 80167f8:	2320      	movs	r3, #32
 80167fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8016802:	2330      	movs	r3, #48	; 0x30
 8016804:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80169c8 <_vfiprintf_r+0x24c>
 8016808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801680c:	f04f 0901 	mov.w	r9, #1
 8016810:	4623      	mov	r3, r4
 8016812:	469a      	mov	sl, r3
 8016814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016818:	b10a      	cbz	r2, 801681e <_vfiprintf_r+0xa2>
 801681a:	2a25      	cmp	r2, #37	; 0x25
 801681c:	d1f9      	bne.n	8016812 <_vfiprintf_r+0x96>
 801681e:	ebba 0b04 	subs.w	fp, sl, r4
 8016822:	d00b      	beq.n	801683c <_vfiprintf_r+0xc0>
 8016824:	465b      	mov	r3, fp
 8016826:	4622      	mov	r2, r4
 8016828:	4629      	mov	r1, r5
 801682a:	4630      	mov	r0, r6
 801682c:	f7ff ff93 	bl	8016756 <__sfputs_r>
 8016830:	3001      	adds	r0, #1
 8016832:	f000 80aa 	beq.w	801698a <_vfiprintf_r+0x20e>
 8016836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016838:	445a      	add	r2, fp
 801683a:	9209      	str	r2, [sp, #36]	; 0x24
 801683c:	f89a 3000 	ldrb.w	r3, [sl]
 8016840:	2b00      	cmp	r3, #0
 8016842:	f000 80a2 	beq.w	801698a <_vfiprintf_r+0x20e>
 8016846:	2300      	movs	r3, #0
 8016848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801684c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016850:	f10a 0a01 	add.w	sl, sl, #1
 8016854:	9304      	str	r3, [sp, #16]
 8016856:	9307      	str	r3, [sp, #28]
 8016858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801685c:	931a      	str	r3, [sp, #104]	; 0x68
 801685e:	4654      	mov	r4, sl
 8016860:	2205      	movs	r2, #5
 8016862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016866:	4858      	ldr	r0, [pc, #352]	; (80169c8 <_vfiprintf_r+0x24c>)
 8016868:	f7e9 fcda 	bl	8000220 <memchr>
 801686c:	9a04      	ldr	r2, [sp, #16]
 801686e:	b9d8      	cbnz	r0, 80168a8 <_vfiprintf_r+0x12c>
 8016870:	06d1      	lsls	r1, r2, #27
 8016872:	bf44      	itt	mi
 8016874:	2320      	movmi	r3, #32
 8016876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801687a:	0713      	lsls	r3, r2, #28
 801687c:	bf44      	itt	mi
 801687e:	232b      	movmi	r3, #43	; 0x2b
 8016880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016884:	f89a 3000 	ldrb.w	r3, [sl]
 8016888:	2b2a      	cmp	r3, #42	; 0x2a
 801688a:	d015      	beq.n	80168b8 <_vfiprintf_r+0x13c>
 801688c:	9a07      	ldr	r2, [sp, #28]
 801688e:	4654      	mov	r4, sl
 8016890:	2000      	movs	r0, #0
 8016892:	f04f 0c0a 	mov.w	ip, #10
 8016896:	4621      	mov	r1, r4
 8016898:	f811 3b01 	ldrb.w	r3, [r1], #1
 801689c:	3b30      	subs	r3, #48	; 0x30
 801689e:	2b09      	cmp	r3, #9
 80168a0:	d94e      	bls.n	8016940 <_vfiprintf_r+0x1c4>
 80168a2:	b1b0      	cbz	r0, 80168d2 <_vfiprintf_r+0x156>
 80168a4:	9207      	str	r2, [sp, #28]
 80168a6:	e014      	b.n	80168d2 <_vfiprintf_r+0x156>
 80168a8:	eba0 0308 	sub.w	r3, r0, r8
 80168ac:	fa09 f303 	lsl.w	r3, r9, r3
 80168b0:	4313      	orrs	r3, r2
 80168b2:	9304      	str	r3, [sp, #16]
 80168b4:	46a2      	mov	sl, r4
 80168b6:	e7d2      	b.n	801685e <_vfiprintf_r+0xe2>
 80168b8:	9b03      	ldr	r3, [sp, #12]
 80168ba:	1d19      	adds	r1, r3, #4
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	9103      	str	r1, [sp, #12]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	bfbb      	ittet	lt
 80168c4:	425b      	neglt	r3, r3
 80168c6:	f042 0202 	orrlt.w	r2, r2, #2
 80168ca:	9307      	strge	r3, [sp, #28]
 80168cc:	9307      	strlt	r3, [sp, #28]
 80168ce:	bfb8      	it	lt
 80168d0:	9204      	strlt	r2, [sp, #16]
 80168d2:	7823      	ldrb	r3, [r4, #0]
 80168d4:	2b2e      	cmp	r3, #46	; 0x2e
 80168d6:	d10c      	bne.n	80168f2 <_vfiprintf_r+0x176>
 80168d8:	7863      	ldrb	r3, [r4, #1]
 80168da:	2b2a      	cmp	r3, #42	; 0x2a
 80168dc:	d135      	bne.n	801694a <_vfiprintf_r+0x1ce>
 80168de:	9b03      	ldr	r3, [sp, #12]
 80168e0:	1d1a      	adds	r2, r3, #4
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	9203      	str	r2, [sp, #12]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	bfb8      	it	lt
 80168ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80168ee:	3402      	adds	r4, #2
 80168f0:	9305      	str	r3, [sp, #20]
 80168f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80169d8 <_vfiprintf_r+0x25c>
 80168f6:	7821      	ldrb	r1, [r4, #0]
 80168f8:	2203      	movs	r2, #3
 80168fa:	4650      	mov	r0, sl
 80168fc:	f7e9 fc90 	bl	8000220 <memchr>
 8016900:	b140      	cbz	r0, 8016914 <_vfiprintf_r+0x198>
 8016902:	2340      	movs	r3, #64	; 0x40
 8016904:	eba0 000a 	sub.w	r0, r0, sl
 8016908:	fa03 f000 	lsl.w	r0, r3, r0
 801690c:	9b04      	ldr	r3, [sp, #16]
 801690e:	4303      	orrs	r3, r0
 8016910:	3401      	adds	r4, #1
 8016912:	9304      	str	r3, [sp, #16]
 8016914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016918:	482c      	ldr	r0, [pc, #176]	; (80169cc <_vfiprintf_r+0x250>)
 801691a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801691e:	2206      	movs	r2, #6
 8016920:	f7e9 fc7e 	bl	8000220 <memchr>
 8016924:	2800      	cmp	r0, #0
 8016926:	d03f      	beq.n	80169a8 <_vfiprintf_r+0x22c>
 8016928:	4b29      	ldr	r3, [pc, #164]	; (80169d0 <_vfiprintf_r+0x254>)
 801692a:	bb1b      	cbnz	r3, 8016974 <_vfiprintf_r+0x1f8>
 801692c:	9b03      	ldr	r3, [sp, #12]
 801692e:	3307      	adds	r3, #7
 8016930:	f023 0307 	bic.w	r3, r3, #7
 8016934:	3308      	adds	r3, #8
 8016936:	9303      	str	r3, [sp, #12]
 8016938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801693a:	443b      	add	r3, r7
 801693c:	9309      	str	r3, [sp, #36]	; 0x24
 801693e:	e767      	b.n	8016810 <_vfiprintf_r+0x94>
 8016940:	fb0c 3202 	mla	r2, ip, r2, r3
 8016944:	460c      	mov	r4, r1
 8016946:	2001      	movs	r0, #1
 8016948:	e7a5      	b.n	8016896 <_vfiprintf_r+0x11a>
 801694a:	2300      	movs	r3, #0
 801694c:	3401      	adds	r4, #1
 801694e:	9305      	str	r3, [sp, #20]
 8016950:	4619      	mov	r1, r3
 8016952:	f04f 0c0a 	mov.w	ip, #10
 8016956:	4620      	mov	r0, r4
 8016958:	f810 2b01 	ldrb.w	r2, [r0], #1
 801695c:	3a30      	subs	r2, #48	; 0x30
 801695e:	2a09      	cmp	r2, #9
 8016960:	d903      	bls.n	801696a <_vfiprintf_r+0x1ee>
 8016962:	2b00      	cmp	r3, #0
 8016964:	d0c5      	beq.n	80168f2 <_vfiprintf_r+0x176>
 8016966:	9105      	str	r1, [sp, #20]
 8016968:	e7c3      	b.n	80168f2 <_vfiprintf_r+0x176>
 801696a:	fb0c 2101 	mla	r1, ip, r1, r2
 801696e:	4604      	mov	r4, r0
 8016970:	2301      	movs	r3, #1
 8016972:	e7f0      	b.n	8016956 <_vfiprintf_r+0x1da>
 8016974:	ab03      	add	r3, sp, #12
 8016976:	9300      	str	r3, [sp, #0]
 8016978:	462a      	mov	r2, r5
 801697a:	4b16      	ldr	r3, [pc, #88]	; (80169d4 <_vfiprintf_r+0x258>)
 801697c:	a904      	add	r1, sp, #16
 801697e:	4630      	mov	r0, r6
 8016980:	f3af 8000 	nop.w
 8016984:	4607      	mov	r7, r0
 8016986:	1c78      	adds	r0, r7, #1
 8016988:	d1d6      	bne.n	8016938 <_vfiprintf_r+0x1bc>
 801698a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801698c:	07d9      	lsls	r1, r3, #31
 801698e:	d405      	bmi.n	801699c <_vfiprintf_r+0x220>
 8016990:	89ab      	ldrh	r3, [r5, #12]
 8016992:	059a      	lsls	r2, r3, #22
 8016994:	d402      	bmi.n	801699c <_vfiprintf_r+0x220>
 8016996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016998:	f7ff f9c8 	bl	8015d2c <__retarget_lock_release_recursive>
 801699c:	89ab      	ldrh	r3, [r5, #12]
 801699e:	065b      	lsls	r3, r3, #25
 80169a0:	f53f af12 	bmi.w	80167c8 <_vfiprintf_r+0x4c>
 80169a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169a6:	e711      	b.n	80167cc <_vfiprintf_r+0x50>
 80169a8:	ab03      	add	r3, sp, #12
 80169aa:	9300      	str	r3, [sp, #0]
 80169ac:	462a      	mov	r2, r5
 80169ae:	4b09      	ldr	r3, [pc, #36]	; (80169d4 <_vfiprintf_r+0x258>)
 80169b0:	a904      	add	r1, sp, #16
 80169b2:	4630      	mov	r0, r6
 80169b4:	f000 f880 	bl	8016ab8 <_printf_i>
 80169b8:	e7e4      	b.n	8016984 <_vfiprintf_r+0x208>
 80169ba:	bf00      	nop
 80169bc:	0801a474 	.word	0x0801a474
 80169c0:	0801a494 	.word	0x0801a494
 80169c4:	0801a454 	.word	0x0801a454
 80169c8:	0801a566 	.word	0x0801a566
 80169cc:	0801a570 	.word	0x0801a570
 80169d0:	00000000 	.word	0x00000000
 80169d4:	08016757 	.word	0x08016757
 80169d8:	0801a56c 	.word	0x0801a56c

080169dc <_printf_common>:
 80169dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169e0:	4616      	mov	r6, r2
 80169e2:	4699      	mov	r9, r3
 80169e4:	688a      	ldr	r2, [r1, #8]
 80169e6:	690b      	ldr	r3, [r1, #16]
 80169e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80169ec:	4293      	cmp	r3, r2
 80169ee:	bfb8      	it	lt
 80169f0:	4613      	movlt	r3, r2
 80169f2:	6033      	str	r3, [r6, #0]
 80169f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80169f8:	4607      	mov	r7, r0
 80169fa:	460c      	mov	r4, r1
 80169fc:	b10a      	cbz	r2, 8016a02 <_printf_common+0x26>
 80169fe:	3301      	adds	r3, #1
 8016a00:	6033      	str	r3, [r6, #0]
 8016a02:	6823      	ldr	r3, [r4, #0]
 8016a04:	0699      	lsls	r1, r3, #26
 8016a06:	bf42      	ittt	mi
 8016a08:	6833      	ldrmi	r3, [r6, #0]
 8016a0a:	3302      	addmi	r3, #2
 8016a0c:	6033      	strmi	r3, [r6, #0]
 8016a0e:	6825      	ldr	r5, [r4, #0]
 8016a10:	f015 0506 	ands.w	r5, r5, #6
 8016a14:	d106      	bne.n	8016a24 <_printf_common+0x48>
 8016a16:	f104 0a19 	add.w	sl, r4, #25
 8016a1a:	68e3      	ldr	r3, [r4, #12]
 8016a1c:	6832      	ldr	r2, [r6, #0]
 8016a1e:	1a9b      	subs	r3, r3, r2
 8016a20:	42ab      	cmp	r3, r5
 8016a22:	dc26      	bgt.n	8016a72 <_printf_common+0x96>
 8016a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016a28:	1e13      	subs	r3, r2, #0
 8016a2a:	6822      	ldr	r2, [r4, #0]
 8016a2c:	bf18      	it	ne
 8016a2e:	2301      	movne	r3, #1
 8016a30:	0692      	lsls	r2, r2, #26
 8016a32:	d42b      	bmi.n	8016a8c <_printf_common+0xb0>
 8016a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a38:	4649      	mov	r1, r9
 8016a3a:	4638      	mov	r0, r7
 8016a3c:	47c0      	blx	r8
 8016a3e:	3001      	adds	r0, #1
 8016a40:	d01e      	beq.n	8016a80 <_printf_common+0xa4>
 8016a42:	6823      	ldr	r3, [r4, #0]
 8016a44:	68e5      	ldr	r5, [r4, #12]
 8016a46:	6832      	ldr	r2, [r6, #0]
 8016a48:	f003 0306 	and.w	r3, r3, #6
 8016a4c:	2b04      	cmp	r3, #4
 8016a4e:	bf08      	it	eq
 8016a50:	1aad      	subeq	r5, r5, r2
 8016a52:	68a3      	ldr	r3, [r4, #8]
 8016a54:	6922      	ldr	r2, [r4, #16]
 8016a56:	bf0c      	ite	eq
 8016a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a5c:	2500      	movne	r5, #0
 8016a5e:	4293      	cmp	r3, r2
 8016a60:	bfc4      	itt	gt
 8016a62:	1a9b      	subgt	r3, r3, r2
 8016a64:	18ed      	addgt	r5, r5, r3
 8016a66:	2600      	movs	r6, #0
 8016a68:	341a      	adds	r4, #26
 8016a6a:	42b5      	cmp	r5, r6
 8016a6c:	d11a      	bne.n	8016aa4 <_printf_common+0xc8>
 8016a6e:	2000      	movs	r0, #0
 8016a70:	e008      	b.n	8016a84 <_printf_common+0xa8>
 8016a72:	2301      	movs	r3, #1
 8016a74:	4652      	mov	r2, sl
 8016a76:	4649      	mov	r1, r9
 8016a78:	4638      	mov	r0, r7
 8016a7a:	47c0      	blx	r8
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	d103      	bne.n	8016a88 <_printf_common+0xac>
 8016a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a88:	3501      	adds	r5, #1
 8016a8a:	e7c6      	b.n	8016a1a <_printf_common+0x3e>
 8016a8c:	18e1      	adds	r1, r4, r3
 8016a8e:	1c5a      	adds	r2, r3, #1
 8016a90:	2030      	movs	r0, #48	; 0x30
 8016a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016a96:	4422      	add	r2, r4
 8016a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016aa0:	3302      	adds	r3, #2
 8016aa2:	e7c7      	b.n	8016a34 <_printf_common+0x58>
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	4622      	mov	r2, r4
 8016aa8:	4649      	mov	r1, r9
 8016aaa:	4638      	mov	r0, r7
 8016aac:	47c0      	blx	r8
 8016aae:	3001      	adds	r0, #1
 8016ab0:	d0e6      	beq.n	8016a80 <_printf_common+0xa4>
 8016ab2:	3601      	adds	r6, #1
 8016ab4:	e7d9      	b.n	8016a6a <_printf_common+0x8e>
	...

08016ab8 <_printf_i>:
 8016ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016abc:	7e0f      	ldrb	r7, [r1, #24]
 8016abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016ac0:	2f78      	cmp	r7, #120	; 0x78
 8016ac2:	4691      	mov	r9, r2
 8016ac4:	4680      	mov	r8, r0
 8016ac6:	460c      	mov	r4, r1
 8016ac8:	469a      	mov	sl, r3
 8016aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016ace:	d807      	bhi.n	8016ae0 <_printf_i+0x28>
 8016ad0:	2f62      	cmp	r7, #98	; 0x62
 8016ad2:	d80a      	bhi.n	8016aea <_printf_i+0x32>
 8016ad4:	2f00      	cmp	r7, #0
 8016ad6:	f000 80d8 	beq.w	8016c8a <_printf_i+0x1d2>
 8016ada:	2f58      	cmp	r7, #88	; 0x58
 8016adc:	f000 80a3 	beq.w	8016c26 <_printf_i+0x16e>
 8016ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016ae8:	e03a      	b.n	8016b60 <_printf_i+0xa8>
 8016aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016aee:	2b15      	cmp	r3, #21
 8016af0:	d8f6      	bhi.n	8016ae0 <_printf_i+0x28>
 8016af2:	a101      	add	r1, pc, #4	; (adr r1, 8016af8 <_printf_i+0x40>)
 8016af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016af8:	08016b51 	.word	0x08016b51
 8016afc:	08016b65 	.word	0x08016b65
 8016b00:	08016ae1 	.word	0x08016ae1
 8016b04:	08016ae1 	.word	0x08016ae1
 8016b08:	08016ae1 	.word	0x08016ae1
 8016b0c:	08016ae1 	.word	0x08016ae1
 8016b10:	08016b65 	.word	0x08016b65
 8016b14:	08016ae1 	.word	0x08016ae1
 8016b18:	08016ae1 	.word	0x08016ae1
 8016b1c:	08016ae1 	.word	0x08016ae1
 8016b20:	08016ae1 	.word	0x08016ae1
 8016b24:	08016c71 	.word	0x08016c71
 8016b28:	08016b95 	.word	0x08016b95
 8016b2c:	08016c53 	.word	0x08016c53
 8016b30:	08016ae1 	.word	0x08016ae1
 8016b34:	08016ae1 	.word	0x08016ae1
 8016b38:	08016c93 	.word	0x08016c93
 8016b3c:	08016ae1 	.word	0x08016ae1
 8016b40:	08016b95 	.word	0x08016b95
 8016b44:	08016ae1 	.word	0x08016ae1
 8016b48:	08016ae1 	.word	0x08016ae1
 8016b4c:	08016c5b 	.word	0x08016c5b
 8016b50:	682b      	ldr	r3, [r5, #0]
 8016b52:	1d1a      	adds	r2, r3, #4
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	602a      	str	r2, [r5, #0]
 8016b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b60:	2301      	movs	r3, #1
 8016b62:	e0a3      	b.n	8016cac <_printf_i+0x1f4>
 8016b64:	6820      	ldr	r0, [r4, #0]
 8016b66:	6829      	ldr	r1, [r5, #0]
 8016b68:	0606      	lsls	r6, r0, #24
 8016b6a:	f101 0304 	add.w	r3, r1, #4
 8016b6e:	d50a      	bpl.n	8016b86 <_printf_i+0xce>
 8016b70:	680e      	ldr	r6, [r1, #0]
 8016b72:	602b      	str	r3, [r5, #0]
 8016b74:	2e00      	cmp	r6, #0
 8016b76:	da03      	bge.n	8016b80 <_printf_i+0xc8>
 8016b78:	232d      	movs	r3, #45	; 0x2d
 8016b7a:	4276      	negs	r6, r6
 8016b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b80:	485e      	ldr	r0, [pc, #376]	; (8016cfc <_printf_i+0x244>)
 8016b82:	230a      	movs	r3, #10
 8016b84:	e019      	b.n	8016bba <_printf_i+0x102>
 8016b86:	680e      	ldr	r6, [r1, #0]
 8016b88:	602b      	str	r3, [r5, #0]
 8016b8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016b8e:	bf18      	it	ne
 8016b90:	b236      	sxthne	r6, r6
 8016b92:	e7ef      	b.n	8016b74 <_printf_i+0xbc>
 8016b94:	682b      	ldr	r3, [r5, #0]
 8016b96:	6820      	ldr	r0, [r4, #0]
 8016b98:	1d19      	adds	r1, r3, #4
 8016b9a:	6029      	str	r1, [r5, #0]
 8016b9c:	0601      	lsls	r1, r0, #24
 8016b9e:	d501      	bpl.n	8016ba4 <_printf_i+0xec>
 8016ba0:	681e      	ldr	r6, [r3, #0]
 8016ba2:	e002      	b.n	8016baa <_printf_i+0xf2>
 8016ba4:	0646      	lsls	r6, r0, #25
 8016ba6:	d5fb      	bpl.n	8016ba0 <_printf_i+0xe8>
 8016ba8:	881e      	ldrh	r6, [r3, #0]
 8016baa:	4854      	ldr	r0, [pc, #336]	; (8016cfc <_printf_i+0x244>)
 8016bac:	2f6f      	cmp	r7, #111	; 0x6f
 8016bae:	bf0c      	ite	eq
 8016bb0:	2308      	moveq	r3, #8
 8016bb2:	230a      	movne	r3, #10
 8016bb4:	2100      	movs	r1, #0
 8016bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016bba:	6865      	ldr	r5, [r4, #4]
 8016bbc:	60a5      	str	r5, [r4, #8]
 8016bbe:	2d00      	cmp	r5, #0
 8016bc0:	bfa2      	ittt	ge
 8016bc2:	6821      	ldrge	r1, [r4, #0]
 8016bc4:	f021 0104 	bicge.w	r1, r1, #4
 8016bc8:	6021      	strge	r1, [r4, #0]
 8016bca:	b90e      	cbnz	r6, 8016bd0 <_printf_i+0x118>
 8016bcc:	2d00      	cmp	r5, #0
 8016bce:	d04d      	beq.n	8016c6c <_printf_i+0x1b4>
 8016bd0:	4615      	mov	r5, r2
 8016bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8016bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8016bda:	5dc7      	ldrb	r7, [r0, r7]
 8016bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016be0:	4637      	mov	r7, r6
 8016be2:	42bb      	cmp	r3, r7
 8016be4:	460e      	mov	r6, r1
 8016be6:	d9f4      	bls.n	8016bd2 <_printf_i+0x11a>
 8016be8:	2b08      	cmp	r3, #8
 8016bea:	d10b      	bne.n	8016c04 <_printf_i+0x14c>
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	07de      	lsls	r6, r3, #31
 8016bf0:	d508      	bpl.n	8016c04 <_printf_i+0x14c>
 8016bf2:	6923      	ldr	r3, [r4, #16]
 8016bf4:	6861      	ldr	r1, [r4, #4]
 8016bf6:	4299      	cmp	r1, r3
 8016bf8:	bfde      	ittt	le
 8016bfa:	2330      	movle	r3, #48	; 0x30
 8016bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016c00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016c04:	1b52      	subs	r2, r2, r5
 8016c06:	6122      	str	r2, [r4, #16]
 8016c08:	f8cd a000 	str.w	sl, [sp]
 8016c0c:	464b      	mov	r3, r9
 8016c0e:	aa03      	add	r2, sp, #12
 8016c10:	4621      	mov	r1, r4
 8016c12:	4640      	mov	r0, r8
 8016c14:	f7ff fee2 	bl	80169dc <_printf_common>
 8016c18:	3001      	adds	r0, #1
 8016c1a:	d14c      	bne.n	8016cb6 <_printf_i+0x1fe>
 8016c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c20:	b004      	add	sp, #16
 8016c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c26:	4835      	ldr	r0, [pc, #212]	; (8016cfc <_printf_i+0x244>)
 8016c28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016c2c:	6829      	ldr	r1, [r5, #0]
 8016c2e:	6823      	ldr	r3, [r4, #0]
 8016c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8016c34:	6029      	str	r1, [r5, #0]
 8016c36:	061d      	lsls	r5, r3, #24
 8016c38:	d514      	bpl.n	8016c64 <_printf_i+0x1ac>
 8016c3a:	07df      	lsls	r7, r3, #31
 8016c3c:	bf44      	itt	mi
 8016c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8016c42:	6023      	strmi	r3, [r4, #0]
 8016c44:	b91e      	cbnz	r6, 8016c4e <_printf_i+0x196>
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	f023 0320 	bic.w	r3, r3, #32
 8016c4c:	6023      	str	r3, [r4, #0]
 8016c4e:	2310      	movs	r3, #16
 8016c50:	e7b0      	b.n	8016bb4 <_printf_i+0xfc>
 8016c52:	6823      	ldr	r3, [r4, #0]
 8016c54:	f043 0320 	orr.w	r3, r3, #32
 8016c58:	6023      	str	r3, [r4, #0]
 8016c5a:	2378      	movs	r3, #120	; 0x78
 8016c5c:	4828      	ldr	r0, [pc, #160]	; (8016d00 <_printf_i+0x248>)
 8016c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016c62:	e7e3      	b.n	8016c2c <_printf_i+0x174>
 8016c64:	0659      	lsls	r1, r3, #25
 8016c66:	bf48      	it	mi
 8016c68:	b2b6      	uxthmi	r6, r6
 8016c6a:	e7e6      	b.n	8016c3a <_printf_i+0x182>
 8016c6c:	4615      	mov	r5, r2
 8016c6e:	e7bb      	b.n	8016be8 <_printf_i+0x130>
 8016c70:	682b      	ldr	r3, [r5, #0]
 8016c72:	6826      	ldr	r6, [r4, #0]
 8016c74:	6961      	ldr	r1, [r4, #20]
 8016c76:	1d18      	adds	r0, r3, #4
 8016c78:	6028      	str	r0, [r5, #0]
 8016c7a:	0635      	lsls	r5, r6, #24
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	d501      	bpl.n	8016c84 <_printf_i+0x1cc>
 8016c80:	6019      	str	r1, [r3, #0]
 8016c82:	e002      	b.n	8016c8a <_printf_i+0x1d2>
 8016c84:	0670      	lsls	r0, r6, #25
 8016c86:	d5fb      	bpl.n	8016c80 <_printf_i+0x1c8>
 8016c88:	8019      	strh	r1, [r3, #0]
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	6123      	str	r3, [r4, #16]
 8016c8e:	4615      	mov	r5, r2
 8016c90:	e7ba      	b.n	8016c08 <_printf_i+0x150>
 8016c92:	682b      	ldr	r3, [r5, #0]
 8016c94:	1d1a      	adds	r2, r3, #4
 8016c96:	602a      	str	r2, [r5, #0]
 8016c98:	681d      	ldr	r5, [r3, #0]
 8016c9a:	6862      	ldr	r2, [r4, #4]
 8016c9c:	2100      	movs	r1, #0
 8016c9e:	4628      	mov	r0, r5
 8016ca0:	f7e9 fabe 	bl	8000220 <memchr>
 8016ca4:	b108      	cbz	r0, 8016caa <_printf_i+0x1f2>
 8016ca6:	1b40      	subs	r0, r0, r5
 8016ca8:	6060      	str	r0, [r4, #4]
 8016caa:	6863      	ldr	r3, [r4, #4]
 8016cac:	6123      	str	r3, [r4, #16]
 8016cae:	2300      	movs	r3, #0
 8016cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cb4:	e7a8      	b.n	8016c08 <_printf_i+0x150>
 8016cb6:	6923      	ldr	r3, [r4, #16]
 8016cb8:	462a      	mov	r2, r5
 8016cba:	4649      	mov	r1, r9
 8016cbc:	4640      	mov	r0, r8
 8016cbe:	47d0      	blx	sl
 8016cc0:	3001      	adds	r0, #1
 8016cc2:	d0ab      	beq.n	8016c1c <_printf_i+0x164>
 8016cc4:	6823      	ldr	r3, [r4, #0]
 8016cc6:	079b      	lsls	r3, r3, #30
 8016cc8:	d413      	bmi.n	8016cf2 <_printf_i+0x23a>
 8016cca:	68e0      	ldr	r0, [r4, #12]
 8016ccc:	9b03      	ldr	r3, [sp, #12]
 8016cce:	4298      	cmp	r0, r3
 8016cd0:	bfb8      	it	lt
 8016cd2:	4618      	movlt	r0, r3
 8016cd4:	e7a4      	b.n	8016c20 <_printf_i+0x168>
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	4632      	mov	r2, r6
 8016cda:	4649      	mov	r1, r9
 8016cdc:	4640      	mov	r0, r8
 8016cde:	47d0      	blx	sl
 8016ce0:	3001      	adds	r0, #1
 8016ce2:	d09b      	beq.n	8016c1c <_printf_i+0x164>
 8016ce4:	3501      	adds	r5, #1
 8016ce6:	68e3      	ldr	r3, [r4, #12]
 8016ce8:	9903      	ldr	r1, [sp, #12]
 8016cea:	1a5b      	subs	r3, r3, r1
 8016cec:	42ab      	cmp	r3, r5
 8016cee:	dcf2      	bgt.n	8016cd6 <_printf_i+0x21e>
 8016cf0:	e7eb      	b.n	8016cca <_printf_i+0x212>
 8016cf2:	2500      	movs	r5, #0
 8016cf4:	f104 0619 	add.w	r6, r4, #25
 8016cf8:	e7f5      	b.n	8016ce6 <_printf_i+0x22e>
 8016cfa:	bf00      	nop
 8016cfc:	0801a577 	.word	0x0801a577
 8016d00:	0801a588 	.word	0x0801a588

08016d04 <_read_r>:
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	4d07      	ldr	r5, [pc, #28]	; (8016d24 <_read_r+0x20>)
 8016d08:	4604      	mov	r4, r0
 8016d0a:	4608      	mov	r0, r1
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	2200      	movs	r2, #0
 8016d10:	602a      	str	r2, [r5, #0]
 8016d12:	461a      	mov	r2, r3
 8016d14:	f7e9 ff44 	bl	8000ba0 <_read>
 8016d18:	1c43      	adds	r3, r0, #1
 8016d1a:	d102      	bne.n	8016d22 <_read_r+0x1e>
 8016d1c:	682b      	ldr	r3, [r5, #0]
 8016d1e:	b103      	cbz	r3, 8016d22 <_read_r+0x1e>
 8016d20:	6023      	str	r3, [r4, #0]
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
 8016d24:	20011aac 	.word	0x20011aac

08016d28 <__swbuf_r>:
 8016d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d2a:	460e      	mov	r6, r1
 8016d2c:	4614      	mov	r4, r2
 8016d2e:	4605      	mov	r5, r0
 8016d30:	b118      	cbz	r0, 8016d3a <__swbuf_r+0x12>
 8016d32:	6983      	ldr	r3, [r0, #24]
 8016d34:	b90b      	cbnz	r3, 8016d3a <__swbuf_r+0x12>
 8016d36:	f7fe ff35 	bl	8015ba4 <__sinit>
 8016d3a:	4b21      	ldr	r3, [pc, #132]	; (8016dc0 <__swbuf_r+0x98>)
 8016d3c:	429c      	cmp	r4, r3
 8016d3e:	d12b      	bne.n	8016d98 <__swbuf_r+0x70>
 8016d40:	686c      	ldr	r4, [r5, #4]
 8016d42:	69a3      	ldr	r3, [r4, #24]
 8016d44:	60a3      	str	r3, [r4, #8]
 8016d46:	89a3      	ldrh	r3, [r4, #12]
 8016d48:	071a      	lsls	r2, r3, #28
 8016d4a:	d52f      	bpl.n	8016dac <__swbuf_r+0x84>
 8016d4c:	6923      	ldr	r3, [r4, #16]
 8016d4e:	b36b      	cbz	r3, 8016dac <__swbuf_r+0x84>
 8016d50:	6923      	ldr	r3, [r4, #16]
 8016d52:	6820      	ldr	r0, [r4, #0]
 8016d54:	1ac0      	subs	r0, r0, r3
 8016d56:	6963      	ldr	r3, [r4, #20]
 8016d58:	b2f6      	uxtb	r6, r6
 8016d5a:	4283      	cmp	r3, r0
 8016d5c:	4637      	mov	r7, r6
 8016d5e:	dc04      	bgt.n	8016d6a <__swbuf_r+0x42>
 8016d60:	4621      	mov	r1, r4
 8016d62:	4628      	mov	r0, r5
 8016d64:	f7ff fac4 	bl	80162f0 <_fflush_r>
 8016d68:	bb30      	cbnz	r0, 8016db8 <__swbuf_r+0x90>
 8016d6a:	68a3      	ldr	r3, [r4, #8]
 8016d6c:	3b01      	subs	r3, #1
 8016d6e:	60a3      	str	r3, [r4, #8]
 8016d70:	6823      	ldr	r3, [r4, #0]
 8016d72:	1c5a      	adds	r2, r3, #1
 8016d74:	6022      	str	r2, [r4, #0]
 8016d76:	701e      	strb	r6, [r3, #0]
 8016d78:	6963      	ldr	r3, [r4, #20]
 8016d7a:	3001      	adds	r0, #1
 8016d7c:	4283      	cmp	r3, r0
 8016d7e:	d004      	beq.n	8016d8a <__swbuf_r+0x62>
 8016d80:	89a3      	ldrh	r3, [r4, #12]
 8016d82:	07db      	lsls	r3, r3, #31
 8016d84:	d506      	bpl.n	8016d94 <__swbuf_r+0x6c>
 8016d86:	2e0a      	cmp	r6, #10
 8016d88:	d104      	bne.n	8016d94 <__swbuf_r+0x6c>
 8016d8a:	4621      	mov	r1, r4
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	f7ff faaf 	bl	80162f0 <_fflush_r>
 8016d92:	b988      	cbnz	r0, 8016db8 <__swbuf_r+0x90>
 8016d94:	4638      	mov	r0, r7
 8016d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d98:	4b0a      	ldr	r3, [pc, #40]	; (8016dc4 <__swbuf_r+0x9c>)
 8016d9a:	429c      	cmp	r4, r3
 8016d9c:	d101      	bne.n	8016da2 <__swbuf_r+0x7a>
 8016d9e:	68ac      	ldr	r4, [r5, #8]
 8016da0:	e7cf      	b.n	8016d42 <__swbuf_r+0x1a>
 8016da2:	4b09      	ldr	r3, [pc, #36]	; (8016dc8 <__swbuf_r+0xa0>)
 8016da4:	429c      	cmp	r4, r3
 8016da6:	bf08      	it	eq
 8016da8:	68ec      	ldreq	r4, [r5, #12]
 8016daa:	e7ca      	b.n	8016d42 <__swbuf_r+0x1a>
 8016dac:	4621      	mov	r1, r4
 8016dae:	4628      	mov	r0, r5
 8016db0:	f000 f80c 	bl	8016dcc <__swsetup_r>
 8016db4:	2800      	cmp	r0, #0
 8016db6:	d0cb      	beq.n	8016d50 <__swbuf_r+0x28>
 8016db8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016dbc:	e7ea      	b.n	8016d94 <__swbuf_r+0x6c>
 8016dbe:	bf00      	nop
 8016dc0:	0801a474 	.word	0x0801a474
 8016dc4:	0801a494 	.word	0x0801a494
 8016dc8:	0801a454 	.word	0x0801a454

08016dcc <__swsetup_r>:
 8016dcc:	4b32      	ldr	r3, [pc, #200]	; (8016e98 <__swsetup_r+0xcc>)
 8016dce:	b570      	push	{r4, r5, r6, lr}
 8016dd0:	681d      	ldr	r5, [r3, #0]
 8016dd2:	4606      	mov	r6, r0
 8016dd4:	460c      	mov	r4, r1
 8016dd6:	b125      	cbz	r5, 8016de2 <__swsetup_r+0x16>
 8016dd8:	69ab      	ldr	r3, [r5, #24]
 8016dda:	b913      	cbnz	r3, 8016de2 <__swsetup_r+0x16>
 8016ddc:	4628      	mov	r0, r5
 8016dde:	f7fe fee1 	bl	8015ba4 <__sinit>
 8016de2:	4b2e      	ldr	r3, [pc, #184]	; (8016e9c <__swsetup_r+0xd0>)
 8016de4:	429c      	cmp	r4, r3
 8016de6:	d10f      	bne.n	8016e08 <__swsetup_r+0x3c>
 8016de8:	686c      	ldr	r4, [r5, #4]
 8016dea:	89a3      	ldrh	r3, [r4, #12]
 8016dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016df0:	0719      	lsls	r1, r3, #28
 8016df2:	d42c      	bmi.n	8016e4e <__swsetup_r+0x82>
 8016df4:	06dd      	lsls	r5, r3, #27
 8016df6:	d411      	bmi.n	8016e1c <__swsetup_r+0x50>
 8016df8:	2309      	movs	r3, #9
 8016dfa:	6033      	str	r3, [r6, #0]
 8016dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e00:	81a3      	strh	r3, [r4, #12]
 8016e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e06:	e03e      	b.n	8016e86 <__swsetup_r+0xba>
 8016e08:	4b25      	ldr	r3, [pc, #148]	; (8016ea0 <__swsetup_r+0xd4>)
 8016e0a:	429c      	cmp	r4, r3
 8016e0c:	d101      	bne.n	8016e12 <__swsetup_r+0x46>
 8016e0e:	68ac      	ldr	r4, [r5, #8]
 8016e10:	e7eb      	b.n	8016dea <__swsetup_r+0x1e>
 8016e12:	4b24      	ldr	r3, [pc, #144]	; (8016ea4 <__swsetup_r+0xd8>)
 8016e14:	429c      	cmp	r4, r3
 8016e16:	bf08      	it	eq
 8016e18:	68ec      	ldreq	r4, [r5, #12]
 8016e1a:	e7e6      	b.n	8016dea <__swsetup_r+0x1e>
 8016e1c:	0758      	lsls	r0, r3, #29
 8016e1e:	d512      	bpl.n	8016e46 <__swsetup_r+0x7a>
 8016e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e22:	b141      	cbz	r1, 8016e36 <__swsetup_r+0x6a>
 8016e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e28:	4299      	cmp	r1, r3
 8016e2a:	d002      	beq.n	8016e32 <__swsetup_r+0x66>
 8016e2c:	4630      	mov	r0, r6
 8016e2e:	f7ff fad3 	bl	80163d8 <_free_r>
 8016e32:	2300      	movs	r3, #0
 8016e34:	6363      	str	r3, [r4, #52]	; 0x34
 8016e36:	89a3      	ldrh	r3, [r4, #12]
 8016e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e3c:	81a3      	strh	r3, [r4, #12]
 8016e3e:	2300      	movs	r3, #0
 8016e40:	6063      	str	r3, [r4, #4]
 8016e42:	6923      	ldr	r3, [r4, #16]
 8016e44:	6023      	str	r3, [r4, #0]
 8016e46:	89a3      	ldrh	r3, [r4, #12]
 8016e48:	f043 0308 	orr.w	r3, r3, #8
 8016e4c:	81a3      	strh	r3, [r4, #12]
 8016e4e:	6923      	ldr	r3, [r4, #16]
 8016e50:	b94b      	cbnz	r3, 8016e66 <__swsetup_r+0x9a>
 8016e52:	89a3      	ldrh	r3, [r4, #12]
 8016e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e5c:	d003      	beq.n	8016e66 <__swsetup_r+0x9a>
 8016e5e:	4621      	mov	r1, r4
 8016e60:	4630      	mov	r0, r6
 8016e62:	f000 f84d 	bl	8016f00 <__smakebuf_r>
 8016e66:	89a0      	ldrh	r0, [r4, #12]
 8016e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e6c:	f010 0301 	ands.w	r3, r0, #1
 8016e70:	d00a      	beq.n	8016e88 <__swsetup_r+0xbc>
 8016e72:	2300      	movs	r3, #0
 8016e74:	60a3      	str	r3, [r4, #8]
 8016e76:	6963      	ldr	r3, [r4, #20]
 8016e78:	425b      	negs	r3, r3
 8016e7a:	61a3      	str	r3, [r4, #24]
 8016e7c:	6923      	ldr	r3, [r4, #16]
 8016e7e:	b943      	cbnz	r3, 8016e92 <__swsetup_r+0xc6>
 8016e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e84:	d1ba      	bne.n	8016dfc <__swsetup_r+0x30>
 8016e86:	bd70      	pop	{r4, r5, r6, pc}
 8016e88:	0781      	lsls	r1, r0, #30
 8016e8a:	bf58      	it	pl
 8016e8c:	6963      	ldrpl	r3, [r4, #20]
 8016e8e:	60a3      	str	r3, [r4, #8]
 8016e90:	e7f4      	b.n	8016e7c <__swsetup_r+0xb0>
 8016e92:	2000      	movs	r0, #0
 8016e94:	e7f7      	b.n	8016e86 <__swsetup_r+0xba>
 8016e96:	bf00      	nop
 8016e98:	2000002c 	.word	0x2000002c
 8016e9c:	0801a474 	.word	0x0801a474
 8016ea0:	0801a494 	.word	0x0801a494
 8016ea4:	0801a454 	.word	0x0801a454

08016ea8 <abort>:
 8016ea8:	b508      	push	{r3, lr}
 8016eaa:	2006      	movs	r0, #6
 8016eac:	f000 f8c0 	bl	8017030 <raise>
 8016eb0:	2001      	movs	r0, #1
 8016eb2:	f7e9 fe6b 	bl	8000b8c <_exit>

08016eb6 <__swhatbuf_r>:
 8016eb6:	b570      	push	{r4, r5, r6, lr}
 8016eb8:	460e      	mov	r6, r1
 8016eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ebe:	2900      	cmp	r1, #0
 8016ec0:	b096      	sub	sp, #88	; 0x58
 8016ec2:	4614      	mov	r4, r2
 8016ec4:	461d      	mov	r5, r3
 8016ec6:	da08      	bge.n	8016eda <__swhatbuf_r+0x24>
 8016ec8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	602a      	str	r2, [r5, #0]
 8016ed0:	061a      	lsls	r2, r3, #24
 8016ed2:	d410      	bmi.n	8016ef6 <__swhatbuf_r+0x40>
 8016ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ed8:	e00e      	b.n	8016ef8 <__swhatbuf_r+0x42>
 8016eda:	466a      	mov	r2, sp
 8016edc:	f000 f8c4 	bl	8017068 <_fstat_r>
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	dbf1      	blt.n	8016ec8 <__swhatbuf_r+0x12>
 8016ee4:	9a01      	ldr	r2, [sp, #4]
 8016ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016eee:	425a      	negs	r2, r3
 8016ef0:	415a      	adcs	r2, r3
 8016ef2:	602a      	str	r2, [r5, #0]
 8016ef4:	e7ee      	b.n	8016ed4 <__swhatbuf_r+0x1e>
 8016ef6:	2340      	movs	r3, #64	; 0x40
 8016ef8:	2000      	movs	r0, #0
 8016efa:	6023      	str	r3, [r4, #0]
 8016efc:	b016      	add	sp, #88	; 0x58
 8016efe:	bd70      	pop	{r4, r5, r6, pc}

08016f00 <__smakebuf_r>:
 8016f00:	898b      	ldrh	r3, [r1, #12]
 8016f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f04:	079d      	lsls	r5, r3, #30
 8016f06:	4606      	mov	r6, r0
 8016f08:	460c      	mov	r4, r1
 8016f0a:	d507      	bpl.n	8016f1c <__smakebuf_r+0x1c>
 8016f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016f10:	6023      	str	r3, [r4, #0]
 8016f12:	6123      	str	r3, [r4, #16]
 8016f14:	2301      	movs	r3, #1
 8016f16:	6163      	str	r3, [r4, #20]
 8016f18:	b002      	add	sp, #8
 8016f1a:	bd70      	pop	{r4, r5, r6, pc}
 8016f1c:	ab01      	add	r3, sp, #4
 8016f1e:	466a      	mov	r2, sp
 8016f20:	f7ff ffc9 	bl	8016eb6 <__swhatbuf_r>
 8016f24:	9900      	ldr	r1, [sp, #0]
 8016f26:	4605      	mov	r5, r0
 8016f28:	4630      	mov	r0, r6
 8016f2a:	f7fe ff61 	bl	8015df0 <_malloc_r>
 8016f2e:	b948      	cbnz	r0, 8016f44 <__smakebuf_r+0x44>
 8016f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f34:	059a      	lsls	r2, r3, #22
 8016f36:	d4ef      	bmi.n	8016f18 <__smakebuf_r+0x18>
 8016f38:	f023 0303 	bic.w	r3, r3, #3
 8016f3c:	f043 0302 	orr.w	r3, r3, #2
 8016f40:	81a3      	strh	r3, [r4, #12]
 8016f42:	e7e3      	b.n	8016f0c <__smakebuf_r+0xc>
 8016f44:	4b0d      	ldr	r3, [pc, #52]	; (8016f7c <__smakebuf_r+0x7c>)
 8016f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8016f48:	89a3      	ldrh	r3, [r4, #12]
 8016f4a:	6020      	str	r0, [r4, #0]
 8016f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f50:	81a3      	strh	r3, [r4, #12]
 8016f52:	9b00      	ldr	r3, [sp, #0]
 8016f54:	6163      	str	r3, [r4, #20]
 8016f56:	9b01      	ldr	r3, [sp, #4]
 8016f58:	6120      	str	r0, [r4, #16]
 8016f5a:	b15b      	cbz	r3, 8016f74 <__smakebuf_r+0x74>
 8016f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f60:	4630      	mov	r0, r6
 8016f62:	f000 f893 	bl	801708c <_isatty_r>
 8016f66:	b128      	cbz	r0, 8016f74 <__smakebuf_r+0x74>
 8016f68:	89a3      	ldrh	r3, [r4, #12]
 8016f6a:	f023 0303 	bic.w	r3, r3, #3
 8016f6e:	f043 0301 	orr.w	r3, r3, #1
 8016f72:	81a3      	strh	r3, [r4, #12]
 8016f74:	89a0      	ldrh	r0, [r4, #12]
 8016f76:	4305      	orrs	r5, r0
 8016f78:	81a5      	strh	r5, [r4, #12]
 8016f7a:	e7cd      	b.n	8016f18 <__smakebuf_r+0x18>
 8016f7c:	08015b3d 	.word	0x08015b3d

08016f80 <_realloc_r>:
 8016f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f84:	4680      	mov	r8, r0
 8016f86:	4614      	mov	r4, r2
 8016f88:	460e      	mov	r6, r1
 8016f8a:	b921      	cbnz	r1, 8016f96 <_realloc_r+0x16>
 8016f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f90:	4611      	mov	r1, r2
 8016f92:	f7fe bf2d 	b.w	8015df0 <_malloc_r>
 8016f96:	b92a      	cbnz	r2, 8016fa4 <_realloc_r+0x24>
 8016f98:	f7ff fa1e 	bl	80163d8 <_free_r>
 8016f9c:	4625      	mov	r5, r4
 8016f9e:	4628      	mov	r0, r5
 8016fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fa4:	f000 f882 	bl	80170ac <_malloc_usable_size_r>
 8016fa8:	4284      	cmp	r4, r0
 8016faa:	4607      	mov	r7, r0
 8016fac:	d802      	bhi.n	8016fb4 <_realloc_r+0x34>
 8016fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016fb2:	d812      	bhi.n	8016fda <_realloc_r+0x5a>
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	4640      	mov	r0, r8
 8016fb8:	f7fe ff1a 	bl	8015df0 <_malloc_r>
 8016fbc:	4605      	mov	r5, r0
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	d0ed      	beq.n	8016f9e <_realloc_r+0x1e>
 8016fc2:	42bc      	cmp	r4, r7
 8016fc4:	4622      	mov	r2, r4
 8016fc6:	4631      	mov	r1, r6
 8016fc8:	bf28      	it	cs
 8016fca:	463a      	movcs	r2, r7
 8016fcc:	f7fe febf 	bl	8015d4e <memcpy>
 8016fd0:	4631      	mov	r1, r6
 8016fd2:	4640      	mov	r0, r8
 8016fd4:	f7ff fa00 	bl	80163d8 <_free_r>
 8016fd8:	e7e1      	b.n	8016f9e <_realloc_r+0x1e>
 8016fda:	4635      	mov	r5, r6
 8016fdc:	e7df      	b.n	8016f9e <_realloc_r+0x1e>

08016fde <_raise_r>:
 8016fde:	291f      	cmp	r1, #31
 8016fe0:	b538      	push	{r3, r4, r5, lr}
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	460d      	mov	r5, r1
 8016fe6:	d904      	bls.n	8016ff2 <_raise_r+0x14>
 8016fe8:	2316      	movs	r3, #22
 8016fea:	6003      	str	r3, [r0, #0]
 8016fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ff0:	bd38      	pop	{r3, r4, r5, pc}
 8016ff2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016ff4:	b112      	cbz	r2, 8016ffc <_raise_r+0x1e>
 8016ff6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ffa:	b94b      	cbnz	r3, 8017010 <_raise_r+0x32>
 8016ffc:	4620      	mov	r0, r4
 8016ffe:	f000 f831 	bl	8017064 <_getpid_r>
 8017002:	462a      	mov	r2, r5
 8017004:	4601      	mov	r1, r0
 8017006:	4620      	mov	r0, r4
 8017008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801700c:	f000 b818 	b.w	8017040 <_kill_r>
 8017010:	2b01      	cmp	r3, #1
 8017012:	d00a      	beq.n	801702a <_raise_r+0x4c>
 8017014:	1c59      	adds	r1, r3, #1
 8017016:	d103      	bne.n	8017020 <_raise_r+0x42>
 8017018:	2316      	movs	r3, #22
 801701a:	6003      	str	r3, [r0, #0]
 801701c:	2001      	movs	r0, #1
 801701e:	e7e7      	b.n	8016ff0 <_raise_r+0x12>
 8017020:	2400      	movs	r4, #0
 8017022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017026:	4628      	mov	r0, r5
 8017028:	4798      	blx	r3
 801702a:	2000      	movs	r0, #0
 801702c:	e7e0      	b.n	8016ff0 <_raise_r+0x12>
	...

08017030 <raise>:
 8017030:	4b02      	ldr	r3, [pc, #8]	; (801703c <raise+0xc>)
 8017032:	4601      	mov	r1, r0
 8017034:	6818      	ldr	r0, [r3, #0]
 8017036:	f7ff bfd2 	b.w	8016fde <_raise_r>
 801703a:	bf00      	nop
 801703c:	2000002c 	.word	0x2000002c

08017040 <_kill_r>:
 8017040:	b538      	push	{r3, r4, r5, lr}
 8017042:	4d07      	ldr	r5, [pc, #28]	; (8017060 <_kill_r+0x20>)
 8017044:	2300      	movs	r3, #0
 8017046:	4604      	mov	r4, r0
 8017048:	4608      	mov	r0, r1
 801704a:	4611      	mov	r1, r2
 801704c:	602b      	str	r3, [r5, #0]
 801704e:	f7e9 fd8b 	bl	8000b68 <_kill>
 8017052:	1c43      	adds	r3, r0, #1
 8017054:	d102      	bne.n	801705c <_kill_r+0x1c>
 8017056:	682b      	ldr	r3, [r5, #0]
 8017058:	b103      	cbz	r3, 801705c <_kill_r+0x1c>
 801705a:	6023      	str	r3, [r4, #0]
 801705c:	bd38      	pop	{r3, r4, r5, pc}
 801705e:	bf00      	nop
 8017060:	20011aac 	.word	0x20011aac

08017064 <_getpid_r>:
 8017064:	f7e9 bd78 	b.w	8000b58 <_getpid>

08017068 <_fstat_r>:
 8017068:	b538      	push	{r3, r4, r5, lr}
 801706a:	4d07      	ldr	r5, [pc, #28]	; (8017088 <_fstat_r+0x20>)
 801706c:	2300      	movs	r3, #0
 801706e:	4604      	mov	r4, r0
 8017070:	4608      	mov	r0, r1
 8017072:	4611      	mov	r1, r2
 8017074:	602b      	str	r3, [r5, #0]
 8017076:	f7e9 fdd8 	bl	8000c2a <_fstat>
 801707a:	1c43      	adds	r3, r0, #1
 801707c:	d102      	bne.n	8017084 <_fstat_r+0x1c>
 801707e:	682b      	ldr	r3, [r5, #0]
 8017080:	b103      	cbz	r3, 8017084 <_fstat_r+0x1c>
 8017082:	6023      	str	r3, [r4, #0]
 8017084:	bd38      	pop	{r3, r4, r5, pc}
 8017086:	bf00      	nop
 8017088:	20011aac 	.word	0x20011aac

0801708c <_isatty_r>:
 801708c:	b538      	push	{r3, r4, r5, lr}
 801708e:	4d06      	ldr	r5, [pc, #24]	; (80170a8 <_isatty_r+0x1c>)
 8017090:	2300      	movs	r3, #0
 8017092:	4604      	mov	r4, r0
 8017094:	4608      	mov	r0, r1
 8017096:	602b      	str	r3, [r5, #0]
 8017098:	f7e9 fdd7 	bl	8000c4a <_isatty>
 801709c:	1c43      	adds	r3, r0, #1
 801709e:	d102      	bne.n	80170a6 <_isatty_r+0x1a>
 80170a0:	682b      	ldr	r3, [r5, #0]
 80170a2:	b103      	cbz	r3, 80170a6 <_isatty_r+0x1a>
 80170a4:	6023      	str	r3, [r4, #0]
 80170a6:	bd38      	pop	{r3, r4, r5, pc}
 80170a8:	20011aac 	.word	0x20011aac

080170ac <_malloc_usable_size_r>:
 80170ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170b0:	1f18      	subs	r0, r3, #4
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	bfbc      	itt	lt
 80170b6:	580b      	ldrlt	r3, [r1, r0]
 80170b8:	18c0      	addlt	r0, r0, r3
 80170ba:	4770      	bx	lr

080170bc <_init>:
 80170bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170be:	bf00      	nop
 80170c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170c2:	bc08      	pop	{r3}
 80170c4:	469e      	mov	lr, r3
 80170c6:	4770      	bx	lr

080170c8 <_fini>:
 80170c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ca:	bf00      	nop
 80170cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ce:	bc08      	pop	{r3}
 80170d0:	469e      	mov	lr, r3
 80170d2:	4770      	bx	lr
