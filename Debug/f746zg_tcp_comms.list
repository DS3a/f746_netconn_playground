
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000329c  08015f18  08015f18  00025f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080191b4  080191b4  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  080191b4  080191b4  000291b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080191bc  080191bc  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080191bc  080191bc  000291bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080191c0  080191c0  000291c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080191c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08019254  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  080192f4  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011798  200001d0  08019394  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011968  08019394  00031968  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fcaf  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006ff8  00000000  00000000  0005feaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021b0  00000000  00000000  00066ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002060  00000000  00000000  00069058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000112ec  00000000  00000000  0006b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003241e  00000000  00000000  0007c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001110f4  00000000  00000000  000ae7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001bf8b6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000093d8  00000000  00000000  001bf908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015f00 	.word	0x08015f00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08015f00 	.word	0x08015f00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fc98 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f816 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f882 	bl	80006c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c4:	f004 f944 	bl	8004850 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <main+0x2c>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <main+0x30>)
 80005ce:	f004 f9d1 	bl	8004974 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <main+0x34>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f004 f96e 	bl	80048b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x28>
 80005de:	bf00      	nop
 80005e0:	08018f0c 	.word	0x08018f0c
 80005e4:	0800078d 	.word	0x0800078d
 80005e8:	200001ec 	.word	0x200001ec

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f014 fcb7 	bl	8014f6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <SystemClock_Config+0xd4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0xd4>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <SystemClock_Config+0xd8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <SystemClock_Config+0xd8>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000654:	2319      	movs	r3, #25
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000658:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fa90 	bl	8002b90 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000676:	f000 f8fd 	bl	8000874 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067a:	f002 fa39 	bl	8002af0 <HAL_PWREx_EnableOverDrive>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000684:	f000 f8f6 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2107      	movs	r1, #7
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fd16 	bl	80030d8 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006b2:	f000 f8df 	bl	8000874 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_GPIO_Init+0xbc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a28      	ldr	r2, [pc, #160]	; (8000784 <MX_GPIO_Init+0xbc>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xbc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xbc>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_GPIO_Init+0xbc>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xbc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xbc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_GPIO_Init+0xbc>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_GPIO_Init+0xbc>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_GPIO_Init+0xbc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <MX_GPIO_Init+0xbc>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_GPIO_Init+0xbc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_GPIO_Init+0xbc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <MX_GPIO_Init+0xbc>)
 8000744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_GPIO_Init+0xbc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xc0>)
 800075c:	f002 f9ae 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000760:	2320      	movs	r3, #32
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xc0>)
 8000778:	f001 fff4 	bl	8002764 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000794:	f003 f98e 	bl	8003ab4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  struct netif *gnetif = get_static_netif();
 8000798:	f003 f982 	bl	8003aa0 <get_static_netif>
 800079c:	4603      	mov	r3, r0
 800079e:	61fb      	str	r3, [r7, #28]
//  ethernetif_input(gnetif);
//  sys_check_timeouts();
//  ethernet_link_check_state(gnetif);

  ip_addr_t local_ip;
  IP4_ADDR(&local_ip, 10, 42, 0, 32);
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <StartDefaultTask+0xb4>)
 80007a2:	60fb      	str	r3, [r7, #12]

  conn = NULL;
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <StartDefaultTask+0xb8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]

  conn = netconn_new(NETCONN_TCP);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2010      	movs	r0, #16
 80007b0:	f008 f8a2 	bl	80088f8 <netconn_new_with_proto_and_callback>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <StartDefaultTask+0xb8>)
 80007b8:	6013      	str	r3, [r2, #0]

  uint8_t flag = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	76fb      	strb	r3, [r7, #27]
  err_t err;
  do {
    err = netconn_bind(conn, &local_ip, 30);
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <StartDefaultTask+0xb8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f107 010c 	add.w	r1, r7, #12
 80007c6:	221e      	movs	r2, #30
 80007c8:	4618      	mov	r0, r3
 80007ca:	f008 f90f 	bl	80089ec <netconn_bind>
 80007ce:	4603      	mov	r3, r0
 80007d0:	76bb      	strb	r3, [r7, #26]
  } while (err != ERR_OK);
 80007d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f1      	bne.n	80007be <StartDefaultTask+0x32>

  do {
    err = netconn_listen(conn);
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <StartDefaultTask+0xb8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	21ff      	movs	r1, #255	; 0xff
 80007e0:	4618      	mov	r0, r3
 80007e2:	f008 f93b 	bl	8008a5c <netconn_listen_with_backlog>
 80007e6:	4603      	mov	r3, r0
 80007e8:	76bb      	strb	r3, [r7, #26]
  } while (err != ERR_OK);
 80007ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f3      	bne.n	80007da <StartDefaultTask+0x4e>

     ethernetif_input(gnetif);
 80007f2:	69f8      	ldr	r0, [r7, #28]
 80007f4:	f003 fd8c 	bl	8004310 <ethernetif_input>
     sys_check_timeouts();
 80007f8:	f011 fd9a 	bl	8012330 <sys_check_timeouts>
     ethernet_link_check_state(gnetif);
 80007fc:	69f8      	ldr	r0, [r7, #28]
 80007fe:	f003 fb15 	bl	8003e2c <ethernet_link_check_state>

  void* data = "hello\n";
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <StartDefaultTask+0xbc>)
 8000804:	617b      	str	r3, [r7, #20]
  size_t len = 6;
 8000806:	2306      	movs	r3, #6
 8000808:	613b      	str	r3, [r7, #16]
  for(;;) {
     osDelay(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f004 f958 	bl	8004ac0 <osDelay>
     err = netconn_accept(conn, &newconn);
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <StartDefaultTask+0xb8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	490d      	ldr	r1, [pc, #52]	; (800084c <StartDefaultTask+0xc0>)
 8000816:	4618      	mov	r0, r3
 8000818:	f008 f94c 	bl	8008ab4 <netconn_accept>
 800081c:	4603      	mov	r3, r0
 800081e:	76bb      	strb	r3, [r7, #26]
     while (err == ERR_OK)
 8000820:	e008      	b.n	8000834 <StartDefaultTask+0xa8>
      netconn_write(newconn, data, len, NETCONN_NOCOPY);
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <StartDefaultTask+0xc0>)
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2300      	movs	r3, #0
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	6979      	ldr	r1, [r7, #20]
 8000830:	f008 f9cc 	bl	8008bcc <netconn_write_partly>
     while (err == ERR_OK)
 8000834:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f2      	beq.n	8000822 <StartDefaultTask+0x96>
     osDelay(1);
 800083c:	e7e5      	b.n	800080a <StartDefaultTask+0x7e>
 800083e:	bf00      	nop
 8000840:	20002a0a 	.word	0x20002a0a
 8000844:	200001f0 	.word	0x200001f0
 8000848:	08015f24 	.word	0x08015f24
 800084c:	200001f4 	.word	0x200001f4

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 fb51 	bl	8000f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40002000 	.word	0x40002000

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	210f      	movs	r1, #15
 80008ba:	f06f 0001 	mvn.w	r0, #1
 80008be:	f000 fc1f 	bl	8001100 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	; 0x38
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008e0:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <HAL_InitTick+0xe0>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <HAL_InitTick+0xe0>)
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <HAL_InitTick+0xe0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fdba 	bl	800347c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000912:	f002 fd9f 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 8000916:	6378      	str	r0, [r7, #52]	; 0x34
 8000918:	e004      	b.n	8000924 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091a:	f002 fd9b 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 800091e:	4603      	mov	r3, r0
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <HAL_InitTick+0xe4>)
 8000928:	fba2 2303 	umull	r2, r3, r2, r3
 800092c:	0c9b      	lsrs	r3, r3, #18
 800092e:	3b01      	subs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <HAL_InitTick+0xe8>)
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_InitTick+0xec>)
 8000936:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <HAL_InitTick+0xe8>)
 800093a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <HAL_InitTick+0xe8>)
 8000942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000944:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_InitTick+0xe8>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_InitTick+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_InitTick+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000958:	4817      	ldr	r0, [pc, #92]	; (80009b8 <HAL_InitTick+0xe8>)
 800095a:	f002 fdc1 	bl	80034e0 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11b      	bne.n	80009a4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800096c:	4812      	ldr	r0, [pc, #72]	; (80009b8 <HAL_InitTick+0xe8>)
 800096e:	f002 fe19 	bl	80035a4 <HAL_TIM_Base_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000978:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000980:	202d      	movs	r0, #45	; 0x2d
 8000982:	f000 fbd9 	bl	8001138 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d808      	bhi.n	800099e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	202d      	movs	r0, #45	; 0x2d
 8000992:	f000 fbb5 	bl	8001100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_InitTick+0xf0>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e002      	b.n	80009a4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3738      	adds	r7, #56	; 0x38
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	200001f8 	.word	0x200001f8
 80009bc:	40002000 	.word	0x40002000
 80009c0:	20000004 	.word	0x20000004

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009f6:	f002 fe4d 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001f8 	.word	0x200001f8

08000a04 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <ETH_IRQHandler+0x10>)
 8000a0a:	f000 ffd7 	bl	80019bc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20004c50 	.word	0x20004c50

08000a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_kill>:

int _kill(int pid, int sig)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <_kill+0x20>)
 8000a34:	2216      	movs	r2, #22
 8000a36:	601a      	str	r2, [r3, #0]
	return -1;
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	20011964 	.word	0x20011964

08000a4c <_exit>:

void _exit (int status)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffe5 	bl	8000a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a5e:	e7fe      	b.n	8000a5e <_exit+0x12>

08000a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
	}

return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
	}
	return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
	return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d205      	bcs.n	8000b78 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <_sbrk+0x6c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	20050000 	.word	0x20050000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000244 	.word	0x20000244
 8000ba4:	20011968 	.word	0x20011968
 8000ba8:	20011964 	.word	0x20011964

08000bac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <SystemInit+0x24>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <SystemInit+0x24>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SystemInit+0x28>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c02:	f7ff ffd3 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f014 f96d 	bl	8014ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fcd3 	bl	80005b4 <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c1c:	080191c4 	.word	0x080191c4
  ldr r2, =_sbss
 8000c20:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000c24:	20011968 	.word	0x20011968

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>

08000c2a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00b      	beq.n	8000c52 <LAN8742_RegisterBusIO+0x28>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <LAN8742_RegisterBusIO+0x28>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <LAN8742_RegisterBusIO+0x28>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c56:	e014      	b.n	8000c82 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d17c      	bne.n	8000da8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e01c      	b.n	8000d02 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f107 0208 	add.w	r2, r7, #8
 8000cd0:	2112      	movs	r1, #18
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	4798      	blx	r3
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	da03      	bge.n	8000ce4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000cdc:	f06f 0304 	mvn.w	r3, #4
 8000ce0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000ce2:	e00b      	b.n	8000cfc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	f003 031f 	and.w	r3, r3, #31
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d105      	bne.n	8000cfc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
         break;
 8000cfa:	e005      	b.n	8000d08 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2b1f      	cmp	r3, #31
 8000d06:	d9df      	bls.n	8000cc8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	d902      	bls.n	8000d16 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d10:	f06f 0302 	mvn.w	r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d145      	bne.n	8000da8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6810      	ldr	r0, [r2, #0]
 8000d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4798      	blx	r3
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db37      	blt.n	8000da2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6810      	ldr	r0, [r2, #0]
 8000d3a:	f107 0208 	add.w	r2, r7, #8
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4798      	blx	r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db28      	blt.n	8000d9a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4798      	blx	r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d52:	e01c      	b.n	8000d8e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4798      	blx	r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d66:	d80e      	bhi.n	8000d86 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6810      	ldr	r0, [r2, #0]
 8000d70:	f107 0208 	add.w	r2, r7, #8
 8000d74:	2100      	movs	r1, #0
 8000d76:	4798      	blx	r3
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	da07      	bge.n	8000d8e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d7e:	f06f 0304 	mvn.w	r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
                 break;
 8000d84:	e010      	b.n	8000da8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d86:	f06f 0301 	mvn.w	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
               break;
 8000d8c:	e00c      	b.n	8000da8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1dd      	bne.n	8000d54 <LAN8742_Init+0xc6>
 8000d98:	e006      	b.n	8000da8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d9a:	f06f 0304 	mvn.w	r3, #4
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e002      	b.n	8000da8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000da2:	f06f 0303 	mvn.w	r3, #3
 8000da6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d112      	bne.n	8000dd4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4798      	blx	r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000db8:	bf00      	nop
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4798      	blx	r3
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dcc:	d9f5      	bls.n	8000dba <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 }
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6810      	ldr	r0, [r2, #0]
 8000df2:	f107 020c 	add.w	r2, r7, #12
 8000df6:	2101      	movs	r1, #1
 8000df8:	4798      	blx	r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da02      	bge.n	8000e06 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e00:	f06f 0304 	mvn.w	r3, #4
 8000e04:	e06e      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6810      	ldr	r0, [r2, #0]
 8000e0e:	f107 020c 	add.w	r2, r7, #12
 8000e12:	2101      	movs	r1, #1
 8000e14:	4798      	blx	r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	da02      	bge.n	8000e22 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e1c:	f06f 0304 	mvn.w	r3, #4
 8000e20:	e060      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e059      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6810      	ldr	r0, [r2, #0]
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4798      	blx	r3
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da02      	bge.n	8000e4c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e46:	f06f 0304 	mvn.w	r3, #4
 8000e4a:	e04b      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d11b      	bne.n	8000e8e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <LAN8742_GetLinkState+0x90>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e03a      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e033      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e86:	2304      	movs	r3, #4
 8000e88:	e02c      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	e02a      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6810      	ldr	r0, [r2, #0]
 8000e96:	f107 020c 	add.w	r2, r7, #12
 8000e9a:	211f      	movs	r1, #31
 8000e9c:	4798      	blx	r3
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da02      	bge.n	8000eaa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000ea4:	f06f 0304 	mvn.w	r3, #4
 8000ea8:	e01c      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	e015      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 031c 	and.w	r3, r3, #28
 8000ebe:	2b18      	cmp	r3, #24
 8000ec0:	d101      	bne.n	8000ec6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e00e      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f003 031c 	and.w	r3, r3, #28
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d101      	bne.n	8000ed4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e007      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 031c 	and.w	r3, r3, #28
 8000eda:	2b14      	cmp	r3, #20
 8000edc:	d101      	bne.n	8000ee2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e000      	b.n	8000ee4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ee2:	2305      	movs	r3, #5
    }				
  }
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f8fa 	bl	80010ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f7ff fcea 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fcc0 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000248 	.word	0x20000248

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000248 	.word	0x20000248

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	05fa0000 	.word	0x05fa0000

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff4c 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001112:	f7ff ff61 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001116:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f7ff ffb1 	bl	8001084 <NVIC_EncodePriority>
 8001122:	4602      	mov	r2, r0
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff80 	bl	8001030 <__NVIC_SetPriority>
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff54 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e06a      	b.n	800123c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2223      	movs	r2, #35	; 0x23
 8001174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f003 f949 	bl	8004410 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <HAL_ETH_Init+0xf0>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a30      	ldr	r2, [pc, #192]	; (8001244 <HAL_ETH_Init+0xf0>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_ETH_Init+0xf0>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_ETH_Init+0xf4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <HAL_ETH_Init+0xf4>)
 800119c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_ETH_Init+0xf4>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4927      	ldr	r1, [pc, #156]	; (8001248 <HAL_ETH_Init+0xf4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_ETH_Init+0xf4>)
 80011b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff feb0 	bl	8000f30 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011d2:	e011      	b.n	80011f8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011d4:	f7ff feac 	bl	8000f30 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011e2:	d909      	bls.n	80011f8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	22e0      	movs	r2, #224	; 0xe0
 80011f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e021      	b.n	800123c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1e4      	bne.n	80011d4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f001 f806 	bl	800221c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 f8ad 	bl	8002370 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 f903 	bl	8002422 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	461a      	mov	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f001 f86b 	bl	8002300 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2210      	movs	r2, #16
 8001236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800

0800124c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800125a:	2b10      	cmp	r3, #16
 800125c:	d150      	bne.n	8001300 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2223      	movs	r2, #35	; 0x23
 8001262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2204      	movs	r2, #4
 800126a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fad5 	bl	800181c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0208 	orr.w	r2, r2, #8
 8001280:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff fe5c 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0204 	orr.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fe49 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fe4d 	bl	8001f5e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012da:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012f2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2223      	movs	r2, #35	; 0x23
 80012f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
  }
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800131a:	2b10      	cmp	r3, #16
 800131c:	d17b      	bne.n	8001416 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2223      	movs	r2, #35	; 0x23
 8001322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b35      	ldr	r3, [pc, #212]	; (8001420 <HAL_ETH_Start_IT+0x114>)
 800134a:	430b      	orrs	r3, r1
 800134c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001360:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2204      	movs	r2, #4
 8001368:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fa56 	bl	800181c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0208 	orr.w	r2, r2, #8
 800137e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fddd 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff fdca 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fdce 	bl	8001f5e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013d8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013f0:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fa:	69d9      	ldr	r1, [r3, #28]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_ETH_Start_IT+0x118>)
 8001402:	430b      	orrs	r3, r1
 8001404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001408:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2223      	movs	r2, #35	; 0x23
 800140e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
  }
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	00020060 	.word	0x00020060
 8001424:	0001a0c1 	.word	0x0001a0c1

08001428 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001436:	2b23      	cmp	r3, #35	; 0x23
 8001438:	d14a      	bne.n	80014d0 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2223      	movs	r2, #35	; 0x23
 800143e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001454:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001458:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	f023 0302 	bic.w	r3, r3, #2
 800146c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001470:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0204 	bic.w	r2, r2, #4
 8001480:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fd5c 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fd60 	bl	8001f5e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0208 	bic.w	r2, r2, #8
 80014ac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fd46 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2210      	movs	r2, #16
 80014c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
  }
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ea:	2b23      	cmp	r3, #35	; 0x23
 80014ec:	d16e      	bne.n	80015cc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2223      	movs	r2, #35	; 0x23
 80014f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fe:	69d9      	ldr	r1, [r3, #28]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <HAL_ETH_Stop_IT+0xfc>)
 8001506:	400b      	ands	r3, r1
 8001508:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800150c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001520:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001524:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	f023 0302 	bic.w	r3, r3, #2
 8001538:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800153c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0204 	bic.w	r2, r2, #4
 800154c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fcf6 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fcfa 	bl	8001f5e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fce0 	bl	8000f48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00e      	b.n	80015b4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	3212      	adds	r2, #18
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d9ed      	bls.n	8001596 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2210      	movs	r2, #16
 80015c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	fffe5f3e 	.word	0xfffe5f3e

080015dc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e045      	b.n	800168c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001606:	2b23      	cmp	r3, #35	; 0x23
 8001608:	d13f      	bne.n	800168a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001612:	2201      	movs	r2, #1
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 ff70 	bl	80024fc <ETH_Prepare_Tx_Descriptors>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d009      	beq.n	8001636 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001628:	f043 0202 	orr.w	r2, r3, #2
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e02a      	b.n	800168c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001636:	f3bf 8f4f 	dsb	sy
}
 800163a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	2b03      	cmp	r3, #3
 800164c:	d904      	bls.n	8001658 <HAL_ETH_Transmit_IT+0x7c>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	1f1a      	subs	r2, r3, #4
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00d      	beq.n	8001686 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001672:	461a      	mov	r2, r3
 8001674:	2304      	movs	r3, #4
 8001676:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	461a      	mov	r2, r3
 8001682:	2300      	movs	r3, #0
 8001684:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0a8      	b.n	8001812 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c6:	2b23      	cmp	r3, #35	; 0x23
 80016c8:	d001      	beq.n	80016ce <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0a1      	b.n	8001812 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	3212      	adds	r2, #18
 80016da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016de:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e4:	f1c3 0304 	rsb	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016ea:	e06a      	b.n	80017c2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_ETH_ReadData+0x88>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d040      	beq.n	800179e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001750:	3b04      	subs	r3, #4
 8001752:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001778:	461a      	mov	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f003 f813 	bl	80047a8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	441a      	add	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d902      	bls.n	80017b0 <HAL_ETH_ReadData+0x11c>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b04      	subs	r3, #4
 80017ae:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	3212      	adds	r2, #18
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db06      	blt.n	80017d8 <HAL_ETH_ReadData+0x144>
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d202      	bcs.n	80017d8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d089      	beq.n	80016ec <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f815 	bl	800181c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
}
 8001812:	4618      	mov	r0, r3
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001828:	2301      	movs	r3, #1
 800182a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001830:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	3212      	adds	r2, #18
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001842:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001844:	e040      	b.n	80018c8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d112      	bne.n	8001874 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4618      	mov	r0, r3
 8001854:	f002 ff78 	bl	8004748 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	74fb      	strb	r3, [r7, #19]
 8001862:	e007      	b.n	8001874 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	461a      	mov	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001874:	7cfb      	ldrb	r3, [r7, #19]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d026      	beq.n	80018c8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <ETH_UpdateDescriptor+0xe4>)
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	e003      	b.n	8001892 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001890:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001892:	f3bf 8f5f 	dmb	sy
}
 8001896:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	3301      	adds	r3, #1
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d902      	bls.n	80018b6 <ETH_UpdateDescriptor+0x9a>
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	3b04      	subs	r3, #4
 80018b4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	3212      	adds	r2, #18
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	617b      	str	r3, [r7, #20]
      desccount--;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <ETH_UpdateDescriptor+0xb8>
 80018ce:	7cfb      	ldrb	r3, [r7, #19]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1b8      	bne.n	8001846 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d00c      	beq.n	80018f8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	800045f8 	.word	0x800045f8

08001904 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3318      	adds	r3, #24
 8001910:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001922:	e03f      	b.n	80019a4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001924:	2301      	movs	r3, #1
 8001926:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3b01      	subs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3304      	adds	r3, #4
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	3301      	adds	r3, #1
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d028      	beq.n	80019a4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db1b      	blt.n	80019a0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	3304      	adds	r3, #4
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	f002 ff59 	bl	800482c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3304      	adds	r3, #4
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	3301      	adds	r3, #1
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
 800199e:	e001      	b.n	80019a4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_ETH_ReleaseTxPacket+0xac>
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1b9      	bne.n	8001924 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d112      	bne.n	80019fc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	d109      	bne.n	80019fc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_ETH_IRQHandler+0x178>)
 80019f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f002 f9e0 	bl	8003dbc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d113      	bne.n	8001a36 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10a      	bne.n	8001a36 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001a2e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f002 f9d3 	bl	8003ddc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a48:	d14c      	bne.n	8001ae4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a5c:	d142      	bne.n	8001ae4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a64:	f043 0208 	orr.w	r2, r3, #8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a80:	d11a      	bne.n	8001ab8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_ETH_IRQHandler+0x17c>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001aa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aac:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	22e0      	movs	r2, #224	; 0xe0
 8001ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ab6:	e012      	b.n	8001ade <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f248 6380 	movw	r3, #34432	; 0x8680
 8001adc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f002 f98c 	bl	8003dfc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d10e      	bne.n	8001b10 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f81c 	bl	8001b40 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_ETH_IRQHandler+0x180>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_ETH_IRQHandler+0x180>)
 8001b1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b22:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f815 	bl	8001b54 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	00010040 	.word	0x00010040
 8001b38:	007e2000 	.word	0x007e2000
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 031c 	and.w	r3, r3, #28
 8001b84:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	02db      	lsls	r3, r3, #11
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	019b      	lsls	r3, r3, #6
 8001b96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f023 0302 	bic.w	r3, r3, #2
 8001ba6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001bb8:	f7ff f9ba 	bl	8000f30 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bbe:	e00d      	b.n	8001bdc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001bc0:	f7ff f9b6 	bl	8000f30 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bce:	d301      	bcc.n	8001bd4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e010      	b.n	8001bf6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ec      	bne.n	8001bc0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 031c 	and.w	r3, r3, #28
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	02db      	lsls	r3, r3, #11
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	019b      	lsls	r3, r3, #6
 8001c2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c58:	f7ff f96a 	bl	8000f30 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c5e:	e00d      	b.n	8001c7c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c60:	f7ff f966 	bl	8000f30 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d301      	bcc.n	8001c74 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e009      	b.n	8001c88 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ec      	bne.n	8001c60 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d9      	b.n	8001e58 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf14      	ite	ne
 8001cb2:	2301      	movne	r3, #1
 8001cb4:	2300      	moveq	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf14      	ite	ne
 8001d96:	2301      	movne	r3, #1
 8001d98:	2300      	moveq	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e00b      	b.n	8001e90 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d105      	bne.n	8001e8e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f88f 	bl	8001fa8 <ETH_SetMACConfig>

    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 031c 	bic.w	r3, r3, #28
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001eb0:	f001 fac4 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8001eb4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d908      	bls.n	8001ed0 <HAL_ETH_SetMDIOClockRange+0x38>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d804      	bhi.n	8001ed0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e027      	b.n	8001f20 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d908      	bls.n	8001eea <HAL_ETH_SetMDIOClockRange+0x52>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d204      	bcs.n	8001eea <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f043 030c 	orr.w	r3, r3, #12
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e01a      	b.n	8001f20 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d303      	bcc.n	8001efa <HAL_ETH_SetMDIOClockRange+0x62>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d911      	bls.n	8001f1e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d908      	bls.n	8001f14 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d804      	bhi.n	8001f14 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e005      	b.n	8001f20 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f043 0310 	orr.w	r3, r3, #16
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e000      	b.n	8001f20 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f1e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	611a      	str	r2, [r3, #16]
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	01312cff 	.word	0x01312cff
 8001f34:	02160ebf 	.word	0x02160ebf
 8001f38:	03938700 	.word	0x03938700
 8001f3c:	05f5e0ff 	.word	0x05f5e0ff
 8001f40:	08f0d17f 	.word	0x08f0d17f

08001f44 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f80:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7fe ffda 	bl	8000f48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f9e:	6193      	str	r3, [r2, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4b51      	ldr	r3, [pc, #324]	; (8002104 <ETH_SetMACConfig+0x15c>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7c1b      	ldrb	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <ETH_SetMACConfig+0x28>
 8001fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fce:	e000      	b.n	8001fd2 <ETH_SetMACConfig+0x2a>
 8001fd0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	7c5b      	ldrb	r3, [r3, #17]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <ETH_SetMACConfig+0x38>
 8001fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fde:	e000      	b.n	8001fe2 <ETH_SetMACConfig+0x3a>
 8001fe0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fe2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7fdb      	ldrb	r3, [r3, #31]
 8001fee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ff0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	7f92      	ldrb	r2, [r2, #30]
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d102      	bne.n	8002006 <ETH_SetMACConfig+0x5e>
 8002000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002004:	e000      	b.n	8002008 <ETH_SetMACConfig+0x60>
 8002006:	2200      	movs	r2, #0
                        macconf->Speed |
 8002008:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7f1b      	ldrb	r3, [r3, #28]
 800200e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002010:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002016:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800201e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002026:	2a00      	cmp	r2, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetMACConfig+0x88>
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	e000      	b.n	8002032 <ETH_SetMACConfig+0x8a>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002032:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7bdb      	ldrb	r3, [r3, #15]
 8002038:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800203a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002040:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002048:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800204a:	4313      	orrs	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002062:	2001      	movs	r0, #1
 8002064:	f7fe ff70 	bl	8000f48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800207e:	4013      	ands	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800208e:	2a00      	cmp	r2, #0
 8002090:	d101      	bne.n	8002096 <ETH_SetMACConfig+0xee>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	e000      	b.n	8002098 <ETH_SetMACConfig+0xf0>
 8002096:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002098:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800209e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d101      	bne.n	80020ae <ETH_SetMACConfig+0x106>
 80020aa:	2208      	movs	r2, #8
 80020ac:	e000      	b.n	80020b0 <ETH_SetMACConfig+0x108>
 80020ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80020b8:	2a01      	cmp	r2, #1
 80020ba:	d101      	bne.n	80020c0 <ETH_SetMACConfig+0x118>
 80020bc:	2204      	movs	r2, #4
 80020be:	e000      	b.n	80020c2 <ETH_SetMACConfig+0x11a>
 80020c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80020ca:	2a01      	cmp	r2, #1
 80020cc:	d101      	bne.n	80020d2 <ETH_SetMACConfig+0x12a>
 80020ce:	2202      	movs	r2, #2
 80020d0:	e000      	b.n	80020d4 <ETH_SetMACConfig+0x12c>
 80020d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020d4:	4313      	orrs	r3, r2
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7fe ff2b 	bl	8000f48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	ff20810f 	.word	0xff20810f

08002108 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <ETH_SetDMAConfig+0x110>)
 8002122:	4013      	ands	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	7b1b      	ldrb	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <ETH_SetDMAConfig+0x2c>
 800212e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002132:	e000      	b.n	8002136 <ETH_SetDMAConfig+0x2e>
 8002134:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7b5b      	ldrb	r3, [r3, #13]
 800213a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800213c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	7f52      	ldrb	r2, [r2, #29]
 8002142:	2a00      	cmp	r2, #0
 8002144:	d102      	bne.n	800214c <ETH_SetDMAConfig+0x44>
 8002146:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800214a:	e000      	b.n	800214e <ETH_SetDMAConfig+0x46>
 800214c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800214e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7b9b      	ldrb	r3, [r3, #14]
 8002154:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002156:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800215c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7f1b      	ldrb	r3, [r3, #28]
 8002162:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002164:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	7f9b      	ldrb	r3, [r3, #30]
 800216a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800216c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002172:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800217c:	4313      	orrs	r3, r2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800219e:	2001      	movs	r0, #1
 80021a0:	f7fe fed2 	bl	8000f48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ac:	461a      	mov	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7fe fea3 	bl	8000f48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	f8de3f23 	.word	0xf8de3f23

0800221c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a6      	sub	sp, #152	; 0x98
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002230:	2300      	movs	r3, #0
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002258:	2300      	movs	r3, #0
 800225a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002262:	2300      	movs	r3, #0
 8002264:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800227e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff fe86 	bl	8001fa8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800229c:	2301      	movs	r3, #1
 800229e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022be:	2300      	movs	r3, #0
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ff08 	bl	8002108 <ETH_SetDMAConfig>
}
 80022f8:	bf00      	nop
 80022fa:	3798      	adds	r7, #152	; 0x98
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3305      	adds	r3, #5
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	3204      	adds	r2, #4
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <ETH_MACAddressConfig+0x68>)
 8002322:	4413      	add	r3, r2
 8002324:	461a      	mov	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3303      	adds	r3, #3
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	061a      	lsls	r2, r3, #24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3302      	adds	r3, #2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3301      	adds	r3, #1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	4313      	orrs	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <ETH_MACAddressConfig+0x6c>)
 8002352:	4413      	add	r3, r2
 8002354:	461a      	mov	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	6013      	str	r3, [r2, #0]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40028040 	.word	0x40028040
 800236c:	40028044 	.word	0x40028044

08002370 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e03e      	b.n	80023fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68d9      	ldr	r1, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	3206      	adds	r2, #6
 80023b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d80c      	bhi.n	80023e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68d9      	ldr	r1, [r3, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	e004      	b.n	80023ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d9bd      	bls.n	800237e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	611a      	str	r2, [r3, #16]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e046      	b.n	80024be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800246c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002474:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	3212      	adds	r2, #18
 800248a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d80c      	bhi.n	80024ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6919      	ldr	r1, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e004      	b.n	80024b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d9b5      	bls.n	8002430 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ee:	60da      	str	r2, [r3, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b08d      	sub	sp, #52	; 0x34
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3318      	adds	r3, #24
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002526:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800253a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800253e:	d007      	beq.n	8002550 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	3304      	adds	r3, #4
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002550:	2302      	movs	r3, #2
 8002552:	e0ff      	b.n	8002754 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3301      	adds	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <ETH_Prepare_Tx_Descriptors+0x264>)
 800256a:	4013      	ands	r3, r2
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	6852      	ldr	r2, [r2, #4]
 8002570:	431a      	orrs	r2, r3
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80025d6:	f3bf 8f5f 	dmb	sy
}
 80025da:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80025e8:	e082      	b.n	80026f0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e005      	b.n	8002616 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	3301      	adds	r3, #1
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	2b03      	cmp	r3, #3
 8002620:	d902      	bls.n	8002628 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	3b04      	subs	r3, #4
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800264a:	d007      	beq.n	800265c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	3304      	adds	r3, #4
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d029      	beq.n	80026b0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002668:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800266a:	2300      	movs	r3, #0
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	e019      	b.n	80026a4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002670:	f3bf 8f5f 	dmb	sy
}
 8002674:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	3301      	adds	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2b03      	cmp	r3, #3
 800268c:	d902      	bls.n	8002694 <ETH_Prepare_Tx_Descriptors+0x198>
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	3b04      	subs	r3, #4
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	3301      	adds	r3, #1
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3e1      	bcc.n	8002670 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80026ac:	2302      	movs	r3, #2
 80026ae:	e051      	b.n	8002754 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	3301      	adds	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <ETH_Prepare_Tx_Descriptors+0x264>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	6852      	ldr	r2, [r2, #4]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	3301      	adds	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80026de:	f3bf 8f5f 	dmb	sy
}
 80026e2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f af78 	bne.w	80025ea <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e005      	b.n	800271a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272a:	6979      	ldr	r1, [r7, #20]
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	3304      	adds	r3, #4
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800274e:	b662      	cpsie	i
}
 8002750:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3734      	adds	r7, #52	; 0x34
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	ffffe000 	.word	0xffffe000

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	e175      	b.n	8002a70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 8164 	bne.w	8002a6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_GPIO_Init+0x56>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d130      	bne.n	800281c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b03      	cmp	r3, #3
 8002826:	d017      	beq.n	8002858 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80be 	beq.w	8002a6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_GPIO_Init+0x324>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_GPIO_Init+0x324>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_GPIO_Init+0x324>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002906:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <HAL_GPIO_Init+0x328>)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_GPIO_Init+0x32c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d037      	beq.n	80029a2 <HAL_GPIO_Init+0x23e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_GPIO_Init+0x330>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d031      	beq.n	800299e <HAL_GPIO_Init+0x23a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_GPIO_Init+0x334>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d02b      	beq.n	800299a <HAL_GPIO_Init+0x236>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <HAL_GPIO_Init+0x338>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d025      	beq.n	8002996 <HAL_GPIO_Init+0x232>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a54      	ldr	r2, [pc, #336]	; (8002aa0 <HAL_GPIO_Init+0x33c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x22e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a53      	ldr	r2, [pc, #332]	; (8002aa4 <HAL_GPIO_Init+0x340>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d019      	beq.n	800298e <HAL_GPIO_Init+0x22a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x344>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x226>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a51      	ldr	r2, [pc, #324]	; (8002aac <HAL_GPIO_Init+0x348>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x222>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_GPIO_Init+0x34c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x21e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4f      	ldr	r2, [pc, #316]	; (8002ab4 <HAL_GPIO_Init+0x350>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x21a>
 800297a:	2309      	movs	r3, #9
 800297c:	e012      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800297e:	230a      	movs	r3, #10
 8002980:	e010      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002982:	2308      	movs	r3, #8
 8002984:	e00e      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002986:	2307      	movs	r3, #7
 8002988:	e00c      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800298a:	2306      	movs	r3, #6
 800298c:	e00a      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800298e:	2305      	movs	r3, #5
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002992:	2304      	movs	r3, #4
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	; (8002a8c <HAL_GPIO_Init+0x328>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f ae86 	bls.w	8002784 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40021c00 	.word	0x40021c00
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40022400 	.word	0x40022400
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ad8:	e003      	b.n	8002ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b1e:	f7fe fa07 	bl	8000f30 <HAL_GetTick>
 8002b22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b24:	e009      	b.n	8002b3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b26:	f7fe fa03 	bl	8000f30 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b34:	d901      	bls.n	8002b3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e022      	b.n	8002b80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b46:	d1ee      	bne.n	8002b26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b54:	f7fe f9ec 	bl	8000f30 <HAL_GetTick>
 8002b58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b5a:	e009      	b.n	8002b70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b5c:	f7fe f9e8 	bl	8000f30 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b6a:	d901      	bls.n	8002b70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e007      	b.n	8002b80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b7c:	d1ee      	bne.n	8002b5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e291      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8087 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb4:	4b96      	ldr	r3, [pc, #600]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d00c      	beq.n	8002bda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc0:	4b93      	ldr	r3, [pc, #588]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d112      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62>
 8002bcc:	4b90      	ldr	r3, [pc, #576]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x130>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d168      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e26b      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x7a>
 8002bfc:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a83      	ldr	r2, [pc, #524]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e02e      	b.n	8002c68 <HAL_RCC_OscConfig+0xd8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x9c>
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7e      	ldr	r2, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7b      	ldr	r2, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e01d      	b.n	8002c68 <HAL_RCC_OscConfig+0xd8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0xc0>
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a72      	ldr	r2, [pc, #456]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0xd8>
 8002c50:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6b      	ldr	r2, [pc, #428]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f95e 	bl	8000f30 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe f95a 	bl	8000f30 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e21f      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b61      	ldr	r3, [pc, #388]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe8>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe f94a 	bl	8000f30 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe f946 	bl	8000f30 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e20b      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	4b57      	ldr	r3, [pc, #348]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x110>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d069      	beq.n	8002da2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cce:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b4d      	ldr	r3, [pc, #308]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d11c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x190>
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_RCC_OscConfig+0x17a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1df      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	493d      	ldr	r1, [pc, #244]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	e040      	b.n	8002da2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d023      	beq.n	8002d70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d28:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe f8fc 	bl	8000f30 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe f8f8 	bl	8000f30 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1bd      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4929      	ldr	r1, [pc, #164]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
 8002d6e:	e018      	b.n	8002da2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f8d8 	bl	8000f30 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe f8d4 	bl	8000f30 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e199      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d038      	beq.n	8002e20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d019      	beq.n	8002dea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe f8b5 	bl	8000f30 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fe f8b1 	bl	8000f30 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e176      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x23a>
 8002de8:	e01a      	b.n	8002e20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe f89b 	bl	8000f30 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe f897 	bl	8000f30 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d903      	bls.n	8002e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e15c      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
 8002e10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b91      	ldr	r3, [pc, #580]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a4 	beq.w	8002f76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a87      	ldr	r2, [pc, #540]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7e      	ldr	r2, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe f85f 	bl	8000f30 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe f85b 	bl	8000f30 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e120      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x31a>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_OscConfig+0x376>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x33c>
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a69      	ldr	r2, [pc, #420]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	4b67      	ldr	r3, [pc, #412]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a66      	ldr	r2, [pc, #408]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x376>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x35e>
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a60      	ldr	r2, [pc, #384]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x376>
 8002eee:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7fe f80f 	bl	8000f30 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe f80b 	bl	8000f30 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0ce      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCC_OscConfig+0x386>
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fff9 	bl	8000f30 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fd fff5 	bl	8000f30 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ee      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80a4 	beq.w	80030c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d06b      	beq.n	8003064 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d149      	bne.n	8003028 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a30      	ldr	r2, [pc, #192]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fd ffc6 	bl	8000f30 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fd ffc2 	bl	8000f30 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e087      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	4313      	orrs	r3, r2
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ff2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a18      	ldr	r2, [pc, #96]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd ff96 	bl	8000f30 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fd ff92 	bl	8000f30 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e057      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x478>
 8003026:	e04f      	b.n	80030c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0b      	ldr	r2, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 800302e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fd ff7c 	bl	8000f30 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fd ff78 	bl	8000f30 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e03d      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304e:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_OscConfig+0x4cc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x4ac>
 800305a:	e035      	b.n	80030c8 <HAL_RCC_OscConfig+0x538>
 800305c:	40023800 	.word	0x40023800
 8003060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x544>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d028      	beq.n	80030c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d121      	bne.n	80030c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d11a      	bne.n	80030c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800309c:	4293      	cmp	r3, r2
 800309e:	d111      	bne.n	80030c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0d0      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f0:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d910      	bls.n	8003120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b67      	ldr	r3, [pc, #412]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 020f 	bic.w	r2, r3, #15
 8003106:	4965      	ldr	r1, [pc, #404]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b63      	ldr	r3, [pc, #396]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0b8      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a58      	ldr	r2, [pc, #352]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003142:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a52      	ldr	r2, [pc, #328]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800315a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	494d      	ldr	r1, [pc, #308]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d040      	beq.n	80031fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d115      	bne.n	80031ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e07f      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e073      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e06b      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4936      	ldr	r1, [pc, #216]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fd feb0 	bl	8000f30 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7fd feac 	bl	8000f30 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e053      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 020c 	and.w	r2, r3, #12
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d1eb      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d210      	bcs.n	800322c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 020f 	bic.w	r2, r3, #15
 8003212:	4922      	ldr	r1, [pc, #136]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e032      	b.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4916      	ldr	r1, [pc, #88]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	490e      	ldr	r1, [pc, #56]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800326a:	f000 f821 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 800326e:	4602      	mov	r2, r0
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	490a      	ldr	r1, [pc, #40]	; (80032a4 <HAL_RCC_ClockConfig+0x1cc>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1d4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd fb20 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023c00 	.word	0x40023c00
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08018f30 	.word	0x08018f30
 80032a8:	20000000 	.word	0x20000000
 80032ac:	20000004 	.word	0x20000004

080032b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b4:	b090      	sub	sp, #64	; 0x40
 80032b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
 80032bc:	2300      	movs	r3, #0
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c0:	2300      	movs	r3, #0
 80032c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c8:	4b59      	ldr	r3, [pc, #356]	; (8003430 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d00d      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x40>
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	f200 80a1 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x16c>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x34>
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x3a>
 80032e2:	e09b      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_GetSysClockFreq+0x184>)
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032e8:	e09b      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ea:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032ee:	e098      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f0:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032fa:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d028      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_RCC_GetSysClockFreq+0x180>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	2200      	movs	r2, #0
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	627a      	str	r2, [r7, #36]	; 0x24
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003318:	2100      	movs	r1, #0
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_RCC_GetSysClockFreq+0x188>)
 800331c:	fb03 f201 	mul.w	r2, r3, r1
 8003320:	2300      	movs	r3, #0
 8003322:	fb00 f303 	mul.w	r3, r0, r3
 8003326:	4413      	add	r3, r2
 8003328:	4a43      	ldr	r2, [pc, #268]	; (8003438 <HAL_RCC_GetSysClockFreq+0x188>)
 800332a:	fba0 1202 	umull	r1, r2, r0, r2
 800332e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003330:	460a      	mov	r2, r1
 8003332:	62ba      	str	r2, [r7, #40]	; 0x28
 8003334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003336:	4413      	add	r3, r2
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	2200      	movs	r2, #0
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	61fa      	str	r2, [r7, #28]
 8003342:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800334a:	f7fc ffb1 	bl	80002b0 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4613      	mov	r3, r2
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003356:	e053      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003358:	4b35      	ldr	r3, [pc, #212]	; (8003430 <HAL_RCC_GetSysClockFreq+0x180>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	2200      	movs	r2, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	617a      	str	r2, [r7, #20]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800336a:	f04f 0b00 	mov.w	fp, #0
 800336e:	4652      	mov	r2, sl
 8003370:	465b      	mov	r3, fp
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	0159      	lsls	r1, r3, #5
 800337c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003380:	0150      	lsls	r0, r2, #5
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	ebb2 080a 	subs.w	r8, r2, sl
 800338a:	eb63 090b 	sbc.w	r9, r3, fp
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800339a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800339e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033a2:	ebb2 0408 	subs.w	r4, r2, r8
 80033a6:	eb63 0509 	sbc.w	r5, r3, r9
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	00eb      	lsls	r3, r5, #3
 80033b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b8:	00e2      	lsls	r2, r4, #3
 80033ba:	4614      	mov	r4, r2
 80033bc:	461d      	mov	r5, r3
 80033be:	eb14 030a 	adds.w	r3, r4, sl
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	eb45 030b 	adc.w	r3, r5, fp
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033d6:	4629      	mov	r1, r5
 80033d8:	028b      	lsls	r3, r1, #10
 80033da:	4621      	mov	r1, r4
 80033dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e0:	4621      	mov	r1, r4
 80033e2:	028a      	lsls	r2, r1, #10
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	2200      	movs	r2, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	60fa      	str	r2, [r7, #12]
 80033f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f4:	f7fc ff5c 	bl	80002b0 <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4613      	mov	r3, r2
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_GetSysClockFreq+0x180>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	3301      	adds	r3, #1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetSysClockFreq+0x184>)
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003424:	4618      	mov	r0, r3
 8003426:	3740      	adds	r7, #64	; 0x40
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400
 8003438:	017d7840 	.word	0x017d7840

0800343c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_GetHCLKFreq+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000000 	.word	0x20000000

08003454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003458:	f7ff fff0 	bl	800343c <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0a9b      	lsrs	r3, r3, #10
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	08018f40 	.word	0x08018f40

0800347c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	220f      	movs	r2, #15
 800348a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_RCC_GetClockConfig+0x5c>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0203 	and.w	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_RCC_GetClockConfig+0x5c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_GetClockConfig+0x5c>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_RCC_GetClockConfig+0x60>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	601a      	str	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40023c00 	.word	0x40023c00

080034e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e049      	b.n	8003586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f841 	bl	800358e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f000 fa00 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d001      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e054      	b.n	8003666 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a26      	ldr	r2, [pc, #152]	; (8003674 <HAL_TIM_Base_Start_IT+0xd0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x80>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d01d      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x80>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_TIM_Base_Start_IT+0xd4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x80>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a21      	ldr	r2, [pc, #132]	; (800367c <HAL_TIM_Base_Start_IT+0xd8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x80>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <HAL_TIM_Base_Start_IT+0xdc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x80>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <HAL_TIM_Base_Start_IT+0xe0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x80>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_TIM_Base_Start_IT+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x80>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_TIM_Base_Start_IT+0xe8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d115      	bne.n	8003650 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_TIM_Base_Start_IT+0xec>)
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b06      	cmp	r3, #6
 8003634:	d015      	beq.n	8003662 <HAL_TIM_Base_Start_IT+0xbe>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d011      	beq.n	8003662 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	e008      	b.n	8003662 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e000      	b.n	8003664 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40010400 	.word	0x40010400
 8003688:	40014000 	.word	0x40014000
 800368c:	40001800 	.word	0x40001800
 8003690:	00010007 	.word	0x00010007

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f905 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8f7 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f908 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8db 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8cd 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8de 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8b1 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8a3 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8b4 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f887 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f879 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f88a 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd f81c 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f91a 	bl	8003a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003852:	d10e      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d107      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800386a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f90d 	bl	8003a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d10e      	bne.n	800389e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d107      	bne.n	800389e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f838 	bl	800390e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0220 	mvn.w	r2, #32
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8cd 	bl	8003a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <TIM_Base_SetConfig+0x114>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d00f      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <TIM_Base_SetConfig+0x118>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00b      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d108      	bne.n	8003976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <TIM_Base_SetConfig+0x114>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02b      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d027      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <TIM_Base_SetConfig+0x118>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d023      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01b      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d017      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <TIM_Base_SetConfig+0x130>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TIM_Base_SetConfig+0x134>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <TIM_Base_SetConfig+0x138>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <TIM_Base_SetConfig+0x13c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <TIM_Base_SetConfig+0x114>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0xf8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d103      	bne.n	8003a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	615a      	str	r2, [r3, #20]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800
 8003a58:	40001800 	.word	0x40001800
 8003a5c:	40001c00 	.word	0x40001c00
 8003a60:	40002000 	.word	0x40002000

08003a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return &gnetif;
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <get_static_netif+0x10>)
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	2000024c 	.word	0x2000024c

08003ab4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8003aba:	4b98      	ldr	r3, [pc, #608]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003abc:	220a      	movs	r2, #10
 8003abe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8003ac0:	4b96      	ldr	r3, [pc, #600]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003ac2:	222a      	movs	r2, #42	; 0x2a
 8003ac4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003ac6:	4b95      	ldr	r3, [pc, #596]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8003acc:	4b93      	ldr	r3, [pc, #588]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003ace:	2220      	movs	r2, #32
 8003ad0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003ad2:	4b93      	ldr	r3, [pc, #588]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003ad4:	22ff      	movs	r2, #255	; 0xff
 8003ad6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ad8:	4b91      	ldr	r3, [pc, #580]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003ada:	22ff      	movs	r2, #255	; 0xff
 8003adc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003ade:	4b90      	ldr	r3, [pc, #576]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003ae4:	4b8e      	ldr	r3, [pc, #568]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8003aea:	4b8e      	ldr	r3, [pc, #568]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003aec:	220a      	movs	r2, #10
 8003aee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8003af0:	4b8c      	ldr	r3, [pc, #560]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003af2:	222a      	movs	r2, #42	; 0x2a
 8003af4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003af6:	4b8b      	ldr	r3, [pc, #556]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003afc:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003b02:	2100      	movs	r1, #0
 8003b04:	2000      	movs	r0, #0
 8003b06:	f006 fbb5 	bl	800a274 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003b0a:	4b84      	ldr	r3, [pc, #528]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	061a      	lsls	r2, r3, #24
 8003b10:	4b82      	ldr	r3, [pc, #520]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	4b80      	ldr	r3, [pc, #512]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b1a:	789b      	ldrb	r3, [r3, #2]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	4a7e      	ldr	r2, [pc, #504]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b22:	78d2      	ldrb	r2, [r2, #3]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	061a      	lsls	r2, r3, #24
 8003b28:	4b7c      	ldr	r3, [pc, #496]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	0619      	lsls	r1, r3, #24
 8003b2e:	4b7b      	ldr	r3, [pc, #492]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	4319      	orrs	r1, r3
 8003b36:	4b79      	ldr	r3, [pc, #484]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	4977      	ldr	r1, [pc, #476]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b40:	78c9      	ldrb	r1, [r1, #3]
 8003b42:	430b      	orrs	r3, r1
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	4b73      	ldr	r3, [pc, #460]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	0619      	lsls	r1, r3, #24
 8003b52:	4b72      	ldr	r3, [pc, #456]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	4319      	orrs	r1, r3
 8003b5a:	4b70      	ldr	r3, [pc, #448]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b5c:	789b      	ldrb	r3, [r3, #2]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	430b      	orrs	r3, r1
 8003b62:	496e      	ldr	r1, [pc, #440]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b64:	78c9      	ldrb	r1, [r1, #3]
 8003b66:	430b      	orrs	r3, r1
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	0619      	lsls	r1, r3, #24
 8003b76:	4b69      	ldr	r3, [pc, #420]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	4319      	orrs	r1, r3
 8003b7e:	4b67      	ldr	r3, [pc, #412]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b80:	789b      	ldrb	r3, [r3, #2]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	430b      	orrs	r3, r1
 8003b86:	4965      	ldr	r1, [pc, #404]	; (8003d1c <MX_LWIP_Init+0x268>)
 8003b88:	78c9      	ldrb	r1, [r1, #3]
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	0e1b      	lsrs	r3, r3, #24
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	4a65      	ldr	r2, [pc, #404]	; (8003d28 <MX_LWIP_Init+0x274>)
 8003b92:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003b94:	4b62      	ldr	r3, [pc, #392]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	061a      	lsls	r2, r3, #24
 8003b9a:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	4b5f      	ldr	r3, [pc, #380]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003ba4:	789b      	ldrb	r3, [r3, #2]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bac:	78d2      	ldrb	r2, [r2, #3]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	061a      	lsls	r2, r3, #24
 8003bb2:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	0619      	lsls	r1, r3, #24
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	4319      	orrs	r1, r3
 8003bc0:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bc2:	789b      	ldrb	r3, [r3, #2]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	4955      	ldr	r1, [pc, #340]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bca:	78c9      	ldrb	r1, [r1, #3]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	4b52      	ldr	r3, [pc, #328]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	0619      	lsls	r1, r3, #24
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	4319      	orrs	r1, r3
 8003be4:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003be6:	789b      	ldrb	r3, [r3, #2]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	430b      	orrs	r3, r1
 8003bec:	494c      	ldr	r1, [pc, #304]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bee:	78c9      	ldrb	r1, [r1, #3]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	4b49      	ldr	r3, [pc, #292]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	0619      	lsls	r1, r3, #24
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	4319      	orrs	r1, r3
 8003c08:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003c0a:	789b      	ldrb	r3, [r3, #2]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	4943      	ldr	r1, [pc, #268]	; (8003d20 <MX_LWIP_Init+0x26c>)
 8003c12:	78c9      	ldrb	r1, [r1, #3]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	0e1b      	lsrs	r3, r3, #24
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	4a44      	ldr	r2, [pc, #272]	; (8003d2c <MX_LWIP_Init+0x278>)
 8003c1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	061a      	lsls	r2, r3, #24
 8003c24:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c2e:	789b      	ldrb	r3, [r3, #2]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	4313      	orrs	r3, r2
 8003c34:	4a3b      	ldr	r2, [pc, #236]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c36:	78d2      	ldrb	r2, [r2, #3]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	061a      	lsls	r2, r3, #24
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	0619      	lsls	r1, r3, #24
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c44:	785b      	ldrb	r3, [r3, #1]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	4319      	orrs	r1, r3
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c4c:	789b      	ldrb	r3, [r3, #2]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	430b      	orrs	r3, r1
 8003c52:	4934      	ldr	r1, [pc, #208]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c54:	78c9      	ldrb	r1, [r1, #3]
 8003c56:	430b      	orrs	r3, r1
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	0619      	lsls	r1, r3, #24
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	4319      	orrs	r1, r3
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c70:	789b      	ldrb	r3, [r3, #2]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	430b      	orrs	r3, r1
 8003c76:	492b      	ldr	r1, [pc, #172]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c78:	78c9      	ldrb	r1, [r1, #3]
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c82:	431a      	orrs	r2, r3
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	0619      	lsls	r1, r3, #24
 8003c8a:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	4319      	orrs	r1, r3
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c94:	789b      	ldrb	r3, [r3, #2]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	4922      	ldr	r1, [pc, #136]	; (8003d24 <MX_LWIP_Init+0x270>)
 8003c9c:	78c9      	ldrb	r1, [r1, #3]
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	0e1b      	lsrs	r3, r3, #24
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <MX_LWIP_Init+0x27c>)
 8003ca6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003ca8:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <MX_LWIP_Init+0x280>)
 8003caa:	9302      	str	r3, [sp, #8]
 8003cac:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <MX_LWIP_Init+0x284>)
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <MX_LWIP_Init+0x27c>)
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <MX_LWIP_Init+0x278>)
 8003cb8:	491b      	ldr	r1, [pc, #108]	; (8003d28 <MX_LWIP_Init+0x274>)
 8003cba:	4820      	ldr	r0, [pc, #128]	; (8003d3c <MX_LWIP_Init+0x288>)
 8003cbc:	f007 f8a2 	bl	800ae04 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003cc0:	481e      	ldr	r0, [pc, #120]	; (8003d3c <MX_LWIP_Init+0x288>)
 8003cc2:	f007 fa4d 	bl	800b160 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <MX_LWIP_Init+0x288>)
 8003cc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003cd8:	4818      	ldr	r0, [pc, #96]	; (8003d3c <MX_LWIP_Init+0x288>)
 8003cda:	f007 fa51 	bl	800b180 <netif_set_up>
 8003cde:	e002      	b.n	8003ce6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003ce0:	4816      	ldr	r0, [pc, #88]	; (8003d3c <MX_LWIP_Init+0x288>)
 8003ce2:	f007 fab9 	bl	800b258 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003ce6:	4916      	ldr	r1, [pc, #88]	; (8003d40 <MX_LWIP_Init+0x28c>)
 8003ce8:	4814      	ldr	r0, [pc, #80]	; (8003d3c <MX_LWIP_Init+0x288>)
 8003cea:	f007 fb4b 	bl	800b384 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4814      	ldr	r0, [pc, #80]	; (8003d44 <MX_LWIP_Init+0x290>)
 8003cf4:	f011 f93b 	bl	8014f6e <memset>
  attributes.name = "EthLink";
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <MX_LWIP_Init+0x290>)
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <MX_LWIP_Init+0x294>)
 8003cfc:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <MX_LWIP_Init+0x290>)
 8003d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d04:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <MX_LWIP_Init+0x290>)
 8003d08:	2210      	movs	r2, #16
 8003d0a:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <MX_LWIP_Init+0x290>)
 8003d0e:	490b      	ldr	r1, [pc, #44]	; (8003d3c <MX_LWIP_Init+0x288>)
 8003d10:	480e      	ldr	r0, [pc, #56]	; (8003d4c <MX_LWIP_Init+0x298>)
 8003d12:	f000 fe2f 	bl	8004974 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	2000028c 	.word	0x2000028c
 8003d20:	20000290 	.word	0x20000290
 8003d24:	20000294 	.word	0x20000294
 8003d28:	20000280 	.word	0x20000280
 8003d2c:	20000284 	.word	0x20000284
 8003d30:	20000288 	.word	0x20000288
 8003d34:	0800a185 	.word	0x0800a185
 8003d38:	08004365 	.word	0x08004365
 8003d3c:	2000024c 	.word	0x2000024c
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	20000298 	.word	0x20000298
 8003d48:	08015f2c 	.word	0x08015f2c
 8003d4c:	0800462d 	.word	0x0800462d

08003d50 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003d76:	2320      	movs	r3, #32
 8003d78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d7a:	f3bf 8f4f 	dsb	sy
}
 8003d7e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8003d80:	e00b      	b.n	8003d9a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003d82:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	dcf0      	bgt.n	8003d82 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003da0:	f3bf 8f4f 	dsb	sy
}
 8003da4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003da6:	f3bf 8f6f 	isb	sy
}
 8003daa:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_ETH_RxCpltCallback+0x1c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f8f1 	bl	8004fb0 <osSemaphoreRelease>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20004c48 	.word	0x20004c48

08003ddc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_ETH_TxCpltCallback+0x1c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 f8e1 	bl	8004fb0 <osSemaphoreRelease>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20004c4c 	.word	0x20004c4c

08003dfc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe f89d 	bl	8001f44 <HAL_ETH_GetDMAError>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d104      	bne.n	8003e1e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <HAL_ETH_ErrorCallback+0x2c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 f8c9 	bl	8004fb0 <osSemaphoreRelease>
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20004c48 	.word	0x20004c48

08003e2c <ethernet_link_check_state>:

/* USER CODE BEGIN 4 */
void ethernet_link_check_state(struct netif *netif)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b0a0      	sub	sp, #128	; 0x80
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	2264      	movs	r2, #100	; 0x64
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f011 f896 	bl	8014f6e <memset>
  int32_t PHYLinkState = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e4e:	2300      	movs	r3, #0
 8003e50:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003e52:	483a      	ldr	r0, [pc, #232]	; (8003f3c <ethernet_link_check_state+0x110>)
 8003e54:	f7fc ffc3 	bl	8000dde <LAN8742_GetLinkState>
 8003e58:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <ethernet_link_check_state+0x5a>
 8003e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	dc09      	bgt.n	8003e86 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003e72:	4833      	ldr	r0, [pc, #204]	; (8003f40 <ethernet_link_check_state+0x114>)
 8003e74:	f7fd fad8 	bl	8001428 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f007 f9ed 	bl	800b258 <netif_set_down>
    netif_set_link_down(netif);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f007 fa50 	bl	800b324 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003e84:	e055      	b.n	8003f32 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d14e      	bne.n	8003f32 <ethernet_link_check_state+0x106>
 8003e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	dd4b      	ble.n	8003f32 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e9c:	3b02      	subs	r3, #2
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d82a      	bhi.n	8003ef8 <ethernet_link_check_state+0xcc>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <ethernet_link_check_state+0x7c>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003ecb 	.word	0x08003ecb
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003eeb 	.word	0x08003eeb
      duplex = ETH_FULLDUPLEX_MODE;
 8003eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ebc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003ebe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ec2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003ec8:	e017      	b.n	8003efa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003ece:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ed2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003ed8:	e00f      	b.n	8003efa <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ede:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003ee8:	e007      	b.n	8003efa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003ef6:	e000      	b.n	8003efa <ethernet_link_check_state+0xce>
      break;
 8003ef8:	bf00      	nop
    if(linkchanged)
 8003efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d018      	beq.n	8003f32 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	4619      	mov	r1, r3
 8003f06:	480e      	ldr	r0, [pc, #56]	; (8003f40 <ethernet_link_check_state+0x114>)
 8003f08:	f7fd fec2 	bl	8001c90 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f12:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4809      	ldr	r0, [pc, #36]	; (8003f40 <ethernet_link_check_state+0x114>)
 8003f1c:	f7fd ffa2 	bl	8001e64 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003f20:	4807      	ldr	r0, [pc, #28]	; (8003f40 <ethernet_link_check_state+0x114>)
 8003f22:	f7fd f993 	bl	800124c <HAL_ETH_Start>
      netif_set_up(netif);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f007 f92a 	bl	800b180 <netif_set_up>
      netif_set_link_up(netif);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f007 f9c5 	bl	800b2bc <netif_set_link_up>
}
 8003f32:	bf00      	nop
 8003f34:	3780      	adds	r7, #128	; 0x80
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20004d38 	.word	0x20004d38
 8003f40:	20004c50 	.word	0x20004c50

08003f44 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b0aa      	sub	sp, #168	; 0xa8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8003f5e:	f107 0310 	add.w	r3, r7, #16
 8003f62:	2264      	movs	r2, #100	; 0x64
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f011 f801 	bl	8014f6e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003f6c:	4b85      	ldr	r3, [pc, #532]	; (8004184 <low_level_init+0x240>)
 8003f6e:	4a86      	ldr	r2, [pc, #536]	; (8004188 <low_level_init+0x244>)
 8003f70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003f72:	2300      	movs	r3, #0
 8003f74:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003f7a:	23e1      	movs	r3, #225	; 0xe1
 8003f7c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003f82:	2300      	movs	r3, #0
 8003f84:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003f86:	2300      	movs	r3, #0
 8003f88:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003f8a:	4a7e      	ldr	r2, [pc, #504]	; (8004184 <low_level_init+0x240>)
 8003f8c:	f107 0308 	add.w	r3, r7, #8
 8003f90:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003f92:	4b7c      	ldr	r3, [pc, #496]	; (8004184 <low_level_init+0x240>)
 8003f94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f98:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003f9a:	4b7a      	ldr	r3, [pc, #488]	; (8004184 <low_level_init+0x240>)
 8003f9c:	4a7b      	ldr	r2, [pc, #492]	; (800418c <low_level_init+0x248>)
 8003f9e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003fa0:	4b78      	ldr	r3, [pc, #480]	; (8004184 <low_level_init+0x240>)
 8003fa2:	4a7b      	ldr	r2, [pc, #492]	; (8004190 <low_level_init+0x24c>)
 8003fa4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003fa6:	4b77      	ldr	r3, [pc, #476]	; (8004184 <low_level_init+0x240>)
 8003fa8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003fac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003fae:	4875      	ldr	r0, [pc, #468]	; (8004184 <low_level_init+0x240>)
 8003fb0:	f7fd f8d0 	bl	8001154 <HAL_ETH_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003fba:	2238      	movs	r2, #56	; 0x38
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4875      	ldr	r0, [pc, #468]	; (8004194 <low_level_init+0x250>)
 8003fc0:	f010 ffd5 	bl	8014f6e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003fc4:	4b73      	ldr	r3, [pc, #460]	; (8004194 <low_level_init+0x250>)
 8003fc6:	2221      	movs	r2, #33	; 0x21
 8003fc8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003fca:	4b72      	ldr	r3, [pc, #456]	; (8004194 <low_level_init+0x250>)
 8003fcc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003fd0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003fd2:	4b70      	ldr	r3, [pc, #448]	; (8004194 <low_level_init+0x250>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003fd8:	486f      	ldr	r0, [pc, #444]	; (8004198 <low_level_init+0x254>)
 8003fda:	f006 fdcd 	bl	800ab78 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2206      	movs	r2, #6
 8003fe2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003fe6:	4b67      	ldr	r3, [pc, #412]	; (8004184 <low_level_init+0x240>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	781a      	ldrb	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003ff2:	4b64      	ldr	r3, [pc, #400]	; (8004184 <low_level_init+0x240>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	785a      	ldrb	r2, [r3, #1]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003ffe:	4b61      	ldr	r3, [pc, #388]	; (8004184 <low_level_init+0x240>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	789a      	ldrb	r2, [r3, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800400a:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <low_level_init+0x240>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	78da      	ldrb	r2, [r3, #3]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004016:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <low_level_init+0x240>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	791a      	ldrb	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004022:	4b58      	ldr	r3, [pc, #352]	; (8004184 <low_level_init+0x240>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	795a      	ldrb	r2, [r3, #5]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004034:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800403c:	f043 030a 	orr.w	r3, r3, #10
 8004040:	b2da      	uxtb	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004048:	2200      	movs	r2, #0
 800404a:	2101      	movs	r1, #1
 800404c:	2001      	movs	r0, #1
 800404e:	f000 fead 	bl	8004dac <osSemaphoreNew>
 8004052:	4603      	mov	r3, r0
 8004054:	4a51      	ldr	r2, [pc, #324]	; (800419c <low_level_init+0x258>)
 8004056:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004058:	2200      	movs	r2, #0
 800405a:	2101      	movs	r1, #1
 800405c:	2001      	movs	r0, #1
 800405e:	f000 fea5 	bl	8004dac <osSemaphoreNew>
 8004062:	4603      	mov	r3, r0
 8004064:	4a4e      	ldr	r2, [pc, #312]	; (80041a0 <low_level_init+0x25c>)
 8004066:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004068:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800406c:	2224      	movs	r2, #36	; 0x24
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f010 ff7c 	bl	8014f6e <memset>
  attributes.name = "EthIf";
 8004076:	4b4b      	ldr	r3, [pc, #300]	; (80041a4 <low_level_init+0x260>)
 8004078:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800407a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800407e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8004082:	2330      	movs	r3, #48	; 0x30
 8004084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004088:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800408c:	461a      	mov	r2, r3
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4845      	ldr	r0, [pc, #276]	; (80041a8 <low_level_init+0x264>)
 8004092:	f000 fc6f 	bl	8004974 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004096:	4945      	ldr	r1, [pc, #276]	; (80041ac <low_level_init+0x268>)
 8004098:	4845      	ldr	r0, [pc, #276]	; (80041b0 <low_level_init+0x26c>)
 800409a:	f7fc fdc6 	bl	8000c2a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800409e:	4844      	ldr	r0, [pc, #272]	; (80041b0 <low_level_init+0x26c>)
 80040a0:	f7fc fdf5 	bl	8000c8e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80040a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d164      	bne.n	8004176 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80040ac:	4840      	ldr	r0, [pc, #256]	; (80041b0 <low_level_init+0x26c>)
 80040ae:	f7fc fe96 	bl	8000dde <LAN8742_GetLinkState>
 80040b2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80040b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	dc06      	bgt.n	80040cc <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f007 f930 	bl	800b324 <netif_set_link_down>
      netif_set_down(netif);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f007 f8c7 	bl	800b258 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80040ca:	e056      	b.n	800417a <low_level_init+0x236>
      switch (PHYLinkState)
 80040cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d0:	3b02      	subs	r3, #2
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d82a      	bhi.n	800412c <low_level_init+0x1e8>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <low_level_init+0x198>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040ff 	.word	0x080040ff
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	0800411f 	.word	0x0800411f
        duplex = ETH_FULLDUPLEX_MODE;
 80040ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80040f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80040fc:	e01f      	b.n	800413e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004104:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800410c:	e017      	b.n	800413e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800410e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800411c:	e00f      	b.n	800413e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800412a:	e008      	b.n	800413e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800412c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800413c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800413e:	f107 0310 	add.w	r3, r7, #16
 8004142:	4619      	mov	r1, r3
 8004144:	480f      	ldr	r0, [pc, #60]	; (8004184 <low_level_init+0x240>)
 8004146:	f7fd fda3 	bl	8001c90 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800414a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004150:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004156:	f107 0310 	add.w	r3, r7, #16
 800415a:	4619      	mov	r1, r3
 800415c:	4809      	ldr	r0, [pc, #36]	; (8004184 <low_level_init+0x240>)
 800415e:	f7fd fe81 	bl	8001e64 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004162:	4808      	ldr	r0, [pc, #32]	; (8004184 <low_level_init+0x240>)
 8004164:	f7fd f8d2 	bl	800130c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f007 f809 	bl	800b180 <netif_set_up>
    netif_set_link_up(netif);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f007 f8a4 	bl	800b2bc <netif_set_link_up>
}
 8004174:	e001      	b.n	800417a <low_level_init+0x236>
    Error_Handler();
 8004176:	f7fc fb7d 	bl	8000874 <Error_Handler>
}
 800417a:	bf00      	nop
 800417c:	37a8      	adds	r7, #168	; 0xa8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20004c50 	.word	0x20004c50
 8004188:	40028000 	.word	0x40028000
 800418c:	20000130 	.word	0x20000130
 8004190:	20000090 	.word	0x20000090
 8004194:	20004d00 	.word	0x20004d00
 8004198:	08018f48 	.word	0x08018f48
 800419c:	20004c48 	.word	0x20004c48
 80041a0:	20004c4c 	.word	0x20004c4c
 80041a4:	08015f34 	.word	0x08015f34
 80041a8:	08004311 	.word	0x08004311
 80041ac:	2000000c 	.word	0x2000000c
 80041b0:	20004d38 	.word	0x20004d38

080041b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b092      	sub	sp, #72	; 0x48
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	2230      	movs	r2, #48	; 0x30
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f010 feca 	bl	8014f6e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80041da:	f107 030c 	add.w	r3, r7, #12
 80041de:	2230      	movs	r2, #48	; 0x30
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f010 fec3 	bl	8014f6e <memset>

  for(q = p; q != NULL; q = q->next)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
 80041ec:	e045      	b.n	800427a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80041ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d902      	bls.n	80041fa <low_level_output+0x46>
      return ERR_IF;
 80041f4:	f06f 030b 	mvn.w	r3, #11
 80041f8:	e065      	b.n	80042c6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80041fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004200:	4613      	mov	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3348      	adds	r3, #72	; 0x48
 800420a:	443b      	add	r3, r7
 800420c:	3b3c      	subs	r3, #60	; 0x3c
 800420e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004212:	895b      	ldrh	r3, [r3, #10]
 8004214:	4619      	mov	r1, r3
 8004216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	3348      	adds	r3, #72	; 0x48
 8004222:	443b      	add	r3, r7
 8004224:	3b38      	subs	r3, #56	; 0x38
 8004226:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	2b00      	cmp	r3, #0
 800422c:	d011      	beq.n	8004252 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800422e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004230:	1e5a      	subs	r2, r3, #1
 8004232:	f107 000c 	add.w	r0, r7, #12
 8004236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004238:	460b      	mov	r3, r1
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	440b      	add	r3, r1
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	18c1      	adds	r1, r0, r3
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	3348      	adds	r3, #72	; 0x48
 800424c:	443b      	add	r3, r7
 800424e:	3b34      	subs	r3, #52	; 0x34
 8004250:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800425a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	3348      	adds	r3, #72	; 0x48
 8004266:	443b      	add	r3, r7
 8004268:	3b34      	subs	r3, #52	; 0x34
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800426e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004270:	3301      	adds	r3, #1
 8004272:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	643b      	str	r3, [r7, #64]	; 0x40
 800427a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1b6      	bne.n	80041ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	891b      	ldrh	r3, [r3, #8]
 8004284:	461a      	mov	r2, r3
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <low_level_output+0x11c>)
 8004288:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <low_level_output+0x11c>)
 800428c:	f107 030c 	add.w	r3, r7, #12
 8004290:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004292:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <low_level_output+0x11c>)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004298:	6838      	ldr	r0, [r7, #0]
 800429a:	f007 fcc7 	bl	800bc2c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800429e:	490c      	ldr	r1, [pc, #48]	; (80042d0 <low_level_output+0x11c>)
 80042a0:	480c      	ldr	r0, [pc, #48]	; (80042d4 <low_level_output+0x120>)
 80042a2:	f7fd f99b 	bl	80015dc <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80042a6:	bf00      	nop
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <low_level_output+0x124>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe17 	bl	8004ee4 <osSemaphoreAcquire>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f5      	bne.n	80042a8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80042bc:	4805      	ldr	r0, [pc, #20]	; (80042d4 <low_level_output+0x120>)
 80042be:	f7fd fb21 	bl	8001904 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80042c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3748      	adds	r7, #72	; 0x48
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20004d00 	.word	0x20004d00
 80042d4:	20004c50 	.word	0x20004c50
 80042d8:	20004c4c 	.word	0x20004c4c

080042dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <low_level_input+0x2c>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	4619      	mov	r1, r3
 80042f6:	4805      	ldr	r0, [pc, #20]	; (800430c <low_level_input+0x30>)
 80042f8:	f7fd f9cc 	bl	8001694 <HAL_ETH_ReadData>
  }

  return p;
 80042fc:	68fb      	ldr	r3, [r7, #12]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20004c44 	.word	0x20004c44
 800430c:	20004c50 	.word	0x20004c50

08004310 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <ethernetif_input+0x50>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fddb 	bl	8004ee4 <osSemaphoreAcquire>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f5      	bne.n	8004320 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004334:	68b8      	ldr	r0, [r7, #8]
 8004336:	f7ff ffd1 	bl	80042dc <low_level_input>
 800433a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	4798      	blx	r3
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f007 fbc4 	bl	800bae0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ea      	bne.n	8004334 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800435e:	e7df      	b.n	8004320 <ethernetif_input+0x10>
 8004360:	20004c48 	.word	0x20004c48

08004364 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <ethernetif_init+0x1c>
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <ethernetif_init+0x48>)
 8004374:	f240 222d 	movw	r2, #557	; 0x22d
 8004378:	490d      	ldr	r1, [pc, #52]	; (80043b0 <ethernetif_init+0x4c>)
 800437a:	480e      	ldr	r0, [pc, #56]	; (80043b4 <ethernetif_init+0x50>)
 800437c:	f010 fe94 	bl	80150a8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2273      	movs	r2, #115	; 0x73
 8004384:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2274      	movs	r2, #116	; 0x74
 800438c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <ethernetif_init+0x54>)
 8004394:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <ethernetif_init+0x58>)
 800439a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fdd1 	bl	8003f44 <low_level_init>

  return ERR_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	08015f3c 	.word	0x08015f3c
 80043b0:	08015f58 	.word	0x08015f58
 80043b4:	08015f68 	.word	0x08015f68
 80043b8:	08012cad 	.word	0x08012cad
 80043bc:	080041b5 	.word	0x080041b5

080043c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80043cc:	68f9      	ldr	r1, [r7, #12]
 80043ce:	4809      	ldr	r0, [pc, #36]	; (80043f4 <pbuf_free_custom+0x34>)
 80043d0:	f006 fcc2 	bl	800ad58 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <pbuf_free_custom+0x38>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <pbuf_free_custom+0x38>)
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <pbuf_free_custom+0x3c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fde2 	bl	8004fb0 <osSemaphoreRelease>
  }
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	08018f48 	.word	0x08018f48
 80043f8:	20004c44 	.word	0x20004c44
 80043fc:	20004c48 	.word	0x20004c48

08004400 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004404:	f7fc fd94 	bl	8000f30 <HAL_GetTick>
 8004408:	4603      	mov	r3, r0
}
 800440a:	4618      	mov	r0, r3
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08e      	sub	sp, #56	; 0x38
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a52      	ldr	r2, [pc, #328]	; (8004578 <HAL_ETH_MspInit+0x168>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f040 809e 	bne.w	8004570 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004434:	4b51      	ldr	r3, [pc, #324]	; (800457c <HAL_ETH_MspInit+0x16c>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	4a50      	ldr	r2, [pc, #320]	; (800457c <HAL_ETH_MspInit+0x16c>)
 800443a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800443e:	6313      	str	r3, [r2, #48]	; 0x30
 8004440:	4b4e      	ldr	r3, [pc, #312]	; (800457c <HAL_ETH_MspInit+0x16c>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	623b      	str	r3, [r7, #32]
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	4b4b      	ldr	r3, [pc, #300]	; (800457c <HAL_ETH_MspInit+0x16c>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	4a4a      	ldr	r2, [pc, #296]	; (800457c <HAL_ETH_MspInit+0x16c>)
 8004452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004456:	6313      	str	r3, [r2, #48]	; 0x30
 8004458:	4b48      	ldr	r3, [pc, #288]	; (800457c <HAL_ETH_MspInit+0x16c>)
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <HAL_ETH_MspInit+0x16c>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4a44      	ldr	r2, [pc, #272]	; (800457c <HAL_ETH_MspInit+0x16c>)
 800446a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800446e:	6313      	str	r3, [r2, #48]	; 0x30
 8004470:	4b42      	ldr	r3, [pc, #264]	; (800457c <HAL_ETH_MspInit+0x16c>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_ETH_MspInit+0x16c>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	4a3e      	ldr	r2, [pc, #248]	; (800457c <HAL_ETH_MspInit+0x16c>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6313      	str	r3, [r2, #48]	; 0x30
 8004488:	4b3c      	ldr	r3, [pc, #240]	; (800457c <HAL_ETH_MspInit+0x16c>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004494:	4b39      	ldr	r3, [pc, #228]	; (800457c <HAL_ETH_MspInit+0x16c>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4a38      	ldr	r2, [pc, #224]	; (800457c <HAL_ETH_MspInit+0x16c>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6313      	str	r3, [r2, #48]	; 0x30
 80044a0:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_ETH_MspInit+0x16c>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ac:	4b33      	ldr	r3, [pc, #204]	; (800457c <HAL_ETH_MspInit+0x16c>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	4a32      	ldr	r2, [pc, #200]	; (800457c <HAL_ETH_MspInit+0x16c>)
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	6313      	str	r3, [r2, #48]	; 0x30
 80044b8:	4b30      	ldr	r3, [pc, #192]	; (800457c <HAL_ETH_MspInit+0x16c>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044c4:	4b2d      	ldr	r3, [pc, #180]	; (800457c <HAL_ETH_MspInit+0x16c>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4a2c      	ldr	r2, [pc, #176]	; (800457c <HAL_ETH_MspInit+0x16c>)
 80044ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ce:	6313      	str	r3, [r2, #48]	; 0x30
 80044d0:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_ETH_MspInit+0x16c>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80044dc:	2332      	movs	r3, #50	; 0x32
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e0:	2302      	movs	r3, #2
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e8:	2303      	movs	r3, #3
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044ec:	230b      	movs	r3, #11
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f4:	4619      	mov	r1, r3
 80044f6:	4822      	ldr	r0, [pc, #136]	; (8004580 <HAL_ETH_MspInit+0x170>)
 80044f8:	f7fe f934 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80044fc:	2386      	movs	r3, #134	; 0x86
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800450c:	230b      	movs	r3, #11
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	481b      	ldr	r0, [pc, #108]	; (8004584 <HAL_ETH_MspInit+0x174>)
 8004518:	f7fe f924 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800451c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004522:	2302      	movs	r3, #2
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452a:	2303      	movs	r3, #3
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800452e:	230b      	movs	r3, #11
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004536:	4619      	mov	r1, r3
 8004538:	4813      	ldr	r0, [pc, #76]	; (8004588 <HAL_ETH_MspInit+0x178>)
 800453a:	f7fe f913 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800453e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004550:	230b      	movs	r3, #11
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004558:	4619      	mov	r1, r3
 800455a:	480c      	ldr	r0, [pc, #48]	; (800458c <HAL_ETH_MspInit+0x17c>)
 800455c:	f7fe f902 	bl	8002764 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	2105      	movs	r1, #5
 8004564:	203d      	movs	r0, #61	; 0x3d
 8004566:	f7fc fdcb 	bl	8001100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800456a:	203d      	movs	r0, #61	; 0x3d
 800456c:	f7fc fde4 	bl	8001138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004570:	bf00      	nop
 8004572:	3738      	adds	r7, #56	; 0x38
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40028000 	.word	0x40028000
 800457c:	40023800 	.word	0x40023800
 8004580:	40020800 	.word	0x40020800
 8004584:	40020000 	.word	0x40020000
 8004588:	40020400 	.word	0x40020400
 800458c:	40021800 	.word	0x40021800

08004590 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <ETH_PHY_IO_Init+0x10>)
 8004596:	f7fd fc7f 	bl	8001e98 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20004c50 	.word	0x20004c50

080045a4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return 0;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	68f9      	ldr	r1, [r7, #12]
 80045c6:	4807      	ldr	r0, [pc, #28]	; (80045e4 <ETH_PHY_IO_ReadReg+0x30>)
 80045c8:	f7fd face 	bl	8001b68 <HAL_ETH_ReadPHYRegister>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d6:	e000      	b.n	80045da <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20004c50 	.word	0x20004c50

080045e8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	4807      	ldr	r0, [pc, #28]	; (8004618 <ETH_PHY_IO_WriteReg+0x30>)
 80045fc:	f7fd faff 	bl	8001bfe <HAL_ETH_WritePHYRegister>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800460a:	e000      	b.n	800460e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20004c50 	.word	0x20004c50

0800461c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004620:	f7fc fc86 	bl	8000f30 <HAL_GetTick>
 8004624:	4603      	mov	r3, r0
}
 8004626:	4618      	mov	r0, r3
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b0a0      	sub	sp, #128	; 0x80
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004634:	f107 0308 	add.w	r3, r7, #8
 8004638:	2264      	movs	r2, #100	; 0x64
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f010 fc96 	bl	8014f6e <memset>
  int32_t PHYLinkState = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	67fb      	str	r3, [r7, #124]	; 0x7c
 800464a:	2300      	movs	r3, #0
 800464c:	67bb      	str	r3, [r7, #120]	; 0x78
 800464e:	2300      	movs	r3, #0
 8004650:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004656:	483a      	ldr	r0, [pc, #232]	; (8004740 <ethernet_link_thread+0x114>)
 8004658:	f7fc fbc1 	bl	8000dde <LAN8742_GetLinkState>
 800465c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800465e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004660:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004664:	089b      	lsrs	r3, r3, #2
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <ethernet_link_thread+0x5e>
 8004670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004672:	2b01      	cmp	r3, #1
 8004674:	dc09      	bgt.n	800468a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004676:	4833      	ldr	r0, [pc, #204]	; (8004744 <ethernet_link_thread+0x118>)
 8004678:	f7fc ff30 	bl	80014dc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800467c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800467e:	f006 fdeb 	bl	800b258 <netif_set_down>
    netif_set_link_down(netif);
 8004682:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004684:	f006 fe4e 	bl	800b324 <netif_set_link_down>
 8004688:	e055      	b.n	8004736 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800468a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d14e      	bne.n	8004736 <ethernet_link_thread+0x10a>
 8004698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800469a:	2b01      	cmp	r3, #1
 800469c:	dd4b      	ble.n	8004736 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800469e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a0:	3b02      	subs	r3, #2
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d82a      	bhi.n	80046fc <ethernet_link_thread+0xd0>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <ethernet_link_thread+0x80>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046cf 	.word	0x080046cf
 80046b4:	080046df 	.word	0x080046df
 80046b8:	080046ef 	.word	0x080046ef
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80046bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80046c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80046c8:	2301      	movs	r3, #1
 80046ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80046cc:	e017      	b.n	80046fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80046d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80046d8:	2301      	movs	r3, #1
 80046da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80046dc:	e00f      	b.n	80046fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80046de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046e2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80046e4:	2300      	movs	r3, #0
 80046e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80046e8:	2301      	movs	r3, #1
 80046ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80046ec:	e007      	b.n	80046fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80046f2:	2300      	movs	r3, #0
 80046f4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80046fa:	e000      	b.n	80046fe <ethernet_link_thread+0xd2>
    default:
      break;
 80046fc:	bf00      	nop
    }

    if(linkchanged)
 80046fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d018      	beq.n	8004736 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004704:	f107 0308 	add.w	r3, r7, #8
 8004708:	4619      	mov	r1, r3
 800470a:	480e      	ldr	r0, [pc, #56]	; (8004744 <ethernet_link_thread+0x118>)
 800470c:	f7fd fac0 	bl	8001c90 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004712:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004716:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004718:	f107 0308 	add.w	r3, r7, #8
 800471c:	4619      	mov	r1, r3
 800471e:	4809      	ldr	r0, [pc, #36]	; (8004744 <ethernet_link_thread+0x118>)
 8004720:	f7fd fba0 	bl	8001e64 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004724:	4807      	ldr	r0, [pc, #28]	; (8004744 <ethernet_link_thread+0x118>)
 8004726:	f7fc fd91 	bl	800124c <HAL_ETH_Start>
      netif_set_up(netif);
 800472a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800472c:	f006 fd28 	bl	800b180 <netif_set_up>
      netif_set_link_up(netif);
 8004730:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004732:	f006 fdc3 	bl	800b2bc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004736:	2064      	movs	r0, #100	; 0x64
 8004738:	f000 f9c2 	bl	8004ac0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800473c:	e78b      	b.n	8004656 <ethernet_link_thread+0x2a>
 800473e:	bf00      	nop
 8004740:	20004d38 	.word	0x20004d38
 8004744:	20004c50 	.word	0x20004c50

08004748 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af02      	add	r7, sp, #8
 800474e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004750:	4812      	ldr	r0, [pc, #72]	; (800479c <HAL_ETH_RxAllocateCallback+0x54>)
 8004752:	f006 fa8d 	bl	800ac70 <memp_malloc_pool>
 8004756:	60f8      	str	r0, [r7, #12]
  if (p)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d014      	beq.n	8004788 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f103 0220 	add.w	r2, r3, #32
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <HAL_ETH_RxAllocateCallback+0x58>)
 800476c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004776:	9201      	str	r2, [sp, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2241      	movs	r2, #65	; 0x41
 800477e:	2100      	movs	r1, #0
 8004780:	2000      	movs	r0, #0
 8004782:	f006 fff3 	bl	800b76c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004786:	e005      	b.n	8004794 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800478a:	2201      	movs	r2, #1
 800478c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08018f48 	.word	0x08018f48
 80047a0:	080043c1 	.word	0x080043c1
 80047a4:	20004c44 	.word	0x20004c44

080047a8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3b20      	subs	r3, #32
 80047c6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2200      	movs	r2, #0
 80047d2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e003      	b.n	80047f2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	e009      	b.n	8004814 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	891a      	ldrh	r2, [r3, #8]
 8004804:	887b      	ldrh	r3, [r7, #2]
 8004806:	4413      	add	r3, r2
 8004808:	b29a      	uxth	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f2      	bne.n	8004800 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800481a:	887b      	ldrh	r3, [r7, #2]
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff faa0 	bl	8003d64 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f007 f953 	bl	800bae0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004842:	b480      	push	{r7}
 8004844:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004846:	bf00      	nop
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004856:	f3ef 8305 	mrs	r3, IPSR
 800485a:	60bb      	str	r3, [r7, #8]
  return(result);
 800485c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004862:	f3ef 8310 	mrs	r3, PRIMASK
 8004866:	607b      	str	r3, [r7, #4]
  return(result);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800486e:	f3ef 8311 	mrs	r3, BASEPRI
 8004872:	603b      	str	r3, [r7, #0]
  return(result);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <osKernelInitialize+0x3a>
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <osKernelInitialize+0x64>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d103      	bne.n	800488a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004882:	f06f 0305 	mvn.w	r3, #5
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e00c      	b.n	80048a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <osKernelInitialize+0x64>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d105      	bne.n	800489e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <osKernelInitialize+0x64>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e002      	b.n	80048a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048a4:	68fb      	ldr	r3, [r7, #12]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20004d58 	.word	0x20004d58

080048b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048be:	f3ef 8305 	mrs	r3, IPSR
 80048c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80048c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ca:	f3ef 8310 	mrs	r3, PRIMASK
 80048ce:	607b      	str	r3, [r7, #4]
  return(result);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048d6:	f3ef 8311 	mrs	r3, BASEPRI
 80048da:	603b      	str	r3, [r7, #0]
  return(result);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <osKernelStart+0x3a>
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <osKernelStart+0x68>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d103      	bne.n	80048f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80048ea:	f06f 0305 	mvn.w	r3, #5
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e010      	b.n	8004914 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <osKernelStart+0x68>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d109      	bne.n	800490e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048fa:	f7ff ffa2 	bl	8004842 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <osKernelStart+0x68>)
 8004900:	2202      	movs	r2, #2
 8004902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004904:	f002 f9e4 	bl	8006cd0 <vTaskStartScheduler>
      stat = osOK;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e002      	b.n	8004914 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800490e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004914:	68fb      	ldr	r3, [r7, #12]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20004d58 	.word	0x20004d58

08004924 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800492a:	f3ef 8305 	mrs	r3, IPSR
 800492e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004930:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004936:	f3ef 8310 	mrs	r3, PRIMASK
 800493a:	607b      	str	r3, [r7, #4]
  return(result);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004942:	f3ef 8311 	mrs	r3, BASEPRI
 8004946:	603b      	str	r3, [r7, #0]
  return(result);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <osKernelGetTickCount+0x3a>
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <osKernelGetTickCount+0x4c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d103      	bne.n	800495e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004956:	f002 faed 	bl	8006f34 <xTaskGetTickCountFromISR>
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	e002      	b.n	8004964 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800495e:	f002 fad9 	bl	8006f14 <xTaskGetTickCount>
 8004962:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004964:	68fb      	ldr	r3, [r7, #12]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20004d58 	.word	0x20004d58

08004974 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b090      	sub	sp, #64	; 0x40
 8004978:	af04      	add	r7, sp, #16
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004984:	f3ef 8305 	mrs	r3, IPSR
 8004988:	61fb      	str	r3, [r7, #28]
  return(result);
 800498a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 808f 	bne.w	8004ab0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004992:	f3ef 8310 	mrs	r3, PRIMASK
 8004996:	61bb      	str	r3, [r7, #24]
  return(result);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d105      	bne.n	80049aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499e:	f3ef 8311 	mrs	r3, BASEPRI
 80049a2:	617b      	str	r3, [r7, #20]
  return(result);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <osThreadNew+0x3e>
 80049aa:	4b44      	ldr	r3, [pc, #272]	; (8004abc <osThreadNew+0x148>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d07e      	beq.n	8004ab0 <osThreadNew+0x13c>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d07b      	beq.n	8004ab0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80049bc:	2318      	movs	r3, #24
 80049be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d045      	beq.n	8004a5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <osThreadNew+0x6a>
        name = attr->name;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <osThreadNew+0x90>
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	2b38      	cmp	r3, #56	; 0x38
 80049f6:	d805      	bhi.n	8004a04 <osThreadNew+0x90>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <osThreadNew+0x94>
        return (NULL);
 8004a04:	2300      	movs	r3, #0
 8004a06:	e054      	b.n	8004ab2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00e      	beq.n	8004a3e <osThreadNew+0xca>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2bbb      	cmp	r3, #187	; 0xbb
 8004a26:	d90a      	bls.n	8004a3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d006      	beq.n	8004a3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <osThreadNew+0xca>
        mem = 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	e010      	b.n	8004a60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <osThreadNew+0xec>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d108      	bne.n	8004a60 <osThreadNew+0xec>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <osThreadNew+0xec>
          mem = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	e001      	b.n	8004a60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d110      	bne.n	8004a88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a6e:	9202      	str	r2, [sp, #8]
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f001 ff31 	bl	80068e4 <xTaskCreateStatic>
 8004a82:	4603      	mov	r3, r0
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e013      	b.n	8004ab0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d110      	bne.n	8004ab0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	f107 0310 	add.w	r3, r7, #16
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f001 ff82 	bl	80069aa <xTaskCreate>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <osThreadNew+0x13c>
          hTask = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ab0:	693b      	ldr	r3, [r7, #16]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3730      	adds	r7, #48	; 0x30
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20004d58 	.word	0x20004d58

08004ac0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac8:	f3ef 8305 	mrs	r3, IPSR
 8004acc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10f      	bne.n	8004af4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <osDelay+0x3c>
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <osDelay+0x58>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d103      	bne.n	8004afc <osDelay+0x3c>
    stat = osErrorISR;
 8004af4:	f06f 0305 	mvn.w	r3, #5
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e007      	b.n	8004b0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f002 f8ac 	bl	8006c64 <vTaskDelay>
    }
  }

  return (stat);
 8004b0c:	697b      	ldr	r3, [r7, #20]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20004d58 	.word	0x20004d58

08004b1c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b28:	f3ef 8305 	mrs	r3, IPSR
 8004b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8004b2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f040 8085 	bne.w	8004c40 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b36:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b42:	f3ef 8311 	mrs	r3, BASEPRI
 8004b46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <osMutexNew+0x3a>
 8004b4e:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <osMutexNew+0x130>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d074      	beq.n	8004c40 <osMutexNew+0x124>
    if (attr != NULL) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	e001      	b.n	8004b68 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <osMutexNew+0x5c>
      rmtx = 1U;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e001      	b.n	8004b7c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d15c      	bne.n	8004c40 <osMutexNew+0x124>
      mem = -1;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b8a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d015      	beq.n	8004bbe <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <osMutexNew+0x8c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b4f      	cmp	r3, #79	; 0x4f
 8004ba0:	d902      	bls.n	8004ba8 <osMutexNew+0x8c>
          mem = 1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e00c      	b.n	8004bc2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d108      	bne.n	8004bc2 <osMutexNew+0xa6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <osMutexNew+0xa6>
            mem = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	e001      	b.n	8004bc2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d112      	bne.n	8004bee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	2004      	movs	r0, #4
 8004bd6:	f000 feb8 	bl	800594a <xQueueCreateMutexStatic>
 8004bda:	6278      	str	r0, [r7, #36]	; 0x24
 8004bdc:	e016      	b.n	8004c0c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4619      	mov	r1, r3
 8004be4:	2001      	movs	r0, #1
 8004be6:	f000 feb0 	bl	800594a <xQueueCreateMutexStatic>
 8004bea:	6278      	str	r0, [r7, #36]	; 0x24
 8004bec:	e00e      	b.n	8004c0c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004bfa:	2004      	movs	r0, #4
 8004bfc:	f000 fe8d 	bl	800591a <xQueueCreateMutex>
 8004c00:	6278      	str	r0, [r7, #36]	; 0x24
 8004c02:	e003      	b.n	8004c0c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004c04:	2001      	movs	r0, #1
 8004c06:	f000 fe88 	bl	800591a <xQueueCreateMutex>
 8004c0a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <osMutexNew+0x110>
        if (attr != NULL) {
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <osMutexNew+0x104>
          name = attr->name;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e001      	b.n	8004c24 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c28:	f001 fdd4 	bl	80067d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <osMutexNew+0x124>
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20004d58 	.word	0x20004d58

08004c50 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c6e:	f3ef 8305 	mrs	r3, IPSR
 8004c72:	613b      	str	r3, [r7, #16]
  return(result);
 8004c74:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d105      	bne.n	8004c92 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c86:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <osMutexAcquire+0x52>
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <osMutexAcquire+0xb8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d103      	bne.n	8004ca2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004c9a:	f06f 0305 	mvn.w	r3, #5
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e02c      	b.n	8004cfc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004ca8:	f06f 0303 	mvn.w	r3, #3
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	e025      	b.n	8004cfc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d011      	beq.n	8004cda <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004cb6:	6839      	ldr	r1, [r7, #0]
 8004cb8:	69b8      	ldr	r0, [r7, #24]
 8004cba:	f000 fe97 	bl	80059ec <xQueueTakeMutexRecursive>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d01b      	beq.n	8004cfc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004cca:	f06f 0301 	mvn.w	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e014      	b.n	8004cfc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004cd2:	f06f 0302 	mvn.w	r3, #2
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e010      	b.n	8004cfc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	69b8      	ldr	r0, [r7, #24]
 8004cde:	f001 fa51 	bl	8006184 <xQueueSemaphoreTake>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d009      	beq.n	8004cfc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004cee:	f06f 0301 	mvn.w	r3, #1
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	e002      	b.n	8004cfc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004cf6:	f06f 0302 	mvn.w	r3, #2
 8004cfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20004d58 	.word	0x20004d58

08004d0c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d28:	f3ef 8305 	mrs	r3, IPSR
 8004d2c:	613b      	str	r3, [r7, #16]
  return(result);
 8004d2e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10f      	bne.n	8004d54 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d34:	f3ef 8310 	mrs	r3, PRIMASK
 8004d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d40:	f3ef 8311 	mrs	r3, BASEPRI
 8004d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <osMutexRelease+0x50>
 8004d4c:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <osMutexRelease+0x9c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d103      	bne.n	8004d5c <osMutexRelease+0x50>
    stat = osErrorISR;
 8004d54:	f06f 0305 	mvn.w	r3, #5
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e01f      	b.n	8004d9c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004d62:	f06f 0303 	mvn.w	r3, #3
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e018      	b.n	8004d9c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004d70:	69b8      	ldr	r0, [r7, #24]
 8004d72:	f000 fe05 	bl	8005980 <xQueueGiveMutexRecursive>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d00f      	beq.n	8004d9c <osMutexRelease+0x90>
        stat = osErrorResource;
 8004d7c:	f06f 0302 	mvn.w	r3, #2
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e00b      	b.n	8004d9c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004d84:	2300      	movs	r3, #0
 8004d86:	2200      	movs	r2, #0
 8004d88:	2100      	movs	r1, #0
 8004d8a:	69b8      	ldr	r0, [r7, #24]
 8004d8c:	f000 fed8 	bl	8005b40 <xQueueGenericSend>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d002      	beq.n	8004d9c <osMutexRelease+0x90>
        stat = osErrorResource;
 8004d96:	f06f 0302 	mvn.w	r3, #2
 8004d9a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20004d58 	.word	0x20004d58

08004dac <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	; 0x30
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dbc:	f3ef 8305 	mrs	r3, IPSR
 8004dc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dc2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 8086 	bne.w	8004ed6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dca:	f3ef 8310 	mrs	r3, PRIMASK
 8004dce:	617b      	str	r3, [r7, #20]
  return(result);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dda:	613b      	str	r3, [r7, #16]
  return(result);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <osSemaphoreNew+0x3e>
 8004de2:	4b3f      	ldr	r3, [pc, #252]	; (8004ee0 <osSemaphoreNew+0x134>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d075      	beq.n	8004ed6 <osSemaphoreNew+0x12a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d072      	beq.n	8004ed6 <osSemaphoreNew+0x12a>
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d86e      	bhi.n	8004ed6 <osSemaphoreNew+0x12a>
    mem = -1;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d006      	beq.n	8004e1a <osSemaphoreNew+0x6e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b4f      	cmp	r3, #79	; 0x4f
 8004e12:	d902      	bls.n	8004e1a <osSemaphoreNew+0x6e>
        mem = 1;
 8004e14:	2301      	movs	r3, #1
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	e00c      	b.n	8004e34 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d108      	bne.n	8004e34 <osSemaphoreNew+0x88>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <osSemaphoreNew+0x88>
          mem = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	623b      	str	r3, [r7, #32]
 8004e2e:	e001      	b.n	8004e34 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e3a:	d04c      	beq.n	8004ed6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d128      	bne.n	8004e94 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10a      	bne.n	8004e5e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	9200      	str	r2, [sp, #0]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	2001      	movs	r0, #1
 8004e56:	f000 fc5f 	bl	8005718 <xQueueGenericCreateStatic>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e5c:	e005      	b.n	8004e6a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004e5e:	2203      	movs	r2, #3
 8004e60:	2100      	movs	r1, #0
 8004e62:	2001      	movs	r0, #1
 8004e64:	f000 fcda 	bl	800581c <xQueueGenericCreate>
 8004e68:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d022      	beq.n	8004eb6 <osSemaphoreNew+0x10a>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01f      	beq.n	8004eb6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e76:	2300      	movs	r3, #0
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e7e:	f000 fe5f 	bl	8005b40 <xQueueGenericSend>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d016      	beq.n	8004eb6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e8a:	f001 fb55 	bl	8006538 <vQueueDelete>
            hSemaphore = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	e010      	b.n	8004eb6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d108      	bne.n	8004eac <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fdda 	bl	8005a5c <xQueueCreateCountingSemaphoreStatic>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24
 8004eaa:	e004      	b.n	8004eb6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fe0f 	bl	8005ad2 <xQueueCreateCountingSemaphore>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <osSemaphoreNew+0x11e>
          name = attr->name;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e001      	b.n	8004ece <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004ece:	69f9      	ldr	r1, [r7, #28]
 8004ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ed2:	f001 fc7f 	bl	80067d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3728      	adds	r7, #40	; 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20004d58 	.word	0x20004d58

08004ee4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d103      	bne.n	8004f04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004efc:	f06f 0303 	mvn.w	r3, #3
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e04b      	b.n	8004f9c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f04:	f3ef 8305 	mrs	r3, IPSR
 8004f08:	617b      	str	r3, [r7, #20]
  return(result);
 8004f0a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10f      	bne.n	8004f30 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f10:	f3ef 8310 	mrs	r3, PRIMASK
 8004f14:	613b      	str	r3, [r7, #16]
  return(result);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d026      	beq.n	8004f76 <osSemaphoreAcquire+0x92>
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <osSemaphoreAcquire+0xc4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d122      	bne.n	8004f76 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004f36:	f06f 0303 	mvn.w	r3, #3
 8004f3a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004f3c:	e02d      	b.n	8004f9a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004f42:	f107 0308 	add.w	r3, r7, #8
 8004f46:	461a      	mov	r2, r3
 8004f48:	2100      	movs	r1, #0
 8004f4a:	69b8      	ldr	r0, [r7, #24]
 8004f4c:	f001 fa2e 	bl	80063ac <xQueueReceiveFromISR>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d003      	beq.n	8004f5e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004f56:	f06f 0302 	mvn.w	r3, #2
 8004f5a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004f5c:	e01d      	b.n	8004f9a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01a      	beq.n	8004f9a <osSemaphoreAcquire+0xb6>
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <osSemaphoreAcquire+0xc8>)
 8004f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004f74:	e011      	b.n	8004f9a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	69b8      	ldr	r0, [r7, #24]
 8004f7a:	f001 f903 	bl	8006184 <xQueueSemaphoreTake>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d00b      	beq.n	8004f9c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004f8a:	f06f 0301 	mvn.w	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e004      	b.n	8004f9c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004f92:	f06f 0302 	mvn.w	r3, #2
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e000      	b.n	8004f9c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004f9a:	bf00      	nop
      }
    }
  }

  return (stat);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20004d58 	.word	0x20004d58
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004fc6:	f06f 0303 	mvn.w	r3, #3
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e03e      	b.n	800504c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fce:	f3ef 8305 	mrs	r3, IPSR
 8004fd2:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fda:	f3ef 8310 	mrs	r3, PRIMASK
 8004fde:	613b      	str	r3, [r7, #16]
  return(result);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01e      	beq.n	8005030 <osSemaphoreRelease+0x80>
 8004ff2:	4b19      	ldr	r3, [pc, #100]	; (8005058 <osSemaphoreRelease+0xa8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d11a      	bne.n	8005030 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	4619      	mov	r1, r3
 8005004:	69b8      	ldr	r0, [r7, #24]
 8005006:	f000 ff41 	bl	8005e8c <xQueueGiveFromISR>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d003      	beq.n	8005018 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005010:	f06f 0302 	mvn.w	r3, #2
 8005014:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005016:	e018      	b.n	800504a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d015      	beq.n	800504a <osSemaphoreRelease+0x9a>
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <osSemaphoreRelease+0xac>)
 8005020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800502e:	e00c      	b.n	800504a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005030:	2300      	movs	r3, #0
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	69b8      	ldr	r0, [r7, #24]
 8005038:	f000 fd82 	bl	8005b40 <xQueueGenericSend>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d004      	beq.n	800504c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005042:	f06f 0302 	mvn.w	r3, #2
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	e000      	b.n	800504c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800504a:	bf00      	nop
    }
  }

  return (stat);
 800504c:	69fb      	ldr	r3, [r7, #28]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20004d58 	.word	0x20004d58
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506c:	f3ef 8305 	mrs	r3, IPSR
 8005070:	617b      	str	r3, [r7, #20]
  return(result);
 8005072:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10f      	bne.n	8005098 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005078:	f3ef 8310 	mrs	r3, PRIMASK
 800507c:	613b      	str	r3, [r7, #16]
  return(result);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	60fb      	str	r3, [r7, #12]
  return(result);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <osSemaphoreDelete+0x40>
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <osSemaphoreDelete+0x68>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d103      	bne.n	80050a0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8005098:	f06f 0305 	mvn.w	r3, #5
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e00e      	b.n	80050be <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80050a6:	f06f 0303 	mvn.w	r3, #3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e007      	b.n	80050be <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80050ae:	69b8      	ldr	r0, [r7, #24]
 80050b0:	f001 fbba 	bl	8006828 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80050b8:	69b8      	ldr	r0, [r7, #24]
 80050ba:	f001 fa3d 	bl	8006538 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80050be:	69fb      	ldr	r3, [r7, #28]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20004d58 	.word	0x20004d58

080050cc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	; 0x30
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050dc:	f3ef 8305 	mrs	r3, IPSR
 80050e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80050e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d16f      	bne.n	80051c8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ec:	617b      	str	r3, [r7, #20]
  return(result);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050f4:	f3ef 8311 	mrs	r3, BASEPRI
 80050f8:	613b      	str	r3, [r7, #16]
  return(result);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <osMessageQueueNew+0x3c>
 8005100:	4b34      	ldr	r3, [pc, #208]	; (80051d4 <osMessageQueueNew+0x108>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d05f      	beq.n	80051c8 <osMessageQueueNew+0xfc>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d05c      	beq.n	80051c8 <osMessageQueueNew+0xfc>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d059      	beq.n	80051c8 <osMessageQueueNew+0xfc>
    mem = -1;
 8005114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005118:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d029      	beq.n	8005174 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d012      	beq.n	800514e <osMessageQueueNew+0x82>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b4f      	cmp	r3, #79	; 0x4f
 800512e:	d90e      	bls.n	800514e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <osMessageQueueNew+0x82>
        mem = 1;
 8005148:	2301      	movs	r3, #1
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	e014      	b.n	8005178 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d110      	bne.n	8005178 <osMessageQueueNew+0xac>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005162:	2b00      	cmp	r3, #0
 8005164:	d108      	bne.n	8005178 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <osMessageQueueNew+0xac>
          mem = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	e001      	b.n	8005178 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d10b      	bne.n	8005196 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2100      	movs	r1, #0
 8005188:	9100      	str	r1, [sp, #0]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fac3 	bl	8005718 <xQueueGenericCreateStatic>
 8005192:	6278      	str	r0, [r7, #36]	; 0x24
 8005194:	e008      	b.n	80051a8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800519c:	2200      	movs	r2, #0
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fb3b 	bl	800581c <xQueueGenericCreate>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <osMessageQueueNew+0xf0>
        name = attr->name;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e001      	b.n	80051c0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051c4:	f001 fb06 	bl	80067d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20004d58 	.word	0x20004d58

080051d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f0:	f3ef 8305 	mrs	r3, IPSR
 80051f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80051f6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10f      	bne.n	800521c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005200:	61bb      	str	r3, [r7, #24]
  return(result);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d105      	bne.n	8005214 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005208:	f3ef 8311 	mrs	r3, BASEPRI
 800520c:	617b      	str	r3, [r7, #20]
  return(result);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02c      	beq.n	800526e <osMessageQueuePut+0x96>
 8005214:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <osMessageQueuePut+0xe0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d128      	bne.n	800526e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <osMessageQueuePut+0x56>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <osMessageQueuePut+0x56>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800522e:	f06f 0303 	mvn.w	r3, #3
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005234:	e039      	b.n	80052aa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800523a:	f107 0210 	add.w	r2, r7, #16
 800523e:	2300      	movs	r3, #0
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	6a38      	ldr	r0, [r7, #32]
 8005244:	f000 fd82 	bl	8005d4c <xQueueGenericSendFromISR>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d003      	beq.n	8005256 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800524e:	f06f 0302 	mvn.w	r3, #2
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005254:	e029      	b.n	80052aa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d026      	beq.n	80052aa <osMessageQueuePut+0xd2>
 800525c:	4b17      	ldr	r3, [pc, #92]	; (80052bc <osMessageQueuePut+0xe4>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800526c:	e01d      	b.n	80052aa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <osMessageQueuePut+0xa2>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800527a:	f06f 0303 	mvn.w	r3, #3
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	e014      	b.n	80052ac <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005282:	2300      	movs	r3, #0
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	6a38      	ldr	r0, [r7, #32]
 800528a:	f000 fc59 	bl	8005b40 <xQueueGenericSend>
 800528e:	4603      	mov	r3, r0
 8005290:	2b01      	cmp	r3, #1
 8005292:	d00b      	beq.n	80052ac <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800529a:	f06f 0301 	mvn.w	r3, #1
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
 80052a0:	e004      	b.n	80052ac <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80052a2:	f06f 0302 	mvn.w	r3, #2
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
 80052a8:	e000      	b.n	80052ac <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20004d58 	.word	0x20004d58
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d6:	f3ef 8305 	mrs	r3, IPSR
 80052da:	61fb      	str	r3, [r7, #28]
  return(result);
 80052dc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e2:	f3ef 8310 	mrs	r3, PRIMASK
 80052e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d105      	bne.n	80052fa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052ee:	f3ef 8311 	mrs	r3, BASEPRI
 80052f2:	617b      	str	r3, [r7, #20]
  return(result);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02c      	beq.n	8005354 <osMessageQueueGet+0x94>
 80052fa:	4b28      	ldr	r3, [pc, #160]	; (800539c <osMessageQueueGet+0xdc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d128      	bne.n	8005354 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <osMessageQueueGet+0x54>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <osMessageQueueGet+0x54>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005314:	f06f 0303 	mvn.w	r3, #3
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800531a:	e038      	b.n	800538e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005320:	f107 0310 	add.w	r3, r7, #16
 8005324:	461a      	mov	r2, r3
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	6a38      	ldr	r0, [r7, #32]
 800532a:	f001 f83f 	bl	80063ac <xQueueReceiveFromISR>
 800532e:	4603      	mov	r3, r0
 8005330:	2b01      	cmp	r3, #1
 8005332:	d003      	beq.n	800533c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005334:	f06f 0302 	mvn.w	r3, #2
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800533a:	e028      	b.n	800538e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d025      	beq.n	800538e <osMessageQueueGet+0xce>
 8005342:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <osMessageQueueGet+0xe0>)
 8005344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005352:	e01c      	b.n	800538e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <osMessageQueueGet+0xa0>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005360:	f06f 0303 	mvn.w	r3, #3
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
 8005366:	e013      	b.n	8005390 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	6a38      	ldr	r0, [r7, #32]
 800536e:	f000 fe23 	bl	8005fb8 <xQueueReceive>
 8005372:	4603      	mov	r3, r0
 8005374:	2b01      	cmp	r3, #1
 8005376:	d00b      	beq.n	8005390 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800537e:	f06f 0301 	mvn.w	r3, #1
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	e004      	b.n	8005390 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005386:	f06f 0302 	mvn.w	r3, #2
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	e000      	b.n	8005390 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800538e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005392:	4618      	mov	r0, r3
 8005394:	3728      	adds	r7, #40	; 0x28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20004d58 	.word	0x20004d58
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <osMessageQueueGetCount+0x18>
    count = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e01e      	b.n	80053fa <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053bc:	f3ef 8305 	mrs	r3, IPSR
 80053c0:	617b      	str	r3, [r7, #20]
  return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c8:	f3ef 8310 	mrs	r3, PRIMASK
 80053cc:	613b      	str	r3, [r7, #16]
  return(result);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d4:	f3ef 8311 	mrs	r3, BASEPRI
 80053d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <osMessageQueueGetCount+0x4e>
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <osMessageQueueGetCount+0x60>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d104      	bne.n	80053f2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80053e8:	69b8      	ldr	r0, [r7, #24]
 80053ea:	f001 f885 	bl	80064f8 <uxQueueMessagesWaitingFromISR>
 80053ee:	61f8      	str	r0, [r7, #28]
 80053f0:	e003      	b.n	80053fa <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80053f2:	69b8      	ldr	r0, [r7, #24]
 80053f4:	f001 f860 	bl	80064b8 <uxQueueMessagesWaiting>
 80053f8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80053fa:	69fb      	ldr	r3, [r7, #28]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20004d58 	.word	0x20004d58

08005408 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005414:	f3ef 8305 	mrs	r3, IPSR
 8005418:	617b      	str	r3, [r7, #20]
  return(result);
 800541a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10f      	bne.n	8005440 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005420:	f3ef 8310 	mrs	r3, PRIMASK
 8005424:	613b      	str	r3, [r7, #16]
  return(result);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800542c:	f3ef 8311 	mrs	r3, BASEPRI
 8005430:	60fb      	str	r3, [r7, #12]
  return(result);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <osMessageQueueDelete+0x40>
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <osMessageQueueDelete+0x68>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d103      	bne.n	8005448 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8005440:	f06f 0305 	mvn.w	r3, #5
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	e00e      	b.n	8005466 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800544e:	f06f 0303 	mvn.w	r3, #3
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	e007      	b.n	8005466 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005456:	69b8      	ldr	r0, [r7, #24]
 8005458:	f001 f9e6 	bl	8006828 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8005460:	69b8      	ldr	r0, [r7, #24]
 8005462:	f001 f869 	bl	8006538 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20004d58 	.word	0x20004d58

08005474 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a06      	ldr	r2, [pc, #24]	; (80054a4 <vApplicationGetIdleTaskMemory+0x30>)
 800548a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20004d5c 	.word	0x20004d5c
 80054a4:	20004e18 	.word	0x20004e18

080054a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80054b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a06      	ldr	r2, [pc, #24]	; (80054d8 <vApplicationGetTimerTaskMemory+0x30>)
 80054be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054c6:	601a      	str	r2, [r3, #0]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20005018 	.word	0x20005018
 80054d8:	200050d4 	.word	0x200050d4

080054dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f103 0208 	add.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f103 0208 	add.w	r2, r3, #8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f103 0208 	add.w	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005594:	d103      	bne.n	800559e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e00c      	b.n	80055b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3308      	adds	r3, #8
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e002      	b.n	80055ac <vListInsert+0x2e>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d2f6      	bcs.n	80055a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6892      	ldr	r2, [r2, #8]
 8005606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6852      	ldr	r2, [r2, #4]
 8005610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d103      	bne.n	8005624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10c      	bne.n	8005672 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	b672      	cpsid	i
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	b662      	cpsie	i
 800566c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005672:	f002 fe13 	bl	800829c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	441a      	add	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	3b01      	subs	r3, #1
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	22ff      	movs	r2, #255	; 0xff
 80056be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d114      	bne.n	80056f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01a      	beq.n	8005706 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3310      	adds	r3, #16
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fdb5 	bl	8007244 <xTaskRemoveFromEventList>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d012      	beq.n	8005706 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <xQueueGenericReset+0xd0>)
 80056e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	e009      	b.n	8005706 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3310      	adds	r3, #16
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fef0 	bl	80054dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff feeb 	bl	80054dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005706:	f002 fdfd 	bl	8008304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800570a:	2301      	movs	r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08e      	sub	sp, #56	; 0x38
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10c      	bne.n	8005746 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	b672      	cpsid	i
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	b662      	cpsie	i
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10c      	bne.n	8005766 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	b672      	cpsid	i
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	b662      	cpsie	i
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <xQueueGenericCreateStatic+0x5a>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <xQueueGenericCreateStatic+0x5e>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <xQueueGenericCreateStatic+0x60>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10c      	bne.n	8005796 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	b672      	cpsid	i
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	b662      	cpsie	i
 8005790:	623b      	str	r3, [r7, #32]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <xQueueGenericCreateStatic+0x8a>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <xQueueGenericCreateStatic+0x8e>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <xQueueGenericCreateStatic+0x90>
 80057a6:	2300      	movs	r3, #0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10c      	bne.n	80057c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	b672      	cpsid	i
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	b662      	cpsie	i
 80057c0:	61fb      	str	r3, [r7, #28]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057c6:	2350      	movs	r3, #80	; 0x50
 80057c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d00c      	beq.n	80057ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	b672      	cpsid	i
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	b662      	cpsie	i
 80057e4:	61bb      	str	r3, [r7, #24]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f847 	bl	80058a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10c      	bne.n	800584a <xQueueGenericCreate+0x2e>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	b672      	cpsid	i
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	b662      	cpsie	i
 8005844:	613b      	str	r3, [r7, #16]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e004      	b.n	8005860 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3350      	adds	r3, #80	; 0x50
 8005864:	4618      	mov	r0, r3
 8005866:	f002 fe45 	bl	80084f4 <pvPortMalloc>
 800586a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d011      	beq.n	8005896 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	3350      	adds	r3, #80	; 0x50
 800587a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005884:	79fa      	ldrb	r2, [r7, #7]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f805 	bl	80058a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005896:	69bb      	ldr	r3, [r7, #24]
	}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d103      	bne.n	80058bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e002      	b.n	80058c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058ce:	2101      	movs	r1, #1
 80058d0:	69b8      	ldr	r0, [r7, #24]
 80058d2:	f7ff feb7 	bl	8005644 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00e      	beq.n	8005912 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005906:	2300      	movs	r3, #0
 8005908:	2200      	movs	r2, #0
 800590a:	2100      	movs	r1, #0
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f917 	bl	8005b40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	4603      	mov	r3, r0
 8005922:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005924:	2301      	movs	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	461a      	mov	r2, r3
 8005930:	6939      	ldr	r1, [r7, #16]
 8005932:	6978      	ldr	r0, [r7, #20]
 8005934:	f7ff ff72 	bl	800581c <xQueueGenericCreate>
 8005938:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ffd3 	bl	80058e6 <prvInitialiseMutex>

		return xNewQueue;
 8005940:	68fb      	ldr	r3, [r7, #12]
	}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800594a:	b580      	push	{r7, lr}
 800594c:	b088      	sub	sp, #32
 800594e:	af02      	add	r7, sp, #8
 8005950:	4603      	mov	r3, r0
 8005952:	6039      	str	r1, [r7, #0]
 8005954:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005956:	2301      	movs	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2200      	movs	r2, #0
 8005966:	6939      	ldr	r1, [r7, #16]
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f7ff fed5 	bl	8005718 <xQueueGenericCreateStatic>
 800596e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ffb8 	bl	80058e6 <prvInitialiseMutex>

		return xNewQueue;
 8005976:	68fb      	ldr	r3, [r7, #12]
	}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10c      	bne.n	80059ac <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	b672      	cpsid	i
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	b662      	cpsie	i
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	689c      	ldr	r4, [r3, #8]
 80059b0:	f001 fe12 	bl	80075d8 <xTaskGetCurrentTaskHandle>
 80059b4:	4603      	mov	r3, r0
 80059b6:	429c      	cmp	r4, r3
 80059b8:	d111      	bne.n	80059de <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80059cc:	2300      	movs	r3, #0
 80059ce:	2200      	movs	r2, #0
 80059d0:	2100      	movs	r1, #0
 80059d2:	6938      	ldr	r0, [r7, #16]
 80059d4:	f000 f8b4 	bl	8005b40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e001      	b.n	80059e2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80059e2:	697b      	ldr	r3, [r7, #20]
	}
 80059e4:	4618      	mov	r0, r3
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd90      	pop	{r4, r7, pc}

080059ec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10c      	bne.n	8005a1a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	b672      	cpsid	i
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	b662      	cpsie	i
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	689c      	ldr	r4, [r3, #8]
 8005a1e:	f001 fddb 	bl	80075d8 <xTaskGetCurrentTaskHandle>
 8005a22:	4603      	mov	r3, r0
 8005a24:	429c      	cmp	r4, r3
 8005a26:	d107      	bne.n	8005a38 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005a32:	2301      	movs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e00c      	b.n	8005a52 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6938      	ldr	r0, [r7, #16]
 8005a3c:	f000 fba2 	bl	8006184 <xQueueSemaphoreTake>
 8005a40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005a52:	697b      	ldr	r3, [r7, #20]
	}
 8005a54:	4618      	mov	r0, r3
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}

08005a5c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10c      	bne.n	8005a88 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	b672      	cpsid	i
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	b662      	cpsie	i
 8005a82:	61bb      	str	r3, [r7, #24]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d90c      	bls.n	8005aaa <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	b672      	cpsid	i
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	b662      	cpsie	i
 8005aa4:	617b      	str	r3, [r7, #20]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005aaa:	2302      	movs	r3, #2
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fe2f 	bl	8005718 <xQueueGenericCreateStatic>
 8005aba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
	}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10c      	bne.n	8005afc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	b672      	cpsid	i
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	b662      	cpsie	i
 8005af6:	613b      	str	r3, [r7, #16]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d90c      	bls.n	8005b1e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	b672      	cpsid	i
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	b662      	cpsie	i
 8005b18:	60fb      	str	r3, [r7, #12]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b1e:	2202      	movs	r2, #2
 8005b20:	2100      	movs	r1, #0
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff fe7a 	bl	800581c <xQueueGenericCreate>
 8005b28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b36:	697b      	ldr	r3, [r7, #20]
	}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08e      	sub	sp, #56	; 0x38
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10c      	bne.n	8005b76 <xQueueGenericSend+0x36>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	b672      	cpsid	i
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	b662      	cpsie	i
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <xQueueGenericSend+0x44>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <xQueueGenericSend+0x48>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <xQueueGenericSend+0x4a>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10c      	bne.n	8005ba8 <xQueueGenericSend+0x68>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	b672      	cpsid	i
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	b662      	cpsie	i
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d103      	bne.n	8005bb6 <xQueueGenericSend+0x76>
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <xQueueGenericSend+0x7a>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xQueueGenericSend+0x7c>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10c      	bne.n	8005bda <xQueueGenericSend+0x9a>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	b672      	cpsid	i
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	b662      	cpsie	i
 8005bd4:	623b      	str	r3, [r7, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bda:	f001 fd0d 	bl	80075f8 <xTaskGetSchedulerState>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <xQueueGenericSend+0xaa>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <xQueueGenericSend+0xae>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <xQueueGenericSend+0xb0>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10c      	bne.n	8005c0e <xQueueGenericSend+0xce>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	b672      	cpsid	i
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	b662      	cpsie	i
 8005c08:	61fb      	str	r3, [r7, #28]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c0e:	f002 fb45 	bl	800829c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <xQueueGenericSend+0xe4>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d129      	bne.n	8005c78 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c2a:	f000 fcc2 	bl	80065b2 <prvCopyDataToQueue>
 8005c2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d010      	beq.n	8005c5a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 fb01 	bl	8007244 <xTaskRemoveFromEventList>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d013      	beq.n	8005c70 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c48:	4b3f      	ldr	r3, [pc, #252]	; (8005d48 <xQueueGenericSend+0x208>)
 8005c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	e00a      	b.n	8005c70 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c60:	4b39      	ldr	r3, [pc, #228]	; (8005d48 <xQueueGenericSend+0x208>)
 8005c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c70:	f002 fb48 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e063      	b.n	8005d40 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c7e:	f002 fb41 	bl	8008304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	e05c      	b.n	8005d40 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 fb3d 	bl	8007310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c96:	2301      	movs	r3, #1
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c9a:	f002 fb33 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c9e:	f001 f88b 	bl	8006db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ca2:	f002 fafb 	bl	800829c <vPortEnterCritical>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cac:	b25b      	sxtb	r3, r3
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb2:	d103      	bne.n	8005cbc <xQueueGenericSend+0x17c>
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc2:	b25b      	sxtb	r3, r3
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cc8:	d103      	bne.n	8005cd2 <xQueueGenericSend+0x192>
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cd2:	f002 fb17 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cd6:	1d3a      	adds	r2, r7, #4
 8005cd8:	f107 0314 	add.w	r3, r7, #20
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fb2c 	bl	800733c <xTaskCheckForTimeOut>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d124      	bne.n	8005d34 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cec:	f000 fd59 	bl	80067a2 <prvIsQueueFull>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d018      	beq.n	8005d28 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	3310      	adds	r3, #16
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fa4c 	bl	800719c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d06:	f000 fce4 	bl	80066d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d0a:	f001 f863 	bl	8006dd4 <xTaskResumeAll>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f47f af7c 	bne.w	8005c0e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <xQueueGenericSend+0x208>)
 8005d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	e772      	b.n	8005c0e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2a:	f000 fcd2 	bl	80066d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d2e:	f001 f851 	bl	8006dd4 <xTaskResumeAll>
 8005d32:	e76c      	b.n	8005c0e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d36:	f000 fccc 	bl	80066d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d3a:	f001 f84b 	bl	8006dd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3738      	adds	r7, #56	; 0x38
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	; 0x38
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10c      	bne.n	8005d7e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	b672      	cpsid	i
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	b662      	cpsie	i
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <xQueueGenericSendFromISR+0x40>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <xQueueGenericSendFromISR+0x44>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <xQueueGenericSendFromISR+0x46>
 8005d90:	2300      	movs	r3, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
 8005daa:	623b      	str	r3, [r7, #32]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d103      	bne.n	8005dbe <xQueueGenericSendFromISR+0x72>
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <xQueueGenericSendFromISR+0x76>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <xQueueGenericSendFromISR+0x78>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10c      	bne.n	8005de2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	b672      	cpsid	i
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	b662      	cpsie	i
 8005ddc:	61fb      	str	r3, [r7, #28]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005de2:	f002 fb43 	bl	800846c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005de6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	b672      	cpsid	i
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	b662      	cpsie	i
 8005dfe:	61ba      	str	r2, [r7, #24]
 8005e00:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e02:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <xQueueGenericSendFromISR+0xcc>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d12c      	bne.n	8005e72 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e28:	f000 fbc3 	bl	80065b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e2c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e34:	d112      	bne.n	8005e5c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	3324      	adds	r3, #36	; 0x24
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 f9fe 	bl	8007244 <xTaskRemoveFromEventList>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00e      	beq.n	8005e6c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e007      	b.n	8005e6c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e60:	3301      	adds	r3, #1
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	b25a      	sxtb	r2, r3
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005e70:	e001      	b.n	8005e76 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3738      	adds	r7, #56	; 0x38
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08e      	sub	sp, #56	; 0x38
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10c      	bne.n	8005eba <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	b672      	cpsid	i
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	b662      	cpsie	i
 8005eb4:	623b      	str	r3, [r7, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00c      	beq.n	8005edc <xQueueGiveFromISR+0x50>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	b672      	cpsid	i
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	b662      	cpsie	i
 8005ed6:	61fb      	str	r3, [r7, #28]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <xQueueGiveFromISR+0x60>
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <xQueueGiveFromISR+0x64>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <xQueueGiveFromISR+0x66>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10c      	bne.n	8005f10 <xQueueGiveFromISR+0x84>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	b672      	cpsid	i
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	b662      	cpsie	i
 8005f0a:	61bb      	str	r3, [r7, #24]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f10:	f002 faac 	bl	800846c <vPortValidateInterruptPriority>
	__asm volatile
 8005f14:	f3ef 8211 	mrs	r2, BASEPRI
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	b672      	cpsid	i
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	b662      	cpsie	i
 8005f2c:	617a      	str	r2, [r7, #20]
 8005f2e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f30:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d22b      	bcs.n	8005f9c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f5e:	d112      	bne.n	8005f86 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d016      	beq.n	8005f96 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	3324      	adds	r3, #36	; 0x24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f969 	bl	8007244 <xTaskRemoveFromEventList>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00e      	beq.n	8005f96 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e007      	b.n	8005f96 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	b25a      	sxtb	r2, r3
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f96:	2301      	movs	r3, #1
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	e001      	b.n	8005fa0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f383 8811 	msr	BASEPRI, r3
}
 8005faa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3738      	adds	r7, #56	; 0x38
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08c      	sub	sp, #48	; 0x30
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10c      	bne.n	8005fec <xQueueReceive+0x34>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	b672      	cpsid	i
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	b662      	cpsie	i
 8005fe6:	623b      	str	r3, [r7, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <xQueueReceive+0x42>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <xQueueReceive+0x46>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <xQueueReceive+0x48>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10c      	bne.n	800601e <xQueueReceive+0x66>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	b672      	cpsid	i
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	b662      	cpsie	i
 8006018:	61fb      	str	r3, [r7, #28]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800601e:	f001 faeb 	bl	80075f8 <xTaskGetSchedulerState>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <xQueueReceive+0x76>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <xQueueReceive+0x7a>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <xQueueReceive+0x7c>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10c      	bne.n	8006052 <xQueueReceive+0x9a>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	b672      	cpsid	i
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	b662      	cpsie	i
 800604c:	61bb      	str	r3, [r7, #24]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006052:	f002 f923 	bl	800829c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01f      	beq.n	80060a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f000 fb0e 	bl	8006686 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	1e5a      	subs	r2, r3, #1
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	3310      	adds	r3, #16
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f8e0 	bl	8007244 <xTaskRemoveFromEventList>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800608a:	4b3d      	ldr	r3, [pc, #244]	; (8006180 <xQueueReceive+0x1c8>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800609a:	f002 f933 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 800609e:	2301      	movs	r3, #1
 80060a0:	e069      	b.n	8006176 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060a8:	f002 f92c 	bl	8008304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e062      	b.n	8006176 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060b6:	f107 0310 	add.w	r3, r7, #16
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 f928 	bl	8007310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060c0:	2301      	movs	r3, #1
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060c4:	f002 f91e 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060c8:	f000 fe76 	bl	8006db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060cc:	f002 f8e6 	bl	800829c <vPortEnterCritical>
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d6:	b25b      	sxtb	r3, r3
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060dc:	d103      	bne.n	80060e6 <xQueueReceive+0x12e>
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ec:	b25b      	sxtb	r3, r3
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060f2:	d103      	bne.n	80060fc <xQueueReceive+0x144>
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060fc:	f002 f902 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006100:	1d3a      	adds	r2, r7, #4
 8006102:	f107 0310 	add.w	r3, r7, #16
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f001 f917 	bl	800733c <xTaskCheckForTimeOut>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d123      	bne.n	800615c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006116:	f000 fb2e 	bl	8006776 <prvIsQueueEmpty>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d017      	beq.n	8006150 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	3324      	adds	r3, #36	; 0x24
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f001 f837 	bl	800719c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800612e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006130:	f000 facf 	bl	80066d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006134:	f000 fe4e 	bl	8006dd4 <xTaskResumeAll>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d189      	bne.n	8006052 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <xQueueReceive+0x1c8>)
 8006140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	e780      	b.n	8006052 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006152:	f000 fabe 	bl	80066d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006156:	f000 fe3d 	bl	8006dd4 <xTaskResumeAll>
 800615a:	e77a      	b.n	8006052 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800615c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800615e:	f000 fab8 	bl	80066d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006162:	f000 fe37 	bl	8006dd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006168:	f000 fb05 	bl	8006776 <prvIsQueueEmpty>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	f43f af6f 	beq.w	8006052 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006176:	4618      	mov	r0, r3
 8006178:	3730      	adds	r7, #48	; 0x30
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08e      	sub	sp, #56	; 0x38
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10c      	bne.n	80061ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	b672      	cpsid	i
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	b662      	cpsie	i
 80061b4:	623b      	str	r3, [r7, #32]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00c      	beq.n	80061dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	b672      	cpsid	i
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	b662      	cpsie	i
 80061d6:	61fb      	str	r3, [r7, #28]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061dc:	f001 fa0c 	bl	80075f8 <xTaskGetSchedulerState>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <xQueueSemaphoreTake+0x68>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <xQueueSemaphoreTake+0x6c>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <xQueueSemaphoreTake+0x6e>
 80061f0:	2300      	movs	r3, #0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10c      	bne.n	8006210 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	b672      	cpsid	i
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	b662      	cpsie	i
 800620a:	61bb      	str	r3, [r7, #24]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006210:	f002 f844 	bl	800829c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	d024      	beq.n	800626a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	1e5a      	subs	r2, r3, #1
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006230:	f001 fb60 	bl	80078f4 <pvTaskIncrementMutexHeldCount>
 8006234:	4602      	mov	r2, r0
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00f      	beq.n	8006262 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	3310      	adds	r3, #16
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fffc 	bl	8007244 <xTaskRemoveFromEventList>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006252:	4b55      	ldr	r3, [pc, #340]	; (80063a8 <xQueueSemaphoreTake+0x224>)
 8006254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006262:	f002 f84f 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 8006266:	2301      	movs	r3, #1
 8006268:	e099      	b.n	800639e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d113      	bne.n	8006298 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	b672      	cpsid	i
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	b662      	cpsie	i
 800628a:	617b      	str	r3, [r7, #20]
}
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006290:	f002 f838 	bl	8008304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006294:	2300      	movs	r3, #0
 8006296:	e082      	b.n	800639e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 f834 	bl	8007310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ac:	f002 f82a 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062b0:	f000 fd82 	bl	8006db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062b4:	f001 fff2 	bl	800829c <vPortEnterCritical>
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c4:	d103      	bne.n	80062ce <xQueueSemaphoreTake+0x14a>
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062da:	d103      	bne.n	80062e4 <xQueueSemaphoreTake+0x160>
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e4:	f002 f80e 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e8:	463a      	mov	r2, r7
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f823 	bl	800733c <xTaskCheckForTimeOut>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d132      	bne.n	8006362 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062fe:	f000 fa3a 	bl	8006776 <prvIsQueueEmpty>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d026      	beq.n	8006356 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006310:	f001 ffc4 	bl	800829c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4618      	mov	r0, r3
 800631a:	f001 f98b 	bl	8007634 <xTaskPriorityInherit>
 800631e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006320:	f001 fff0 	bl	8008304 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f000 ff35 	bl	800719c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006334:	f000 f9cd 	bl	80066d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006338:	f000 fd4c 	bl	8006dd4 <xTaskResumeAll>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	f47f af66 	bne.w	8006210 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006344:	4b18      	ldr	r3, [pc, #96]	; (80063a8 <xQueueSemaphoreTake+0x224>)
 8006346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	e75c      	b.n	8006210 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006358:	f000 f9bb 	bl	80066d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800635c:	f000 fd3a 	bl	8006dd4 <xTaskResumeAll>
 8006360:	e756      	b.n	8006210 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006364:	f000 f9b5 	bl	80066d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006368:	f000 fd34 	bl	8006dd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800636c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800636e:	f000 fa02 	bl	8006776 <prvIsQueueEmpty>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	f43f af4b 	beq.w	8006210 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006380:	f001 ff8c 	bl	800829c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006386:	f000 f8fc 	bl	8006582 <prvGetDisinheritPriorityAfterTimeout>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006392:	4618      	mov	r0, r3
 8006394:	f001 fa28 	bl	80077e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006398:	f001 ffb4 	bl	8008304 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800639c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3738      	adds	r7, #56	; 0x38
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08e      	sub	sp, #56	; 0x38
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10c      	bne.n	80063dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	b672      	cpsid	i
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	b662      	cpsie	i
 80063d6:	623b      	str	r3, [r7, #32]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <xQueueReceiveFromISR+0x3e>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <xQueueReceiveFromISR+0x42>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xQueueReceiveFromISR+0x44>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <xQueueReceiveFromISR+0x62>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	b672      	cpsid	i
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	b662      	cpsie	i
 8006408:	61fb      	str	r3, [r7, #28]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800640e:	f002 f82d 	bl	800846c <vPortValidateInterruptPriority>
	__asm volatile
 8006412:	f3ef 8211 	mrs	r2, BASEPRI
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	b672      	cpsid	i
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	b662      	cpsie	i
 800642a:	61ba      	str	r2, [r7, #24]
 800642c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800642e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d02f      	beq.n	800649e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800644c:	f000 f91b 	bl	8006686 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	1e5a      	subs	r2, r3, #1
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006460:	d112      	bne.n	8006488 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	3310      	adds	r3, #16
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fee8 	bl	8007244 <xTaskRemoveFromEventList>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e007      	b.n	8006498 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800648c:	3301      	adds	r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	b25a      	sxtb	r2, r3
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006498:	2301      	movs	r3, #1
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
 800649c:	e001      	b.n	80064a2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f383 8811 	msr	BASEPRI, r3
}
 80064ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3738      	adds	r7, #56	; 0x38
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10c      	bne.n	80064e0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	b672      	cpsid	i
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	b662      	cpsie	i
 80064da:	60bb      	str	r3, [r7, #8]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80064e0:	f001 fedc 	bl	800829c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80064ea:	f001 ff0b 	bl	8008304 <vPortExitCritical>

	return uxReturn;
 80064ee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10c      	bne.n	8006524 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	b672      	cpsid	i
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	b662      	cpsie	i
 800651e:	60fb      	str	r3, [r7, #12]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800652a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800652c:	4618      	mov	r0, r3
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10c      	bne.n	8006564 <vQueueDelete+0x2c>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	b672      	cpsid	i
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	b662      	cpsie	i
 800655e:	60bb      	str	r3, [r7, #8]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 f95f 	bl	8006828 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f002 f887 	bl	8008688 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	d006      	beq.n	80065a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e001      	b.n	80065a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065a4:	68fb      	ldr	r3, [r7, #12]
	}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10d      	bne.n	80065ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d14d      	bne.n	8006674 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f891 	bl	8007704 <xTaskPriorityDisinherit>
 80065e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
 80065ea:	e043      	b.n	8006674 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d119      	bne.n	8006626 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6858      	ldr	r0, [r3, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	461a      	mov	r2, r3
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	f00e fca8 	bl	8014f52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	441a      	add	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	429a      	cmp	r2, r3
 800661a:	d32b      	bcc.n	8006674 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	e026      	b.n	8006674 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68d8      	ldr	r0, [r3, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	461a      	mov	r2, r3
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	f00e fc8e 	bl	8014f52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	425b      	negs	r3, r3
 8006640:	441a      	add	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d207      	bcs.n	8006662 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	425b      	negs	r3, r3
 800665c:	441a      	add	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d105      	bne.n	8006674 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3b01      	subs	r3, #1
 8006672:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800667c:	697b      	ldr	r3, [r7, #20]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d018      	beq.n	80066ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d303      	bcc.n	80066ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68d9      	ldr	r1, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	461a      	mov	r2, r3
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f00e fc44 	bl	8014f52 <memcpy>
	}
}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066da:	f001 fddf 	bl	800829c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e6:	e011      	b.n	800670c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fda5 	bl	8007244 <xTaskRemoveFromEventList>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006700:	f000 fe82 	bl	8007408 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	3b01      	subs	r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800670c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dce9      	bgt.n	80066e8 <prvUnlockQueue+0x16>
 8006714:	e000      	b.n	8006718 <prvUnlockQueue+0x46>
					break;
 8006716:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	22ff      	movs	r2, #255	; 0xff
 800671c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006720:	f001 fdf0 	bl	8008304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006724:	f001 fdba 	bl	800829c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800672e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006730:	e011      	b.n	8006756 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d012      	beq.n	8006760 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3310      	adds	r3, #16
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fd80 	bl	8007244 <xTaskRemoveFromEventList>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800674a:	f000 fe5d 	bl	8007408 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	3b01      	subs	r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800675a:	2b00      	cmp	r3, #0
 800675c:	dce9      	bgt.n	8006732 <prvUnlockQueue+0x60>
 800675e:	e000      	b.n	8006762 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006760:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800676a:	f001 fdcb 	bl	8008304 <vPortExitCritical>
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800677e:	f001 fd8d 	bl	800829c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	e001      	b.n	8006794 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006794:	f001 fdb6 	bl	8008304 <vPortExitCritical>

	return xReturn;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067aa:	f001 fd77 	bl	800829c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d102      	bne.n	80067c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067ba:	2301      	movs	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e001      	b.n	80067c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067c4:	f001 fd9e 	bl	8008304 <vPortExitCritical>

	return xReturn;
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e014      	b.n	800680e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067e4:	4a0f      	ldr	r2, [pc, #60]	; (8006824 <vQueueAddToRegistry+0x50>)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10b      	bne.n	8006808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067f0:	490c      	ldr	r1, [pc, #48]	; (8006824 <vQueueAddToRegistry+0x50>)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <vQueueAddToRegistry+0x50>)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	4413      	add	r3, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006806:	e006      	b.n	8006816 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b07      	cmp	r3, #7
 8006812:	d9e7      	bls.n	80067e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	200054d4 	.word	0x200054d4

08006828 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e016      	b.n	8006864 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006836:	4a10      	ldr	r2, [pc, #64]	; (8006878 <vQueueUnregisterQueue+0x50>)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4413      	add	r3, r2
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d10b      	bne.n	800685e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <vQueueUnregisterQueue+0x50>)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2100      	movs	r1, #0
 800684c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006850:	4a09      	ldr	r2, [pc, #36]	; (8006878 <vQueueUnregisterQueue+0x50>)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	4413      	add	r3, r2
 8006858:	2200      	movs	r2, #0
 800685a:	605a      	str	r2, [r3, #4]
				break;
 800685c:	e006      	b.n	800686c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b07      	cmp	r3, #7
 8006868:	d9e5      	bls.n	8006836 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	200054d4 	.word	0x200054d4

0800687c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800688c:	f001 fd06 	bl	800829c <vPortEnterCritical>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006896:	b25b      	sxtb	r3, r3
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800689c:	d103      	bne.n	80068a6 <vQueueWaitForMessageRestricted+0x2a>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ac:	b25b      	sxtb	r3, r3
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b2:	d103      	bne.n	80068bc <vQueueWaitForMessageRestricted+0x40>
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068bc:	f001 fd22 	bl	8008304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3324      	adds	r3, #36	; 0x24
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fc89 	bl	80071e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068d6:	6978      	ldr	r0, [r7, #20]
 80068d8:	f7ff fefb 	bl	80066d2 <prvUnlockQueue>
	}
 80068dc:	bf00      	nop
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af04      	add	r7, sp, #16
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <xTaskCreateStatic+0x2e>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	b672      	cpsid	i
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	b662      	cpsie	i
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10c      	bne.n	8006932 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	b672      	cpsid	i
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	b662      	cpsie	i
 800692c:	61fb      	str	r3, [r7, #28]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006932:	23bc      	movs	r3, #188	; 0xbc
 8006934:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2bbc      	cmp	r3, #188	; 0xbc
 800693a:	d00c      	beq.n	8006956 <xTaskCreateStatic+0x72>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	b672      	cpsid	i
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	b662      	cpsie	i
 8006950:	61bb      	str	r3, [r7, #24]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006956:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01e      	beq.n	800699c <xTaskCreateStatic+0xb8>
 800695e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01b      	beq.n	800699c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800696c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	2202      	movs	r2, #2
 8006972:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006976:	2300      	movs	r3, #0
 8006978:	9303      	str	r3, [sp, #12]
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	9302      	str	r3, [sp, #8]
 800697e:	f107 0314 	add.w	r3, r7, #20
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f850 	bl	8006a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006996:	f000 f8f5 	bl	8006b84 <prvAddNewTaskToReadyList>
 800699a:	e001      	b.n	80069a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069a0:	697b      	ldr	r3, [r7, #20]
	}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3728      	adds	r7, #40	; 0x28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b08c      	sub	sp, #48	; 0x30
 80069ae:	af04      	add	r7, sp, #16
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ba:	88fb      	ldrh	r3, [r7, #6]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fd98 	bl	80084f4 <pvPortMalloc>
 80069c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00e      	beq.n	80069ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069cc:	20bc      	movs	r0, #188	; 0xbc
 80069ce:	f001 fd91 	bl	80084f4 <pvPortMalloc>
 80069d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
 80069e0:	e005      	b.n	80069ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	f001 fe50 	bl	8008688 <vPortFree>
 80069e8:	e001      	b.n	80069ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d017      	beq.n	8006a24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069fc:	88fa      	ldrh	r2, [r7, #6]
 80069fe:	2300      	movs	r3, #0
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	9302      	str	r3, [sp, #8]
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f80e 	bl	8006a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a18:	69f8      	ldr	r0, [r7, #28]
 8006a1a:	f000 f8b3 	bl	8006b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	e002      	b.n	8006a2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	21a5      	movs	r1, #165	; 0xa5
 8006a4e:	f00e fa8e 	bl	8014f6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006a5c:	440b      	add	r3, r1
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f023 0307 	bic.w	r3, r3, #7
 8006a6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00c      	beq.n	8006a90 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	b672      	cpsid	i
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	b662      	cpsie	i
 8006a8a:	617b      	str	r3, [r7, #20]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01f      	beq.n	8006ad6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e012      	b.n	8006ac2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	7819      	ldrb	r1, [r3, #0]
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3334      	adds	r3, #52	; 0x34
 8006aac:	460a      	mov	r2, r1
 8006aae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d006      	beq.n	8006aca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b0f      	cmp	r3, #15
 8006ac6:	d9e9      	bls.n	8006a9c <prvInitialiseNewTask+0x68>
 8006ac8:	e000      	b.n	8006acc <prvInitialiseNewTask+0x98>
			{
				break;
 8006aca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad4:	e003      	b.n	8006ade <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b37      	cmp	r3, #55	; 0x37
 8006ae2:	d901      	bls.n	8006ae8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ae4:	2337      	movs	r3, #55	; 0x37
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	2200      	movs	r2, #0
 8006af8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fd0c 	bl	800551c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	3318      	adds	r3, #24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe fd07 	bl	800551c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	3354      	adds	r3, #84	; 0x54
 8006b38:	2260      	movs	r2, #96	; 0x60
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f00e fa16 	bl	8014f6e <memset>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <prvInitialiseNewTask+0x144>)
 8006b46:	659a      	str	r2, [r3, #88]	; 0x58
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	4a0c      	ldr	r2, [pc, #48]	; (8006b7c <prvInitialiseNewTask+0x148>)
 8006b4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	4a0b      	ldr	r2, [pc, #44]	; (8006b80 <prvInitialiseNewTask+0x14c>)
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	69b8      	ldr	r0, [r7, #24]
 8006b5a:	f001 fa8f 	bl	800807c <pxPortInitialiseStack>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b70:	bf00      	nop
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	0801908c 	.word	0x0801908c
 8006b7c:	080190ac 	.word	0x080190ac
 8006b80:	0801906c 	.word	0x0801906c

08006b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b8c:	f001 fb86 	bl	800829c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b90:	4b2d      	ldr	r3, [pc, #180]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a2c      	ldr	r2, [pc, #176]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b9a:	4b2c      	ldr	r3, [pc, #176]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d110      	bne.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bb0:	f000 fc4e 	bl	8007450 <prvInitialiseTaskLists>
 8006bb4:	e00d      	b.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bb6:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <prvAddNewTaskToReadyList+0xcc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bbe:	4b23      	ldr	r3, [pc, #140]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d802      	bhi.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bd2:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <prvAddNewTaskToReadyList+0xd4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d903      	bls.n	8006bf8 <prvAddNewTaskToReadyList+0x74>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <prvAddNewTaskToReadyList+0xd4>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <prvAddNewTaskToReadyList+0xd8>)
 8006c06:	441a      	add	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7fe fc91 	bl	8005536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c14:	f001 fb76 	bl	8008304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <prvAddNewTaskToReadyList+0xcc>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00e      	beq.n	8006c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d207      	bcs.n	8006c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <prvAddNewTaskToReadyList+0xdc>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	200059e8 	.word	0x200059e8
 8006c4c:	20005514 	.word	0x20005514
 8006c50:	200059f4 	.word	0x200059f4
 8006c54:	20005a04 	.word	0x20005a04
 8006c58:	200059f0 	.word	0x200059f0
 8006c5c:	20005518 	.word	0x20005518
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d019      	beq.n	8006caa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <vTaskDelay+0x64>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00c      	beq.n	8006c98 <vTaskDelay+0x34>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	60bb      	str	r3, [r7, #8]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006c98:	f000 f88e 	bl	8006db8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fe3c 	bl	800791c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ca4:	f000 f896 	bl	8006dd4 <xTaskResumeAll>
 8006ca8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d107      	bne.n	8006cc0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <vTaskDelay+0x68>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20005a10 	.word	0x20005a10
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cde:	463a      	mov	r2, r7
 8006ce0:	1d39      	adds	r1, r7, #4
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fbc4 	bl	8005474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	9202      	str	r2, [sp, #8]
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	460a      	mov	r2, r1
 8006cfe:	4926      	ldr	r1, [pc, #152]	; (8006d98 <vTaskStartScheduler+0xc8>)
 8006d00:	4826      	ldr	r0, [pc, #152]	; (8006d9c <vTaskStartScheduler+0xcc>)
 8006d02:	f7ff fdef 	bl	80068e4 <xTaskCreateStatic>
 8006d06:	4603      	mov	r3, r0
 8006d08:	4a25      	ldr	r2, [pc, #148]	; (8006da0 <vTaskStartScheduler+0xd0>)
 8006d0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d0c:	4b24      	ldr	r3, [pc, #144]	; (8006da0 <vTaskStartScheduler+0xd0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d14:	2301      	movs	r3, #1
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e001      	b.n	8006d1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d102      	bne.n	8006d2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d24:	f000 fe4e 	bl	80079c4 <xTimerCreateTimerTask>
 8006d28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d11d      	bne.n	8006d6c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	b672      	cpsid	i
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	b662      	cpsie	i
 8006d44:	613b      	str	r3, [r7, #16]
}
 8006d46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d48:	4b16      	ldr	r3, [pc, #88]	; (8006da4 <vTaskStartScheduler+0xd4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3354      	adds	r3, #84	; 0x54
 8006d4e:	4a16      	ldr	r2, [pc, #88]	; (8006da8 <vTaskStartScheduler+0xd8>)
 8006d50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <vTaskStartScheduler+0xdc>)
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <vTaskStartScheduler+0xe0>)
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d60:	4b14      	ldr	r3, [pc, #80]	; (8006db4 <vTaskStartScheduler+0xe4>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d66:	f001 fa1b 	bl	80081a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d6a:	e010      	b.n	8006d8e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d72:	d10c      	bne.n	8006d8e <vTaskStartScheduler+0xbe>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	b672      	cpsid	i
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	b662      	cpsie	i
 8006d88:	60fb      	str	r3, [r7, #12]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <vTaskStartScheduler+0xbc>
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	08015f90 	.word	0x08015f90
 8006d9c:	08007421 	.word	0x08007421
 8006da0:	20005a0c 	.word	0x20005a0c
 8006da4:	20005514 	.word	0x20005514
 8006da8:	2000002c 	.word	0x2000002c
 8006dac:	20005a08 	.word	0x20005a08
 8006db0:	200059f4 	.word	0x200059f4
 8006db4:	200059ec 	.word	0x200059ec

08006db8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <vTaskSuspendAll+0x18>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <vTaskSuspendAll+0x18>)
 8006dc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20005a10 	.word	0x20005a10

08006dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006de2:	4b43      	ldr	r3, [pc, #268]	; (8006ef0 <xTaskResumeAll+0x11c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10c      	bne.n	8006e04 <xTaskResumeAll+0x30>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	b672      	cpsid	i
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	b662      	cpsie	i
 8006dfe:	603b      	str	r3, [r7, #0]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e04:	f001 fa4a 	bl	800829c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e08:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <xTaskResumeAll+0x11c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	4a38      	ldr	r2, [pc, #224]	; (8006ef0 <xTaskResumeAll+0x11c>)
 8006e10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <xTaskResumeAll+0x11c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d162      	bne.n	8006ee0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e1a:	4b36      	ldr	r3, [pc, #216]	; (8006ef4 <xTaskResumeAll+0x120>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d05e      	beq.n	8006ee0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e22:	e02f      	b.n	8006e84 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e24:	4b34      	ldr	r3, [pc, #208]	; (8006ef8 <xTaskResumeAll+0x124>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3318      	adds	r3, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fbdd 	bl	80055f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fbd8 	bl	80055f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <xTaskResumeAll+0x128>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d903      	bls.n	8006e54 <xTaskResumeAll+0x80>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <xTaskResumeAll+0x128>)
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4a27      	ldr	r2, [pc, #156]	; (8006f00 <xTaskResumeAll+0x12c>)
 8006e62:	441a      	add	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7fe fb63 	bl	8005536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e74:	4b23      	ldr	r3, [pc, #140]	; (8006f04 <xTaskResumeAll+0x130>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d302      	bcc.n	8006e84 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006e7e:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <xTaskResumeAll+0x134>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e84:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <xTaskResumeAll+0x124>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1cb      	bne.n	8006e24 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e92:	f000 fb81 	bl	8007598 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e96:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <xTaskResumeAll+0x138>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d010      	beq.n	8006ec4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ea2:	f000 f859 	bl	8006f58 <xTaskIncrementTick>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006eac:	4b16      	ldr	r3, [pc, #88]	; (8006f08 <xTaskResumeAll+0x134>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f1      	bne.n	8006ea2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006ebe:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <xTaskResumeAll+0x138>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <xTaskResumeAll+0x134>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <xTaskResumeAll+0x13c>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ee0:	f001 fa10 	bl	8008304 <vPortExitCritical>

	return xAlreadyYielded;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20005a10 	.word	0x20005a10
 8006ef4:	200059e8 	.word	0x200059e8
 8006ef8:	200059a8 	.word	0x200059a8
 8006efc:	200059f0 	.word	0x200059f0
 8006f00:	20005518 	.word	0x20005518
 8006f04:	20005514 	.word	0x20005514
 8006f08:	200059fc 	.word	0x200059fc
 8006f0c:	200059f8 	.word	0x200059f8
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <xTaskGetTickCount+0x1c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f20:	687b      	ldr	r3, [r7, #4]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	200059ec 	.word	0x200059ec

08006f34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f3a:	f001 fa97 	bl	800846c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006f42:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <xTaskGetTickCountFromISR+0x20>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f48:	683b      	ldr	r3, [r7, #0]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200059ec 	.word	0x200059ec

08006f58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f62:	4b50      	ldr	r3, [pc, #320]	; (80070a4 <xTaskIncrementTick+0x14c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f040 808b 	bne.w	8007082 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f6c:	4b4e      	ldr	r3, [pc, #312]	; (80070a8 <xTaskIncrementTick+0x150>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3301      	adds	r3, #1
 8006f72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f74:	4a4c      	ldr	r2, [pc, #304]	; (80070a8 <xTaskIncrementTick+0x150>)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d122      	bne.n	8006fc6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f80:	4b4a      	ldr	r3, [pc, #296]	; (80070ac <xTaskIncrementTick+0x154>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00c      	beq.n	8006fa4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	b672      	cpsid	i
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	b662      	cpsie	i
 8006f9e:	603b      	str	r3, [r7, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <xTaskIncrementTick+0x4a>
 8006fa4:	4b41      	ldr	r3, [pc, #260]	; (80070ac <xTaskIncrementTick+0x154>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	4b41      	ldr	r3, [pc, #260]	; (80070b0 <xTaskIncrementTick+0x158>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a3f      	ldr	r2, [pc, #252]	; (80070ac <xTaskIncrementTick+0x154>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	4a3f      	ldr	r2, [pc, #252]	; (80070b0 <xTaskIncrementTick+0x158>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	4b3e      	ldr	r3, [pc, #248]	; (80070b4 <xTaskIncrementTick+0x15c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	4a3d      	ldr	r2, [pc, #244]	; (80070b4 <xTaskIncrementTick+0x15c>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	f000 fae9 	bl	8007598 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fc6:	4b3c      	ldr	r3, [pc, #240]	; (80070b8 <xTaskIncrementTick+0x160>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d349      	bcc.n	8007064 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fd0:	4b36      	ldr	r3, [pc, #216]	; (80070ac <xTaskIncrementTick+0x154>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fda:	4b37      	ldr	r3, [pc, #220]	; (80070b8 <xTaskIncrementTick+0x160>)
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fe0:	601a      	str	r2, [r3, #0]
					break;
 8006fe2:	e03f      	b.n	8007064 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe4:	4b31      	ldr	r3, [pc, #196]	; (80070ac <xTaskIncrementTick+0x154>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d203      	bcs.n	8007004 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ffc:	4a2e      	ldr	r2, [pc, #184]	; (80070b8 <xTaskIncrementTick+0x160>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007002:	e02f      	b.n	8007064 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe faf1 	bl	80055f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3318      	adds	r3, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fae8 	bl	80055f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <xTaskIncrementTick+0x164>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d903      	bls.n	8007034 <xTaskIncrementTick+0xdc>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	4a22      	ldr	r2, [pc, #136]	; (80070bc <xTaskIncrementTick+0x164>)
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4a1f      	ldr	r2, [pc, #124]	; (80070c0 <xTaskIncrementTick+0x168>)
 8007042:	441a      	add	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fe fa73 	bl	8005536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	4b1b      	ldr	r3, [pc, #108]	; (80070c4 <xTaskIncrementTick+0x16c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	429a      	cmp	r2, r3
 800705c:	d3b8      	bcc.n	8006fd0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800705e:	2301      	movs	r3, #1
 8007060:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007062:	e7b5      	b.n	8006fd0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007064:	4b17      	ldr	r3, [pc, #92]	; (80070c4 <xTaskIncrementTick+0x16c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	4915      	ldr	r1, [pc, #84]	; (80070c0 <xTaskIncrementTick+0x168>)
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d907      	bls.n	800708c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	e004      	b.n	800708c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007082:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <xTaskIncrementTick+0x170>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3301      	adds	r3, #1
 8007088:	4a0f      	ldr	r2, [pc, #60]	; (80070c8 <xTaskIncrementTick+0x170>)
 800708a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800708c:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <xTaskIncrementTick+0x174>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007098:	697b      	ldr	r3, [r7, #20]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20005a10 	.word	0x20005a10
 80070a8:	200059ec 	.word	0x200059ec
 80070ac:	200059a0 	.word	0x200059a0
 80070b0:	200059a4 	.word	0x200059a4
 80070b4:	20005a00 	.word	0x20005a00
 80070b8:	20005a08 	.word	0x20005a08
 80070bc:	200059f0 	.word	0x200059f0
 80070c0:	20005518 	.word	0x20005518
 80070c4:	20005514 	.word	0x20005514
 80070c8:	200059f8 	.word	0x200059f8
 80070cc:	200059fc 	.word	0x200059fc

080070d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070d6:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <vTaskSwitchContext+0xb4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070de:	4b2a      	ldr	r3, [pc, #168]	; (8007188 <vTaskSwitchContext+0xb8>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070e4:	e048      	b.n	8007178 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80070e6:	4b28      	ldr	r3, [pc, #160]	; (8007188 <vTaskSwitchContext+0xb8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ec:	4b27      	ldr	r3, [pc, #156]	; (800718c <vTaskSwitchContext+0xbc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	e012      	b.n	800711a <vTaskSwitchContext+0x4a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10c      	bne.n	8007114 <vTaskSwitchContext+0x44>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	b672      	cpsid	i
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	b662      	cpsie	i
 800710e:	607b      	str	r3, [r7, #4]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <vTaskSwitchContext+0x42>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3b01      	subs	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	491d      	ldr	r1, [pc, #116]	; (8007190 <vTaskSwitchContext+0xc0>)
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0e2      	beq.n	80070f4 <vTaskSwitchContext+0x24>
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4a15      	ldr	r2, [pc, #84]	; (8007190 <vTaskSwitchContext+0xc0>)
 800713a:	4413      	add	r3, r2
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	605a      	str	r2, [r3, #4]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3308      	adds	r3, #8
 8007150:	429a      	cmp	r2, r3
 8007152:	d104      	bne.n	800715e <vTaskSwitchContext+0x8e>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <vTaskSwitchContext+0xc4>)
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	4a08      	ldr	r2, [pc, #32]	; (800718c <vTaskSwitchContext+0xbc>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <vTaskSwitchContext+0xc4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3354      	adds	r3, #84	; 0x54
 8007174:	4a08      	ldr	r2, [pc, #32]	; (8007198 <vTaskSwitchContext+0xc8>)
 8007176:	6013      	str	r3, [r2, #0]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20005a10 	.word	0x20005a10
 8007188:	200059fc 	.word	0x200059fc
 800718c:	200059f0 	.word	0x200059f0
 8007190:	20005518 	.word	0x20005518
 8007194:	20005514 	.word	0x20005514
 8007198:	2000002c 	.word	0x2000002c

0800719c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10c      	bne.n	80071c6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	b672      	cpsid	i
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	b662      	cpsie	i
 80071c0:	60fb      	str	r3, [r7, #12]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <vTaskPlaceOnEventList+0x48>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3318      	adds	r3, #24
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fe f9d5 	bl	800557e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071d4:	2101      	movs	r1, #1
 80071d6:	6838      	ldr	r0, [r7, #0]
 80071d8:	f000 fba0 	bl	800791c <prvAddCurrentTaskToDelayedList>
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20005514 	.word	0x20005514

080071e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10c      	bne.n	8007214 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	b672      	cpsid	i
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	b662      	cpsie	i
 800720e:	617b      	str	r3, [r7, #20]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007214:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <vTaskPlaceOnEventListRestricted+0x58>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3318      	adds	r3, #24
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7fe f98a 	bl	8005536 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800722c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	68b8      	ldr	r0, [r7, #8]
 8007232:	f000 fb73 	bl	800791c <prvAddCurrentTaskToDelayedList>
	}
 8007236:	bf00      	nop
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20005514 	.word	0x20005514

08007244 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10c      	bne.n	8007274 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	b672      	cpsid	i
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	b662      	cpsie	i
 800726e:	60fb      	str	r3, [r7, #12]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	3318      	adds	r3, #24
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe f9b9 	bl	80055f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800727e:	4b1e      	ldr	r3, [pc, #120]	; (80072f8 <xTaskRemoveFromEventList+0xb4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d11d      	bne.n	80072c2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3304      	adds	r3, #4
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe f9b0 	bl	80055f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <xTaskRemoveFromEventList+0xb8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d903      	bls.n	80072a4 <xTaskRemoveFromEventList+0x60>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	4a16      	ldr	r2, [pc, #88]	; (80072fc <xTaskRemoveFromEventList+0xb8>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a13      	ldr	r2, [pc, #76]	; (8007300 <xTaskRemoveFromEventList+0xbc>)
 80072b2:	441a      	add	r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe f93b 	bl	8005536 <vListInsertEnd>
 80072c0:	e005      	b.n	80072ce <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3318      	adds	r3, #24
 80072c6:	4619      	mov	r1, r3
 80072c8:	480e      	ldr	r0, [pc, #56]	; (8007304 <xTaskRemoveFromEventList+0xc0>)
 80072ca:	f7fe f934 	bl	8005536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <xTaskRemoveFromEventList+0xc4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	429a      	cmp	r2, r3
 80072da:	d905      	bls.n	80072e8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <xTaskRemoveFromEventList+0xc8>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e001      	b.n	80072ec <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072ec:	697b      	ldr	r3, [r7, #20]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20005a10 	.word	0x20005a10
 80072fc:	200059f0 	.word	0x200059f0
 8007300:	20005518 	.word	0x20005518
 8007304:	200059a8 	.word	0x200059a8
 8007308:	20005514 	.word	0x20005514
 800730c:	200059fc 	.word	0x200059fc

08007310 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <vTaskInternalSetTimeOutState+0x24>)
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <vTaskInternalSetTimeOutState+0x28>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	20005a00 	.word	0x20005a00
 8007338:	200059ec 	.word	0x200059ec

0800733c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	b672      	cpsid	i
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	b662      	cpsie	i
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	b672      	cpsid	i
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	b662      	cpsie	i
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007386:	f000 ff89 	bl	800829c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800738a:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <xTaskCheckForTimeOut+0xc4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a2:	d102      	bne.n	80073aa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e023      	b.n	80073f2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b15      	ldr	r3, [pc, #84]	; (8007404 <xTaskCheckForTimeOut+0xc8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d007      	beq.n	80073c6 <xTaskCheckForTimeOut+0x8a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e015      	b.n	80073f2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d20b      	bcs.n	80073e8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff ff97 	bl	8007310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61fb      	str	r3, [r7, #28]
 80073e6:	e004      	b.n	80073f2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ee:	2301      	movs	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073f2:	f000 ff87 	bl	8008304 <vPortExitCritical>

	return xReturn;
 80073f6:	69fb      	ldr	r3, [r7, #28]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	200059ec 	.word	0x200059ec
 8007404:	20005a00 	.word	0x20005a00

08007408 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800740c:	4b03      	ldr	r3, [pc, #12]	; (800741c <vTaskMissedYield+0x14>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
}
 8007412:	bf00      	nop
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	200059fc 	.word	0x200059fc

08007420 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007428:	f000 f852 	bl	80074d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <prvIdleTask+0x28>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d9f9      	bls.n	8007428 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <prvIdleTask+0x2c>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007444:	e7f0      	b.n	8007428 <prvIdleTask+0x8>
 8007446:	bf00      	nop
 8007448:	20005518 	.word	0x20005518
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007456:	2300      	movs	r3, #0
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	e00c      	b.n	8007476 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a12      	ldr	r2, [pc, #72]	; (80074b0 <prvInitialiseTaskLists+0x60>)
 8007468:	4413      	add	r3, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe f836 	bl	80054dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3301      	adds	r3, #1
 8007474:	607b      	str	r3, [r7, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b37      	cmp	r3, #55	; 0x37
 800747a:	d9ef      	bls.n	800745c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800747c:	480d      	ldr	r0, [pc, #52]	; (80074b4 <prvInitialiseTaskLists+0x64>)
 800747e:	f7fe f82d 	bl	80054dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007482:	480d      	ldr	r0, [pc, #52]	; (80074b8 <prvInitialiseTaskLists+0x68>)
 8007484:	f7fe f82a 	bl	80054dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007488:	480c      	ldr	r0, [pc, #48]	; (80074bc <prvInitialiseTaskLists+0x6c>)
 800748a:	f7fe f827 	bl	80054dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800748e:	480c      	ldr	r0, [pc, #48]	; (80074c0 <prvInitialiseTaskLists+0x70>)
 8007490:	f7fe f824 	bl	80054dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007494:	480b      	ldr	r0, [pc, #44]	; (80074c4 <prvInitialiseTaskLists+0x74>)
 8007496:	f7fe f821 	bl	80054dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800749a:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <prvInitialiseTaskLists+0x78>)
 800749c:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <prvInitialiseTaskLists+0x64>)
 800749e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <prvInitialiseTaskLists+0x7c>)
 80074a2:	4a05      	ldr	r2, [pc, #20]	; (80074b8 <prvInitialiseTaskLists+0x68>)
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20005518 	.word	0x20005518
 80074b4:	20005978 	.word	0x20005978
 80074b8:	2000598c 	.word	0x2000598c
 80074bc:	200059a8 	.word	0x200059a8
 80074c0:	200059bc 	.word	0x200059bc
 80074c4:	200059d4 	.word	0x200059d4
 80074c8:	200059a0 	.word	0x200059a0
 80074cc:	200059a4 	.word	0x200059a4

080074d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074d6:	e019      	b.n	800750c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074d8:	f000 fee0 	bl	800829c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074dc:	4b10      	ldr	r3, [pc, #64]	; (8007520 <prvCheckTasksWaitingTermination+0x50>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe f881 	bl	80055f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <prvCheckTasksWaitingTermination+0x54>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	4a0b      	ldr	r2, [pc, #44]	; (8007524 <prvCheckTasksWaitingTermination+0x54>)
 80074f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074f8:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <prvCheckTasksWaitingTermination+0x58>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	4a0a      	ldr	r2, [pc, #40]	; (8007528 <prvCheckTasksWaitingTermination+0x58>)
 8007500:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007502:	f000 feff 	bl	8008304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f810 	bl	800752c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <prvCheckTasksWaitingTermination+0x58>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e1      	bne.n	80074d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200059bc 	.word	0x200059bc
 8007524:	200059e8 	.word	0x200059e8
 8007528:	200059d0 	.word	0x200059d0

0800752c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3354      	adds	r3, #84	; 0x54
 8007538:	4618      	mov	r0, r3
 800753a:	f00d fe19 	bl	8015170 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007544:	2b00      	cmp	r3, #0
 8007546:	d108      	bne.n	800755a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	4618      	mov	r0, r3
 800754e:	f001 f89b 	bl	8008688 <vPortFree>
				vPortFree( pxTCB );
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 f898 	bl	8008688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007558:	e01a      	b.n	8007590 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007560:	2b01      	cmp	r3, #1
 8007562:	d103      	bne.n	800756c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 f88f 	bl	8008688 <vPortFree>
	}
 800756a:	e011      	b.n	8007590 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007572:	2b02      	cmp	r3, #2
 8007574:	d00c      	beq.n	8007590 <prvDeleteTCB+0x64>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	b672      	cpsid	i
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	b662      	cpsie	i
 800758a:	60fb      	str	r3, [r7, #12]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <prvDeleteTCB+0x62>
	}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <prvResetNextTaskUnblockTime+0x38>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075a8:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <prvResetNextTaskUnblockTime+0x3c>)
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075b0:	e008      	b.n	80075c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b2:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <prvResetNextTaskUnblockTime+0x38>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4a04      	ldr	r2, [pc, #16]	; (80075d4 <prvResetNextTaskUnblockTime+0x3c>)
 80075c2:	6013      	str	r3, [r2, #0]
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	200059a0 	.word	0x200059a0
 80075d4:	20005a08 	.word	0x20005a08

080075d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <xTaskGetCurrentTaskHandle+0x1c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80075e4:	687b      	ldr	r3, [r7, #4]
	}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20005514 	.word	0x20005514

080075f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <xTaskGetSchedulerState+0x34>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007606:	2301      	movs	r3, #1
 8007608:	607b      	str	r3, [r7, #4]
 800760a:	e008      	b.n	800761e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800760c:	4b08      	ldr	r3, [pc, #32]	; (8007630 <xTaskGetSchedulerState+0x38>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007614:	2302      	movs	r3, #2
 8007616:	607b      	str	r3, [r7, #4]
 8007618:	e001      	b.n	800761e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800761a:	2300      	movs	r3, #0
 800761c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800761e:	687b      	ldr	r3, [r7, #4]
	}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	200059f4 	.word	0x200059f4
 8007630:	20005a10 	.word	0x20005a10

08007634 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d051      	beq.n	80076ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764e:	4b2a      	ldr	r3, [pc, #168]	; (80076f8 <xTaskPriorityInherit+0xc4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	429a      	cmp	r2, r3
 8007656:	d241      	bcs.n	80076dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	db06      	blt.n	800766e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007660:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <xTaskPriorityInherit+0xc4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6959      	ldr	r1, [r3, #20]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a1f      	ldr	r2, [pc, #124]	; (80076fc <xTaskPriorityInherit+0xc8>)
 8007680:	4413      	add	r3, r2
 8007682:	4299      	cmp	r1, r3
 8007684:	d122      	bne.n	80076cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7fd ffb0 	bl	80055f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007690:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <xTaskPriorityInherit+0xc4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769e:	4b18      	ldr	r3, [pc, #96]	; (8007700 <xTaskPriorityInherit+0xcc>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d903      	bls.n	80076ae <xTaskPriorityInherit+0x7a>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	4a15      	ldr	r2, [pc, #84]	; (8007700 <xTaskPriorityInherit+0xcc>)
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4a10      	ldr	r2, [pc, #64]	; (80076fc <xTaskPriorityInherit+0xc8>)
 80076bc:	441a      	add	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7fd ff36 	bl	8005536 <vListInsertEnd>
 80076ca:	e004      	b.n	80076d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <xTaskPriorityInherit+0xc4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076d6:	2301      	movs	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	e008      	b.n	80076ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <xTaskPriorityInherit+0xc4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d201      	bcs.n	80076ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076ee:	68fb      	ldr	r3, [r7, #12]
	}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20005514 	.word	0x20005514
 80076fc:	20005518 	.word	0x20005518
 8007700:	200059f0 	.word	0x200059f0

08007704 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d05a      	beq.n	80077d0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800771a:	4b30      	ldr	r3, [pc, #192]	; (80077dc <xTaskPriorityDisinherit+0xd8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	429a      	cmp	r2, r3
 8007722:	d00c      	beq.n	800773e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	b672      	cpsid	i
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	b662      	cpsie	i
 8007738:	60fb      	str	r3, [r7, #12]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10c      	bne.n	8007760 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	b672      	cpsid	i
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	b662      	cpsie	i
 800775a:	60bb      	str	r3, [r7, #8]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007764:	1e5a      	subs	r2, r3, #1
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007772:	429a      	cmp	r2, r3
 8007774:	d02c      	beq.n	80077d0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	2b00      	cmp	r3, #0
 800777c:	d128      	bne.n	80077d0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	3304      	adds	r3, #4
 8007782:	4618      	mov	r0, r3
 8007784:	f7fd ff34 	bl	80055f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <xTaskPriorityDisinherit+0xdc>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d903      	bls.n	80077b0 <xTaskPriorityDisinherit+0xac>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <xTaskPriorityDisinherit+0xdc>)
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <xTaskPriorityDisinherit+0xe0>)
 80077be:	441a      	add	r2, r3
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7fd feb5 	bl	8005536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077d0:	697b      	ldr	r3, [r7, #20]
	}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20005514 	.word	0x20005514
 80077e0:	200059f0 	.word	0x200059f0
 80077e4:	20005518 	.word	0x20005518

080077e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077f6:	2301      	movs	r3, #1
 80077f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d06e      	beq.n	80078de <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10c      	bne.n	8007822 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	b672      	cpsid	i
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	b662      	cpsie	i
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d902      	bls.n	8007832 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e002      	b.n	8007838 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007836:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	429a      	cmp	r2, r3
 8007840:	d04d      	beq.n	80078de <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	429a      	cmp	r2, r3
 800784a:	d148      	bne.n	80078de <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800784c:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	429a      	cmp	r2, r3
 8007854:	d10c      	bne.n	8007870 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	60bb      	str	r3, [r7, #8]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db04      	blt.n	800788e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	6959      	ldr	r1, [r3, #20]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4a13      	ldr	r2, [pc, #76]	; (80078ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800789e:	4413      	add	r3, r2
 80078a0:	4299      	cmp	r1, r3
 80078a2:	d11c      	bne.n	80078de <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fd fea1 	bl	80055f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b2:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d903      	bls.n	80078c2 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4a07      	ldr	r2, [pc, #28]	; (80078ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80078d0:	441a      	add	r2, r3
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fd fe2c 	bl	8005536 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078de:	bf00      	nop
 80078e0:	3720      	adds	r7, #32
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20005514 	.word	0x20005514
 80078ec:	20005518 	.word	0x20005518
 80078f0:	200059f0 	.word	0x200059f0

080078f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078f8:	4b07      	ldr	r3, [pc, #28]	; (8007918 <pvTaskIncrementMutexHeldCount+0x24>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <pvTaskIncrementMutexHeldCount+0x24>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007906:	3201      	adds	r2, #1
 8007908:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800790a:	4b03      	ldr	r3, [pc, #12]	; (8007918 <pvTaskIncrementMutexHeldCount+0x24>)
 800790c:	681b      	ldr	r3, [r3, #0]
	}
 800790e:	4618      	mov	r0, r3
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	20005514 	.word	0x20005514

0800791c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007926:	4b21      	ldr	r3, [pc, #132]	; (80079ac <prvAddCurrentTaskToDelayedList+0x90>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800792c:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3304      	adds	r3, #4
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd fe5c 	bl	80055f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800793e:	d10a      	bne.n	8007956 <prvAddCurrentTaskToDelayedList+0x3a>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007946:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3304      	adds	r3, #4
 800794c:	4619      	mov	r1, r3
 800794e:	4819      	ldr	r0, [pc, #100]	; (80079b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007950:	f7fd fdf1 	bl	8005536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007954:	e026      	b.n	80079a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4413      	add	r3, r2
 800795c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800795e:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	429a      	cmp	r2, r3
 800796c:	d209      	bcs.n	8007982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800796e:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3304      	adds	r3, #4
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f7fd fdff 	bl	800557e <vListInsert>
}
 8007980:	e010      	b.n	80079a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007982:	4b0e      	ldr	r3, [pc, #56]	; (80079bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3304      	adds	r3, #4
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f7fd fdf5 	bl	800557e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007994:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	429a      	cmp	r2, r3
 800799c:	d202      	bcs.n	80079a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800799e:	4a08      	ldr	r2, [pc, #32]	; (80079c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	6013      	str	r3, [r2, #0]
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	200059ec 	.word	0x200059ec
 80079b0:	20005514 	.word	0x20005514
 80079b4:	200059d4 	.word	0x200059d4
 80079b8:	200059a4 	.word	0x200059a4
 80079bc:	200059a0 	.word	0x200059a0
 80079c0:	20005a08 	.word	0x20005a08

080079c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	; 0x28
 80079c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079ce:	f000 fb15 	bl	8007ffc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079d2:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <xTimerCreateTimerTask+0x84>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d021      	beq.n	8007a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079e2:	1d3a      	adds	r2, r7, #4
 80079e4:	f107 0108 	add.w	r1, r7, #8
 80079e8:	f107 030c 	add.w	r3, r7, #12
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd fd5b 	bl	80054a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	2302      	movs	r3, #2
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2300      	movs	r3, #0
 8007a02:	460a      	mov	r2, r1
 8007a04:	4911      	ldr	r1, [pc, #68]	; (8007a4c <xTimerCreateTimerTask+0x88>)
 8007a06:	4812      	ldr	r0, [pc, #72]	; (8007a50 <xTimerCreateTimerTask+0x8c>)
 8007a08:	f7fe ff6c 	bl	80068e4 <xTaskCreateStatic>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4a11      	ldr	r2, [pc, #68]	; (8007a54 <xTimerCreateTimerTask+0x90>)
 8007a10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a12:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <xTimerCreateTimerTask+0x90>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10c      	bne.n	8007a3e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	b672      	cpsid	i
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	b662      	cpsie	i
 8007a38:	613b      	str	r3, [r7, #16]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007a3e:	697b      	ldr	r3, [r7, #20]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20005a44 	.word	0x20005a44
 8007a4c:	08015f98 	.word	0x08015f98
 8007a50:	08007b95 	.word	0x08007b95
 8007a54:	20005a48 	.word	0x20005a48

08007a58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	; 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10c      	bne.n	8007a8a <xTimerGenericCommand+0x32>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	b672      	cpsid	i
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	b662      	cpsie	i
 8007a84:	623b      	str	r3, [r7, #32]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a8a:	4b1a      	ldr	r3, [pc, #104]	; (8007af4 <xTimerGenericCommand+0x9c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d02a      	beq.n	8007ae8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b05      	cmp	r3, #5
 8007aa2:	dc18      	bgt.n	8007ad6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007aa4:	f7ff fda8 	bl	80075f8 <xTaskGetSchedulerState>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d109      	bne.n	8007ac2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007aae:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <xTimerGenericCommand+0x9c>)
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	f107 0110 	add.w	r1, r7, #16
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	f7fe f841 	bl	8005b40 <xQueueGenericSend>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24
 8007ac0:	e012      	b.n	8007ae8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ac2:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <xTimerGenericCommand+0x9c>)
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	f107 0110 	add.w	r1, r7, #16
 8007aca:	2300      	movs	r3, #0
 8007acc:	2200      	movs	r2, #0
 8007ace:	f7fe f837 	bl	8005b40 <xQueueGenericSend>
 8007ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ad4:	e008      	b.n	8007ae8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <xTimerGenericCommand+0x9c>)
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	f107 0110 	add.w	r1, r7, #16
 8007ade:	2300      	movs	r3, #0
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	f7fe f933 	bl	8005d4c <xQueueGenericSendFromISR>
 8007ae6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3728      	adds	r7, #40	; 0x28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20005a44 	.word	0x20005a44

08007af8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <prvProcessExpiredTimer+0x98>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fd fd6d 	bl	80055f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d024      	beq.n	8007b6e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	699a      	ldr	r2, [r3, #24]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	18d1      	adds	r1, r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	6978      	ldr	r0, [r7, #20]
 8007b32:	f000 f8d3 	bl	8007cdc <prvInsertTimerInActiveList>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d021      	beq.n	8007b80 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	2100      	movs	r1, #0
 8007b46:	6978      	ldr	r0, [r7, #20]
 8007b48:	f7ff ff86 	bl	8007a58 <xTimerGenericCommand>
 8007b4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d115      	bne.n	8007b80 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	b672      	cpsid	i
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	b662      	cpsie	i
 8007b68:	60fb      	str	r3, [r7, #12]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	6978      	ldr	r0, [r7, #20]
 8007b86:	4798      	blx	r3
}
 8007b88:	bf00      	nop
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20005a3c 	.word	0x20005a3c

08007b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b9c:	f107 0308 	add.w	r3, r7, #8
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f857 	bl	8007c54 <prvGetNextExpireTime>
 8007ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4619      	mov	r1, r3
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f803 	bl	8007bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bb2:	f000 f8d5 	bl	8007d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bb6:	e7f1      	b.n	8007b9c <prvTimerTask+0x8>

08007bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bc2:	f7ff f8f9 	bl	8006db8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 f866 	bl	8007c9c <prvSampleTimeNow>
 8007bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d130      	bne.n	8007c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <prvProcessTimerOrBlockTask+0x3c>
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d806      	bhi.n	8007bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007be6:	f7ff f8f5 	bl	8006dd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff ff83 	bl	8007af8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007bf2:	e024      	b.n	8007c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bfa:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <prvProcessTimerOrBlockTask+0x90>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <prvProcessTimerOrBlockTask+0x50>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <prvProcessTimerOrBlockTask+0x52>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c0c:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <prvProcessTimerOrBlockTask+0x94>)
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f7fe fe2f 	bl	800687c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c1e:	f7ff f8d9 	bl	8006dd4 <xTaskResumeAll>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c28:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <prvProcessTimerOrBlockTask+0x98>)
 8007c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	f3bf 8f6f 	isb	sy
}
 8007c38:	e001      	b.n	8007c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c3a:	f7ff f8cb 	bl	8006dd4 <xTaskResumeAll>
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20005a40 	.word	0x20005a40
 8007c4c:	20005a44 	.word	0x20005a44
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c5c:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <prvGetNextExpireTime+0x44>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <prvGetNextExpireTime+0x16>
 8007c66:	2201      	movs	r2, #1
 8007c68:	e000      	b.n	8007c6c <prvGetNextExpireTime+0x18>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d105      	bne.n	8007c84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c78:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <prvGetNextExpireTime+0x44>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	e001      	b.n	8007c88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20005a3c 	.word	0x20005a3c

08007c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ca4:	f7ff f936 	bl	8006f14 <xTaskGetTickCount>
 8007ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007caa:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <prvSampleTimeNow+0x3c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d205      	bcs.n	8007cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cb4:	f000 f93c 	bl	8007f30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e002      	b.n	8007cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cc6:	4a04      	ldr	r2, [pc, #16]	; (8007cd8 <prvSampleTimeNow+0x3c>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20005a4c 	.word	0x20005a4c

08007cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d812      	bhi.n	8007d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d302      	bcc.n	8007d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	e01b      	b.n	8007d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d16:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <prvInsertTimerInActiveList+0x7c>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4610      	mov	r0, r2
 8007d22:	f7fd fc2c 	bl	800557e <vListInsert>
 8007d26:	e012      	b.n	8007d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d206      	bcs.n	8007d3e <prvInsertTimerInActiveList+0x62>
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d302      	bcc.n	8007d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e007      	b.n	8007d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d3e:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <prvInsertTimerInActiveList+0x80>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4619      	mov	r1, r3
 8007d48:	4610      	mov	r0, r2
 8007d4a:	f7fd fc18 	bl	800557e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d4e:	697b      	ldr	r3, [r7, #20]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20005a40 	.word	0x20005a40
 8007d5c:	20005a3c 	.word	0x20005a3c

08007d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08e      	sub	sp, #56	; 0x38
 8007d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d66:	e0d0      	b.n	8007f0a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	da1a      	bge.n	8007da4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d6e:	1d3b      	adds	r3, r7, #4
 8007d70:	3304      	adds	r3, #4
 8007d72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10c      	bne.n	8007d94 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	b672      	cpsid	i
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	b662      	cpsie	i
 8007d8e:	61fb      	str	r3, [r7, #28]
}
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d9a:	6850      	ldr	r0, [r2, #4]
 8007d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d9e:	6892      	ldr	r2, [r2, #8]
 8007da0:	4611      	mov	r1, r2
 8007da2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f2c0 80ae 	blt.w	8007f08 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fd fc17 	bl	80055f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff ff69 	bl	8007c9c <prvSampleTimeNow>
 8007dca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	f200 809b 	bhi.w	8007f0a <prvProcessReceivedCommands+0x1aa>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <prvProcessReceivedCommands+0x7c>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e05 	.word	0x08007e05
 8007de8:	08007e7d 	.word	0x08007e7d
 8007dec:	08007e91 	.word	0x08007e91
 8007df0:	08007edf 	.word	0x08007edf
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e05 	.word	0x08007e05
 8007dfc:	08007e7d 	.word	0x08007e7d
 8007e00:	08007e91 	.word	0x08007e91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	18d1      	adds	r1, r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e24:	f7ff ff5a 	bl	8007cdc <prvInsertTimerInActiveList>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d06d      	beq.n	8007f0a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d062      	beq.n	8007f0a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	441a      	add	r2, r3
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2300      	movs	r3, #0
 8007e52:	2100      	movs	r1, #0
 8007e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e56:	f7ff fdff 	bl	8007a58 <xTimerGenericCommand>
 8007e5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d153      	bne.n	8007f0a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	b672      	cpsid	i
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	b662      	cpsie	i
 8007e76:	61bb      	str	r3, [r7, #24]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e82:	f023 0301 	bic.w	r3, r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e8e:	e03c      	b.n	8007f0a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10c      	bne.n	8007eca <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	b672      	cpsid	i
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	b662      	cpsie	i
 8007ec4:	617b      	str	r3, [r7, #20]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	18d1      	adds	r1, r2, r3
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed8:	f7ff ff00 	bl	8007cdc <prvInsertTimerInActiveList>
					break;
 8007edc:	e015      	b.n	8007f0a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d103      	bne.n	8007ef4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eee:	f000 fbcb 	bl	8008688 <vPortFree>
 8007ef2:	e00a      	b.n	8007f0a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007efa:	f023 0301 	bic.w	r3, r3, #1
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f06:	e000      	b.n	8007f0a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f0a:	4b08      	ldr	r3, [pc, #32]	; (8007f2c <prvProcessReceivedCommands+0x1cc>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	1d39      	adds	r1, r7, #4
 8007f10:	2200      	movs	r2, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe f850 	bl	8005fb8 <xQueueReceive>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f47f af24 	bne.w	8007d68 <prvProcessReceivedCommands+0x8>
	}
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	3730      	adds	r7, #48	; 0x30
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20005a44 	.word	0x20005a44

08007f30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f36:	e04a      	b.n	8007fce <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f38:	4b2e      	ldr	r3, [pc, #184]	; (8007ff4 <prvSwitchTimerLists+0xc4>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f42:	4b2c      	ldr	r3, [pc, #176]	; (8007ff4 <prvSwitchTimerLists+0xc4>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fd fb4d 	bl	80055f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d030      	beq.n	8007fce <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4413      	add	r3, r2
 8007f74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d90e      	bls.n	8007f9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f8a:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <prvSwitchTimerLists+0xc4>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3304      	adds	r3, #4
 8007f92:	4619      	mov	r1, r3
 8007f94:	4610      	mov	r0, r2
 8007f96:	f7fd faf2 	bl	800557e <vListInsert>
 8007f9a:	e018      	b.n	8007fce <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff fd56 	bl	8007a58 <xTimerGenericCommand>
 8007fac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10c      	bne.n	8007fce <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	b672      	cpsid	i
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	b662      	cpsie	i
 8007fc8:	603b      	str	r3, [r7, #0]
}
 8007fca:	bf00      	nop
 8007fcc:	e7fe      	b.n	8007fcc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fce:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <prvSwitchTimerLists+0xc4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1af      	bne.n	8007f38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <prvSwitchTimerLists+0xc4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fde:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <prvSwitchTimerLists+0xc8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a04      	ldr	r2, [pc, #16]	; (8007ff4 <prvSwitchTimerLists+0xc4>)
 8007fe4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fe6:	4a04      	ldr	r2, [pc, #16]	; (8007ff8 <prvSwitchTimerLists+0xc8>)
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	6013      	str	r3, [r2, #0]
}
 8007fec:	bf00      	nop
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20005a3c 	.word	0x20005a3c
 8007ff8:	20005a40 	.word	0x20005a40

08007ffc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008002:	f000 f94b 	bl	800829c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008006:	4b15      	ldr	r3, [pc, #84]	; (800805c <prvCheckForValidListAndQueue+0x60>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d120      	bne.n	8008050 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800800e:	4814      	ldr	r0, [pc, #80]	; (8008060 <prvCheckForValidListAndQueue+0x64>)
 8008010:	f7fd fa64 	bl	80054dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008014:	4813      	ldr	r0, [pc, #76]	; (8008064 <prvCheckForValidListAndQueue+0x68>)
 8008016:	f7fd fa61 	bl	80054dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800801a:	4b13      	ldr	r3, [pc, #76]	; (8008068 <prvCheckForValidListAndQueue+0x6c>)
 800801c:	4a10      	ldr	r2, [pc, #64]	; (8008060 <prvCheckForValidListAndQueue+0x64>)
 800801e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008020:	4b12      	ldr	r3, [pc, #72]	; (800806c <prvCheckForValidListAndQueue+0x70>)
 8008022:	4a10      	ldr	r2, [pc, #64]	; (8008064 <prvCheckForValidListAndQueue+0x68>)
 8008024:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008026:	2300      	movs	r3, #0
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	4b11      	ldr	r3, [pc, #68]	; (8008070 <prvCheckForValidListAndQueue+0x74>)
 800802c:	4a11      	ldr	r2, [pc, #68]	; (8008074 <prvCheckForValidListAndQueue+0x78>)
 800802e:	2110      	movs	r1, #16
 8008030:	200a      	movs	r0, #10
 8008032:	f7fd fb71 	bl	8005718 <xQueueGenericCreateStatic>
 8008036:	4603      	mov	r3, r0
 8008038:	4a08      	ldr	r2, [pc, #32]	; (800805c <prvCheckForValidListAndQueue+0x60>)
 800803a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800803c:	4b07      	ldr	r3, [pc, #28]	; (800805c <prvCheckForValidListAndQueue+0x60>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008044:	4b05      	ldr	r3, [pc, #20]	; (800805c <prvCheckForValidListAndQueue+0x60>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	490b      	ldr	r1, [pc, #44]	; (8008078 <prvCheckForValidListAndQueue+0x7c>)
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fbc2 	bl	80067d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008050:	f000 f958 	bl	8008304 <vPortExitCritical>
}
 8008054:	bf00      	nop
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20005a44 	.word	0x20005a44
 8008060:	20005a14 	.word	0x20005a14
 8008064:	20005a28 	.word	0x20005a28
 8008068:	20005a3c 	.word	0x20005a3c
 800806c:	20005a40 	.word	0x20005a40
 8008070:	20005af0 	.word	0x20005af0
 8008074:	20005a50 	.word	0x20005a50
 8008078:	08015fa0 	.word	0x08015fa0

0800807c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3b04      	subs	r3, #4
 800808c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3b04      	subs	r3, #4
 800809a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f023 0201 	bic.w	r2, r3, #1
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b04      	subs	r3, #4
 80080aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080ac:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <pxPortInitialiseStack+0x64>)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3b14      	subs	r3, #20
 80080b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3b04      	subs	r3, #4
 80080c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f06f 0202 	mvn.w	r2, #2
 80080ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3b20      	subs	r3, #32
 80080d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080d2:	68fb      	ldr	r3, [r7, #12]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	080080e5 	.word	0x080080e5

080080e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080ee:	4b14      	ldr	r3, [pc, #80]	; (8008140 <prvTaskExitError+0x5c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f6:	d00c      	beq.n	8008112 <prvTaskExitError+0x2e>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	b672      	cpsid	i
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	b662      	cpsie	i
 800810c:	60fb      	str	r3, [r7, #12]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <prvTaskExitError+0x2c>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	b672      	cpsid	i
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	b662      	cpsie	i
 8008126:	60bb      	str	r3, [r7, #8]
}
 8008128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800812a:	bf00      	nop
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0fc      	beq.n	800812c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	20000020 	.word	0x20000020
	...

08008150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <pxCurrentTCBConst2>)
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f380 8809 	msr	PSP, r0
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	4770      	bx	lr
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst2>:
 8008170:	20005514 	.word	0x20005514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008178:	4808      	ldr	r0, [pc, #32]	; (800819c <prvPortStartFirstTask+0x24>)
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	6800      	ldr	r0, [r0, #0]
 800817e:	f380 8808 	msr	MSP, r0
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8814 	msr	CONTROL, r0
 800818a:	b662      	cpsie	i
 800818c:	b661      	cpsie	f
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	df00      	svc	0
 8008198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800819a:	bf00      	nop
 800819c:	e000ed08 	.word	0xe000ed08

080081a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081a6:	4b37      	ldr	r3, [pc, #220]	; (8008284 <xPortStartScheduler+0xe4>)
 80081a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	22ff      	movs	r2, #255	; 0xff
 80081b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	4b2f      	ldr	r3, [pc, #188]	; (8008288 <xPortStartScheduler+0xe8>)
 80081cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081ce:	4b2f      	ldr	r3, [pc, #188]	; (800828c <xPortStartScheduler+0xec>)
 80081d0:	2207      	movs	r2, #7
 80081d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081d4:	e009      	b.n	80081ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80081d6:	4b2d      	ldr	r3, [pc, #180]	; (800828c <xPortStartScheduler+0xec>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	4a2b      	ldr	r2, [pc, #172]	; (800828c <xPortStartScheduler+0xec>)
 80081de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f2:	2b80      	cmp	r3, #128	; 0x80
 80081f4:	d0ef      	beq.n	80081d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081f6:	4b25      	ldr	r3, [pc, #148]	; (800828c <xPortStartScheduler+0xec>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f1c3 0307 	rsb	r3, r3, #7
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d00c      	beq.n	800821c <xPortStartScheduler+0x7c>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	b672      	cpsid	i
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	b662      	cpsie	i
 8008216:	60bb      	str	r3, [r7, #8]
}
 8008218:	bf00      	nop
 800821a:	e7fe      	b.n	800821a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800821c:	4b1b      	ldr	r3, [pc, #108]	; (800828c <xPortStartScheduler+0xec>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	4a1a      	ldr	r2, [pc, #104]	; (800828c <xPortStartScheduler+0xec>)
 8008224:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008226:	4b19      	ldr	r3, [pc, #100]	; (800828c <xPortStartScheduler+0xec>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800822e:	4a17      	ldr	r2, [pc, #92]	; (800828c <xPortStartScheduler+0xec>)
 8008230:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	b2da      	uxtb	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800823a:	4b15      	ldr	r3, [pc, #84]	; (8008290 <xPortStartScheduler+0xf0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a14      	ldr	r2, [pc, #80]	; (8008290 <xPortStartScheduler+0xf0>)
 8008240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008244:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008246:	4b12      	ldr	r3, [pc, #72]	; (8008290 <xPortStartScheduler+0xf0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a11      	ldr	r2, [pc, #68]	; (8008290 <xPortStartScheduler+0xf0>)
 800824c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008250:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008252:	f000 f8dd 	bl	8008410 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008256:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <xPortStartScheduler+0xf4>)
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800825c:	f000 f8fc 	bl	8008458 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008260:	4b0d      	ldr	r3, [pc, #52]	; (8008298 <xPortStartScheduler+0xf8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <xPortStartScheduler+0xf8>)
 8008266:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800826a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800826c:	f7ff ff84 	bl	8008178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008270:	f7fe ff2e 	bl	80070d0 <vTaskSwitchContext>
	prvTaskExitError();
 8008274:	f7ff ff36 	bl	80080e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	e000e400 	.word	0xe000e400
 8008288:	20005b40 	.word	0x20005b40
 800828c:	20005b44 	.word	0x20005b44
 8008290:	e000ed20 	.word	0xe000ed20
 8008294:	20000020 	.word	0x20000020
 8008298:	e000ef34 	.word	0xe000ef34

0800829c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	b672      	cpsid	i
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	b662      	cpsie	i
 80082b6:	607b      	str	r3, [r7, #4]
}
 80082b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <vPortEnterCritical+0x60>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3301      	adds	r3, #1
 80082c0:	4a0e      	ldr	r2, [pc, #56]	; (80082fc <vPortEnterCritical+0x60>)
 80082c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082c4:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <vPortEnterCritical+0x60>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d111      	bne.n	80082f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <vPortEnterCritical+0x64>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <vPortEnterCritical+0x54>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	b672      	cpsid	i
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	b662      	cpsie	i
 80082ea:	603b      	str	r3, [r7, #0]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <vPortEnterCritical+0x52>
	}
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000020 	.word	0x20000020
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800830a:	4b13      	ldr	r3, [pc, #76]	; (8008358 <vPortExitCritical+0x54>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10c      	bne.n	800832c <vPortExitCritical+0x28>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	b672      	cpsid	i
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	b662      	cpsie	i
 8008326:	607b      	str	r3, [r7, #4]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <vPortExitCritical+0x54>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3b01      	subs	r3, #1
 8008332:	4a09      	ldr	r2, [pc, #36]	; (8008358 <vPortExitCritical+0x54>)
 8008334:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008336:	4b08      	ldr	r3, [pc, #32]	; (8008358 <vPortExitCritical+0x54>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d105      	bne.n	800834a <vPortExitCritical+0x46>
 800833e:	2300      	movs	r3, #0
 8008340:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	f383 8811 	msr	BASEPRI, r3
}
 8008348:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000020 	.word	0x20000020
 800835c:	00000000 	.word	0x00000000

08008360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008360:	f3ef 8009 	mrs	r0, PSP
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <pxCurrentTCBConst>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f01e 0f10 	tst.w	lr, #16
 8008370:	bf08      	it	eq
 8008372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008384:	b672      	cpsid	i
 8008386:	f380 8811 	msr	BASEPRI, r0
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	b662      	cpsie	i
 8008394:	f7fe fe9c 	bl	80070d0 <vTaskSwitchContext>
 8008398:	f04f 0000 	mov.w	r0, #0
 800839c:	f380 8811 	msr	BASEPRI, r0
 80083a0:	bc09      	pop	{r0, r3}
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	6808      	ldr	r0, [r1, #0]
 80083a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083aa:	f01e 0f10 	tst.w	lr, #16
 80083ae:	bf08      	it	eq
 80083b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083b4:	f380 8809 	msr	PSP, r0
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop

080083c0 <pxCurrentTCBConst>:
 80083c0:	20005514 	.word	0x20005514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	b672      	cpsid	i
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	b662      	cpsie	i
 80083e2:	607b      	str	r3, [r7, #4]
}
 80083e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e6:	f7fe fdb7 	bl	8006f58 <xTaskIncrementTick>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083f0:	4b06      	ldr	r3, [pc, #24]	; (800840c <SysTick_Handler+0x44>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	2300      	movs	r3, #0
 80083fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	f383 8811 	msr	BASEPRI, r3
}
 8008402:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008414:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <vPortSetupTimerInterrupt+0x34>)
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <vPortSetupTimerInterrupt+0x38>)
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <vPortSetupTimerInterrupt+0x3c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a0a      	ldr	r2, [pc, #40]	; (8008450 <vPortSetupTimerInterrupt+0x40>)
 8008426:	fba2 2303 	umull	r2, r3, r2, r3
 800842a:	099b      	lsrs	r3, r3, #6
 800842c:	4a09      	ldr	r2, [pc, #36]	; (8008454 <vPortSetupTimerInterrupt+0x44>)
 800842e:	3b01      	subs	r3, #1
 8008430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008432:	4b04      	ldr	r3, [pc, #16]	; (8008444 <vPortSetupTimerInterrupt+0x34>)
 8008434:	2207      	movs	r2, #7
 8008436:	601a      	str	r2, [r3, #0]
}
 8008438:	bf00      	nop
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	e000e010 	.word	0xe000e010
 8008448:	e000e018 	.word	0xe000e018
 800844c:	20000000 	.word	0x20000000
 8008450:	10624dd3 	.word	0x10624dd3
 8008454:	e000e014 	.word	0xe000e014

08008458 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008458:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008468 <vPortEnableVFP+0x10>
 800845c:	6801      	ldr	r1, [r0, #0]
 800845e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008462:	6001      	str	r1, [r0, #0]
 8008464:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008466:	bf00      	nop
 8008468:	e000ed88 	.word	0xe000ed88

0800846c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008472:	f3ef 8305 	mrs	r3, IPSR
 8008476:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b0f      	cmp	r3, #15
 800847c:	d916      	bls.n	80084ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800847e:	4a19      	ldr	r2, [pc, #100]	; (80084e4 <vPortValidateInterruptPriority+0x78>)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008488:	4b17      	ldr	r3, [pc, #92]	; (80084e8 <vPortValidateInterruptPriority+0x7c>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	7afa      	ldrb	r2, [r7, #11]
 800848e:	429a      	cmp	r2, r3
 8008490:	d20c      	bcs.n	80084ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	b672      	cpsid	i
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	b662      	cpsie	i
 80084a6:	607b      	str	r3, [r7, #4]
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084ac:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <vPortValidateInterruptPriority+0x80>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084b4:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <vPortValidateInterruptPriority+0x84>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d90c      	bls.n	80084d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	b672      	cpsid	i
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	b662      	cpsie	i
 80084d0:	603b      	str	r3, [r7, #0]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <vPortValidateInterruptPriority+0x68>
	}
 80084d6:	bf00      	nop
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	e000e3f0 	.word	0xe000e3f0
 80084e8:	20005b40 	.word	0x20005b40
 80084ec:	e000ed0c 	.word	0xe000ed0c
 80084f0:	20005b44 	.word	0x20005b44

080084f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	; 0x28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008500:	f7fe fc5a 	bl	8006db8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008504:	4b5b      	ldr	r3, [pc, #364]	; (8008674 <pvPortMalloc+0x180>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800850c:	f000 f91a 	bl	8008744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008510:	4b59      	ldr	r3, [pc, #356]	; (8008678 <pvPortMalloc+0x184>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4013      	ands	r3, r2
 8008518:	2b00      	cmp	r3, #0
 800851a:	f040 8092 	bne.w	8008642 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01f      	beq.n	8008564 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008524:	2208      	movs	r2, #8
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4413      	add	r3, r2
 800852a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	2b00      	cmp	r3, #0
 8008534:	d016      	beq.n	8008564 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f023 0307 	bic.w	r3, r3, #7
 800853c:	3308      	adds	r3, #8
 800853e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00c      	beq.n	8008564 <pvPortMalloc+0x70>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	b672      	cpsid	i
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	b662      	cpsie	i
 800855e:	617b      	str	r3, [r7, #20]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d06b      	beq.n	8008642 <pvPortMalloc+0x14e>
 800856a:	4b44      	ldr	r3, [pc, #272]	; (800867c <pvPortMalloc+0x188>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d866      	bhi.n	8008642 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008574:	4b42      	ldr	r3, [pc, #264]	; (8008680 <pvPortMalloc+0x18c>)
 8008576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008578:	4b41      	ldr	r3, [pc, #260]	; (8008680 <pvPortMalloc+0x18c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800857e:	e004      	b.n	800858a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <pvPortMalloc+0xa8>
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f1      	bne.n	8008580 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800859c:	4b35      	ldr	r3, [pc, #212]	; (8008674 <pvPortMalloc+0x180>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d04d      	beq.n	8008642 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2208      	movs	r2, #8
 80085ac:	4413      	add	r3, r2
 80085ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	2308      	movs	r3, #8
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d921      	bls.n	800860c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00c      	beq.n	80085f4 <pvPortMalloc+0x100>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	b672      	cpsid	i
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	b662      	cpsie	i
 80085ee:	613b      	str	r3, [r7, #16]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008606:	69b8      	ldr	r0, [r7, #24]
 8008608:	f000 f8fe 	bl	8008808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800860c:	4b1b      	ldr	r3, [pc, #108]	; (800867c <pvPortMalloc+0x188>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	4a19      	ldr	r2, [pc, #100]	; (800867c <pvPortMalloc+0x188>)
 8008618:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800861a:	4b18      	ldr	r3, [pc, #96]	; (800867c <pvPortMalloc+0x188>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4b19      	ldr	r3, [pc, #100]	; (8008684 <pvPortMalloc+0x190>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	429a      	cmp	r2, r3
 8008624:	d203      	bcs.n	800862e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008626:	4b15      	ldr	r3, [pc, #84]	; (800867c <pvPortMalloc+0x188>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a16      	ldr	r2, [pc, #88]	; (8008684 <pvPortMalloc+0x190>)
 800862c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <pvPortMalloc+0x184>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	431a      	orrs	r2, r3
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008642:	f7fe fbc7 	bl	8006dd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00c      	beq.n	800866a <pvPortMalloc+0x176>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	b672      	cpsid	i
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	b662      	cpsie	i
 8008664:	60fb      	str	r3, [r7, #12]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <pvPortMalloc+0x174>
	return pvReturn;
 800866a:	69fb      	ldr	r3, [r7, #28]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3728      	adds	r7, #40	; 0x28
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20009750 	.word	0x20009750
 8008678:	2000975c 	.word	0x2000975c
 800867c:	20009754 	.word	0x20009754
 8008680:	20009748 	.word	0x20009748
 8008684:	20009758 	.word	0x20009758

08008688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d04c      	beq.n	8008734 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800869a:	2308      	movs	r3, #8
 800869c:	425b      	negs	r3, r3
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4413      	add	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	4b23      	ldr	r3, [pc, #140]	; (800873c <vPortFree+0xb4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4013      	ands	r3, r2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10c      	bne.n	80086d0 <vPortFree+0x48>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	b672      	cpsid	i
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	b662      	cpsie	i
 80086ca:	60fb      	str	r3, [r7, #12]
}
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <vPortFree+0x6a>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	b672      	cpsid	i
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	b662      	cpsie	i
 80086ec:	60bb      	str	r3, [r7, #8]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <vPortFree+0xb4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d019      	beq.n	8008734 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d115      	bne.n	8008734 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	4b0b      	ldr	r3, [pc, #44]	; (800873c <vPortFree+0xb4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	43db      	mvns	r3, r3
 8008712:	401a      	ands	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008718:	f7fe fb4e 	bl	8006db8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	4b07      	ldr	r3, [pc, #28]	; (8008740 <vPortFree+0xb8>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4413      	add	r3, r2
 8008726:	4a06      	ldr	r2, [pc, #24]	; (8008740 <vPortFree+0xb8>)
 8008728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f000 f86c 	bl	8008808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008730:	f7fe fb50 	bl	8006dd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008734:	bf00      	nop
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	2000975c 	.word	0x2000975c
 8008740:	20009754 	.word	0x20009754

08008744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800874a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800874e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008750:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <prvHeapInit+0xac>)
 8008752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00c      	beq.n	8008778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3307      	adds	r3, #7
 8008762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0307 	bic.w	r3, r3, #7
 800876a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <prvHeapInit+0xac>)
 8008774:	4413      	add	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800877c:	4a1d      	ldr	r2, [pc, #116]	; (80087f4 <prvHeapInit+0xb0>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008782:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <prvHeapInit+0xb0>)
 8008784:	2200      	movs	r2, #0
 8008786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	4413      	add	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008790:	2208      	movs	r2, #8
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 0307 	bic.w	r3, r3, #7
 800879e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a15      	ldr	r2, [pc, #84]	; (80087f8 <prvHeapInit+0xb4>)
 80087a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <prvHeapInit+0xb4>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2200      	movs	r2, #0
 80087ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087ae:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <prvHeapInit+0xb4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <prvHeapInit+0xb4>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	4a0a      	ldr	r2, [pc, #40]	; (80087fc <prvHeapInit+0xb8>)
 80087d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4a09      	ldr	r2, [pc, #36]	; (8008800 <prvHeapInit+0xbc>)
 80087da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <prvHeapInit+0xc0>)
 80087de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087e2:	601a      	str	r2, [r3, #0]
}
 80087e4:	bf00      	nop
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20005b48 	.word	0x20005b48
 80087f4:	20009748 	.word	0x20009748
 80087f8:	20009750 	.word	0x20009750
 80087fc:	20009758 	.word	0x20009758
 8008800:	20009754 	.word	0x20009754
 8008804:	2000975c 	.word	0x2000975c

08008808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008810:	4b28      	ldr	r3, [pc, #160]	; (80088b4 <prvInsertBlockIntoFreeList+0xac>)
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e002      	b.n	800881c <prvInsertBlockIntoFreeList+0x14>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	429a      	cmp	r2, r3
 8008824:	d8f7      	bhi.n	8008816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d108      	bne.n	800884a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	441a      	add	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	441a      	add	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d118      	bne.n	8008890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d00d      	beq.n	8008886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	441a      	add	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e008      	b.n	8008898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008886:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	e003      	b.n	8008898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d002      	beq.n	80088a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20009748 	.word	0x20009748
 80088b8:	20009750 	.word	0x20009750

080088bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	330c      	adds	r3, #12
 80088cc:	461a      	mov	r2, r3
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fcb9 	bl	800a248 <tcpip_send_msg_wait_sem>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80088da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <netconn_apimsg+0x2e>
    return apimsg->err;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80088e8:	e001      	b.n	80088ee <netconn_apimsg+0x32>
  }
  return err;
 80088ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	603a      	str	r2, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
 8008904:	460b      	mov	r3, r1
 8008906:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fe0b 	bl	8009528 <netconn_alloc>
 8008912:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d054      	beq.n	80089c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800891a:	79bb      	ldrb	r3, [r7, #6]
 800891c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008922:	f107 0308 	add.w	r3, r7, #8
 8008926:	4619      	mov	r1, r3
 8008928:	4829      	ldr	r0, [pc, #164]	; (80089d0 <netconn_new_with_proto_and_callback+0xd8>)
 800892a:	f7ff ffc7 	bl	80088bc <netconn_apimsg>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008934:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008938:	2b00      	cmp	r3, #0
 800893a:	d043      	beq.n	80089c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <netconn_new_with_proto_and_callback+0x58>
 8008944:	4b23      	ldr	r3, [pc, #140]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 8008946:	22a3      	movs	r2, #163	; 0xa3
 8008948:	4923      	ldr	r1, [pc, #140]	; (80089d8 <netconn_new_with_proto_and_callback+0xe0>)
 800894a:	4824      	ldr	r0, [pc, #144]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 800894c:	f00c fbac 	bl	80150a8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	3310      	adds	r3, #16
 8008954:	4618      	mov	r0, r3
 8008956:	f00c f8a7 	bl	8014aa8 <sys_mbox_valid>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d105      	bne.n	800896c <netconn_new_with_proto_and_callback+0x74>
 8008960:	4b1c      	ldr	r3, [pc, #112]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 8008962:	22a4      	movs	r2, #164	; 0xa4
 8008964:	491e      	ldr	r1, [pc, #120]	; (80089e0 <netconn_new_with_proto_and_callback+0xe8>)
 8008966:	481d      	ldr	r0, [pc, #116]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 8008968:	f00c fb9e 	bl	80150a8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	3314      	adds	r3, #20
 8008970:	4618      	mov	r0, r3
 8008972:	f00c f899 	bl	8014aa8 <sys_mbox_valid>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <netconn_new_with_proto_and_callback+0x90>
 800897c:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 800897e:	22a6      	movs	r2, #166	; 0xa6
 8008980:	4918      	ldr	r1, [pc, #96]	; (80089e4 <netconn_new_with_proto_and_callback+0xec>)
 8008982:	4816      	ldr	r0, [pc, #88]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 8008984:	f00c fb90 	bl	80150a8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	330c      	adds	r3, #12
 800898c:	4618      	mov	r0, r3
 800898e:	f00c f919 	bl	8014bc4 <sys_sem_valid>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <netconn_new_with_proto_and_callback+0xac>
 8008998:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 800899a:	22a9      	movs	r2, #169	; 0xa9
 800899c:	4912      	ldr	r1, [pc, #72]	; (80089e8 <netconn_new_with_proto_and_callback+0xf0>)
 800899e:	480f      	ldr	r0, [pc, #60]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 80089a0:	f00c fb82 	bl	80150a8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	330c      	adds	r3, #12
 80089a8:	4618      	mov	r0, r3
 80089aa:	f00c f8fe 	bl	8014baa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	3310      	adds	r3, #16
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00c f804 	bl	80149c0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80089b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089ba:	2006      	movs	r0, #6
 80089bc:	f002 f9f0 	bl	800ada0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	e000      	b.n	80089c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3730      	adds	r7, #48	; 0x30
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	080094fd 	.word	0x080094fd
 80089d4:	08015fa8 	.word	0x08015fa8
 80089d8:	08015fdc 	.word	0x08015fdc
 80089dc:	08016000 	.word	0x08016000
 80089e0:	08016028 	.word	0x08016028
 80089e4:	08016040 	.word	0x08016040
 80089e8:	08016064 	.word	0x08016064

080089ec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08e      	sub	sp, #56	; 0x38
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <netconn_bind+0x28>
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <netconn_bind+0x5c>)
 8008a02:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008a06:	4911      	ldr	r1, [pc, #68]	; (8008a4c <netconn_bind+0x60>)
 8008a08:	4811      	ldr	r0, [pc, #68]	; (8008a50 <netconn_bind+0x64>)
 8008a0a:	f00c fb4d 	bl	80150a8 <iprintf>
 8008a0e:	f06f 030f 	mvn.w	r3, #15
 8008a12:	e015      	b.n	8008a40 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <netconn_bind+0x68>)
 8008a1c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008a2a:	f107 0314 	add.w	r3, r7, #20
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4809      	ldr	r0, [pc, #36]	; (8008a58 <netconn_bind+0x6c>)
 8008a32:	f7ff ff43 	bl	80088bc <netconn_apimsg>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008a3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3738      	adds	r7, #56	; 0x38
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	08015fa8 	.word	0x08015fa8
 8008a4c:	080160e0 	.word	0x080160e0
 8008a50:	08016000 	.word	0x08016000
 8008a54:	08019058 	.word	0x08019058
 8008a58:	08009965 	.word	0x08009965

08008a5c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08c      	sub	sp, #48	; 0x30
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <netconn_listen_with_backlog+0x26>
 8008a6e:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <netconn_listen_with_backlog+0x48>)
 8008a70:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008a74:	490c      	ldr	r1, [pc, #48]	; (8008aa8 <netconn_listen_with_backlog+0x4c>)
 8008a76:	480d      	ldr	r0, [pc, #52]	; (8008aac <netconn_listen_with_backlog+0x50>)
 8008a78:	f00c fb16 	bl	80150a8 <iprintf>
 8008a7c:	f06f 030f 	mvn.w	r3, #15
 8008a80:	e00c      	b.n	8008a9c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008a86:	f107 030c 	add.w	r3, r7, #12
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4808      	ldr	r0, [pc, #32]	; (8008ab0 <netconn_listen_with_backlog+0x54>)
 8008a8e:	f7ff ff15 	bl	80088bc <netconn_apimsg>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008a98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3730      	adds	r7, #48	; 0x30
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	08015fa8 	.word	0x08015fa8
 8008aa8:	08016160 	.word	0x08016160
 8008aac:	08016000 	.word	0x08016000
 8008ab0:	080099bd 	.word	0x080099bd

08008ab4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d109      	bne.n	8008ad8 <netconn_accept+0x24>
 8008ac4:	4b3d      	ldr	r3, [pc, #244]	; (8008bbc <netconn_accept+0x108>)
 8008ac6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008aca:	493d      	ldr	r1, [pc, #244]	; (8008bc0 <netconn_accept+0x10c>)
 8008acc:	483d      	ldr	r0, [pc, #244]	; (8008bc4 <netconn_accept+0x110>)
 8008ace:	f00c faeb 	bl	80150a8 <iprintf>
 8008ad2:	f06f 030f 	mvn.w	r3, #15
 8008ad6:	e06c      	b.n	8008bb2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d109      	bne.n	8008af8 <netconn_accept+0x44>
 8008ae4:	4b35      	ldr	r3, [pc, #212]	; (8008bbc <netconn_accept+0x108>)
 8008ae6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008aea:	4937      	ldr	r1, [pc, #220]	; (8008bc8 <netconn_accept+0x114>)
 8008aec:	4835      	ldr	r0, [pc, #212]	; (8008bc4 <netconn_accept+0x110>)
 8008aee:	f00c fadb 	bl	80150a8 <iprintf>
 8008af2:	f06f 030f 	mvn.w	r3, #15
 8008af6:	e05c      	b.n	8008bb2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f939 	bl	8008d70 <netconn_err>
 8008afe:	4603      	mov	r3, r0
 8008b00:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008b02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008b0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b0e:	e050      	b.n	8008bb2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3314      	adds	r3, #20
 8008b14:	4618      	mov	r0, r3
 8008b16:	f00b ffc7 	bl	8014aa8 <sys_mbox_valid>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <netconn_accept+0x78>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	7f1b      	ldrb	r3, [r3, #28]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008b2c:	f06f 030e 	mvn.w	r3, #14
 8008b30:	e03f      	b.n	8008bb2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	7f1b      	ldrb	r3, [r3, #28]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00e      	beq.n	8008b5c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3314      	adds	r3, #20
 8008b42:	f107 020c 	add.w	r2, r7, #12
 8008b46:	4611      	mov	r1, r2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f00b ff96 	bl	8014a7a <sys_arch_mbox_tryfetch>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b54:	d10a      	bne.n	8008b6c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008b56:	f06f 0306 	mvn.w	r3, #6
 8008b5a:	e02a      	b.n	8008bb2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3314      	adds	r3, #20
 8008b60:	f107 010c 	add.w	r1, r7, #12
 8008b64:	2200      	movs	r2, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f00b ff56 	bl	8014a18 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <netconn_accept+0xcc>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f107 0213 	add.w	r2, r7, #19
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f943 	bl	8008e14 <lwip_netconn_is_err_msg>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008b94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b98:	e00b      	b.n	8008bb2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008ba0:	f06f 030e 	mvn.w	r3, #14
 8008ba4:	e005      	b.n	8008bb2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008bb0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	08015fa8 	.word	0x08015fa8
 8008bc0:	08016180 	.word	0x08016180
 8008bc4:	08016000 	.word	0x08016000
 8008bc8:	080161a0 	.word	0x080161a0

08008bcc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008be2:	78fa      	ldrb	r2, [r7, #3]
 8008be4:	f107 0110 	add.w	r1, r7, #16
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4613      	mov	r3, r2
 8008bee:	2201      	movs	r2, #1
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f805 	bl	8008c00 <netconn_write_vectors_partly>
 8008bf6:	4603      	mov	r3, r0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b092      	sub	sp, #72	; 0x48
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	460b      	mov	r3, r1
 8008c10:	80fb      	strh	r3, [r7, #6]
 8008c12:	4613      	mov	r3, r2
 8008c14:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <netconn_write_vectors_partly+0x30>
 8008c1c:	4b4e      	ldr	r3, [pc, #312]	; (8008d58 <netconn_write_vectors_partly+0x158>)
 8008c1e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008c22:	494e      	ldr	r1, [pc, #312]	; (8008d5c <netconn_write_vectors_partly+0x15c>)
 8008c24:	484e      	ldr	r0, [pc, #312]	; (8008d60 <netconn_write_vectors_partly+0x160>)
 8008c26:	f00c fa3f 	bl	80150a8 <iprintf>
 8008c2a:	f06f 030f 	mvn.w	r3, #15
 8008c2e:	e08e      	b.n	8008d4e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c38:	2b10      	cmp	r3, #16
 8008c3a:	d009      	beq.n	8008c50 <netconn_write_vectors_partly+0x50>
 8008c3c:	4b46      	ldr	r3, [pc, #280]	; (8008d58 <netconn_write_vectors_partly+0x158>)
 8008c3e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008c42:	4948      	ldr	r1, [pc, #288]	; (8008d64 <netconn_write_vectors_partly+0x164>)
 8008c44:	4846      	ldr	r0, [pc, #280]	; (8008d60 <netconn_write_vectors_partly+0x160>)
 8008c46:	f00c fa2f 	bl	80150a8 <iprintf>
 8008c4a:	f06f 0305 	mvn.w	r3, #5
 8008c4e:	e07e      	b.n	8008d4e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	7f1b      	ldrb	r3, [r3, #28]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <netconn_write_vectors_partly+0x66>
 8008c5c:	797b      	ldrb	r3, [r7, #5]
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <netconn_write_vectors_partly+0x6a>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <netconn_write_vectors_partly+0x6c>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <netconn_write_vectors_partly+0x84>
 8008c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008c7e:	f06f 0305 	mvn.w	r3, #5
 8008c82:	e064      	b.n	8008d4e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008c88:	2300      	movs	r3, #0
 8008c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c8c:	e015      	b.n	8008cba <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4413      	add	r3, r2
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c9a:	4413      	add	r3, r2
 8008c9c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d202      	bcs.n	8008cb4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008cae:	f06f 0305 	mvn.w	r3, #5
 8008cb2:	e04c      	b.n	8008d4e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	dbe5      	blt.n	8008c8e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e040      	b.n	8008d4e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	da0a      	bge.n	8008ce8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d102      	bne.n	8008cde <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008cd8:	f06f 0305 	mvn.w	r3, #5
 8008cdc:	e037      	b.n	8008d4e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008cde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008ce2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008cf0:	88fb      	ldrh	r3, [r7, #6]
 8008cf2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008cf8:	797b      	ldrb	r3, [r7, #5]
 8008cfa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d00:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008d06:	f107 0314 	add.w	r3, r7, #20
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4816      	ldr	r0, [pc, #88]	; (8008d68 <netconn_write_vectors_partly+0x168>)
 8008d0e:	f7ff fdd5 	bl	80088bc <netconn_apimsg>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008d18:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d114      	bne.n	8008d4a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d2a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d006      	beq.n	8008d4a <netconn_write_vectors_partly+0x14a>
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <netconn_write_vectors_partly+0x158>)
 8008d3e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008d42:	490a      	ldr	r1, [pc, #40]	; (8008d6c <netconn_write_vectors_partly+0x16c>)
 8008d44:	4806      	ldr	r0, [pc, #24]	; (8008d60 <netconn_write_vectors_partly+0x160>)
 8008d46:	f00c f9af 	bl	80150a8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008d4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3748      	adds	r7, #72	; 0x48
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	08015fa8 	.word	0x08015fa8
 8008d5c:	08016274 	.word	0x08016274
 8008d60:	08016000 	.word	0x08016000
 8008d64:	08016290 	.word	0x08016290
 8008d68:	08009e85 	.word	0x08009e85
 8008d6c:	080162b4 	.word	0x080162b4

08008d70 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <netconn_err+0x12>
    return ERR_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e00d      	b.n	8008d9e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008d82:	f00b ff9b 	bl	8014cbc <sys_arch_protect>
 8008d86:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7a1b      	ldrb	r3, [r3, #8]
 8008d8c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f00b ff9f 	bl	8014cd8 <sys_arch_unprotect>
  return err;
 8008d9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db6:	f113 0f0d 	cmn.w	r3, #13
 8008dba:	d009      	beq.n	8008dd0 <lwip_netconn_err_to_msg+0x28>
 8008dbc:	f113 0f0d 	cmn.w	r3, #13
 8008dc0:	dc0c      	bgt.n	8008ddc <lwip_netconn_err_to_msg+0x34>
 8008dc2:	f113 0f0f 	cmn.w	r3, #15
 8008dc6:	d007      	beq.n	8008dd8 <lwip_netconn_err_to_msg+0x30>
 8008dc8:	f113 0f0e 	cmn.w	r3, #14
 8008dcc:	d002      	beq.n	8008dd4 <lwip_netconn_err_to_msg+0x2c>
 8008dce:	e005      	b.n	8008ddc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <lwip_netconn_err_to_msg+0x54>)
 8008dd2:	e00e      	b.n	8008df2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008dd4:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <lwip_netconn_err_to_msg+0x58>)
 8008dd6:	e00c      	b.n	8008df2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <lwip_netconn_err_to_msg+0x5c>)
 8008dda:	e00a      	b.n	8008df2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <lwip_netconn_err_to_msg+0x48>
 8008de4:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <lwip_netconn_err_to_msg+0x60>)
 8008de6:	227d      	movs	r2, #125	; 0x7d
 8008de8:	4908      	ldr	r1, [pc, #32]	; (8008e0c <lwip_netconn_err_to_msg+0x64>)
 8008dea:	4809      	ldr	r0, [pc, #36]	; (8008e10 <lwip_netconn_err_to_msg+0x68>)
 8008dec:	f00c f95c 	bl	80150a8 <iprintf>
      return NULL;
 8008df0:	2300      	movs	r3, #0
  }
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	08018f54 	.word	0x08018f54
 8008e00:	08018f55 	.word	0x08018f55
 8008e04:	08018f56 	.word	0x08018f56
 8008e08:	080162f4 	.word	0x080162f4
 8008e0c:	08016328 	.word	0x08016328
 8008e10:	08016338 	.word	0x08016338

08008e14 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d105      	bne.n	8008e30 <lwip_netconn_is_err_msg+0x1c>
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <lwip_netconn_is_err_msg+0x5c>)
 8008e26:	2285      	movs	r2, #133	; 0x85
 8008e28:	4912      	ldr	r1, [pc, #72]	; (8008e74 <lwip_netconn_is_err_msg+0x60>)
 8008e2a:	4813      	ldr	r0, [pc, #76]	; (8008e78 <lwip_netconn_is_err_msg+0x64>)
 8008e2c:	f00c f93c 	bl	80150a8 <iprintf>

  if (msg == &netconn_aborted) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a12      	ldr	r2, [pc, #72]	; (8008e7c <lwip_netconn_is_err_msg+0x68>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d104      	bne.n	8008e42 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	22f3      	movs	r2, #243	; 0xf3
 8008e3c:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e012      	b.n	8008e68 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a0e      	ldr	r2, [pc, #56]	; (8008e80 <lwip_netconn_is_err_msg+0x6c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d104      	bne.n	8008e54 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	22f2      	movs	r2, #242	; 0xf2
 8008e4e:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e009      	b.n	8008e68 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a0b      	ldr	r2, [pc, #44]	; (8008e84 <lwip_netconn_is_err_msg+0x70>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d104      	bne.n	8008e66 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	22f1      	movs	r2, #241	; 0xf1
 8008e60:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	080162f4 	.word	0x080162f4
 8008e74:	08016360 	.word	0x08016360
 8008e78:	08016338 	.word	0x08016338
 8008e7c:	08018f54 	.word	0x08018f54
 8008e80:	08018f55 	.word	0x08018f55
 8008e84:	08018f56 	.word	0x08018f56

08008e88 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d106      	bne.n	8008eaa <recv_tcp+0x22>
 8008e9c:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <recv_tcp+0xf0>)
 8008e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ea2:	4936      	ldr	r1, [pc, #216]	; (8008f7c <recv_tcp+0xf4>)
 8008ea4:	4836      	ldr	r0, [pc, #216]	; (8008f80 <recv_tcp+0xf8>)
 8008ea6:	f00c f8ff 	bl	80150a8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <recv_tcp+0x36>
 8008eb0:	4b31      	ldr	r3, [pc, #196]	; (8008f78 <recv_tcp+0xf0>)
 8008eb2:	f240 122d 	movw	r2, #301	; 0x12d
 8008eb6:	4933      	ldr	r1, [pc, #204]	; (8008f84 <recv_tcp+0xfc>)
 8008eb8:	4831      	ldr	r0, [pc, #196]	; (8008f80 <recv_tcp+0xf8>)
 8008eba:	f00c f8f5 	bl	80150a8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <recv_tcp+0x4c>
 8008ec6:	4b2c      	ldr	r3, [pc, #176]	; (8008f78 <recv_tcp+0xf0>)
 8008ec8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008ecc:	492e      	ldr	r1, [pc, #184]	; (8008f88 <recv_tcp+0x100>)
 8008ece:	482c      	ldr	r0, [pc, #176]	; (8008f80 <recv_tcp+0xf8>)
 8008ed0:	f00c f8ea 	bl	80150a8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <recv_tcp+0x5c>
    return ERR_VAL;
 8008ede:	f06f 0305 	mvn.w	r3, #5
 8008ee2:	e045      	b.n	8008f70 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d006      	beq.n	8008efc <recv_tcp+0x74>
 8008eee:	4b22      	ldr	r3, [pc, #136]	; (8008f78 <recv_tcp+0xf0>)
 8008ef0:	f240 1235 	movw	r2, #309	; 0x135
 8008ef4:	4925      	ldr	r1, [pc, #148]	; (8008f8c <recv_tcp+0x104>)
 8008ef6:	4822      	ldr	r0, [pc, #136]	; (8008f80 <recv_tcp+0xf8>)
 8008ef8:	f00c f8d6 	bl	80150a8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	3310      	adds	r3, #16
 8008f00:	4618      	mov	r0, r3
 8008f02:	f00b fdd1 	bl	8014aa8 <sys_mbox_valid>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10d      	bne.n	8008f28 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d008      	beq.n	8008f24 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	891b      	ldrh	r3, [r3, #8]
 8008f16:	4619      	mov	r1, r3
 8008f18:	68b8      	ldr	r0, [r7, #8]
 8008f1a:	f003 fd99 	bl	800ca50 <tcp_recved>
      pbuf_free(p);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f002 fdde 	bl	800bae0 <pbuf_free>
    }
    return ERR_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e023      	b.n	8008f70 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <recv_tcp+0xb2>
    msg = p;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	891b      	ldrh	r3, [r3, #8]
 8008f36:	83fb      	strh	r3, [r7, #30]
 8008f38:	e003      	b.n	8008f42 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008f3a:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <recv_tcp+0x108>)
 8008f3c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	3310      	adds	r3, #16
 8008f46:	69b9      	ldr	r1, [r7, #24]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f00b fd4b 	bl	80149e4 <sys_mbox_trypost>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f58:	e00a      	b.n	8008f70 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <recv_tcp+0xe6>
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	8bfa      	ldrh	r2, [r7, #30]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	6978      	ldr	r0, [r7, #20]
 8008f6c:	4798      	blx	r3
  }

  return ERR_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3720      	adds	r7, #32
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	080162f4 	.word	0x080162f4
 8008f7c:	0801636c 	.word	0x0801636c
 8008f80:	08016338 	.word	0x08016338
 8008f84:	08016390 	.word	0x08016390
 8008f88:	080163b0 	.word	0x080163b0
 8008f8c:	080163c8 	.word	0x080163c8
 8008f90:	08018f56 	.word	0x08018f56

08008f94 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <poll_tcp+0x22>
 8008fa8:	4b29      	ldr	r3, [pc, #164]	; (8009050 <poll_tcp+0xbc>)
 8008faa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008fae:	4929      	ldr	r1, [pc, #164]	; (8009054 <poll_tcp+0xc0>)
 8008fb0:	4829      	ldr	r0, [pc, #164]	; (8009058 <poll_tcp+0xc4>)
 8008fb2:	f00c f879 	bl	80150a8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d104      	bne.n	8008fc8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fd93 	bl	8009aec <lwip_netconn_do_writemore>
 8008fc6:	e016      	b.n	8008ff6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d112      	bne.n	8008ff6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00a      	beq.n	8008fee <poll_tcp+0x5a>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	7a5b      	ldrb	r3, [r3, #9]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	7a5a      	ldrb	r2, [r3, #9]
 8008fe8:	3a01      	subs	r2, #1
 8008fea:	b2d2      	uxtb	r2, r2
 8008fec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb4d 	bl	8009690 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	7f1b      	ldrb	r3, [r3, #28]
 8008ffa:	f003 0310 	and.w	r3, r3, #16
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d021      	beq.n	8009046 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01d      	beq.n	8009046 <poll_tcp+0xb2>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009012:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009016:	d316      	bcc.n	8009046 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009020:	2b04      	cmp	r3, #4
 8009022:	d810      	bhi.n	8009046 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	7f1b      	ldrb	r3, [r3, #28]
 8009028:	f023 0310 	bic.w	r3, r3, #16
 800902c:	b2da      	uxtb	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <poll_tcp+0xb2>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2200      	movs	r2, #0
 8009040:	2102      	movs	r1, #2
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	080162f4 	.word	0x080162f4
 8009054:	080163e8 	.word	0x080163e8
 8009058:	08016338 	.word	0x08016338

0800905c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	4613      	mov	r3, r2
 8009068:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <sent_tcp+0x26>
 8009074:	4b20      	ldr	r3, [pc, #128]	; (80090f8 <sent_tcp+0x9c>)
 8009076:	f240 1293 	movw	r2, #403	; 0x193
 800907a:	4920      	ldr	r1, [pc, #128]	; (80090fc <sent_tcp+0xa0>)
 800907c:	4820      	ldr	r0, [pc, #128]	; (8009100 <sent_tcp+0xa4>)
 800907e:	f00c f813 	bl	80150a8 <iprintf>

  if (conn) {
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d032      	beq.n	80090ee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d104      	bne.n	800909a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009090:	2101      	movs	r1, #1
 8009092:	6978      	ldr	r0, [r7, #20]
 8009094:	f000 fd2a 	bl	8009aec <lwip_netconn_do_writemore>
 8009098:	e007      	b.n	80090aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d103      	bne.n	80090aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80090a2:	2101      	movs	r1, #1
 80090a4:	6978      	ldr	r0, [r7, #20]
 80090a6:	f000 faf3 	bl	8009690 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01d      	beq.n	80090ee <sent_tcp+0x92>
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80090ba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80090be:	d316      	bcc.n	80090ee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d810      	bhi.n	80090ee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	7f1b      	ldrb	r3, [r3, #28]
 80090d0:	f023 0310 	bic.w	r3, r3, #16
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <sent_tcp+0x92>
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	88fa      	ldrh	r2, [r7, #6]
 80090e8:	2102      	movs	r1, #2
 80090ea:	6978      	ldr	r0, [r7, #20]
 80090ec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	080162f4 	.word	0x080162f4
 80090fc:	080163e8 	.word	0x080163e8
 8009100:	08016338 	.word	0x08016338

08009104 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b088      	sub	sp, #32
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <err_tcp+0x24>
 800911a:	4b5f      	ldr	r3, [pc, #380]	; (8009298 <err_tcp+0x194>)
 800911c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009120:	495e      	ldr	r1, [pc, #376]	; (800929c <err_tcp+0x198>)
 8009122:	485f      	ldr	r0, [pc, #380]	; (80092a0 <err_tcp+0x19c>)
 8009124:	f00b ffc0 	bl	80150a8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009128:	f00b fdc8 	bl	8014cbc <sys_arch_protect>
 800912c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	2200      	movs	r2, #0
 8009132:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	7f1b      	ldrb	r3, [r3, #28]
 800913e:	f043 0301 	orr.w	r3, r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	2200      	movs	r2, #0
 8009152:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009154:	69b8      	ldr	r0, [r7, #24]
 8009156:	f00b fdbf 	bl	8014cd8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <err_tcp+0x6a>
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	2200      	movs	r2, #0
 8009168:	2104      	movs	r1, #4
 800916a:	69f8      	ldr	r0, [r7, #28]
 800916c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <err_tcp+0x7e>
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2200      	movs	r2, #0
 800917c:	2100      	movs	r1, #0
 800917e:	69f8      	ldr	r0, [r7, #28]
 8009180:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <err_tcp+0x92>
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	2200      	movs	r2, #0
 8009190:	2102      	movs	r1, #2
 8009192:	69f8      	ldr	r0, [r7, #28]
 8009194:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff fe04 	bl	8008da8 <lwip_netconn_err_to_msg>
 80091a0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	3310      	adds	r3, #16
 80091a6:	4618      	mov	r0, r3
 80091a8:	f00b fc7e 	bl	8014aa8 <sys_mbox_valid>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	3310      	adds	r3, #16
 80091b6:	6939      	ldr	r1, [r7, #16]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f00b fc13 	bl	80149e4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	3314      	adds	r3, #20
 80091c2:	4618      	mov	r0, r3
 80091c4:	f00b fc70 	bl	8014aa8 <sys_mbox_valid>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	3314      	adds	r3, #20
 80091d2:	6939      	ldr	r1, [r7, #16]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f00b fc05 	bl	80149e4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d005      	beq.n	80091ec <err_tcp+0xe8>
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d002      	beq.n	80091ec <err_tcp+0xe8>
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d143      	bne.n	8009274 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	7f1b      	ldrb	r3, [r3, #28]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	7f1b      	ldrb	r3, [r3, #28]
 8009204:	f023 0304 	bic.w	r3, r3, #4
 8009208:	b2da      	uxtb	r2, r3
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d13b      	bne.n	800928c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <err_tcp+0x126>
 800921c:	4b1e      	ldr	r3, [pc, #120]	; (8009298 <err_tcp+0x194>)
 800921e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009222:	4920      	ldr	r1, [pc, #128]	; (80092a4 <err_tcp+0x1a0>)
 8009224:	481e      	ldr	r0, [pc, #120]	; (80092a0 <err_tcp+0x19c>)
 8009226:	f00b ff3f 	bl	80150a8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b04      	cmp	r3, #4
 800922e:	d104      	bne.n	800923a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	2200      	movs	r2, #0
 8009236:	711a      	strb	r2, [r3, #4]
 8009238:	e003      	b.n	8009242 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	78fa      	ldrb	r2, [r7, #3]
 8009240:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	330c      	adds	r3, #12
 800924a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800924c:	68b8      	ldr	r0, [r7, #8]
 800924e:	f00b fcb9 	bl	8014bc4 <sys_sem_valid>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <err_tcp+0x162>
 8009258:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <err_tcp+0x194>)
 800925a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800925e:	4912      	ldr	r1, [pc, #72]	; (80092a8 <err_tcp+0x1a4>)
 8009260:	480f      	ldr	r0, [pc, #60]	; (80092a0 <err_tcp+0x19c>)
 8009262:	f00b ff21 	bl	80150a8 <iprintf>
      conn->current_msg = NULL;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	2200      	movs	r2, #0
 800926a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800926c:	68b8      	ldr	r0, [r7, #8]
 800926e:	f00b fc8f 	bl	8014b90 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009272:	e00b      	b.n	800928c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d008      	beq.n	800928e <err_tcp+0x18a>
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <err_tcp+0x194>)
 800927e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009282:	490a      	ldr	r1, [pc, #40]	; (80092ac <err_tcp+0x1a8>)
 8009284:	4806      	ldr	r0, [pc, #24]	; (80092a0 <err_tcp+0x19c>)
 8009286:	f00b ff0f 	bl	80150a8 <iprintf>
  }
}
 800928a:	e000      	b.n	800928e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800928c:	bf00      	nop
}
 800928e:	bf00      	nop
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	080162f4 	.word	0x080162f4
 800929c:	080163e8 	.word	0x080163e8
 80092a0:	08016338 	.word	0x08016338
 80092a4:	080163f8 	.word	0x080163f8
 80092a8:	08016414 	.word	0x08016414
 80092ac:	08016430 	.word	0x08016430

080092b0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f004 fa8b 	bl	800d7dc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80092c6:	490a      	ldr	r1, [pc, #40]	; (80092f0 <setup_tcp+0x40>)
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f004 fa99 	bl	800d800 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80092ce:	4909      	ldr	r1, [pc, #36]	; (80092f4 <setup_tcp+0x44>)
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f004 fab7 	bl	800d844 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80092d6:	2202      	movs	r2, #2
 80092d8:	4907      	ldr	r1, [pc, #28]	; (80092f8 <setup_tcp+0x48>)
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f004 fb0e 	bl	800d8fc <tcp_poll>
  tcp_err(pcb, err_tcp);
 80092e0:	4906      	ldr	r1, [pc, #24]	; (80092fc <setup_tcp+0x4c>)
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f004 fad0 	bl	800d888 <tcp_err>
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08008e89 	.word	0x08008e89
 80092f4:	0800905d 	.word	0x0800905d
 80092f8:	08008f95 	.word	0x08008f95
 80092fc:	08009105 	.word	0x08009105

08009300 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009300:	b590      	push	{r4, r7, lr}
 8009302:	b089      	sub	sp, #36	; 0x24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4613      	mov	r3, r2
 800930c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <accept_function+0x1e>
    return ERR_VAL;
 8009318:	f06f 0305 	mvn.w	r3, #5
 800931c:	e0a1      	b.n	8009462 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	3314      	adds	r3, #20
 8009322:	4618      	mov	r0, r3
 8009324:	f00b fbc0 	bl	8014aa8 <sys_mbox_valid>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d102      	bne.n	8009334 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800932e:	f06f 0305 	mvn.w	r3, #5
 8009332:	e096      	b.n	8009462 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d11b      	bne.n	8009372 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	f103 0414 	add.w	r4, r3, #20
 8009340:	f06f 000c 	mvn.w	r0, #12
 8009344:	f7ff fd30 	bl	8008da8 <lwip_netconn_err_to_msg>
 8009348:	4603      	mov	r3, r0
 800934a:	4619      	mov	r1, r3
 800934c:	4620      	mov	r0, r4
 800934e:	f00b fb49 	bl	80149e4 <sys_mbox_trypost>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <accept_function+0x6c>
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	2200      	movs	r2, #0
 8009366:	2100      	movs	r1, #0
 8009368:	69f8      	ldr	r0, [r7, #28]
 800936a:	4798      	blx	r3
    }
    return ERR_VAL;
 800936c:	f06f 0305 	mvn.w	r3, #5
 8009370:	e077      	b.n	8009462 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d006      	beq.n	8009388 <accept_function+0x88>
 800937a:	4b3c      	ldr	r3, [pc, #240]	; (800946c <accept_function+0x16c>)
 800937c:	f240 222a 	movw	r2, #554	; 0x22a
 8009380:	493b      	ldr	r1, [pc, #236]	; (8009470 <accept_function+0x170>)
 8009382:	483c      	ldr	r0, [pc, #240]	; (8009474 <accept_function+0x174>)
 8009384:	f00b fe90 	bl	80150a8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f000 f8c8 	bl	8009528 <netconn_alloc>
 8009398:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d11b      	bne.n	80093d8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f103 0414 	add.w	r4, r3, #20
 80093a6:	f06f 000c 	mvn.w	r0, #12
 80093aa:	f7ff fcfd 	bl	8008da8 <lwip_netconn_err_to_msg>
 80093ae:	4603      	mov	r3, r0
 80093b0:	4619      	mov	r1, r3
 80093b2:	4620      	mov	r0, r4
 80093b4:	f00b fb16 	bl	80149e4 <sys_mbox_trypost>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d005      	beq.n	80093d2 <accept_function+0xd2>
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ca:	2200      	movs	r2, #0
 80093cc:	2100      	movs	r1, #0
 80093ce:	69f8      	ldr	r0, [r7, #28]
 80093d0:	4798      	blx	r3
    }
    return ERR_MEM;
 80093d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093d6:	e044      	b.n	8009462 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80093de:	69b8      	ldr	r0, [r7, #24]
 80093e0:	f7ff ff66 	bl	80092b0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	3314      	adds	r3, #20
 80093e8:	69b9      	ldr	r1, [r7, #24]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f00b fafa 	bl	80149e4 <sys_mbox_trypost>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d02a      	beq.n	800944c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80093fc:	2100      	movs	r1, #0
 80093fe:	6978      	ldr	r0, [r7, #20]
 8009400:	f004 f9ec 	bl	800d7dc <tcp_arg>
    tcp_recv(pcb, NULL);
 8009404:	2100      	movs	r1, #0
 8009406:	6978      	ldr	r0, [r7, #20]
 8009408:	f004 f9fa 	bl	800d800 <tcp_recv>
    tcp_sent(pcb, NULL);
 800940c:	2100      	movs	r1, #0
 800940e:	6978      	ldr	r0, [r7, #20]
 8009410:	f004 fa18 	bl	800d844 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009414:	2200      	movs	r2, #0
 8009416:	2100      	movs	r1, #0
 8009418:	6978      	ldr	r0, [r7, #20]
 800941a:	f004 fa6f 	bl	800d8fc <tcp_poll>
    tcp_err(pcb, NULL);
 800941e:	2100      	movs	r1, #0
 8009420:	6978      	ldr	r0, [r7, #20]
 8009422:	f004 fa31 	bl	800d888 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2200      	movs	r2, #0
 800942a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	3310      	adds	r3, #16
 8009430:	4618      	mov	r0, r3
 8009432:	f00b fac5 	bl	80149c0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	3310      	adds	r3, #16
 800943a:	4618      	mov	r0, r3
 800943c:	f00b fb45 	bl	8014aca <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009440:	69b8      	ldr	r0, [r7, #24]
 8009442:	f000 f8db 	bl	80095fc <netconn_free>
    return ERR_MEM;
 8009446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800944a:	e00a      	b.n	8009462 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <accept_function+0x160>
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	2200      	movs	r2, #0
 800945a:	2100      	movs	r1, #0
 800945c:	69f8      	ldr	r0, [r7, #28]
 800945e:	4798      	blx	r3
  }

  return ERR_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3724      	adds	r7, #36	; 0x24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd90      	pop	{r4, r7, pc}
 800946a:	bf00      	nop
 800946c:	080162f4 	.word	0x080162f4
 8009470:	0801644c 	.word	0x0801644c
 8009474:	08016338 	.word	0x08016338

08009478 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009478:	b590      	push	{r4, r7, lr}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d006      	beq.n	800949c <pcb_new+0x24>
 800948e:	4b18      	ldr	r3, [pc, #96]	; (80094f0 <pcb_new+0x78>)
 8009490:	f240 2265 	movw	r2, #613	; 0x265
 8009494:	4917      	ldr	r1, [pc, #92]	; (80094f4 <pcb_new+0x7c>)
 8009496:	4818      	ldr	r0, [pc, #96]	; (80094f8 <pcb_new+0x80>)
 8009498:	f00b fe06 	bl	80150a8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094a6:	2b10      	cmp	r3, #16
 80094a8:	d112      	bne.n	80094d0 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681c      	ldr	r4, [r3, #0]
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f004 f985 	bl	800d7c0 <tcp_new_ip_type>
 80094b6:	4603      	mov	r3, r0
 80094b8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d009      	beq.n	80094d8 <pcb_new+0x60>
        setup_tcp(msg->conn);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fef1 	bl	80092b0 <setup_tcp>
      }
      break;
 80094ce:	e003      	b.n	80094d8 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	22fa      	movs	r2, #250	; 0xfa
 80094d4:	711a      	strb	r2, [r3, #4]
      return;
 80094d6:	e008      	b.n	80094ea <pcb_new+0x72>
      break;
 80094d8:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d102      	bne.n	80094ea <pcb_new+0x72>
    msg->err = ERR_MEM;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	22ff      	movs	r2, #255	; 0xff
 80094e8:	711a      	strb	r2, [r3, #4]
  }
}
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}
 80094f0:	080162f4 	.word	0x080162f4
 80094f4:	08016474 	.word	0x08016474
 80094f8:	08016338 	.word	0x08016338

080094fc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff ffad 	bl	8009478 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800951e:	bf00      	nop
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009534:	2300      	movs	r3, #0
 8009536:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009538:	2006      	movs	r0, #6
 800953a:	f001 fbbb 	bl	800acb4 <memp_malloc>
 800953e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <netconn_alloc+0x22>
    return NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	e04d      	b.n	80095e6 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2200      	movs	r2, #0
 800954e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	79fa      	ldrb	r2, [r7, #7]
 8009554:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2200      	movs	r2, #0
 800955a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009562:	2b10      	cmp	r3, #16
 8009564:	d10c      	bne.n	8009580 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009566:	2306      	movs	r3, #6
 8009568:	60fb      	str	r3, [r7, #12]
      break;
 800956a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	3310      	adds	r3, #16
 8009570:	68f9      	ldr	r1, [r7, #12]
 8009572:	4618      	mov	r0, r3
 8009574:	f00b fa0a 	bl	801498c <sys_mbox_new>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d008      	beq.n	8009590 <netconn_alloc+0x68>
    goto free_and_return;
 800957e:	e02d      	b.n	80095dc <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009580:	4b1b      	ldr	r3, [pc, #108]	; (80095f0 <netconn_alloc+0xc8>)
 8009582:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009586:	491b      	ldr	r1, [pc, #108]	; (80095f4 <netconn_alloc+0xcc>)
 8009588:	481b      	ldr	r0, [pc, #108]	; (80095f8 <netconn_alloc+0xd0>)
 800958a:	f00b fd8d 	bl	80150a8 <iprintf>
      goto free_and_return;
 800958e:	e025      	b.n	80095dc <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	330c      	adds	r3, #12
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f00b faa4 	bl	8014ae4 <sys_sem_new>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	3310      	adds	r3, #16
 80095a6:	4618      	mov	r0, r3
 80095a8:	f00b fa0a 	bl	80149c0 <sys_mbox_free>
    goto free_and_return;
 80095ac:	e016      	b.n	80095dc <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	3314      	adds	r3, #20
 80095b2:	4618      	mov	r0, r3
 80095b4:	f00b fa89 	bl	8014aca <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	2200      	movs	r2, #0
 80095bc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2200      	movs	r2, #0
 80095d0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	7dfa      	ldrb	r2, [r7, #23]
 80095d6:	771a      	strb	r2, [r3, #28]
  return conn;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	e004      	b.n	80095e6 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80095dc:	6939      	ldr	r1, [r7, #16]
 80095de:	2006      	movs	r0, #6
 80095e0:	f001 fbde 	bl	800ada0 <memp_free>
  return NULL;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	080162f4 	.word	0x080162f4
 80095f4:	08016494 	.word	0x08016494
 80095f8:	08016338 	.word	0x08016338

080095fc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d006      	beq.n	800961a <netconn_free+0x1e>
 800960c:	4b1b      	ldr	r3, [pc, #108]	; (800967c <netconn_free+0x80>)
 800960e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009612:	491b      	ldr	r1, [pc, #108]	; (8009680 <netconn_free+0x84>)
 8009614:	481b      	ldr	r0, [pc, #108]	; (8009684 <netconn_free+0x88>)
 8009616:	f00b fd47 	bl	80150a8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3310      	adds	r3, #16
 800961e:	4618      	mov	r0, r3
 8009620:	f00b fa42 	bl	8014aa8 <sys_mbox_valid>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d006      	beq.n	8009638 <netconn_free+0x3c>
 800962a:	4b14      	ldr	r3, [pc, #80]	; (800967c <netconn_free+0x80>)
 800962c:	f240 3223 	movw	r2, #803	; 0x323
 8009630:	4915      	ldr	r1, [pc, #84]	; (8009688 <netconn_free+0x8c>)
 8009632:	4814      	ldr	r0, [pc, #80]	; (8009684 <netconn_free+0x88>)
 8009634:	f00b fd38 	bl	80150a8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3314      	adds	r3, #20
 800963c:	4618      	mov	r0, r3
 800963e:	f00b fa33 	bl	8014aa8 <sys_mbox_valid>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d006      	beq.n	8009656 <netconn_free+0x5a>
 8009648:	4b0c      	ldr	r3, [pc, #48]	; (800967c <netconn_free+0x80>)
 800964a:	f240 3226 	movw	r2, #806	; 0x326
 800964e:	490f      	ldr	r1, [pc, #60]	; (800968c <netconn_free+0x90>)
 8009650:	480c      	ldr	r0, [pc, #48]	; (8009684 <netconn_free+0x88>)
 8009652:	f00b fd29 	bl	80150a8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	330c      	adds	r3, #12
 800965a:	4618      	mov	r0, r3
 800965c:	f00b faa5 	bl	8014baa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	330c      	adds	r3, #12
 8009664:	4618      	mov	r0, r3
 8009666:	f00b fabe 	bl	8014be6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	2006      	movs	r0, #6
 800966e:	f001 fb97 	bl	800ada0 <memp_free>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	080162f4 	.word	0x080162f4
 8009680:	080164bc 	.word	0x080164bc
 8009684:	08016338 	.word	0x08016338
 8009688:	080164ec 	.word	0x080164ec
 800968c:	08016528 	.word	0x08016528

08009690 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d106      	bne.n	80096b4 <lwip_netconn_do_close_internal+0x24>
 80096a6:	4b87      	ldr	r3, [pc, #540]	; (80098c4 <lwip_netconn_do_close_internal+0x234>)
 80096a8:	f240 32a2 	movw	r2, #930	; 0x3a2
 80096ac:	4986      	ldr	r1, [pc, #536]	; (80098c8 <lwip_netconn_do_close_internal+0x238>)
 80096ae:	4887      	ldr	r0, [pc, #540]	; (80098cc <lwip_netconn_do_close_internal+0x23c>)
 80096b0:	f00b fcfa 	bl	80150a8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096bc:	2b10      	cmp	r3, #16
 80096be:	d006      	beq.n	80096ce <lwip_netconn_do_close_internal+0x3e>
 80096c0:	4b80      	ldr	r3, [pc, #512]	; (80098c4 <lwip_netconn_do_close_internal+0x234>)
 80096c2:	f240 32a3 	movw	r2, #931	; 0x3a3
 80096c6:	4982      	ldr	r1, [pc, #520]	; (80098d0 <lwip_netconn_do_close_internal+0x240>)
 80096c8:	4880      	ldr	r0, [pc, #512]	; (80098cc <lwip_netconn_do_close_internal+0x23c>)
 80096ca:	f00b fced 	bl	80150a8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	785b      	ldrb	r3, [r3, #1]
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d006      	beq.n	80096e4 <lwip_netconn_do_close_internal+0x54>
 80096d6:	4b7b      	ldr	r3, [pc, #492]	; (80098c4 <lwip_netconn_do_close_internal+0x234>)
 80096d8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80096dc:	497d      	ldr	r1, [pc, #500]	; (80098d4 <lwip_netconn_do_close_internal+0x244>)
 80096de:	487b      	ldr	r0, [pc, #492]	; (80098cc <lwip_netconn_do_close_internal+0x23c>)
 80096e0:	f00b fce2 	bl	80150a8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <lwip_netconn_do_close_internal+0x6a>
 80096ec:	4b75      	ldr	r3, [pc, #468]	; (80098c4 <lwip_netconn_do_close_internal+0x234>)
 80096ee:	f240 32a5 	movw	r2, #933	; 0x3a5
 80096f2:	4979      	ldr	r1, [pc, #484]	; (80098d8 <lwip_netconn_do_close_internal+0x248>)
 80096f4:	4875      	ldr	r0, [pc, #468]	; (80098cc <lwip_netconn_do_close_internal+0x23c>)
 80096f6:	f00b fcd7 	bl	80150a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <lwip_netconn_do_close_internal+0x80>
 8009702:	4b70      	ldr	r3, [pc, #448]	; (80098c4 <lwip_netconn_do_close_internal+0x234>)
 8009704:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009708:	4974      	ldr	r1, [pc, #464]	; (80098dc <lwip_netconn_do_close_internal+0x24c>)
 800970a:	4870      	ldr	r0, [pc, #448]	; (80098cc <lwip_netconn_do_close_internal+0x23c>)
 800970c:	f00b fccc 	bl	80150a8 <iprintf>

  tpcb = conn->pcb.tcp;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	7a1b      	ldrb	r3, [r3, #8]
 800971c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b03      	cmp	r3, #3
 8009732:	d102      	bne.n	800973a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009734:	2301      	movs	r3, #1
 8009736:	75bb      	strb	r3, [r7, #22]
 8009738:	e01f      	b.n	800977a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00e      	beq.n	800975e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009744:	2b05      	cmp	r3, #5
 8009746:	d007      	beq.n	8009758 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800974c:	2b06      	cmp	r3, #6
 800974e:	d003      	beq.n	8009758 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009754:	2b08      	cmp	r3, #8
 8009756:	d102      	bne.n	800975e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009758:	2301      	movs	r3, #1
 800975a:	75bb      	strb	r3, [r7, #22]
 800975c:	e00d      	b.n	800977a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800975e:	7b7b      	ldrb	r3, [r7, #13]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d008      	beq.n	8009776 <lwip_netconn_do_close_internal+0xe6>
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	8b5b      	ldrh	r3, [r3, #26]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009770:	2301      	movs	r3, #1
 8009772:	75bb      	strb	r3, [r7, #22]
 8009774:	e001      	b.n	800977a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800977a:	7dbb      	ldrb	r3, [r7, #22]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009780:	2100      	movs	r1, #0
 8009782:	6938      	ldr	r0, [r7, #16]
 8009784:	f004 f82a 	bl	800d7dc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	7d1b      	ldrb	r3, [r3, #20]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d104      	bne.n	800979a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009790:	2100      	movs	r1, #0
 8009792:	6938      	ldr	r0, [r7, #16]
 8009794:	f004 f89a 	bl	800d8cc <tcp_accept>
 8009798:	e01d      	b.n	80097d6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80097a0:	2100      	movs	r1, #0
 80097a2:	6938      	ldr	r0, [r7, #16]
 80097a4:	f004 f82c 	bl	800d800 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80097a8:	2100      	movs	r1, #0
 80097aa:	6938      	ldr	r0, [r7, #16]
 80097ac:	f004 f88e 	bl	800d8cc <tcp_accept>
    }
    if (shut_tx) {
 80097b0:	7b7b      	ldrb	r3, [r7, #13]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80097b6:	2100      	movs	r1, #0
 80097b8:	6938      	ldr	r0, [r7, #16]
 80097ba:	f004 f843 	bl	800d844 <tcp_sent>
    }
    if (shut_close) {
 80097be:	7dbb      	ldrb	r3, [r7, #22]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d008      	beq.n	80097d6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80097c4:	2200      	movs	r2, #0
 80097c6:	2100      	movs	r1, #0
 80097c8:	6938      	ldr	r0, [r7, #16]
 80097ca:	f004 f897 	bl	800d8fc <tcp_poll>
      tcp_err(tpcb, NULL);
 80097ce:	2100      	movs	r1, #0
 80097d0:	6938      	ldr	r0, [r7, #16]
 80097d2:	f004 f859 	bl	800d888 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80097d6:	7dbb      	ldrb	r3, [r7, #22]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d005      	beq.n	80097e8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80097dc:	6938      	ldr	r0, [r7, #16]
 80097de:	f002 fe29 	bl	800c434 <tcp_close>
 80097e2:	4603      	mov	r3, r0
 80097e4:	75fb      	strb	r3, [r7, #23]
 80097e6:	e007      	b.n	80097f8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	7b7a      	ldrb	r2, [r7, #13]
 80097ec:	4619      	mov	r1, r3
 80097ee:	6938      	ldr	r0, [r7, #16]
 80097f0:	f002 fe4c 	bl	800c48c <tcp_shutdown>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80097f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009800:	2301      	movs	r3, #1
 8009802:	757b      	strb	r3, [r7, #21]
 8009804:	e016      	b.n	8009834 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009806:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800980e:	d10f      	bne.n	8009830 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	7a5b      	ldrb	r3, [r3, #9]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10c      	bne.n	8009834 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800981a:	2301      	movs	r3, #1
 800981c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800981e:	7dbb      	ldrb	r3, [r7, #22]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d007      	beq.n	8009834 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009824:	6938      	ldr	r0, [r7, #16]
 8009826:	f002 ff4b 	bl	800c6c0 <tcp_abort>
          err = ERR_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	75fb      	strb	r3, [r7, #23]
 800982e:	e001      	b.n	8009834 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009830:	2301      	movs	r3, #1
 8009832:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009834:	7d7b      	ldrb	r3, [r7, #21]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d052      	beq.n	80098e0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	330c      	adds	r3, #12
 8009842:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	7dfa      	ldrb	r2, [r7, #23]
 800984a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d129      	bne.n	80098b4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009860:	7dbb      	ldrb	r3, [r7, #22]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00c      	beq.n	8009880 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	d005      	beq.n	8009880 <lwip_netconn_do_close_internal+0x1f0>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	2200      	movs	r2, #0
 800987a:	2104      	movs	r1, #4
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
      }
      if (shut_rx) {
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <lwip_netconn_do_close_internal+0x20a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	2200      	movs	r2, #0
 8009894:	2100      	movs	r1, #0
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
      }
      if (shut_tx) {
 800989a:	7b7b      	ldrb	r3, [r7, #13]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d009      	beq.n	80098b4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d005      	beq.n	80098b4 <lwip_netconn_do_close_internal+0x224>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2200      	movs	r2, #0
 80098ae:	2102      	movs	r1, #2
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80098ba:	68b8      	ldr	r0, [r7, #8]
 80098bc:	f00b f968 	bl	8014b90 <sys_sem_signal>
    }
    return ERR_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	e03c      	b.n	800993e <lwip_netconn_do_close_internal+0x2ae>
 80098c4:	080162f4 	.word	0x080162f4
 80098c8:	08016564 	.word	0x08016564
 80098cc:	08016338 	.word	0x08016338
 80098d0:	08016574 	.word	0x08016574
 80098d4:	08016594 	.word	0x08016594
 80098d8:	080165b8 	.word	0x080165b8
 80098dc:	080163f8 	.word	0x080163f8
  }
  if (!close_finished) {
 80098e0:	7d7b      	ldrb	r3, [r7, #21]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d11e      	bne.n	8009924 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	7d1b      	ldrb	r3, [r3, #20]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d106      	bne.n	80098fc <lwip_netconn_do_close_internal+0x26c>
 80098ee:	4b16      	ldr	r3, [pc, #88]	; (8009948 <lwip_netconn_do_close_internal+0x2b8>)
 80098f0:	f240 4241 	movw	r2, #1089	; 0x441
 80098f4:	4915      	ldr	r1, [pc, #84]	; (800994c <lwip_netconn_do_close_internal+0x2bc>)
 80098f6:	4816      	ldr	r0, [pc, #88]	; (8009950 <lwip_netconn_do_close_internal+0x2c0>)
 80098f8:	f00b fbd6 	bl	80150a8 <iprintf>
    if (shut_tx) {
 80098fc:	7b7b      	ldrb	r3, [r7, #13]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009902:	4914      	ldr	r1, [pc, #80]	; (8009954 <lwip_netconn_do_close_internal+0x2c4>)
 8009904:	6938      	ldr	r0, [r7, #16]
 8009906:	f003 ff9d 	bl	800d844 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800990a:	2201      	movs	r2, #1
 800990c:	4912      	ldr	r1, [pc, #72]	; (8009958 <lwip_netconn_do_close_internal+0x2c8>)
 800990e:	6938      	ldr	r0, [r7, #16]
 8009910:	f003 fff4 	bl	800d8fc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009914:	4911      	ldr	r1, [pc, #68]	; (800995c <lwip_netconn_do_close_internal+0x2cc>)
 8009916:	6938      	ldr	r0, [r7, #16]
 8009918:	f003 ffb6 	bl	800d888 <tcp_err>
    tcp_arg(tpcb, conn);
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	6938      	ldr	r0, [r7, #16]
 8009920:	f003 ff5c 	bl	800d7dc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <lwip_netconn_do_close_internal+0x2aa>
 800992c:	4b06      	ldr	r3, [pc, #24]	; (8009948 <lwip_netconn_do_close_internal+0x2b8>)
 800992e:	f240 424d 	movw	r2, #1101	; 0x44d
 8009932:	490b      	ldr	r1, [pc, #44]	; (8009960 <lwip_netconn_do_close_internal+0x2d0>)
 8009934:	4806      	ldr	r0, [pc, #24]	; (8009950 <lwip_netconn_do_close_internal+0x2c0>)
 8009936:	f00b fbb7 	bl	80150a8 <iprintf>
  return err;
 800993a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	080162f4 	.word	0x080162f4
 800994c:	080165cc 	.word	0x080165cc
 8009950:	08016338 	.word	0x08016338
 8009954:	0800905d 	.word	0x0800905d
 8009958:	08008f95 	.word	0x08008f95
 800995c:	08009105 	.word	0x08009105
 8009960:	080165f0 	.word	0x080165f0

08009964 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d016      	beq.n	80099a8 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009984:	2b10      	cmp	r3, #16
 8009986:	d10c      	bne.n	80099a2 <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6858      	ldr	r0, [r3, #4]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	6899      	ldr	r1, [r3, #8]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	899b      	ldrh	r3, [r3, #12]
 8009996:	461a      	mov	r2, r3
 8009998:	f002 fe9e 	bl	800c6d8 <tcp_bind>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
        break;
 80099a0:	e004      	b.n	80099ac <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80099a2:	23fa      	movs	r3, #250	; 0xfa
 80099a4:	73fb      	strb	r3, [r7, #15]
        break;
 80099a6:	e001      	b.n	80099ac <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 80099a8:	23fa      	movs	r3, #250	; 0xfa
 80099aa:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	7bfa      	ldrb	r2, [r7, #15]
 80099b0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d07f      	beq.n	8009ad2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099dc:	2b10      	cmp	r3, #16
 80099de:	d175      	bne.n	8009acc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	785b      	ldrb	r3, [r3, #1]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d165      	bne.n	8009ab6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	7d1b      	ldrb	r3, [r3, #20]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80099f6:	23fa      	movs	r3, #250	; 0xfa
 80099f8:	72fb      	strb	r3, [r7, #11]
 80099fa:	e06c      	b.n	8009ad6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80099fc:	23ff      	movs	r3, #255	; 0xff
 80099fe:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f107 020b 	add.w	r2, r7, #11
 8009a0a:	7cf9      	ldrb	r1, [r7, #19]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f002 ff1b 	bl	800c848 <tcp_listen_with_backlog_and_err>
 8009a12:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d05d      	beq.n	8009ad6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3310      	adds	r3, #16
 8009a20:	4618      	mov	r0, r3
 8009a22:	f00b f841 	bl	8014aa8 <sys_mbox_valid>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3310      	adds	r3, #16
 8009a32:	4618      	mov	r0, r3
 8009a34:	f00a ffc4 	bl	80149c0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3310      	adds	r3, #16
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f00b f843 	bl	8014aca <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3314      	adds	r3, #20
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f00b f82a 	bl	8014aa8 <sys_mbox_valid>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d108      	bne.n	8009a6c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3314      	adds	r3, #20
 8009a60:	2106      	movs	r1, #6
 8009a62:	4618      	mov	r0, r3
 8009a64:	f00a ff92 	bl	801498c <sys_mbox_new>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009a6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d118      	bne.n	8009aa6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f003 fea3 	bl	800d7dc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	4912      	ldr	r1, [pc, #72]	; (8009ae8 <lwip_netconn_do_listen+0x12c>)
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f003 ff14 	bl	800d8cc <tcp_accept>
 8009aa4:	e017      	b.n	8009ad6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f002 fcc4 	bl	800c434 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	605a      	str	r2, [r3, #4]
 8009ab4:	e00f      	b.n	8009ad6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d102      	bne.n	8009ac6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	72fb      	strb	r3, [r7, #11]
 8009ac4:	e007      	b.n	8009ad6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009ac6:	23f5      	movs	r3, #245	; 0xf5
 8009ac8:	72fb      	strb	r3, [r7, #11]
 8009aca:	e004      	b.n	8009ad6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009acc:	23f0      	movs	r3, #240	; 0xf0
 8009ace:	72fb      	strb	r3, [r7, #11]
 8009ad0:	e001      	b.n	8009ad6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009ad2:	23f5      	movs	r3, #245	; 0xf5
 8009ad4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009ad6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009ade:	bf00      	nop
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	08009301 	.word	0x08009301

08009aec <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d106      	bne.n	8009b10 <lwip_netconn_do_writemore+0x24>
 8009b02:	4b96      	ldr	r3, [pc, #600]	; (8009d5c <lwip_netconn_do_writemore+0x270>)
 8009b04:	f240 6273 	movw	r2, #1651	; 0x673
 8009b08:	4995      	ldr	r1, [pc, #596]	; (8009d60 <lwip_netconn_do_writemore+0x274>)
 8009b0a:	4896      	ldr	r0, [pc, #600]	; (8009d64 <lwip_netconn_do_writemore+0x278>)
 8009b0c:	f00b facc 	bl	80150a8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	785b      	ldrb	r3, [r3, #1]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d006      	beq.n	8009b26 <lwip_netconn_do_writemore+0x3a>
 8009b18:	4b90      	ldr	r3, [pc, #576]	; (8009d5c <lwip_netconn_do_writemore+0x270>)
 8009b1a:	f240 6274 	movw	r2, #1652	; 0x674
 8009b1e:	4992      	ldr	r1, [pc, #584]	; (8009d68 <lwip_netconn_do_writemore+0x27c>)
 8009b20:	4890      	ldr	r0, [pc, #576]	; (8009d64 <lwip_netconn_do_writemore+0x278>)
 8009b22:	f00b fac1 	bl	80150a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <lwip_netconn_do_writemore+0x50>
 8009b2e:	4b8b      	ldr	r3, [pc, #556]	; (8009d5c <lwip_netconn_do_writemore+0x270>)
 8009b30:	f240 6275 	movw	r2, #1653	; 0x675
 8009b34:	498d      	ldr	r1, [pc, #564]	; (8009d6c <lwip_netconn_do_writemore+0x280>)
 8009b36:	488b      	ldr	r0, [pc, #556]	; (8009d64 <lwip_netconn_do_writemore+0x278>)
 8009b38:	f00b fab6 	bl	80150a8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d106      	bne.n	8009b52 <lwip_netconn_do_writemore+0x66>
 8009b44:	4b85      	ldr	r3, [pc, #532]	; (8009d5c <lwip_netconn_do_writemore+0x270>)
 8009b46:	f240 6276 	movw	r2, #1654	; 0x676
 8009b4a:	4989      	ldr	r1, [pc, #548]	; (8009d70 <lwip_netconn_do_writemore+0x284>)
 8009b4c:	4885      	ldr	r0, [pc, #532]	; (8009d64 <lwip_netconn_do_writemore+0x278>)
 8009b4e:	f00b faab 	bl	80150a8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d306      	bcc.n	8009b70 <lwip_netconn_do_writemore+0x84>
 8009b62:	4b7e      	ldr	r3, [pc, #504]	; (8009d5c <lwip_netconn_do_writemore+0x270>)
 8009b64:	f240 6277 	movw	r2, #1655	; 0x677
 8009b68:	4982      	ldr	r1, [pc, #520]	; (8009d74 <lwip_netconn_do_writemore+0x288>)
 8009b6a:	487e      	ldr	r0, [pc, #504]	; (8009d64 <lwip_netconn_do_writemore+0x278>)
 8009b6c:	f00b fa9c 	bl	80150a8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	899b      	ldrh	r3, [r3, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <lwip_netconn_do_writemore+0x9c>
 8009b7a:	4b78      	ldr	r3, [pc, #480]	; (8009d5c <lwip_netconn_do_writemore+0x270>)
 8009b7c:	f240 6279 	movw	r2, #1657	; 0x679
 8009b80:	497d      	ldr	r1, [pc, #500]	; (8009d78 <lwip_netconn_do_writemore+0x28c>)
 8009b82:	4878      	ldr	r0, [pc, #480]	; (8009d64 <lwip_netconn_do_writemore+0x278>)
 8009b84:	f00b fa90 	bl	80150a8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	7f1b      	ldrb	r3, [r3, #28]
 8009b8e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	7f1b      	ldrb	r3, [r3, #28]
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <lwip_netconn_do_writemore+0xba>
 8009b9c:	7ebb      	ldrb	r3, [r7, #26]
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <lwip_netconn_do_writemore+0xbe>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <lwip_netconn_do_writemore+0xc0>
 8009baa:	2300      	movs	r3, #0
 8009bac:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd8:	d307      	bcc.n	8009bea <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bde:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009be0:	7ebb      	ldrb	r3, [r7, #26]
 8009be2:	f043 0302 	orr.w	r3, r3, #2
 8009be6:	76bb      	strb	r3, [r7, #26]
 8009be8:	e001      	b.n	8009bee <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009bf6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009bf8:	89fa      	ldrh	r2, [r7, #14]
 8009bfa:	8bbb      	ldrh	r3, [r7, #28]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d216      	bcs.n	8009c2e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009c00:	89fb      	ldrh	r3, [r7, #14]
 8009c02:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009c04:	7e3b      	ldrb	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00d      	beq.n	8009c26 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009c0a:	8bbb      	ldrh	r3, [r7, #28]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10e      	bne.n	8009c2e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d102      	bne.n	8009c20 <lwip_netconn_do_writemore+0x134>
 8009c1a:	f06f 0306 	mvn.w	r3, #6
 8009c1e:	e000      	b.n	8009c22 <lwip_netconn_do_writemore+0x136>
 8009c20:	2300      	movs	r3, #0
 8009c22:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009c24:	e07d      	b.n	8009d22 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009c26:	7ebb      	ldrb	r3, [r7, #26]
 8009c28:	f043 0302 	orr.w	r3, r3, #2
 8009c2c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	8bbb      	ldrh	r3, [r7, #28]
 8009c36:	441a      	add	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d906      	bls.n	8009c52 <lwip_netconn_do_writemore+0x166>
 8009c44:	4b45      	ldr	r3, [pc, #276]	; (8009d5c <lwip_netconn_do_writemore+0x270>)
 8009c46:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009c4a:	494c      	ldr	r1, [pc, #304]	; (8009d7c <lwip_netconn_do_writemore+0x290>)
 8009c4c:	4845      	ldr	r0, [pc, #276]	; (8009d64 <lwip_netconn_do_writemore+0x278>)
 8009c4e:	f00b fa2b 	bl	80150a8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009c52:	8bbb      	ldrh	r3, [r7, #28]
 8009c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d103      	bne.n	8009c64 <lwip_netconn_do_writemore+0x178>
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c62:	d209      	bcs.n	8009c78 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009c68:	8bba      	ldrh	r2, [r7, #28]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d10b      	bne.n	8009c86 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	899b      	ldrh	r3, [r3, #12]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d906      	bls.n	8009c86 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009c7c:	7ebb      	ldrb	r3, [r7, #26]
 8009c7e:	f043 0302 	orr.w	r3, r3, #2
 8009c82:	76bb      	strb	r3, [r7, #26]
 8009c84:	e001      	b.n	8009c8a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6858      	ldr	r0, [r3, #4]
 8009c8e:	7ebb      	ldrb	r3, [r7, #26]
 8009c90:	8bba      	ldrh	r2, [r7, #28]
 8009c92:	6979      	ldr	r1, [r7, #20]
 8009c94:	f006 fce4 	bl	8010660 <tcp_write>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009c9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d12c      	bne.n	8009cfe <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	6999      	ldr	r1, [r3, #24]
 8009caa:	8bba      	ldrh	r2, [r7, #28]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a1b      	ldr	r3, [r3, #32]
 8009cb0:	440a      	add	r2, r1
 8009cb2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	6919      	ldr	r1, [r3, #16]
 8009cba:	8bba      	ldrh	r2, [r7, #28]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	691a      	ldr	r2, [r3, #16]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d113      	bne.n	8009cfe <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	899a      	ldrh	r2, [r3, #12]
 8009cdc:	3a01      	subs	r2, #1
 8009cde:	b292      	uxth	r2, r2
 8009ce0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	899b      	ldrh	r3, [r3, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d008      	beq.n	8009cfe <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	3208      	adds	r2, #8
 8009cf4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009cfe:	7e7b      	ldrb	r3, [r7, #25]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <lwip_netconn_do_writemore+0x222>
 8009d04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f43f af50 	beq.w	8009bae <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <lwip_netconn_do_writemore+0x234>
 8009d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d1e:	d146      	bne.n	8009dae <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009d20:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009d22:	7e3b      	ldrb	r3, [r7, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d02b      	beq.n	8009d80 <lwip_netconn_do_writemore+0x294>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a1b      	ldr	r3, [r3, #32]
 8009d2c:	699a      	ldr	r2, [r3, #24]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d223      	bcs.n	8009d80 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d005      	beq.n	8009d4c <lwip_netconn_do_writemore+0x260>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	2200      	movs	r2, #0
 8009d46:	2103      	movs	r1, #3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	7f1b      	ldrb	r3, [r3, #28]
 8009d50:	f043 0310 	orr.w	r3, r3, #16
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	771a      	strb	r2, [r3, #28]
 8009d5a:	e028      	b.n	8009dae <lwip_netconn_do_writemore+0x2c2>
 8009d5c:	080162f4 	.word	0x080162f4
 8009d60:	080163e8 	.word	0x080163e8
 8009d64:	08016338 	.word	0x08016338
 8009d68:	080166f0 	.word	0x080166f0
 8009d6c:	080163f8 	.word	0x080163f8
 8009d70:	08016710 	.word	0x08016710
 8009d74:	08016728 	.word	0x08016728
 8009d78:	08016768 	.word	0x08016768
 8009d7c:	08016790 	.word	0x08016790
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d88:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009d8c:	d305      	bcc.n	8009d9a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d909      	bls.n	8009dae <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d005      	beq.n	8009dae <lwip_netconn_do_writemore+0x2c2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	2200      	movs	r2, #0
 8009da8:	2103      	movs	r1, #3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d11d      	bne.n	8009df2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	699a      	ldr	r2, [r3, #24]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d002      	beq.n	8009dcc <lwip_netconn_do_writemore+0x2e0>
 8009dc6:	7e3b      	ldrb	r3, [r7, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f007 fa2d 	bl	8011234 <tcp_output>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009dde:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009de2:	f113 0f04 	cmn.w	r3, #4
 8009de6:	d12c      	bne.n	8009e42 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009de8:	7b3b      	ldrb	r3, [r7, #12]
 8009dea:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009dec:	2301      	movs	r3, #1
 8009dee:	76fb      	strb	r3, [r7, #27]
 8009df0:	e027      	b.n	8009e42 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dfa:	d120      	bne.n	8009e3e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f007 fa17 	bl	8011234 <tcp_output>
 8009e06:	4603      	mov	r3, r0
 8009e08:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009e0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009e0e:	f113 0f04 	cmn.w	r3, #4
 8009e12:	d104      	bne.n	8009e1e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009e14:	7b7b      	ldrb	r3, [r7, #13]
 8009e16:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	76fb      	strb	r3, [r7, #27]
 8009e1c:	e011      	b.n	8009e42 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009e1e:	7e3b      	ldrb	r3, [r7, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00e      	beq.n	8009e42 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <lwip_netconn_do_writemore+0x348>
 8009e2e:	f06f 0306 	mvn.w	r3, #6
 8009e32:	e000      	b.n	8009e36 <lwip_netconn_do_writemore+0x34a>
 8009e34:	2300      	movs	r3, #0
 8009e36:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	76fb      	strb	r3, [r7, #27]
 8009e3c:	e001      	b.n	8009e42 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009e42:	7efb      	ldrb	r3, [r7, #27]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d015      	beq.n	8009e74 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	330c      	adds	r3, #12
 8009e50:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	7ffa      	ldrb	r2, [r7, #31]
 8009e58:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d006      	beq.n	8009e7a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009e6c:	68b8      	ldr	r0, [r7, #8]
 8009e6e:	f00a fe8f 	bl	8014b90 <sys_sem_signal>
 8009e72:	e002      	b.n	8009e7a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e78:	e000      	b.n	8009e7c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3720      	adds	r7, #32
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fe ff6b 	bl	8008d70 <netconn_err>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d163      	bne.n	8009f6e <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d15c      	bne.n	8009f6e <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009ebe:	23fb      	movs	r3, #251	; 0xfb
 8009ec0:	73fb      	strb	r3, [r7, #15]
 8009ec2:	e054      	b.n	8009f6e <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d04d      	beq.n	8009f6a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d006      	beq.n	8009eee <lwip_netconn_do_write+0x6a>
 8009ee0:	4b27      	ldr	r3, [pc, #156]	; (8009f80 <lwip_netconn_do_write+0xfc>)
 8009ee2:	f240 7223 	movw	r2, #1827	; 0x723
 8009ee6:	4927      	ldr	r1, [pc, #156]	; (8009f84 <lwip_netconn_do_write+0x100>)
 8009ee8:	4827      	ldr	r0, [pc, #156]	; (8009f88 <lwip_netconn_do_write+0x104>)
 8009eea:	f00b f8dd 	bl	80150a8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <lwip_netconn_do_write+0x80>
 8009ef6:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <lwip_netconn_do_write+0xfc>)
 8009ef8:	f240 7224 	movw	r2, #1828	; 0x724
 8009efc:	4923      	ldr	r1, [pc, #140]	; (8009f8c <lwip_netconn_do_write+0x108>)
 8009efe:	4822      	ldr	r0, [pc, #136]	; (8009f88 <lwip_netconn_do_write+0x104>)
 8009f00:	f00b f8d2 	bl	80150a8 <iprintf>
        msg->conn->current_msg = msg;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2100      	movs	r1, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fdea 	bl	8009aec <lwip_netconn_do_writemore>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d02b      	beq.n	8009f76 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	785b      	ldrb	r3, [r3, #1]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d006      	beq.n	8009f36 <lwip_netconn_do_write+0xb2>
 8009f28:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <lwip_netconn_do_write+0xfc>)
 8009f2a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009f2e:	4918      	ldr	r1, [pc, #96]	; (8009f90 <lwip_netconn_do_write+0x10c>)
 8009f30:	4815      	ldr	r0, [pc, #84]	; (8009f88 <lwip_netconn_do_write+0x104>)
 8009f32:	f00b f8b9 	bl	80150a8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009f36:	4817      	ldr	r0, [pc, #92]	; (8009f94 <lwip_netconn_do_write+0x110>)
 8009f38:	f00a fe93 	bl	8014c62 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	330c      	adds	r3, #12
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f00a fdf2 	bl	8014b2e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009f4a:	4812      	ldr	r0, [pc, #72]	; (8009f94 <lwip_netconn_do_write+0x110>)
 8009f4c:	f00a fe7a 	bl	8014c44 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d10d      	bne.n	8009f76 <lwip_netconn_do_write+0xf2>
 8009f5a:	4b09      	ldr	r3, [pc, #36]	; (8009f80 <lwip_netconn_do_write+0xfc>)
 8009f5c:	f240 722c 	movw	r2, #1836	; 0x72c
 8009f60:	490b      	ldr	r1, [pc, #44]	; (8009f90 <lwip_netconn_do_write+0x10c>)
 8009f62:	4809      	ldr	r0, [pc, #36]	; (8009f88 <lwip_netconn_do_write+0x104>)
 8009f64:	f00b f8a0 	bl	80150a8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009f68:	e005      	b.n	8009f76 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 8009f6a:	23f5      	movs	r3, #245	; 0xf5
 8009f6c:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	7bfa      	ldrb	r2, [r7, #15]
 8009f72:	711a      	strb	r2, [r3, #4]
 8009f74:	e000      	b.n	8009f78 <lwip_netconn_do_write+0xf4>
        return;
 8009f76:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	080162f4 	.word	0x080162f4
 8009f84:	08016634 	.word	0x08016634
 8009f88:	08016338 	.word	0x08016338
 8009f8c:	080167bc 	.word	0x080167bc
 8009f90:	08016650 	.word	0x08016650
 8009f94:	2000976c 	.word	0x2000976c

08009f98 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009fa2:	f008 f9ff 	bl	80123a4 <sys_timeouts_sleeptime>
 8009fa6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fae:	d10b      	bne.n	8009fc8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009fb0:	4813      	ldr	r0, [pc, #76]	; (800a000 <tcpip_timeouts_mbox_fetch+0x68>)
 8009fb2:	f00a fe56 	bl	8014c62 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f00a fd2c 	bl	8014a18 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009fc0:	480f      	ldr	r0, [pc, #60]	; (800a000 <tcpip_timeouts_mbox_fetch+0x68>)
 8009fc2:	f00a fe3f 	bl	8014c44 <sys_mutex_lock>
    return;
 8009fc6:	e018      	b.n	8009ffa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d102      	bne.n	8009fd4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009fce:	f008 f9af 	bl	8012330 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009fd2:	e7e6      	b.n	8009fa2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009fd4:	480a      	ldr	r0, [pc, #40]	; (800a000 <tcpip_timeouts_mbox_fetch+0x68>)
 8009fd6:	f00a fe44 	bl	8014c62 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f00a fd1a 	bl	8014a18 <sys_arch_mbox_fetch>
 8009fe4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009fe6:	4806      	ldr	r0, [pc, #24]	; (800a000 <tcpip_timeouts_mbox_fetch+0x68>)
 8009fe8:	f00a fe2c 	bl	8014c44 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ff2:	d102      	bne.n	8009ffa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009ff4:	f008 f99c 	bl	8012330 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009ff8:	e7d3      	b.n	8009fa2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	2000976c 	.word	0x2000976c

0800a004 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a00c:	4810      	ldr	r0, [pc, #64]	; (800a050 <tcpip_thread+0x4c>)
 800a00e:	f00a fe19 	bl	8014c44 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a012:	4b10      	ldr	r3, [pc, #64]	; (800a054 <tcpip_thread+0x50>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a01a:	4b0e      	ldr	r3, [pc, #56]	; (800a054 <tcpip_thread+0x50>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a0e      	ldr	r2, [pc, #56]	; (800a058 <tcpip_thread+0x54>)
 800a020:	6812      	ldr	r2, [r2, #0]
 800a022:	4610      	mov	r0, r2
 800a024:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a026:	f107 030c 	add.w	r3, r7, #12
 800a02a:	4619      	mov	r1, r3
 800a02c:	480b      	ldr	r0, [pc, #44]	; (800a05c <tcpip_thread+0x58>)
 800a02e:	f7ff ffb3 	bl	8009f98 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d106      	bne.n	800a046 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a038:	4b09      	ldr	r3, [pc, #36]	; (800a060 <tcpip_thread+0x5c>)
 800a03a:	2291      	movs	r2, #145	; 0x91
 800a03c:	4909      	ldr	r1, [pc, #36]	; (800a064 <tcpip_thread+0x60>)
 800a03e:	480a      	ldr	r0, [pc, #40]	; (800a068 <tcpip_thread+0x64>)
 800a040:	f00b f832 	bl	80150a8 <iprintf>
      continue;
 800a044:	e003      	b.n	800a04e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f80f 	bl	800a06c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a04e:	e7ea      	b.n	800a026 <tcpip_thread+0x22>
 800a050:	2000976c 	.word	0x2000976c
 800a054:	20009760 	.word	0x20009760
 800a058:	20009764 	.word	0x20009764
 800a05c:	20009768 	.word	0x20009768
 800a060:	080167e8 	.word	0x080167e8
 800a064:	08016818 	.word	0x08016818
 800a068:	08016838 	.word	0x08016838

0800a06c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d026      	beq.n	800a0ca <tcpip_thread_handle_msg+0x5e>
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	dc2b      	bgt.n	800a0d8 <tcpip_thread_handle_msg+0x6c>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <tcpip_thread_handle_msg+0x1e>
 800a084:	2b01      	cmp	r3, #1
 800a086:	d015      	beq.n	800a0b4 <tcpip_thread_handle_msg+0x48>
 800a088:	e026      	b.n	800a0d8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6850      	ldr	r0, [r2, #4]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	6892      	ldr	r2, [r2, #8]
 800a096:	4611      	mov	r1, r2
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d004      	beq.n	800a0aa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f001 fd1b 	bl	800bae0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	2008      	movs	r0, #8
 800a0ae:	f000 fe77 	bl	800ada0 <memp_free>
      break;
 800a0b2:	e018      	b.n	800a0e6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	6892      	ldr	r2, [r2, #8]
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	2007      	movs	r0, #7
 800a0c4:	f000 fe6c 	bl	800ada0 <memp_free>
      break;
 800a0c8:	e00d      	b.n	800a0e6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	6892      	ldr	r2, [r2, #8]
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	4798      	blx	r3
      break;
 800a0d6:	e006      	b.n	800a0e6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a0d8:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <tcpip_thread_handle_msg+0x84>)
 800a0da:	22cf      	movs	r2, #207	; 0xcf
 800a0dc:	4905      	ldr	r1, [pc, #20]	; (800a0f4 <tcpip_thread_handle_msg+0x88>)
 800a0de:	4806      	ldr	r0, [pc, #24]	; (800a0f8 <tcpip_thread_handle_msg+0x8c>)
 800a0e0:	f00a ffe2 	bl	80150a8 <iprintf>
      break;
 800a0e4:	bf00      	nop
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	080167e8 	.word	0x080167e8
 800a0f4:	08016818 	.word	0x08016818
 800a0f8:	08016838 	.word	0x08016838

0800a0fc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a108:	481a      	ldr	r0, [pc, #104]	; (800a174 <tcpip_inpkt+0x78>)
 800a10a:	f00a fccd 	bl	8014aa8 <sys_mbox_valid>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <tcpip_inpkt+0x24>
 800a114:	4b18      	ldr	r3, [pc, #96]	; (800a178 <tcpip_inpkt+0x7c>)
 800a116:	22fc      	movs	r2, #252	; 0xfc
 800a118:	4918      	ldr	r1, [pc, #96]	; (800a17c <tcpip_inpkt+0x80>)
 800a11a:	4819      	ldr	r0, [pc, #100]	; (800a180 <tcpip_inpkt+0x84>)
 800a11c:	f00a ffc4 	bl	80150a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a120:	2008      	movs	r0, #8
 800a122:	f000 fdc7 	bl	800acb4 <memp_malloc>
 800a126:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a132:	e01a      	b.n	800a16a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2200      	movs	r2, #0
 800a138:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a14c:	6979      	ldr	r1, [r7, #20]
 800a14e:	4809      	ldr	r0, [pc, #36]	; (800a174 <tcpip_inpkt+0x78>)
 800a150:	f00a fc48 	bl	80149e4 <sys_mbox_trypost>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a15a:	6979      	ldr	r1, [r7, #20]
 800a15c:	2008      	movs	r0, #8
 800a15e:	f000 fe1f 	bl	800ada0 <memp_free>
    return ERR_MEM;
 800a162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a166:	e000      	b.n	800a16a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a168:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20009768 	.word	0x20009768
 800a178:	080167e8 	.word	0x080167e8
 800a17c:	08016860 	.word	0x08016860
 800a180:	08016838 	.word	0x08016838

0800a184 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a194:	f003 0318 	and.w	r3, r3, #24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d006      	beq.n	800a1aa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a19c:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <tcpip_input+0x3c>)
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff ffab 	bl	800a0fc <tcpip_inpkt>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	e005      	b.n	800a1b6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a1aa:	4a06      	ldr	r2, [pc, #24]	; (800a1c4 <tcpip_input+0x40>)
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff ffa4 	bl	800a0fc <tcpip_inpkt>
 800a1b4:	4603      	mov	r3, r0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	080147e1 	.word	0x080147e1
 800a1c4:	080136fd 	.word	0x080136fd

0800a1c8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a1d2:	4819      	ldr	r0, [pc, #100]	; (800a238 <tcpip_try_callback+0x70>)
 800a1d4:	f00a fc68 	bl	8014aa8 <sys_mbox_valid>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <tcpip_try_callback+0x24>
 800a1de:	4b17      	ldr	r3, [pc, #92]	; (800a23c <tcpip_try_callback+0x74>)
 800a1e0:	f240 125d 	movw	r2, #349	; 0x15d
 800a1e4:	4916      	ldr	r1, [pc, #88]	; (800a240 <tcpip_try_callback+0x78>)
 800a1e6:	4817      	ldr	r0, [pc, #92]	; (800a244 <tcpip_try_callback+0x7c>)
 800a1e8:	f00a ff5e 	bl	80150a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a1ec:	2007      	movs	r0, #7
 800a1ee:	f000 fd61 	bl	800acb4 <memp_malloc>
 800a1f2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a1fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1fe:	e017      	b.n	800a230 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2201      	movs	r2, #1
 800a204:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a212:	68f9      	ldr	r1, [r7, #12]
 800a214:	4808      	ldr	r0, [pc, #32]	; (800a238 <tcpip_try_callback+0x70>)
 800a216:	f00a fbe5 	bl	80149e4 <sys_mbox_trypost>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a220:	68f9      	ldr	r1, [r7, #12]
 800a222:	2007      	movs	r0, #7
 800a224:	f000 fdbc 	bl	800ada0 <memp_free>
    return ERR_MEM;
 800a228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a22c:	e000      	b.n	800a230 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20009768 	.word	0x20009768
 800a23c:	080167e8 	.word	0x080167e8
 800a240:	08016860 	.word	0x08016860
 800a244:	08016838 	.word	0x08016838

0800a248 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a254:	4806      	ldr	r0, [pc, #24]	; (800a270 <tcpip_send_msg_wait_sem+0x28>)
 800a256:	f00a fcf5 	bl	8014c44 <sys_mutex_lock>
  fn(apimsg);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	68b8      	ldr	r0, [r7, #8]
 800a25e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a260:	4803      	ldr	r0, [pc, #12]	; (800a270 <tcpip_send_msg_wait_sem+0x28>)
 800a262:	f00a fcfe 	bl	8014c62 <sys_mutex_unlock>
  return ERR_OK;
 800a266:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	2000976c 	.word	0x2000976c

0800a274 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af02      	add	r7, sp, #8
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a27e:	f000 f871 	bl	800a364 <lwip_init>

  tcpip_init_done = initfunc;
 800a282:	4a17      	ldr	r2, [pc, #92]	; (800a2e0 <tcpip_init+0x6c>)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a288:	4a16      	ldr	r2, [pc, #88]	; (800a2e4 <tcpip_init+0x70>)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a28e:	2106      	movs	r1, #6
 800a290:	4815      	ldr	r0, [pc, #84]	; (800a2e8 <tcpip_init+0x74>)
 800a292:	f00a fb7b 	bl	801498c <sys_mbox_new>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d006      	beq.n	800a2aa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a29c:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <tcpip_init+0x78>)
 800a29e:	f240 2261 	movw	r2, #609	; 0x261
 800a2a2:	4913      	ldr	r1, [pc, #76]	; (800a2f0 <tcpip_init+0x7c>)
 800a2a4:	4813      	ldr	r0, [pc, #76]	; (800a2f4 <tcpip_init+0x80>)
 800a2a6:	f00a feff 	bl	80150a8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a2aa:	4813      	ldr	r0, [pc, #76]	; (800a2f8 <tcpip_init+0x84>)
 800a2ac:	f00a fcb4 	bl	8014c18 <sys_mutex_new>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d006      	beq.n	800a2c4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <tcpip_init+0x78>)
 800a2b8:	f240 2265 	movw	r2, #613	; 0x265
 800a2bc:	490f      	ldr	r1, [pc, #60]	; (800a2fc <tcpip_init+0x88>)
 800a2be:	480d      	ldr	r0, [pc, #52]	; (800a2f4 <tcpip_init+0x80>)
 800a2c0:	f00a fef2 	bl	80150a8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a2c4:	2318      	movs	r3, #24
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	490c      	ldr	r1, [pc, #48]	; (800a300 <tcpip_init+0x8c>)
 800a2d0:	480c      	ldr	r0, [pc, #48]	; (800a304 <tcpip_init+0x90>)
 800a2d2:	f00a fcd3 	bl	8014c7c <sys_thread_new>
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20009760 	.word	0x20009760
 800a2e4:	20009764 	.word	0x20009764
 800a2e8:	20009768 	.word	0x20009768
 800a2ec:	080167e8 	.word	0x080167e8
 800a2f0:	08016870 	.word	0x08016870
 800a2f4:	08016838 	.word	0x08016838
 800a2f8:	2000976c 	.word	0x2000976c
 800a2fc:	08016894 	.word	0x08016894
 800a300:	0800a005 	.word	0x0800a005
 800a304:	080168b8 	.word	0x080168b8

0800a308 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	021b      	lsls	r3, r3, #8
 800a316:	b21a      	sxth	r2, r3
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	b21b      	sxth	r3, r3
 800a320:	4313      	orrs	r3, r2
 800a322:	b21b      	sxth	r3, r3
 800a324:	b29b      	uxth	r3, r3
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	061a      	lsls	r2, r3, #24
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a346:	431a      	orrs	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	0a1b      	lsrs	r3, r3, #8
 800a34c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	0e1b      	lsrs	r3, r3, #24
 800a356:	4313      	orrs	r3, r2
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a36e:	f00a fc47 	bl	8014c00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a372:	f000 f8d3 	bl	800a51c <mem_init>
  memp_init();
 800a376:	f000 fc2f 	bl	800abd8 <memp_init>
  pbuf_init();
  netif_init();
 800a37a:	f000 fd3b 	bl	800adf4 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a37e:	f001 fe49 	bl	800c014 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a382:	f007 ff8d 	bl	80122a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <ptr_to_mem+0x20>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	88fb      	ldrh	r3, [r7, #6]
 800a3a0:	4413      	add	r3, r2
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	2000e79c 	.word	0x2000e79c

0800a3b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <mem_to_ptr+0x20>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	b29b      	uxth	r3, r3
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	2000e79c 	.word	0x2000e79c

0800a3d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a3e0:	4b45      	ldr	r3, [pc, #276]	; (800a4f8 <plug_holes+0x120>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d206      	bcs.n	800a3f8 <plug_holes+0x20>
 800a3ea:	4b44      	ldr	r3, [pc, #272]	; (800a4fc <plug_holes+0x124>)
 800a3ec:	f240 12df 	movw	r2, #479	; 0x1df
 800a3f0:	4943      	ldr	r1, [pc, #268]	; (800a500 <plug_holes+0x128>)
 800a3f2:	4844      	ldr	r0, [pc, #272]	; (800a504 <plug_holes+0x12c>)
 800a3f4:	f00a fe58 	bl	80150a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a3f8:	4b43      	ldr	r3, [pc, #268]	; (800a508 <plug_holes+0x130>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d306      	bcc.n	800a410 <plug_holes+0x38>
 800a402:	4b3e      	ldr	r3, [pc, #248]	; (800a4fc <plug_holes+0x124>)
 800a404:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a408:	4940      	ldr	r1, [pc, #256]	; (800a50c <plug_holes+0x134>)
 800a40a:	483e      	ldr	r0, [pc, #248]	; (800a504 <plug_holes+0x12c>)
 800a40c:	f00a fe4c 	bl	80150a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	791b      	ldrb	r3, [r3, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d006      	beq.n	800a426 <plug_holes+0x4e>
 800a418:	4b38      	ldr	r3, [pc, #224]	; (800a4fc <plug_holes+0x124>)
 800a41a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a41e:	493c      	ldr	r1, [pc, #240]	; (800a510 <plug_holes+0x138>)
 800a420:	4838      	ldr	r0, [pc, #224]	; (800a504 <plug_holes+0x12c>)
 800a422:	f00a fe41 	bl	80150a8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a42e:	d906      	bls.n	800a43e <plug_holes+0x66>
 800a430:	4b32      	ldr	r3, [pc, #200]	; (800a4fc <plug_holes+0x124>)
 800a432:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a436:	4937      	ldr	r1, [pc, #220]	; (800a514 <plug_holes+0x13c>)
 800a438:	4832      	ldr	r0, [pc, #200]	; (800a504 <plug_holes+0x12c>)
 800a43a:	f00a fe35 	bl	80150a8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff ffa4 	bl	800a390 <ptr_to_mem>
 800a448:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d024      	beq.n	800a49c <plug_holes+0xc4>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	791b      	ldrb	r3, [r3, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d120      	bne.n	800a49c <plug_holes+0xc4>
 800a45a:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <plug_holes+0x130>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	429a      	cmp	r2, r3
 800a462:	d01b      	beq.n	800a49c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a464:	4b2c      	ldr	r3, [pc, #176]	; (800a518 <plug_holes+0x140>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d102      	bne.n	800a474 <plug_holes+0x9c>
      lfree = mem;
 800a46e:	4a2a      	ldr	r2, [pc, #168]	; (800a518 <plug_holes+0x140>)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	881a      	ldrh	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a484:	d00a      	beq.n	800a49c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff ff80 	bl	800a390 <ptr_to_mem>
 800a490:	4604      	mov	r4, r0
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff ff8e 	bl	800a3b4 <mem_to_ptr>
 800a498:	4603      	mov	r3, r0
 800a49a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	885b      	ldrh	r3, [r3, #2]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff ff75 	bl	800a390 <ptr_to_mem>
 800a4a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d01f      	beq.n	800a4f0 <plug_holes+0x118>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	791b      	ldrb	r3, [r3, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d11b      	bne.n	800a4f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a4b8:	4b17      	ldr	r3, [pc, #92]	; (800a518 <plug_holes+0x140>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d102      	bne.n	800a4c8 <plug_holes+0xf0>
      lfree = pmem;
 800a4c2:	4a15      	ldr	r2, [pc, #84]	; (800a518 <plug_holes+0x140>)
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	881a      	ldrh	r2, [r3, #0]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a4d8:	d00a      	beq.n	800a4f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff ff56 	bl	800a390 <ptr_to_mem>
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	68b8      	ldr	r0, [r7, #8]
 800a4e8:	f7ff ff64 	bl	800a3b4 <mem_to_ptr>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a4f0:	bf00      	nop
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd90      	pop	{r4, r7, pc}
 800a4f8:	2000e79c 	.word	0x2000e79c
 800a4fc:	080168c8 	.word	0x080168c8
 800a500:	080168f8 	.word	0x080168f8
 800a504:	08016910 	.word	0x08016910
 800a508:	2000e7a0 	.word	0x2000e7a0
 800a50c:	08016938 	.word	0x08016938
 800a510:	08016954 	.word	0x08016954
 800a514:	08016970 	.word	0x08016970
 800a518:	2000e7a8 	.word	0x2000e7a8

0800a51c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a522:	4b1f      	ldr	r3, [pc, #124]	; (800a5a0 <mem_init+0x84>)
 800a524:	3303      	adds	r3, #3
 800a526:	f023 0303 	bic.w	r3, r3, #3
 800a52a:	461a      	mov	r2, r3
 800a52c:	4b1d      	ldr	r3, [pc, #116]	; (800a5a4 <mem_init+0x88>)
 800a52e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a530:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <mem_init+0x88>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800a53c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a54a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800a54e:	f7ff ff1f 	bl	800a390 <ptr_to_mem>
 800a552:	4603      	mov	r3, r0
 800a554:	4a14      	ldr	r2, [pc, #80]	; (800a5a8 <mem_init+0x8c>)
 800a556:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a558:	4b13      	ldr	r3, [pc, #76]	; (800a5a8 <mem_init+0x8c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2201      	movs	r2, #1
 800a55e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a560:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <mem_init+0x8c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800a568:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a56a:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <mem_init+0x8c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800a572:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a574:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <mem_init+0x88>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a0c      	ldr	r2, [pc, #48]	; (800a5ac <mem_init+0x90>)
 800a57a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a57c:	480c      	ldr	r0, [pc, #48]	; (800a5b0 <mem_init+0x94>)
 800a57e:	f00a fb4b 	bl	8014c18 <sys_mutex_new>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d006      	beq.n	800a596 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <mem_init+0x98>)
 800a58a:	f240 221f 	movw	r2, #543	; 0x21f
 800a58e:	490a      	ldr	r1, [pc, #40]	; (800a5b8 <mem_init+0x9c>)
 800a590:	480a      	ldr	r0, [pc, #40]	; (800a5bc <mem_init+0xa0>)
 800a592:	f00a fd89 	bl	80150a8 <iprintf>
  }
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20009788 	.word	0x20009788
 800a5a4:	2000e79c 	.word	0x2000e79c
 800a5a8:	2000e7a0 	.word	0x2000e7a0
 800a5ac:	2000e7a8 	.word	0x2000e7a8
 800a5b0:	2000e7a4 	.word	0x2000e7a4
 800a5b4:	080168c8 	.word	0x080168c8
 800a5b8:	0801699c 	.word	0x0801699c
 800a5bc:	08016910 	.word	0x08016910

0800a5c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff fef3 	bl	800a3b4 <mem_to_ptr>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff feda 	bl	800a390 <ptr_to_mem>
 800a5dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff fed4 	bl	800a390 <ptr_to_mem>
 800a5e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a5f2:	d818      	bhi.n	800a626 <mem_link_valid+0x66>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	885b      	ldrh	r3, [r3, #2]
 800a5f8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a5fc:	d813      	bhi.n	800a626 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a602:	8afa      	ldrh	r2, [r7, #22]
 800a604:	429a      	cmp	r2, r3
 800a606:	d004      	beq.n	800a612 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	8afa      	ldrh	r2, [r7, #22]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d109      	bne.n	800a626 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a612:	4b08      	ldr	r3, [pc, #32]	; (800a634 <mem_link_valid+0x74>)
 800a614:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d006      	beq.n	800a62a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	885b      	ldrh	r3, [r3, #2]
 800a620:	8afa      	ldrh	r2, [r7, #22]
 800a622:	429a      	cmp	r2, r3
 800a624:	d001      	beq.n	800a62a <mem_link_valid+0x6a>
    return 0;
 800a626:	2300      	movs	r3, #0
 800a628:	e000      	b.n	800a62c <mem_link_valid+0x6c>
  }
  return 1;
 800a62a:	2301      	movs	r3, #1
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	2000e7a0 	.word	0x2000e7a0

0800a638 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d070      	beq.n	800a728 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f003 0303 	and.w	r3, r3, #3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a650:	4b37      	ldr	r3, [pc, #220]	; (800a730 <mem_free+0xf8>)
 800a652:	f240 2273 	movw	r2, #627	; 0x273
 800a656:	4937      	ldr	r1, [pc, #220]	; (800a734 <mem_free+0xfc>)
 800a658:	4837      	ldr	r0, [pc, #220]	; (800a738 <mem_free+0x100>)
 800a65a:	f00a fd25 	bl	80150a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a65e:	f00a fb2d 	bl	8014cbc <sys_arch_protect>
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f00a fb37 	bl	8014cd8 <sys_arch_unprotect>
    return;
 800a66a:	e05e      	b.n	800a72a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3b08      	subs	r3, #8
 800a670:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a672:	4b32      	ldr	r3, [pc, #200]	; (800a73c <mem_free+0x104>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d306      	bcc.n	800a68a <mem_free+0x52>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f103 020c 	add.w	r2, r3, #12
 800a682:	4b2f      	ldr	r3, [pc, #188]	; (800a740 <mem_free+0x108>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d90d      	bls.n	800a6a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a68a:	4b29      	ldr	r3, [pc, #164]	; (800a730 <mem_free+0xf8>)
 800a68c:	f240 227f 	movw	r2, #639	; 0x27f
 800a690:	492c      	ldr	r1, [pc, #176]	; (800a744 <mem_free+0x10c>)
 800a692:	4829      	ldr	r0, [pc, #164]	; (800a738 <mem_free+0x100>)
 800a694:	f00a fd08 	bl	80150a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a698:	f00a fb10 	bl	8014cbc <sys_arch_protect>
 800a69c:	6138      	str	r0, [r7, #16]
 800a69e:	6938      	ldr	r0, [r7, #16]
 800a6a0:	f00a fb1a 	bl	8014cd8 <sys_arch_unprotect>
    return;
 800a6a4:	e041      	b.n	800a72a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6a6:	4828      	ldr	r0, [pc, #160]	; (800a748 <mem_free+0x110>)
 800a6a8:	f00a facc 	bl	8014c44 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	791b      	ldrb	r3, [r3, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d110      	bne.n	800a6d6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6b4:	4b1e      	ldr	r3, [pc, #120]	; (800a730 <mem_free+0xf8>)
 800a6b6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a6ba:	4924      	ldr	r1, [pc, #144]	; (800a74c <mem_free+0x114>)
 800a6bc:	481e      	ldr	r0, [pc, #120]	; (800a738 <mem_free+0x100>)
 800a6be:	f00a fcf3 	bl	80150a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a6c2:	4821      	ldr	r0, [pc, #132]	; (800a748 <mem_free+0x110>)
 800a6c4:	f00a facd 	bl	8014c62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6c8:	f00a faf8 	bl	8014cbc <sys_arch_protect>
 800a6cc:	6178      	str	r0, [r7, #20]
 800a6ce:	6978      	ldr	r0, [r7, #20]
 800a6d0:	f00a fb02 	bl	8014cd8 <sys_arch_unprotect>
    return;
 800a6d4:	e029      	b.n	800a72a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a6d6:	69f8      	ldr	r0, [r7, #28]
 800a6d8:	f7ff ff72 	bl	800a5c0 <mem_link_valid>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d110      	bne.n	800a704 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a6e2:	4b13      	ldr	r3, [pc, #76]	; (800a730 <mem_free+0xf8>)
 800a6e4:	f240 2295 	movw	r2, #661	; 0x295
 800a6e8:	4919      	ldr	r1, [pc, #100]	; (800a750 <mem_free+0x118>)
 800a6ea:	4813      	ldr	r0, [pc, #76]	; (800a738 <mem_free+0x100>)
 800a6ec:	f00a fcdc 	bl	80150a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a6f0:	4815      	ldr	r0, [pc, #84]	; (800a748 <mem_free+0x110>)
 800a6f2:	f00a fab6 	bl	8014c62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6f6:	f00a fae1 	bl	8014cbc <sys_arch_protect>
 800a6fa:	61b8      	str	r0, [r7, #24]
 800a6fc:	69b8      	ldr	r0, [r7, #24]
 800a6fe:	f00a faeb 	bl	8014cd8 <sys_arch_unprotect>
    return;
 800a702:	e012      	b.n	800a72a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	2200      	movs	r2, #0
 800a708:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a70a:	4b12      	ldr	r3, [pc, #72]	; (800a754 <mem_free+0x11c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	429a      	cmp	r2, r3
 800a712:	d202      	bcs.n	800a71a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a714:	4a0f      	ldr	r2, [pc, #60]	; (800a754 <mem_free+0x11c>)
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a71a:	69f8      	ldr	r0, [r7, #28]
 800a71c:	f7ff fe5c 	bl	800a3d8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a720:	4809      	ldr	r0, [pc, #36]	; (800a748 <mem_free+0x110>)
 800a722:	f00a fa9e 	bl	8014c62 <sys_mutex_unlock>
 800a726:	e000      	b.n	800a72a <mem_free+0xf2>
    return;
 800a728:	bf00      	nop
}
 800a72a:	3720      	adds	r7, #32
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	080168c8 	.word	0x080168c8
 800a734:	080169b8 	.word	0x080169b8
 800a738:	08016910 	.word	0x08016910
 800a73c:	2000e79c 	.word	0x2000e79c
 800a740:	2000e7a0 	.word	0x2000e7a0
 800a744:	080169dc 	.word	0x080169dc
 800a748:	2000e7a4 	.word	0x2000e7a4
 800a74c:	080169f8 	.word	0x080169f8
 800a750:	08016a20 	.word	0x08016a20
 800a754:	2000e7a8 	.word	0x2000e7a8

0800a758 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a764:	887b      	ldrh	r3, [r7, #2]
 800a766:	3303      	adds	r3, #3
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a770:	8bfb      	ldrh	r3, [r7, #30]
 800a772:	2b0b      	cmp	r3, #11
 800a774:	d801      	bhi.n	800a77a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a776:	230c      	movs	r3, #12
 800a778:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a77a:	8bfb      	ldrh	r3, [r7, #30]
 800a77c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a780:	d803      	bhi.n	800a78a <mem_trim+0x32>
 800a782:	8bfa      	ldrh	r2, [r7, #30]
 800a784:	887b      	ldrh	r3, [r7, #2]
 800a786:	429a      	cmp	r2, r3
 800a788:	d201      	bcs.n	800a78e <mem_trim+0x36>
    return NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e0d8      	b.n	800a940 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a78e:	4b6e      	ldr	r3, [pc, #440]	; (800a948 <mem_trim+0x1f0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	429a      	cmp	r2, r3
 800a796:	d304      	bcc.n	800a7a2 <mem_trim+0x4a>
 800a798:	4b6c      	ldr	r3, [pc, #432]	; (800a94c <mem_trim+0x1f4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d306      	bcc.n	800a7b0 <mem_trim+0x58>
 800a7a2:	4b6b      	ldr	r3, [pc, #428]	; (800a950 <mem_trim+0x1f8>)
 800a7a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a7a8:	496a      	ldr	r1, [pc, #424]	; (800a954 <mem_trim+0x1fc>)
 800a7aa:	486b      	ldr	r0, [pc, #428]	; (800a958 <mem_trim+0x200>)
 800a7ac:	f00a fc7c 	bl	80150a8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7b0:	4b65      	ldr	r3, [pc, #404]	; (800a948 <mem_trim+0x1f0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d304      	bcc.n	800a7c4 <mem_trim+0x6c>
 800a7ba:	4b64      	ldr	r3, [pc, #400]	; (800a94c <mem_trim+0x1f4>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d307      	bcc.n	800a7d4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7c4:	f00a fa7a 	bl	8014cbc <sys_arch_protect>
 800a7c8:	60b8      	str	r0, [r7, #8]
 800a7ca:	68b8      	ldr	r0, [r7, #8]
 800a7cc:	f00a fa84 	bl	8014cd8 <sys_arch_unprotect>
    return rmem;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	e0b5      	b.n	800a940 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3b08      	subs	r3, #8
 800a7d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a7da:	69b8      	ldr	r0, [r7, #24]
 800a7dc:	f7ff fdea 	bl	800a3b4 <mem_to_ptr>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	881a      	ldrh	r2, [r3, #0]
 800a7e8:	8afb      	ldrh	r3, [r7, #22]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	3b08      	subs	r3, #8
 800a7f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a7f2:	8bfa      	ldrh	r2, [r7, #30]
 800a7f4:	8abb      	ldrh	r3, [r7, #20]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d906      	bls.n	800a808 <mem_trim+0xb0>
 800a7fa:	4b55      	ldr	r3, [pc, #340]	; (800a950 <mem_trim+0x1f8>)
 800a7fc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a800:	4956      	ldr	r1, [pc, #344]	; (800a95c <mem_trim+0x204>)
 800a802:	4855      	ldr	r0, [pc, #340]	; (800a958 <mem_trim+0x200>)
 800a804:	f00a fc50 	bl	80150a8 <iprintf>
  if (newsize > size) {
 800a808:	8bfa      	ldrh	r2, [r7, #30]
 800a80a:	8abb      	ldrh	r3, [r7, #20]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d901      	bls.n	800a814 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a810:	2300      	movs	r3, #0
 800a812:	e095      	b.n	800a940 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a814:	8bfa      	ldrh	r2, [r7, #30]
 800a816:	8abb      	ldrh	r3, [r7, #20]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d101      	bne.n	800a820 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	e08f      	b.n	800a940 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a820:	484f      	ldr	r0, [pc, #316]	; (800a960 <mem_trim+0x208>)
 800a822:	f00a fa0f 	bl	8014c44 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff fdb0 	bl	800a390 <ptr_to_mem>
 800a830:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	791b      	ldrb	r3, [r3, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d13f      	bne.n	800a8ba <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a842:	d106      	bne.n	800a852 <mem_trim+0xfa>
 800a844:	4b42      	ldr	r3, [pc, #264]	; (800a950 <mem_trim+0x1f8>)
 800a846:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a84a:	4946      	ldr	r1, [pc, #280]	; (800a964 <mem_trim+0x20c>)
 800a84c:	4842      	ldr	r0, [pc, #264]	; (800a958 <mem_trim+0x200>)
 800a84e:	f00a fc2b 	bl	80150a8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a858:	8afa      	ldrh	r2, [r7, #22]
 800a85a:	8bfb      	ldrh	r3, [r7, #30]
 800a85c:	4413      	add	r3, r2
 800a85e:	b29b      	uxth	r3, r3
 800a860:	3308      	adds	r3, #8
 800a862:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a864:	4b40      	ldr	r3, [pc, #256]	; (800a968 <mem_trim+0x210>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d106      	bne.n	800a87c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a86e:	89fb      	ldrh	r3, [r7, #14]
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff fd8d 	bl	800a390 <ptr_to_mem>
 800a876:	4603      	mov	r3, r0
 800a878:	4a3b      	ldr	r2, [pc, #236]	; (800a968 <mem_trim+0x210>)
 800a87a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a87c:	89fb      	ldrh	r3, [r7, #14]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fd86 	bl	800a390 <ptr_to_mem>
 800a884:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2200      	movs	r2, #0
 800a88a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	89ba      	ldrh	r2, [r7, #12]
 800a890:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	8afa      	ldrh	r2, [r7, #22]
 800a896:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	89fa      	ldrh	r2, [r7, #14]
 800a89c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a8a6:	d047      	beq.n	800a938 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fd6f 	bl	800a390 <ptr_to_mem>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	89fb      	ldrh	r3, [r7, #14]
 800a8b6:	8053      	strh	r3, [r2, #2]
 800a8b8:	e03e      	b.n	800a938 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a8ba:	8bfb      	ldrh	r3, [r7, #30]
 800a8bc:	f103 0214 	add.w	r2, r3, #20
 800a8c0:	8abb      	ldrh	r3, [r7, #20]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d838      	bhi.n	800a938 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8c6:	8afa      	ldrh	r2, [r7, #22]
 800a8c8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a8da:	d106      	bne.n	800a8ea <mem_trim+0x192>
 800a8dc:	4b1c      	ldr	r3, [pc, #112]	; (800a950 <mem_trim+0x1f8>)
 800a8de:	f240 3216 	movw	r2, #790	; 0x316
 800a8e2:	4920      	ldr	r1, [pc, #128]	; (800a964 <mem_trim+0x20c>)
 800a8e4:	481c      	ldr	r0, [pc, #112]	; (800a958 <mem_trim+0x200>)
 800a8e6:	f00a fbdf 	bl	80150a8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a8ea:	89fb      	ldrh	r3, [r7, #14]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff fd4f 	bl	800a390 <ptr_to_mem>
 800a8f2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a8f4:	4b1c      	ldr	r3, [pc, #112]	; (800a968 <mem_trim+0x210>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d202      	bcs.n	800a904 <mem_trim+0x1ac>
      lfree = mem2;
 800a8fe:	4a1a      	ldr	r2, [pc, #104]	; (800a968 <mem_trim+0x210>)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	2200      	movs	r2, #0
 800a908:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	881a      	ldrh	r2, [r3, #0]
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	8afa      	ldrh	r2, [r7, #22]
 800a916:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	89fa      	ldrh	r2, [r7, #14]
 800a91c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a926:	d007      	beq.n	800a938 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff fd2f 	bl	800a390 <ptr_to_mem>
 800a932:	4602      	mov	r2, r0
 800a934:	89fb      	ldrh	r3, [r7, #14]
 800a936:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a938:	4809      	ldr	r0, [pc, #36]	; (800a960 <mem_trim+0x208>)
 800a93a:	f00a f992 	bl	8014c62 <sys_mutex_unlock>
  return rmem;
 800a93e:	687b      	ldr	r3, [r7, #4]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3720      	adds	r7, #32
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	2000e79c 	.word	0x2000e79c
 800a94c:	2000e7a0 	.word	0x2000e7a0
 800a950:	080168c8 	.word	0x080168c8
 800a954:	08016a54 	.word	0x08016a54
 800a958:	08016910 	.word	0x08016910
 800a95c:	08016a6c 	.word	0x08016a6c
 800a960:	2000e7a4 	.word	0x2000e7a4
 800a964:	08016a8c 	.word	0x08016a8c
 800a968:	2000e7a8 	.word	0x2000e7a8

0800a96c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <mem_malloc+0x14>
    return NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	e0e2      	b.n	800ab46 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a980:	88fb      	ldrh	r3, [r7, #6]
 800a982:	3303      	adds	r3, #3
 800a984:	b29b      	uxth	r3, r3
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a98c:	8bbb      	ldrh	r3, [r7, #28]
 800a98e:	2b0b      	cmp	r3, #11
 800a990:	d801      	bhi.n	800a996 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a992:	230c      	movs	r3, #12
 800a994:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a996:	8bbb      	ldrh	r3, [r7, #28]
 800a998:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a99c:	d803      	bhi.n	800a9a6 <mem_malloc+0x3a>
 800a99e:	8bba      	ldrh	r2, [r7, #28]
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d201      	bcs.n	800a9aa <mem_malloc+0x3e>
    return NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e0cd      	b.n	800ab46 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9aa:	4869      	ldr	r0, [pc, #420]	; (800ab50 <mem_malloc+0x1e4>)
 800a9ac:	f00a f94a 	bl	8014c44 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9b0:	4b68      	ldr	r3, [pc, #416]	; (800ab54 <mem_malloc+0x1e8>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff fcfd 	bl	800a3b4 <mem_to_ptr>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	83fb      	strh	r3, [r7, #30]
 800a9be:	e0b7      	b.n	800ab30 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a9c0:	8bfb      	ldrh	r3, [r7, #30]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fce4 	bl	800a390 <ptr_to_mem>
 800a9c8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	791b      	ldrb	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f040 80a7 	bne.w	800ab22 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	8bfb      	ldrh	r3, [r7, #30]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	f1a3 0208 	sub.w	r2, r3, #8
 800a9e2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	f0c0 809c 	bcc.w	800ab22 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	8bfb      	ldrh	r3, [r7, #30]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	f1a3 0208 	sub.w	r2, r3, #8
 800a9f8:	8bbb      	ldrh	r3, [r7, #28]
 800a9fa:	3314      	adds	r3, #20
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d333      	bcc.n	800aa68 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa00:	8bfa      	ldrh	r2, [r7, #30]
 800aa02:	8bbb      	ldrh	r3, [r7, #28]
 800aa04:	4413      	add	r3, r2
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	3308      	adds	r3, #8
 800aa0a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa0c:	8a7b      	ldrh	r3, [r7, #18]
 800aa0e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800aa12:	d106      	bne.n	800aa22 <mem_malloc+0xb6>
 800aa14:	4b50      	ldr	r3, [pc, #320]	; (800ab58 <mem_malloc+0x1ec>)
 800aa16:	f240 3287 	movw	r2, #903	; 0x387
 800aa1a:	4950      	ldr	r1, [pc, #320]	; (800ab5c <mem_malloc+0x1f0>)
 800aa1c:	4850      	ldr	r0, [pc, #320]	; (800ab60 <mem_malloc+0x1f4>)
 800aa1e:	f00a fb43 	bl	80150a8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa22:	8a7b      	ldrh	r3, [r7, #18]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff fcb3 	bl	800a390 <ptr_to_mem>
 800aa2a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	881a      	ldrh	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	8bfa      	ldrh	r2, [r7, #30]
 800aa3e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	8a7a      	ldrh	r2, [r7, #18]
 800aa44:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800aa54:	d00b      	beq.n	800aa6e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff fc98 	bl	800a390 <ptr_to_mem>
 800aa60:	4602      	mov	r2, r0
 800aa62:	8a7b      	ldrh	r3, [r7, #18]
 800aa64:	8053      	strh	r3, [r2, #2]
 800aa66:	e002      	b.n	800aa6e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aa6e:	4b39      	ldr	r3, [pc, #228]	; (800ab54 <mem_malloc+0x1e8>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d127      	bne.n	800aac8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800aa78:	4b36      	ldr	r3, [pc, #216]	; (800ab54 <mem_malloc+0x1e8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aa7e:	e005      	b.n	800aa8c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7ff fc83 	bl	800a390 <ptr_to_mem>
 800aa8a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	791b      	ldrb	r3, [r3, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <mem_malloc+0x132>
 800aa94:	4b33      	ldr	r3, [pc, #204]	; (800ab64 <mem_malloc+0x1f8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d1f0      	bne.n	800aa80 <mem_malloc+0x114>
          }
          lfree = cur;
 800aa9e:	4a2d      	ldr	r2, [pc, #180]	; (800ab54 <mem_malloc+0x1e8>)
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aaa4:	4b2b      	ldr	r3, [pc, #172]	; (800ab54 <mem_malloc+0x1e8>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	4b2e      	ldr	r3, [pc, #184]	; (800ab64 <mem_malloc+0x1f8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d00b      	beq.n	800aac8 <mem_malloc+0x15c>
 800aab0:	4b28      	ldr	r3, [pc, #160]	; (800ab54 <mem_malloc+0x1e8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	791b      	ldrb	r3, [r3, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <mem_malloc+0x15c>
 800aaba:	4b27      	ldr	r3, [pc, #156]	; (800ab58 <mem_malloc+0x1ec>)
 800aabc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aac0:	4929      	ldr	r1, [pc, #164]	; (800ab68 <mem_malloc+0x1fc>)
 800aac2:	4827      	ldr	r0, [pc, #156]	; (800ab60 <mem_malloc+0x1f4>)
 800aac4:	f00a faf0 	bl	80150a8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800aac8:	4821      	ldr	r0, [pc, #132]	; (800ab50 <mem_malloc+0x1e4>)
 800aaca:	f00a f8ca 	bl	8014c62 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aace:	8bba      	ldrh	r2, [r7, #28]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	4413      	add	r3, r2
 800aad4:	3308      	adds	r3, #8
 800aad6:	4a23      	ldr	r2, [pc, #140]	; (800ab64 <mem_malloc+0x1f8>)
 800aad8:	6812      	ldr	r2, [r2, #0]
 800aada:	4293      	cmp	r3, r2
 800aadc:	d906      	bls.n	800aaec <mem_malloc+0x180>
 800aade:	4b1e      	ldr	r3, [pc, #120]	; (800ab58 <mem_malloc+0x1ec>)
 800aae0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800aae4:	4921      	ldr	r1, [pc, #132]	; (800ab6c <mem_malloc+0x200>)
 800aae6:	481e      	ldr	r0, [pc, #120]	; (800ab60 <mem_malloc+0x1f4>)
 800aae8:	f00a fade 	bl	80150a8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f003 0303 	and.w	r3, r3, #3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d006      	beq.n	800ab04 <mem_malloc+0x198>
 800aaf6:	4b18      	ldr	r3, [pc, #96]	; (800ab58 <mem_malloc+0x1ec>)
 800aaf8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800aafc:	491c      	ldr	r1, [pc, #112]	; (800ab70 <mem_malloc+0x204>)
 800aafe:	4818      	ldr	r0, [pc, #96]	; (800ab60 <mem_malloc+0x1f4>)
 800ab00:	f00a fad2 	bl	80150a8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f003 0303 	and.w	r3, r3, #3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d006      	beq.n	800ab1c <mem_malloc+0x1b0>
 800ab0e:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <mem_malloc+0x1ec>)
 800ab10:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ab14:	4917      	ldr	r1, [pc, #92]	; (800ab74 <mem_malloc+0x208>)
 800ab16:	4812      	ldr	r0, [pc, #72]	; (800ab60 <mem_malloc+0x1f4>)
 800ab18:	f00a fac6 	bl	80150a8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	3308      	adds	r3, #8
 800ab20:	e011      	b.n	800ab46 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ab22:	8bfb      	ldrh	r3, [r7, #30]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff fc33 	bl	800a390 <ptr_to_mem>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	881b      	ldrh	r3, [r3, #0]
 800ab2e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab30:	8bfa      	ldrh	r2, [r7, #30]
 800ab32:	8bbb      	ldrh	r3, [r7, #28]
 800ab34:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	f4ff af41 	bcc.w	800a9c0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ab3e:	4804      	ldr	r0, [pc, #16]	; (800ab50 <mem_malloc+0x1e4>)
 800ab40:	f00a f88f 	bl	8014c62 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3720      	adds	r7, #32
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	2000e7a4 	.word	0x2000e7a4
 800ab54:	2000e7a8 	.word	0x2000e7a8
 800ab58:	080168c8 	.word	0x080168c8
 800ab5c:	08016a8c 	.word	0x08016a8c
 800ab60:	08016910 	.word	0x08016910
 800ab64:	2000e7a0 	.word	0x2000e7a0
 800ab68:	08016aa0 	.word	0x08016aa0
 800ab6c:	08016abc 	.word	0x08016abc
 800ab70:	08016aec 	.word	0x08016aec
 800ab74:	08016b1c 	.word	0x08016b1c

0800ab78 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	3303      	adds	r3, #3
 800ab8e:	f023 0303 	bic.w	r3, r3, #3
 800ab92:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ab94:	2300      	movs	r3, #0
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	e011      	b.n	800abbe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	461a      	mov	r2, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	4413      	add	r3, r2
 800abb6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	885b      	ldrh	r3, [r3, #2]
 800abc2:	461a      	mov	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4293      	cmp	r3, r2
 800abc8:	dbe7      	blt.n	800ab9a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800abca:	bf00      	nop
 800abcc:	bf00      	nop
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abde:	2300      	movs	r3, #0
 800abe0:	80fb      	strh	r3, [r7, #6]
 800abe2:	e009      	b.n	800abf8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800abe4:	88fb      	ldrh	r3, [r7, #6]
 800abe6:	4a08      	ldr	r2, [pc, #32]	; (800ac08 <memp_init+0x30>)
 800abe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff ffc3 	bl	800ab78 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abf2:	88fb      	ldrh	r3, [r7, #6]
 800abf4:	3301      	adds	r3, #1
 800abf6:	80fb      	strh	r3, [r7, #6]
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	2b0b      	cmp	r3, #11
 800abfc:	d9f2      	bls.n	800abe4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800abfe:	bf00      	nop
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	08018fe8 	.word	0x08018fe8

0800ac0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac14:	f00a f852 	bl	8014cbc <sys_arch_protect>
 800ac18:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d015      	beq.n	800ac54 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	6812      	ldr	r2, [r2, #0]
 800ac30:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d006      	beq.n	800ac4a <do_memp_malloc_pool+0x3e>
 800ac3c:	4b09      	ldr	r3, [pc, #36]	; (800ac64 <do_memp_malloc_pool+0x58>)
 800ac3e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ac42:	4909      	ldr	r1, [pc, #36]	; (800ac68 <do_memp_malloc_pool+0x5c>)
 800ac44:	4809      	ldr	r0, [pc, #36]	; (800ac6c <do_memp_malloc_pool+0x60>)
 800ac46:	f00a fa2f 	bl	80150a8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f00a f844 	bl	8014cd8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	e003      	b.n	800ac5c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f00a f83f 	bl	8014cd8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	08016b40 	.word	0x08016b40
 800ac68:	08016b70 	.word	0x08016b70
 800ac6c:	08016b94 	.word	0x08016b94

0800ac70 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <memp_malloc_pool+0x1c>
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <memp_malloc_pool+0x38>)
 800ac80:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ac84:	4909      	ldr	r1, [pc, #36]	; (800acac <memp_malloc_pool+0x3c>)
 800ac86:	480a      	ldr	r0, [pc, #40]	; (800acb0 <memp_malloc_pool+0x40>)
 800ac88:	f00a fa0e 	bl	80150a8 <iprintf>
  if (desc == NULL) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <memp_malloc_pool+0x26>
    return NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e003      	b.n	800ac9e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff ffb8 	bl	800ac0c <do_memp_malloc_pool>
 800ac9c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	08016b40 	.word	0x08016b40
 800acac:	08016bbc 	.word	0x08016bbc
 800acb0:	08016b94 	.word	0x08016b94

0800acb4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	4603      	mov	r3, r0
 800acbc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	2b0b      	cmp	r3, #11
 800acc2:	d908      	bls.n	800acd6 <memp_malloc+0x22>
 800acc4:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <memp_malloc+0x3c>)
 800acc6:	f240 1257 	movw	r2, #343	; 0x157
 800acca:	490a      	ldr	r1, [pc, #40]	; (800acf4 <memp_malloc+0x40>)
 800accc:	480a      	ldr	r0, [pc, #40]	; (800acf8 <memp_malloc+0x44>)
 800acce:	f00a f9eb 	bl	80150a8 <iprintf>
 800acd2:	2300      	movs	r3, #0
 800acd4:	e008      	b.n	800ace8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	4a08      	ldr	r2, [pc, #32]	; (800acfc <memp_malloc+0x48>)
 800acda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff ff94 	bl	800ac0c <do_memp_malloc_pool>
 800ace4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ace6:	68fb      	ldr	r3, [r7, #12]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	08016b40 	.word	0x08016b40
 800acf4:	08016bd0 	.word	0x08016bd0
 800acf8:	08016b94 	.word	0x08016b94
 800acfc:	08018fe8 	.word	0x08018fe8

0800ad00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	f003 0303 	and.w	r3, r3, #3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d006      	beq.n	800ad22 <do_memp_free_pool+0x22>
 800ad14:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <do_memp_free_pool+0x4c>)
 800ad16:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ad1a:	490d      	ldr	r1, [pc, #52]	; (800ad50 <do_memp_free_pool+0x50>)
 800ad1c:	480d      	ldr	r0, [pc, #52]	; (800ad54 <do_memp_free_pool+0x54>)
 800ad1e:	f00a f9c3 	bl	80150a8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ad26:	f009 ffc9 	bl	8014cbc <sys_arch_protect>
 800ad2a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ad3e:	68b8      	ldr	r0, [r7, #8]
 800ad40:	f009 ffca 	bl	8014cd8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	08016b40 	.word	0x08016b40
 800ad50:	08016bf0 	.word	0x08016bf0
 800ad54:	08016b94 	.word	0x08016b94

0800ad58 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <memp_free_pool+0x1e>
 800ad68:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <memp_free_pool+0x3c>)
 800ad6a:	f240 1295 	movw	r2, #405	; 0x195
 800ad6e:	490a      	ldr	r1, [pc, #40]	; (800ad98 <memp_free_pool+0x40>)
 800ad70:	480a      	ldr	r0, [pc, #40]	; (800ad9c <memp_free_pool+0x44>)
 800ad72:	f00a f999 	bl	80150a8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d007      	beq.n	800ad8c <memp_free_pool+0x34>
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d004      	beq.n	800ad8c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff ffbb 	bl	800ad00 <do_memp_free_pool>
 800ad8a:	e000      	b.n	800ad8e <memp_free_pool+0x36>
    return;
 800ad8c:	bf00      	nop
}
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	08016b40 	.word	0x08016b40
 800ad98:	08016bbc 	.word	0x08016bbc
 800ad9c:	08016b94 	.word	0x08016b94

0800ada0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800adac:	79fb      	ldrb	r3, [r7, #7]
 800adae:	2b0b      	cmp	r3, #11
 800adb0:	d907      	bls.n	800adc2 <memp_free+0x22>
 800adb2:	4b0c      	ldr	r3, [pc, #48]	; (800ade4 <memp_free+0x44>)
 800adb4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800adb8:	490b      	ldr	r1, [pc, #44]	; (800ade8 <memp_free+0x48>)
 800adba:	480c      	ldr	r0, [pc, #48]	; (800adec <memp_free+0x4c>)
 800adbc:	f00a f974 	bl	80150a8 <iprintf>
 800adc0:	e00c      	b.n	800addc <memp_free+0x3c>

  if (mem == NULL) {
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d008      	beq.n	800adda <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800adc8:	79fb      	ldrb	r3, [r7, #7]
 800adca:	4a09      	ldr	r2, [pc, #36]	; (800adf0 <memp_free+0x50>)
 800adcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	4618      	mov	r0, r3
 800add4:	f7ff ff94 	bl	800ad00 <do_memp_free_pool>
 800add8:	e000      	b.n	800addc <memp_free+0x3c>
    return;
 800adda:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	08016b40 	.word	0x08016b40
 800ade8:	08016c10 	.word	0x08016c10
 800adec:	08016b94 	.word	0x08016b94
 800adf0:	08018fe8 	.word	0x08018fe8

0800adf4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800adf4:	b480      	push	{r7}
 800adf6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800adf8:	bf00      	nop
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
	...

0800ae04 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d108      	bne.n	800ae2a <netif_add+0x26>
 800ae18:	4b57      	ldr	r3, [pc, #348]	; (800af78 <netif_add+0x174>)
 800ae1a:	f240 1227 	movw	r2, #295	; 0x127
 800ae1e:	4957      	ldr	r1, [pc, #348]	; (800af7c <netif_add+0x178>)
 800ae20:	4857      	ldr	r0, [pc, #348]	; (800af80 <netif_add+0x17c>)
 800ae22:	f00a f941 	bl	80150a8 <iprintf>
 800ae26:	2300      	movs	r3, #0
 800ae28:	e0a2      	b.n	800af70 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d108      	bne.n	800ae42 <netif_add+0x3e>
 800ae30:	4b51      	ldr	r3, [pc, #324]	; (800af78 <netif_add+0x174>)
 800ae32:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ae36:	4953      	ldr	r1, [pc, #332]	; (800af84 <netif_add+0x180>)
 800ae38:	4851      	ldr	r0, [pc, #324]	; (800af80 <netif_add+0x17c>)
 800ae3a:	f00a f935 	bl	80150a8 <iprintf>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e096      	b.n	800af70 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae48:	4b4f      	ldr	r3, [pc, #316]	; (800af88 <netif_add+0x184>)
 800ae4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae52:	4b4d      	ldr	r3, [pc, #308]	; (800af88 <netif_add+0x184>)
 800ae54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae5c:	4b4a      	ldr	r3, [pc, #296]	; (800af88 <netif_add+0x184>)
 800ae5e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4a45      	ldr	r2, [pc, #276]	; (800af8c <netif_add+0x188>)
 800ae76:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6a3a      	ldr	r2, [r7, #32]
 800ae90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ae92:	4b3f      	ldr	r3, [pc, #252]	; (800af90 <netif_add+0x18c>)
 800ae94:	781a      	ldrb	r2, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aea0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 f90f 	bl	800b0cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	4798      	blx	r3
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <netif_add+0xba>
    return NULL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	e058      	b.n	800af70 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aec4:	2bff      	cmp	r3, #255	; 0xff
 800aec6:	d103      	bne.n	800aed0 <netif_add+0xcc>
        netif->num = 0;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aed4:	4b2f      	ldr	r3, [pc, #188]	; (800af94 <netif_add+0x190>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	e02b      	b.n	800af34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d106      	bne.n	800aef2 <netif_add+0xee>
 800aee4:	4b24      	ldr	r3, [pc, #144]	; (800af78 <netif_add+0x174>)
 800aee6:	f240 128b 	movw	r2, #395	; 0x18b
 800aeea:	492b      	ldr	r1, [pc, #172]	; (800af98 <netif_add+0x194>)
 800aeec:	4824      	ldr	r0, [pc, #144]	; (800af80 <netif_add+0x17c>)
 800aeee:	f00a f8db 	bl	80150a8 <iprintf>
        num_netifs++;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	3301      	adds	r3, #1
 800aef6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	2bff      	cmp	r3, #255	; 0xff
 800aefc:	dd06      	ble.n	800af0c <netif_add+0x108>
 800aefe:	4b1e      	ldr	r3, [pc, #120]	; (800af78 <netif_add+0x174>)
 800af00:	f240 128d 	movw	r2, #397	; 0x18d
 800af04:	4925      	ldr	r1, [pc, #148]	; (800af9c <netif_add+0x198>)
 800af06:	481e      	ldr	r0, [pc, #120]	; (800af80 <netif_add+0x17c>)
 800af08:	f00a f8ce 	bl	80150a8 <iprintf>
        if (netif2->num == netif->num) {
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af18:	429a      	cmp	r2, r3
 800af1a:	d108      	bne.n	800af2e <netif_add+0x12a>
          netif->num++;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af22:	3301      	adds	r3, #1
 800af24:	b2da      	uxtb	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800af2c:	e005      	b.n	800af3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1d0      	bne.n	800aedc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1be      	bne.n	800aebe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af46:	2bfe      	cmp	r3, #254	; 0xfe
 800af48:	d103      	bne.n	800af52 <netif_add+0x14e>
    netif_num = 0;
 800af4a:	4b11      	ldr	r3, [pc, #68]	; (800af90 <netif_add+0x18c>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	701a      	strb	r2, [r3, #0]
 800af50:	e006      	b.n	800af60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af58:	3301      	adds	r3, #1
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	4b0c      	ldr	r3, [pc, #48]	; (800af90 <netif_add+0x18c>)
 800af5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800af60:	4b0c      	ldr	r3, [pc, #48]	; (800af94 <netif_add+0x190>)
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af68:	4a0a      	ldr	r2, [pc, #40]	; (800af94 <netif_add+0x190>)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af6e:	68fb      	ldr	r3, [r7, #12]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	08016c2c 	.word	0x08016c2c
 800af7c:	08016cc0 	.word	0x08016cc0
 800af80:	08016c7c 	.word	0x08016c7c
 800af84:	08016cdc 	.word	0x08016cdc
 800af88:	08019058 	.word	0x08019058
 800af8c:	0800b3a7 	.word	0x0800b3a7
 800af90:	200117f8 	.word	0x200117f8
 800af94:	200117f0 	.word	0x200117f0
 800af98:	08016d00 	.word	0x08016d00
 800af9c:	08016d14 	.word	0x08016d14

0800afa0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f002 fe4b 	bl	800dc48 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <netif_do_set_ipaddr+0x20>
 800afce:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <netif_do_set_ipaddr+0x88>)
 800afd0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800afd4:	491c      	ldr	r1, [pc, #112]	; (800b048 <netif_do_set_ipaddr+0x8c>)
 800afd6:	481d      	ldr	r0, [pc, #116]	; (800b04c <netif_do_set_ipaddr+0x90>)
 800afd8:	f00a f866 	bl	80150a8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d106      	bne.n	800aff0 <netif_do_set_ipaddr+0x34>
 800afe2:	4b18      	ldr	r3, [pc, #96]	; (800b044 <netif_do_set_ipaddr+0x88>)
 800afe4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800afe8:	4917      	ldr	r1, [pc, #92]	; (800b048 <netif_do_set_ipaddr+0x8c>)
 800afea:	4818      	ldr	r0, [pc, #96]	; (800b04c <netif_do_set_ipaddr+0x90>)
 800afec:	f00a f85c 	bl	80150a8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3304      	adds	r3, #4
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d01c      	beq.n	800b038 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	3304      	adds	r3, #4
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b00e:	f107 0314 	add.w	r3, r7, #20
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff ffc3 	bl	800afa0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <netif_do_set_ipaddr+0x6a>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	e000      	b.n	800b028 <netif_do_set_ipaddr+0x6c>
 800b026:	2300      	movs	r3, #0
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b02c:	2101      	movs	r1, #1
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 f8d2 	bl	800b1d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b034:	2301      	movs	r3, #1
 800b036:	e000      	b.n	800b03a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	08016c2c 	.word	0x08016c2c
 800b048:	08016d44 	.word	0x08016d44
 800b04c:	08016c7c 	.word	0x08016c7c

0800b050 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3308      	adds	r3, #8
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d00a      	beq.n	800b080 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <netif_do_set_netmask+0x26>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	e000      	b.n	800b078 <netif_do_set_netmask+0x28>
 800b076:	2300      	movs	r3, #0
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b07c:	2301      	movs	r3, #1
 800b07e:	e000      	b.n	800b082 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d00a      	beq.n	800b0be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <netif_do_set_gw+0x26>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	e000      	b.n	800b0b6 <netif_do_set_gw+0x28>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e000      	b.n	800b0c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b0e8:	4b1c      	ldr	r3, [pc, #112]	; (800b15c <netif_set_addr+0x90>)
 800b0ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b0f2:	4b1a      	ldr	r3, [pc, #104]	; (800b15c <netif_set_addr+0x90>)
 800b0f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b0fc:	4b17      	ldr	r3, [pc, #92]	; (800b15c <netif_set_addr+0x90>)
 800b0fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <netif_set_addr+0x42>
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <netif_set_addr+0x46>
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <netif_set_addr+0x48>
 800b112:	2300      	movs	r3, #0
 800b114:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d006      	beq.n	800b12a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b11c:	f107 0310 	add.w	r3, r7, #16
 800b120:	461a      	mov	r2, r3
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff ff49 	bl	800afbc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff ff8e 	bl	800b050 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff ffa8 	bl	800b08e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b144:	f107 0310 	add.w	r3, r7, #16
 800b148:	461a      	mov	r2, r3
 800b14a:	68b9      	ldr	r1, [r7, #8]
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7ff ff35 	bl	800afbc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b152:	bf00      	nop
 800b154:	3720      	adds	r7, #32
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	08019058 	.word	0x08019058

0800b160 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b168:	4a04      	ldr	r2, [pc, #16]	; (800b17c <netif_set_default+0x1c>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	200117f4 	.word	0x200117f4

0800b180 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d107      	bne.n	800b19e <netif_set_up+0x1e>
 800b18e:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <netif_set_up+0x4c>)
 800b190:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b194:	490e      	ldr	r1, [pc, #56]	; (800b1d0 <netif_set_up+0x50>)
 800b196:	480f      	ldr	r0, [pc, #60]	; (800b1d4 <netif_set_up+0x54>)
 800b198:	f009 ff86 	bl	80150a8 <iprintf>
 800b19c:	e013      	b.n	800b1c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10c      	bne.n	800b1c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b1be:	2103      	movs	r1, #3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f809 	bl	800b1d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	08016c2c 	.word	0x08016c2c
 800b1d0:	08016db4 	.word	0x08016db4
 800b1d4:	08016c7c 	.word	0x08016c7c

0800b1d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <netif_issue_reports+0x20>
 800b1ea:	4b18      	ldr	r3, [pc, #96]	; (800b24c <netif_issue_reports+0x74>)
 800b1ec:	f240 326d 	movw	r2, #877	; 0x36d
 800b1f0:	4917      	ldr	r1, [pc, #92]	; (800b250 <netif_issue_reports+0x78>)
 800b1f2:	4818      	ldr	r0, [pc, #96]	; (800b254 <netif_issue_reports+0x7c>)
 800b1f4:	f009 ff58 	bl	80150a8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	d01e      	beq.n	800b244 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b20c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b210:	2b00      	cmp	r3, #0
 800b212:	d017      	beq.n	800b244 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d013      	beq.n	800b246 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3304      	adds	r3, #4
 800b222:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00e      	beq.n	800b246 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3304      	adds	r3, #4
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f008 f823 	bl	8013288 <etharp_request>
 800b242:	e000      	b.n	800b246 <netif_issue_reports+0x6e>
    return;
 800b244:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	08016c2c 	.word	0x08016c2c
 800b250:	08016dd0 	.word	0x08016dd0
 800b254:	08016c7c 	.word	0x08016c7c

0800b258 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d107      	bne.n	800b276 <netif_set_down+0x1e>
 800b266:	4b12      	ldr	r3, [pc, #72]	; (800b2b0 <netif_set_down+0x58>)
 800b268:	f240 329b 	movw	r2, #923	; 0x39b
 800b26c:	4911      	ldr	r1, [pc, #68]	; (800b2b4 <netif_set_down+0x5c>)
 800b26e:	4812      	ldr	r0, [pc, #72]	; (800b2b8 <netif_set_down+0x60>)
 800b270:	f009 ff1a 	bl	80150a8 <iprintf>
 800b274:	e019      	b.n	800b2aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d012      	beq.n	800b2aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b28a:	f023 0301 	bic.w	r3, r3, #1
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b29c:	f003 0308 	and.w	r3, r3, #8
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f007 fbad 	bl	8012a04 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	08016c2c 	.word	0x08016c2c
 800b2b4:	08016df4 	.word	0x08016df4
 800b2b8:	08016c7c 	.word	0x08016c7c

0800b2bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d107      	bne.n	800b2da <netif_set_link_up+0x1e>
 800b2ca:	4b13      	ldr	r3, [pc, #76]	; (800b318 <netif_set_link_up+0x5c>)
 800b2cc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b2d0:	4912      	ldr	r1, [pc, #72]	; (800b31c <netif_set_link_up+0x60>)
 800b2d2:	4813      	ldr	r0, [pc, #76]	; (800b320 <netif_set_link_up+0x64>)
 800b2d4:	f009 fee8 	bl	80150a8 <iprintf>
 800b2d8:	e01b      	b.n	800b312 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d114      	bne.n	800b312 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2ee:	f043 0304 	orr.w	r3, r3, #4
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b2fa:	2103      	movs	r1, #3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7ff ff6b 	bl	800b1d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <netif_set_link_up+0x56>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	08016c2c 	.word	0x08016c2c
 800b31c:	08016e14 	.word	0x08016e14
 800b320:	08016c7c 	.word	0x08016c7c

0800b324 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d107      	bne.n	800b342 <netif_set_link_down+0x1e>
 800b332:	4b11      	ldr	r3, [pc, #68]	; (800b378 <netif_set_link_down+0x54>)
 800b334:	f240 4206 	movw	r2, #1030	; 0x406
 800b338:	4910      	ldr	r1, [pc, #64]	; (800b37c <netif_set_link_down+0x58>)
 800b33a:	4811      	ldr	r0, [pc, #68]	; (800b380 <netif_set_link_down+0x5c>)
 800b33c:	f009 feb4 	bl	80150a8 <iprintf>
 800b340:	e017      	b.n	800b372 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d010      	beq.n	800b372 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b356:	f023 0304 	bic.w	r3, r3, #4
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <netif_set_link_down+0x4e>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	08016c2c 	.word	0x08016c2c
 800b37c:	08016e38 	.word	0x08016e38
 800b380:	08016c7c 	.word	0x08016c7c

0800b384 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	61da      	str	r2, [r3, #28]
  }
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b3b2:	f06f 030b 	mvn.w	r3, #11
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d013      	beq.n	800b3fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <netif_get_by_index+0x48>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	e00c      	b.n	800b3f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	79fa      	ldrb	r2, [r7, #7]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d101      	bne.n	800b3f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	e006      	b.n	800b3fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1ef      	bne.n	800b3dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	200117f0 	.word	0x200117f0

0800b410 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b416:	f009 fc51 	bl	8014cbc <sys_arch_protect>
 800b41a:	6038      	str	r0, [r7, #0]
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <pbuf_free_ooseq+0x44>)
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
 800b422:	6838      	ldr	r0, [r7, #0]
 800b424:	f009 fc58 	bl	8014cd8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <pbuf_free_ooseq+0x48>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	e00a      	b.n	800b446 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f002 fc43 	bl	800dcc4 <tcp_free_ooseq>
      return;
 800b43e:	e005      	b.n	800b44c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1f1      	bne.n	800b430 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	200117f9 	.word	0x200117f9
 800b458:	20011808 	.word	0x20011808

0800b45c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b464:	f7ff ffd4 	bl	800b410 <pbuf_free_ooseq>
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b476:	f009 fc21 	bl	8014cbc <sys_arch_protect>
 800b47a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b47c:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <pbuf_pool_is_empty+0x4c>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b482:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <pbuf_pool_is_empty+0x4c>)
 800b484:	2201      	movs	r2, #1
 800b486:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f009 fc25 	bl	8014cd8 <sys_arch_unprotect>

  if (!queued) {
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10f      	bne.n	800b4b4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b494:	2100      	movs	r1, #0
 800b496:	480a      	ldr	r0, [pc, #40]	; (800b4c0 <pbuf_pool_is_empty+0x50>)
 800b498:	f7fe fe96 	bl	800a1c8 <tcpip_try_callback>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d008      	beq.n	800b4b4 <pbuf_pool_is_empty+0x44>
 800b4a2:	f009 fc0b 	bl	8014cbc <sys_arch_protect>
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <pbuf_pool_is_empty+0x4c>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f009 fc12 	bl	8014cd8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	200117f9 	.word	0x200117f9
 800b4c0:	0800b45d 	.word	0x0800b45d

0800b4c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	80fb      	strh	r3, [r7, #6]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	88fa      	ldrh	r2, [r7, #6]
 800b4ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	88ba      	ldrh	r2, [r7, #4]
 800b4f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b4f2:	8b3b      	ldrh	r3, [r7, #24]
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	7f3a      	ldrb	r2, [r7, #28]
 800b4fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2201      	movs	r2, #1
 800b504:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	73da      	strb	r2, [r3, #15]
}
 800b50c:	bf00      	nop
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08c      	sub	sp, #48	; 0x30
 800b51c:	af02      	add	r7, sp, #8
 800b51e:	4603      	mov	r3, r0
 800b520:	71fb      	strb	r3, [r7, #7]
 800b522:	460b      	mov	r3, r1
 800b524:	80bb      	strh	r3, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b52e:	887b      	ldrh	r3, [r7, #2]
 800b530:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b534:	d07f      	beq.n	800b636 <pbuf_alloc+0x11e>
 800b536:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b53a:	f300 80c8 	bgt.w	800b6ce <pbuf_alloc+0x1b6>
 800b53e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b542:	d010      	beq.n	800b566 <pbuf_alloc+0x4e>
 800b544:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b548:	f300 80c1 	bgt.w	800b6ce <pbuf_alloc+0x1b6>
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d002      	beq.n	800b556 <pbuf_alloc+0x3e>
 800b550:	2b41      	cmp	r3, #65	; 0x41
 800b552:	f040 80bc 	bne.w	800b6ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b556:	887a      	ldrh	r2, [r7, #2]
 800b558:	88bb      	ldrh	r3, [r7, #4]
 800b55a:	4619      	mov	r1, r3
 800b55c:	2000      	movs	r0, #0
 800b55e:	f000 f8d1 	bl	800b704 <pbuf_alloc_reference>
 800b562:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b564:	e0bd      	b.n	800b6e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b56e:	88bb      	ldrh	r3, [r7, #4]
 800b570:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b572:	200b      	movs	r0, #11
 800b574:	f7ff fb9e 	bl	800acb4 <memp_malloc>
 800b578:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d109      	bne.n	800b594 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b580:	f7ff ff76 	bl	800b470 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b58a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b58c:	f000 faa8 	bl	800bae0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	e0a7      	b.n	800b6e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b596:	3303      	adds	r3, #3
 800b598:	b29b      	uxth	r3, r3
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	8b7a      	ldrh	r2, [r7, #26]
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	bf28      	it	cs
 800b5ac:	4613      	movcs	r3, r2
 800b5ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b5b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5b2:	3310      	adds	r3, #16
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	3303      	adds	r3, #3
 800b5ba:	f023 0303 	bic.w	r3, r3, #3
 800b5be:	4618      	mov	r0, r3
 800b5c0:	89f9      	ldrh	r1, [r7, #14]
 800b5c2:	8b7a      	ldrh	r2, [r7, #26]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	887b      	ldrh	r3, [r7, #2]
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	6938      	ldr	r0, [r7, #16]
 800b5d2:	f7ff ff77 	bl	800b4c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f003 0303 	and.w	r3, r3, #3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d006      	beq.n	800b5f0 <pbuf_alloc+0xd8>
 800b5e2:	4b42      	ldr	r3, [pc, #264]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b5e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5e8:	4941      	ldr	r1, [pc, #260]	; (800b6f0 <pbuf_alloc+0x1d8>)
 800b5ea:	4842      	ldr	r0, [pc, #264]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b5ec:	f009 fd5c 	bl	80150a8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b5f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5f2:	3303      	adds	r3, #3
 800b5f4:	f023 0303 	bic.w	r3, r3, #3
 800b5f8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b5fc:	d106      	bne.n	800b60c <pbuf_alloc+0xf4>
 800b5fe:	4b3b      	ldr	r3, [pc, #236]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b600:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b604:	493c      	ldr	r1, [pc, #240]	; (800b6f8 <pbuf_alloc+0x1e0>)
 800b606:	483b      	ldr	r0, [pc, #236]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b608:	f009 fd4e 	bl	80150a8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d102      	bne.n	800b618 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
 800b616:	e002      	b.n	800b61e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b622:	8b7a      	ldrh	r2, [r7, #26]
 800b624:	89fb      	ldrh	r3, [r7, #14]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b62e:	8b7b      	ldrh	r3, [r7, #26]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d19e      	bne.n	800b572 <pbuf_alloc+0x5a>
      break;
 800b634:	e055      	b.n	800b6e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b638:	3303      	adds	r3, #3
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	b29a      	uxth	r2, r3
 800b642:	88bb      	ldrh	r3, [r7, #4]
 800b644:	3303      	adds	r3, #3
 800b646:	b29b      	uxth	r3, r3
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	4413      	add	r3, r2
 800b650:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b652:	8b3b      	ldrh	r3, [r7, #24]
 800b654:	3310      	adds	r3, #16
 800b656:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b658:	8b3a      	ldrh	r2, [r7, #24]
 800b65a:	88bb      	ldrh	r3, [r7, #4]
 800b65c:	3303      	adds	r3, #3
 800b65e:	f023 0303 	bic.w	r3, r3, #3
 800b662:	429a      	cmp	r2, r3
 800b664:	d306      	bcc.n	800b674 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b666:	8afa      	ldrh	r2, [r7, #22]
 800b668:	88bb      	ldrh	r3, [r7, #4]
 800b66a:	3303      	adds	r3, #3
 800b66c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b670:	429a      	cmp	r2, r3
 800b672:	d201      	bcs.n	800b678 <pbuf_alloc+0x160>
        return NULL;
 800b674:	2300      	movs	r3, #0
 800b676:	e035      	b.n	800b6e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b678:	8afb      	ldrh	r3, [r7, #22]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff f976 	bl	800a96c <mem_malloc>
 800b680:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d101      	bne.n	800b68c <pbuf_alloc+0x174>
        return NULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	e02b      	b.n	800b6e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b68c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b68e:	3310      	adds	r3, #16
 800b690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b692:	4413      	add	r3, r2
 800b694:	3303      	adds	r3, #3
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	4618      	mov	r0, r3
 800b69c:	88b9      	ldrh	r1, [r7, #4]
 800b69e:	88ba      	ldrh	r2, [r7, #4]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	887b      	ldrh	r3, [r7, #2]
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ae:	f7ff ff09 	bl	800b4c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d010      	beq.n	800b6e0 <pbuf_alloc+0x1c8>
 800b6be:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b6c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b6c4:	490d      	ldr	r1, [pc, #52]	; (800b6fc <pbuf_alloc+0x1e4>)
 800b6c6:	480b      	ldr	r0, [pc, #44]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b6c8:	f009 fcee 	bl	80150a8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b6cc:	e008      	b.n	800b6e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b6ce:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <pbuf_alloc+0x1d4>)
 800b6d0:	f240 1227 	movw	r2, #295	; 0x127
 800b6d4:	490a      	ldr	r1, [pc, #40]	; (800b700 <pbuf_alloc+0x1e8>)
 800b6d6:	4807      	ldr	r0, [pc, #28]	; (800b6f4 <pbuf_alloc+0x1dc>)
 800b6d8:	f009 fce6 	bl	80150a8 <iprintf>
      return NULL;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	e001      	b.n	800b6e4 <pbuf_alloc+0x1cc>
      break;
 800b6e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3728      	adds	r7, #40	; 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	08016e5c 	.word	0x08016e5c
 800b6f0:	08016e8c 	.word	0x08016e8c
 800b6f4:	08016ebc 	.word	0x08016ebc
 800b6f8:	08016ee4 	.word	0x08016ee4
 800b6fc:	08016f18 	.word	0x08016f18
 800b700:	08016f44 	.word	0x08016f44

0800b704 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af02      	add	r7, sp, #8
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	807b      	strh	r3, [r7, #2]
 800b710:	4613      	mov	r3, r2
 800b712:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b714:	883b      	ldrh	r3, [r7, #0]
 800b716:	2b41      	cmp	r3, #65	; 0x41
 800b718:	d009      	beq.n	800b72e <pbuf_alloc_reference+0x2a>
 800b71a:	883b      	ldrh	r3, [r7, #0]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d006      	beq.n	800b72e <pbuf_alloc_reference+0x2a>
 800b720:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <pbuf_alloc_reference+0x5c>)
 800b722:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b726:	490f      	ldr	r1, [pc, #60]	; (800b764 <pbuf_alloc_reference+0x60>)
 800b728:	480f      	ldr	r0, [pc, #60]	; (800b768 <pbuf_alloc_reference+0x64>)
 800b72a:	f009 fcbd 	bl	80150a8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b72e:	200a      	movs	r0, #10
 800b730:	f7ff fac0 	bl	800acb4 <memp_malloc>
 800b734:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e00b      	b.n	800b758 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b740:	8879      	ldrh	r1, [r7, #2]
 800b742:	887a      	ldrh	r2, [r7, #2]
 800b744:	2300      	movs	r3, #0
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	883b      	ldrh	r3, [r7, #0]
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	460b      	mov	r3, r1
 800b74e:	6879      	ldr	r1, [r7, #4]
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7ff feb7 	bl	800b4c4 <pbuf_init_alloced_pbuf>
  return p;
 800b756:	68fb      	ldr	r3, [r7, #12]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	08016e5c 	.word	0x08016e5c
 800b764:	08016f60 	.word	0x08016f60
 800b768:	08016ebc 	.word	0x08016ebc

0800b76c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af02      	add	r7, sp, #8
 800b772:	607b      	str	r3, [r7, #4]
 800b774:	4603      	mov	r3, r0
 800b776:	73fb      	strb	r3, [r7, #15]
 800b778:	460b      	mov	r3, r1
 800b77a:	81bb      	strh	r3, [r7, #12]
 800b77c:	4613      	mov	r3, r2
 800b77e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b784:	8a7b      	ldrh	r3, [r7, #18]
 800b786:	3303      	adds	r3, #3
 800b788:	f023 0203 	bic.w	r2, r3, #3
 800b78c:	89bb      	ldrh	r3, [r7, #12]
 800b78e:	441a      	add	r2, r3
 800b790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b792:	429a      	cmp	r2, r3
 800b794:	d901      	bls.n	800b79a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b796:	2300      	movs	r3, #0
 800b798:	e018      	b.n	800b7cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d007      	beq.n	800b7b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b7a0:	8a7b      	ldrh	r3, [r7, #18]
 800b7a2:	3303      	adds	r3, #3
 800b7a4:	f023 0303 	bic.w	r3, r3, #3
 800b7a8:	6a3a      	ldr	r2, [r7, #32]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e001      	b.n	800b7b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	89b9      	ldrh	r1, [r7, #12]
 800b7b8:	89ba      	ldrh	r2, [r7, #12]
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	897b      	ldrh	r3, [r7, #10]
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	6979      	ldr	r1, [r7, #20]
 800b7c6:	f7ff fe7d 	bl	800b4c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b7ca:	687b      	ldr	r3, [r7, #4]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <pbuf_realloc+0x20>
 800b7e6:	4b3a      	ldr	r3, [pc, #232]	; (800b8d0 <pbuf_realloc+0xfc>)
 800b7e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b7ec:	4939      	ldr	r1, [pc, #228]	; (800b8d4 <pbuf_realloc+0x100>)
 800b7ee:	483a      	ldr	r0, [pc, #232]	; (800b8d8 <pbuf_realloc+0x104>)
 800b7f0:	f009 fc5a 	bl	80150a8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	891b      	ldrh	r3, [r3, #8]
 800b7f8:	887a      	ldrh	r2, [r7, #2]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d263      	bcs.n	800b8c6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	891a      	ldrh	r2, [r3, #8]
 800b802:	887b      	ldrh	r3, [r7, #2]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b808:	887b      	ldrh	r3, [r7, #2]
 800b80a:	817b      	strh	r3, [r7, #10]
  q = p;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b810:	e018      	b.n	800b844 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	895b      	ldrh	r3, [r3, #10]
 800b816:	897a      	ldrh	r2, [r7, #10]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	891a      	ldrh	r2, [r3, #8]
 800b820:	893b      	ldrh	r3, [r7, #8]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	b29a      	uxth	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <pbuf_realloc+0x70>
 800b836:	4b26      	ldr	r3, [pc, #152]	; (800b8d0 <pbuf_realloc+0xfc>)
 800b838:	f240 12af 	movw	r2, #431	; 0x1af
 800b83c:	4927      	ldr	r1, [pc, #156]	; (800b8dc <pbuf_realloc+0x108>)
 800b83e:	4826      	ldr	r0, [pc, #152]	; (800b8d8 <pbuf_realloc+0x104>)
 800b840:	f009 fc32 	bl	80150a8 <iprintf>
  while (rem_len > q->len) {
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	895b      	ldrh	r3, [r3, #10]
 800b848:	897a      	ldrh	r2, [r7, #10]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d8e1      	bhi.n	800b812 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	7b1b      	ldrb	r3, [r3, #12]
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	2b00      	cmp	r3, #0
 800b858:	d121      	bne.n	800b89e <pbuf_realloc+0xca>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	895b      	ldrh	r3, [r3, #10]
 800b85e:	897a      	ldrh	r2, [r7, #10]
 800b860:	429a      	cmp	r2, r3
 800b862:	d01c      	beq.n	800b89e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	7b5b      	ldrb	r3, [r3, #13]
 800b868:	f003 0302 	and.w	r3, r3, #2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d116      	bne.n	800b89e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	b29a      	uxth	r2, r3
 800b87a:	897b      	ldrh	r3, [r7, #10]
 800b87c:	4413      	add	r3, r2
 800b87e:	b29b      	uxth	r3, r3
 800b880:	4619      	mov	r1, r3
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7fe ff68 	bl	800a758 <mem_trim>
 800b888:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d106      	bne.n	800b89e <pbuf_realloc+0xca>
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <pbuf_realloc+0xfc>)
 800b892:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b896:	4912      	ldr	r1, [pc, #72]	; (800b8e0 <pbuf_realloc+0x10c>)
 800b898:	480f      	ldr	r0, [pc, #60]	; (800b8d8 <pbuf_realloc+0x104>)
 800b89a:	f009 fc05 	bl	80150a8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	897a      	ldrh	r2, [r7, #10]
 800b8a2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	895a      	ldrh	r2, [r3, #10]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d004      	beq.n	800b8be <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 f911 	bl	800bae0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	e000      	b.n	800b8c8 <pbuf_realloc+0xf4>
    return;
 800b8c6:	bf00      	nop

}
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08016e5c 	.word	0x08016e5c
 800b8d4:	08016f74 	.word	0x08016f74
 800b8d8:	08016ebc 	.word	0x08016ebc
 800b8dc:	08016f8c 	.word	0x08016f8c
 800b8e0:	08016fa4 	.word	0x08016fa4

0800b8e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d106      	bne.n	800b906 <pbuf_add_header_impl+0x22>
 800b8f8:	4b2b      	ldr	r3, [pc, #172]	; (800b9a8 <pbuf_add_header_impl+0xc4>)
 800b8fa:	f240 12df 	movw	r2, #479	; 0x1df
 800b8fe:	492b      	ldr	r1, [pc, #172]	; (800b9ac <pbuf_add_header_impl+0xc8>)
 800b900:	482b      	ldr	r0, [pc, #172]	; (800b9b0 <pbuf_add_header_impl+0xcc>)
 800b902:	f009 fbd1 	bl	80150a8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <pbuf_add_header_impl+0x30>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b912:	d301      	bcc.n	800b918 <pbuf_add_header_impl+0x34>
    return 1;
 800b914:	2301      	movs	r3, #1
 800b916:	e043      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <pbuf_add_header_impl+0x3e>
    return 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	e03e      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	891a      	ldrh	r2, [r3, #8]
 800b92a:	8a7b      	ldrh	r3, [r7, #18]
 800b92c:	4413      	add	r3, r2
 800b92e:	b29b      	uxth	r3, r3
 800b930:	8a7a      	ldrh	r2, [r7, #18]
 800b932:	429a      	cmp	r2, r3
 800b934:	d901      	bls.n	800b93a <pbuf_add_header_impl+0x56>
    return 1;
 800b936:	2301      	movs	r3, #1
 800b938:	e032      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	7b1b      	ldrb	r3, [r3, #12]
 800b93e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b940:	8a3b      	ldrh	r3, [r7, #16]
 800b942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00c      	beq.n	800b964 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	425b      	negs	r3, r3
 800b952:	4413      	add	r3, r2
 800b954:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	3310      	adds	r3, #16
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d20d      	bcs.n	800b97c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b960:	2301      	movs	r3, #1
 800b962:	e01d      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d006      	beq.n	800b978 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	425b      	negs	r3, r3
 800b972:	4413      	add	r3, r2
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	e001      	b.n	800b97c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b978:	2301      	movs	r3, #1
 800b97a:	e011      	b.n	800b9a0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	895a      	ldrh	r2, [r3, #10]
 800b986:	8a7b      	ldrh	r3, [r7, #18]
 800b988:	4413      	add	r3, r2
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	891a      	ldrh	r2, [r3, #8]
 800b994:	8a7b      	ldrh	r3, [r7, #18]
 800b996:	4413      	add	r3, r2
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	08016e5c 	.word	0x08016e5c
 800b9ac:	08016fc0 	.word	0x08016fc0
 800b9b0:	08016ebc 	.word	0x08016ebc

0800b9b4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b9be:	2200      	movs	r2, #0
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff ff8e 	bl	800b8e4 <pbuf_add_header_impl>
 800b9c8:	4603      	mov	r3, r0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d106      	bne.n	800b9f2 <pbuf_remove_header+0x1e>
 800b9e4:	4b20      	ldr	r3, [pc, #128]	; (800ba68 <pbuf_remove_header+0x94>)
 800b9e6:	f240 224b 	movw	r2, #587	; 0x24b
 800b9ea:	4920      	ldr	r1, [pc, #128]	; (800ba6c <pbuf_remove_header+0x98>)
 800b9ec:	4820      	ldr	r0, [pc, #128]	; (800ba70 <pbuf_remove_header+0x9c>)
 800b9ee:	f009 fb5b 	bl	80150a8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <pbuf_remove_header+0x2c>
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9fe:	d301      	bcc.n	800ba04 <pbuf_remove_header+0x30>
    return 1;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e02c      	b.n	800ba5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <pbuf_remove_header+0x3a>
    return 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e027      	b.n	800ba5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	895b      	ldrh	r3, [r3, #10]
 800ba16:	89fa      	ldrh	r2, [r7, #14]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d908      	bls.n	800ba2e <pbuf_remove_header+0x5a>
 800ba1c:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <pbuf_remove_header+0x94>)
 800ba1e:	f240 2255 	movw	r2, #597	; 0x255
 800ba22:	4914      	ldr	r1, [pc, #80]	; (800ba74 <pbuf_remove_header+0xa0>)
 800ba24:	4812      	ldr	r0, [pc, #72]	; (800ba70 <pbuf_remove_header+0x9c>)
 800ba26:	f009 fb3f 	bl	80150a8 <iprintf>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e017      	b.n	800ba5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	895a      	ldrh	r2, [r3, #10]
 800ba44:	89fb      	ldrh	r3, [r7, #14]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	891a      	ldrh	r2, [r3, #8]
 800ba52:	89fb      	ldrh	r3, [r7, #14]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	08016e5c 	.word	0x08016e5c
 800ba6c:	08016fc0 	.word	0x08016fc0
 800ba70:	08016ebc 	.word	0x08016ebc
 800ba74:	08016fcc 	.word	0x08016fcc

0800ba78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	807b      	strh	r3, [r7, #2]
 800ba84:	4613      	mov	r3, r2
 800ba86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ba88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	da08      	bge.n	800baa2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ba90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba94:	425b      	negs	r3, r3
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff ff9b 	bl	800b9d4 <pbuf_remove_header>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	e007      	b.n	800bab2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800baa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baa6:	787a      	ldrb	r2, [r7, #1]
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff ff1a 	bl	800b8e4 <pbuf_add_header_impl>
 800bab0:	4603      	mov	r3, r0
  }
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	460b      	mov	r3, r1
 800bac4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bac6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baca:	2201      	movs	r2, #1
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff ffd2 	bl	800ba78 <pbuf_header_impl>
 800bad4:	4603      	mov	r3, r0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10b      	bne.n	800bb06 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d106      	bne.n	800bb02 <pbuf_free+0x22>
 800baf4:	4b3b      	ldr	r3, [pc, #236]	; (800bbe4 <pbuf_free+0x104>)
 800baf6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bafa:	493b      	ldr	r1, [pc, #236]	; (800bbe8 <pbuf_free+0x108>)
 800bafc:	483b      	ldr	r0, [pc, #236]	; (800bbec <pbuf_free+0x10c>)
 800bafe:	f009 fad3 	bl	80150a8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e069      	b.n	800bbda <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb0a:	e062      	b.n	800bbd2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb0c:	f009 f8d6 	bl	8014cbc <sys_arch_protect>
 800bb10:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7b9b      	ldrb	r3, [r3, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d106      	bne.n	800bb28 <pbuf_free+0x48>
 800bb1a:	4b32      	ldr	r3, [pc, #200]	; (800bbe4 <pbuf_free+0x104>)
 800bb1c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bb20:	4933      	ldr	r1, [pc, #204]	; (800bbf0 <pbuf_free+0x110>)
 800bb22:	4832      	ldr	r0, [pc, #200]	; (800bbec <pbuf_free+0x10c>)
 800bb24:	f009 fac0 	bl	80150a8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	7b9b      	ldrb	r3, [r3, #14]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	739a      	strb	r2, [r3, #14]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7b9b      	ldrb	r3, [r3, #14]
 800bb38:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb3a:	69b8      	ldr	r0, [r7, #24]
 800bb3c:	f009 f8cc 	bl	8014cd8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d143      	bne.n	800bbce <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7b1b      	ldrb	r3, [r3, #12]
 800bb50:	f003 030f 	and.w	r3, r3, #15
 800bb54:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7b5b      	ldrb	r3, [r3, #13]
 800bb5a:	f003 0302 	and.w	r3, r3, #2
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d011      	beq.n	800bb86 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d106      	bne.n	800bb7c <pbuf_free+0x9c>
 800bb6e:	4b1d      	ldr	r3, [pc, #116]	; (800bbe4 <pbuf_free+0x104>)
 800bb70:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bb74:	491f      	ldr	r1, [pc, #124]	; (800bbf4 <pbuf_free+0x114>)
 800bb76:	481d      	ldr	r0, [pc, #116]	; (800bbec <pbuf_free+0x10c>)
 800bb78:	f009 fa96 	bl	80150a8 <iprintf>
        pc->custom_free_function(p);
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	4798      	blx	r3
 800bb84:	e01d      	b.n	800bbc2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d104      	bne.n	800bb96 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	200b      	movs	r0, #11
 800bb90:	f7ff f906 	bl	800ada0 <memp_free>
 800bb94:	e015      	b.n	800bbc2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d104      	bne.n	800bba6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	200a      	movs	r0, #10
 800bba0:	f7ff f8fe 	bl	800ada0 <memp_free>
 800bba4:	e00d      	b.n	800bbc2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d103      	bne.n	800bbb4 <pbuf_free+0xd4>
          mem_free(p);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7fe fd43 	bl	800a638 <mem_free>
 800bbb2:	e006      	b.n	800bbc2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bbb4:	4b0b      	ldr	r3, [pc, #44]	; (800bbe4 <pbuf_free+0x104>)
 800bbb6:	f240 320f 	movw	r2, #783	; 0x30f
 800bbba:	490f      	ldr	r1, [pc, #60]	; (800bbf8 <pbuf_free+0x118>)
 800bbbc:	480b      	ldr	r0, [pc, #44]	; (800bbec <pbuf_free+0x10c>)
 800bbbe:	f009 fa73 	bl	80150a8 <iprintf>
        }
      }
      count++;
 800bbc2:	7ffb      	ldrb	r3, [r7, #31]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	607b      	str	r3, [r7, #4]
 800bbcc:	e001      	b.n	800bbd2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d199      	bne.n	800bb0c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bbd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3720      	adds	r7, #32
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	08016e5c 	.word	0x08016e5c
 800bbe8:	08016fc0 	.word	0x08016fc0
 800bbec:	08016ebc 	.word	0x08016ebc
 800bbf0:	08016fec 	.word	0x08016fec
 800bbf4:	08017004 	.word	0x08017004
 800bbf8:	08017028 	.word	0x08017028

0800bbfc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc08:	e005      	b.n	800bc16 <pbuf_clen+0x1a>
    ++len;
 800bc0a:	89fb      	ldrh	r3, [r7, #14]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1f6      	bne.n	800bc0a <pbuf_clen+0xe>
  }
  return len;
 800bc1c:	89fb      	ldrh	r3, [r7, #14]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
	...

0800bc2c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d016      	beq.n	800bc68 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc3a:	f009 f83f 	bl	8014cbc <sys_arch_protect>
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	7b9b      	ldrb	r3, [r3, #14]
 800bc44:	3301      	adds	r3, #1
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	739a      	strb	r2, [r3, #14]
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f009 f843 	bl	8014cd8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7b9b      	ldrb	r3, [r3, #14]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <pbuf_ref+0x3c>
 800bc5a:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <pbuf_ref+0x44>)
 800bc5c:	f240 3242 	movw	r2, #834	; 0x342
 800bc60:	4904      	ldr	r1, [pc, #16]	; (800bc74 <pbuf_ref+0x48>)
 800bc62:	4805      	ldr	r0, [pc, #20]	; (800bc78 <pbuf_ref+0x4c>)
 800bc64:	f009 fa20 	bl	80150a8 <iprintf>
  }
}
 800bc68:	bf00      	nop
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	08016e5c 	.word	0x08016e5c
 800bc74:	0801703c 	.word	0x0801703c
 800bc78:	08016ebc 	.word	0x08016ebc

0800bc7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <pbuf_cat+0x16>
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d107      	bne.n	800bca2 <pbuf_cat+0x26>
 800bc92:	4b20      	ldr	r3, [pc, #128]	; (800bd14 <pbuf_cat+0x98>)
 800bc94:	f240 3259 	movw	r2, #857	; 0x359
 800bc98:	491f      	ldr	r1, [pc, #124]	; (800bd18 <pbuf_cat+0x9c>)
 800bc9a:	4820      	ldr	r0, [pc, #128]	; (800bd1c <pbuf_cat+0xa0>)
 800bc9c:	f009 fa04 	bl	80150a8 <iprintf>
 800bca0:	e034      	b.n	800bd0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	e00a      	b.n	800bcbe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	891a      	ldrh	r2, [r3, #8]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	891b      	ldrh	r3, [r3, #8]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1f0      	bne.n	800bca8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	891a      	ldrh	r2, [r3, #8]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	895b      	ldrh	r3, [r3, #10]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d006      	beq.n	800bce0 <pbuf_cat+0x64>
 800bcd2:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <pbuf_cat+0x98>)
 800bcd4:	f240 3262 	movw	r2, #866	; 0x362
 800bcd8:	4911      	ldr	r1, [pc, #68]	; (800bd20 <pbuf_cat+0xa4>)
 800bcda:	4810      	ldr	r0, [pc, #64]	; (800bd1c <pbuf_cat+0xa0>)
 800bcdc:	f009 f9e4 	bl	80150a8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d006      	beq.n	800bcf6 <pbuf_cat+0x7a>
 800bce8:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <pbuf_cat+0x98>)
 800bcea:	f240 3263 	movw	r2, #867	; 0x363
 800bcee:	490d      	ldr	r1, [pc, #52]	; (800bd24 <pbuf_cat+0xa8>)
 800bcf0:	480a      	ldr	r0, [pc, #40]	; (800bd1c <pbuf_cat+0xa0>)
 800bcf2:	f009 f9d9 	bl	80150a8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	891a      	ldrh	r2, [r3, #8]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	891b      	ldrh	r3, [r3, #8]
 800bcfe:	4413      	add	r3, r2
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	08016e5c 	.word	0x08016e5c
 800bd18:	08017050 	.word	0x08017050
 800bd1c:	08016ebc 	.word	0x08016ebc
 800bd20:	08017088 	.word	0x08017088
 800bd24:	080170b8 	.word	0x080170b8

0800bd28 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bd32:	2300      	movs	r3, #0
 800bd34:	617b      	str	r3, [r7, #20]
 800bd36:	2300      	movs	r3, #0
 800bd38:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d008      	beq.n	800bd52 <pbuf_copy+0x2a>
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <pbuf_copy+0x2a>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	891a      	ldrh	r2, [r3, #8]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	891b      	ldrh	r3, [r3, #8]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d209      	bcs.n	800bd66 <pbuf_copy+0x3e>
 800bd52:	4b57      	ldr	r3, [pc, #348]	; (800beb0 <pbuf_copy+0x188>)
 800bd54:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bd58:	4956      	ldr	r1, [pc, #344]	; (800beb4 <pbuf_copy+0x18c>)
 800bd5a:	4857      	ldr	r0, [pc, #348]	; (800beb8 <pbuf_copy+0x190>)
 800bd5c:	f009 f9a4 	bl	80150a8 <iprintf>
 800bd60:	f06f 030f 	mvn.w	r3, #15
 800bd64:	e09f      	b.n	800bea6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	895b      	ldrh	r3, [r3, #10]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	1ad2      	subs	r2, r2, r3
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	895b      	ldrh	r3, [r3, #10]
 800bd74:	4619      	mov	r1, r3
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	1acb      	subs	r3, r1, r3
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d306      	bcc.n	800bd8c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	895b      	ldrh	r3, [r3, #10]
 800bd82:	461a      	mov	r2, r3
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	e005      	b.n	800bd98 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	895b      	ldrh	r3, [r3, #10]
 800bd90:	461a      	mov	r2, r3
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	18d0      	adds	r0, r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	4413      	add	r3, r2
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	f009 f8d1 	bl	8014f52 <memcpy>
    offset_to += len;
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	895b      	ldrh	r3, [r3, #10]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d906      	bls.n	800bdda <pbuf_copy+0xb2>
 800bdcc:	4b38      	ldr	r3, [pc, #224]	; (800beb0 <pbuf_copy+0x188>)
 800bdce:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bdd2:	493a      	ldr	r1, [pc, #232]	; (800bebc <pbuf_copy+0x194>)
 800bdd4:	4838      	ldr	r0, [pc, #224]	; (800beb8 <pbuf_copy+0x190>)
 800bdd6:	f009 f967 	bl	80150a8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	895b      	ldrh	r3, [r3, #10]
 800bdde:	461a      	mov	r2, r3
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d906      	bls.n	800bdf4 <pbuf_copy+0xcc>
 800bde6:	4b32      	ldr	r3, [pc, #200]	; (800beb0 <pbuf_copy+0x188>)
 800bde8:	f240 32da 	movw	r2, #986	; 0x3da
 800bdec:	4934      	ldr	r1, [pc, #208]	; (800bec0 <pbuf_copy+0x198>)
 800bdee:	4832      	ldr	r0, [pc, #200]	; (800beb8 <pbuf_copy+0x190>)
 800bdf0:	f009 f95a 	bl	80150a8 <iprintf>
    if (offset_from >= p_from->len) {
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	895b      	ldrh	r3, [r3, #10]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d304      	bcc.n	800be0a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	895b      	ldrh	r3, [r3, #10]
 800be0e:	461a      	mov	r2, r3
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	4293      	cmp	r3, r2
 800be14:	d114      	bne.n	800be40 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10c      	bne.n	800be40 <pbuf_copy+0x118>
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d009      	beq.n	800be40 <pbuf_copy+0x118>
 800be2c:	4b20      	ldr	r3, [pc, #128]	; (800beb0 <pbuf_copy+0x188>)
 800be2e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800be32:	4924      	ldr	r1, [pc, #144]	; (800bec4 <pbuf_copy+0x19c>)
 800be34:	4820      	ldr	r0, [pc, #128]	; (800beb8 <pbuf_copy+0x190>)
 800be36:	f009 f937 	bl	80150a8 <iprintf>
 800be3a:	f06f 030f 	mvn.w	r3, #15
 800be3e:	e032      	b.n	800bea6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d013      	beq.n	800be6e <pbuf_copy+0x146>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	895a      	ldrh	r2, [r3, #10]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	891b      	ldrh	r3, [r3, #8]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d10d      	bne.n	800be6e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d009      	beq.n	800be6e <pbuf_copy+0x146>
 800be5a:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <pbuf_copy+0x188>)
 800be5c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800be60:	4919      	ldr	r1, [pc, #100]	; (800bec8 <pbuf_copy+0x1a0>)
 800be62:	4815      	ldr	r0, [pc, #84]	; (800beb8 <pbuf_copy+0x190>)
 800be64:	f009 f920 	bl	80150a8 <iprintf>
 800be68:	f06f 0305 	mvn.w	r3, #5
 800be6c:	e01b      	b.n	800bea6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d013      	beq.n	800be9c <pbuf_copy+0x174>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	895a      	ldrh	r2, [r3, #10]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	891b      	ldrh	r3, [r3, #8]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d10d      	bne.n	800be9c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <pbuf_copy+0x174>
 800be88:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <pbuf_copy+0x188>)
 800be8a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800be8e:	490e      	ldr	r1, [pc, #56]	; (800bec8 <pbuf_copy+0x1a0>)
 800be90:	4809      	ldr	r0, [pc, #36]	; (800beb8 <pbuf_copy+0x190>)
 800be92:	f009 f909 	bl	80150a8 <iprintf>
 800be96:	f06f 0305 	mvn.w	r3, #5
 800be9a:	e004      	b.n	800bea6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f47f af61 	bne.w	800bd66 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	08016e5c 	.word	0x08016e5c
 800beb4:	08017104 	.word	0x08017104
 800beb8:	08016ebc 	.word	0x08016ebc
 800bebc:	08017134 	.word	0x08017134
 800bec0:	0801714c 	.word	0x0801714c
 800bec4:	08017168 	.word	0x08017168
 800bec8:	08017178 	.word	0x08017178

0800becc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	4611      	mov	r1, r2
 800bed8:	461a      	mov	r2, r3
 800beda:	460b      	mov	r3, r1
 800bedc:	80fb      	strh	r3, [r7, #6]
 800bede:	4613      	mov	r3, r2
 800bee0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d108      	bne.n	800bf02 <pbuf_copy_partial+0x36>
 800bef0:	4b2b      	ldr	r3, [pc, #172]	; (800bfa0 <pbuf_copy_partial+0xd4>)
 800bef2:	f240 420a 	movw	r2, #1034	; 0x40a
 800bef6:	492b      	ldr	r1, [pc, #172]	; (800bfa4 <pbuf_copy_partial+0xd8>)
 800bef8:	482b      	ldr	r0, [pc, #172]	; (800bfa8 <pbuf_copy_partial+0xdc>)
 800befa:	f009 f8d5 	bl	80150a8 <iprintf>
 800befe:	2300      	movs	r3, #0
 800bf00:	e04a      	b.n	800bf98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d108      	bne.n	800bf1a <pbuf_copy_partial+0x4e>
 800bf08:	4b25      	ldr	r3, [pc, #148]	; (800bfa0 <pbuf_copy_partial+0xd4>)
 800bf0a:	f240 420b 	movw	r2, #1035	; 0x40b
 800bf0e:	4927      	ldr	r1, [pc, #156]	; (800bfac <pbuf_copy_partial+0xe0>)
 800bf10:	4825      	ldr	r0, [pc, #148]	; (800bfa8 <pbuf_copy_partial+0xdc>)
 800bf12:	f009 f8c9 	bl	80150a8 <iprintf>
 800bf16:	2300      	movs	r3, #0
 800bf18:	e03e      	b.n	800bf98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e034      	b.n	800bf8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf20:	88bb      	ldrh	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <pbuf_copy_partial+0x70>
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	895b      	ldrh	r3, [r3, #10]
 800bf2a:	88ba      	ldrh	r2, [r7, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d305      	bcc.n	800bf3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	895b      	ldrh	r3, [r3, #10]
 800bf34:	88ba      	ldrh	r2, [r7, #4]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	80bb      	strh	r3, [r7, #4]
 800bf3a:	e023      	b.n	800bf84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	895a      	ldrh	r2, [r3, #10]
 800bf40:	88bb      	ldrh	r3, [r7, #4]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf46:	8b3a      	ldrh	r2, [r7, #24]
 800bf48:	88fb      	ldrh	r3, [r7, #6]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d901      	bls.n	800bf52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bf52:	8b7b      	ldrh	r3, [r7, #26]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	18d0      	adds	r0, r2, r3
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	88bb      	ldrh	r3, [r7, #4]
 800bf5e:	4413      	add	r3, r2
 800bf60:	8b3a      	ldrh	r2, [r7, #24]
 800bf62:	4619      	mov	r1, r3
 800bf64:	f008 fff5 	bl	8014f52 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bf68:	8afa      	ldrh	r2, [r7, #22]
 800bf6a:	8b3b      	ldrh	r3, [r7, #24]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bf70:	8b7a      	ldrh	r2, [r7, #26]
 800bf72:	8b3b      	ldrh	r3, [r7, #24]
 800bf74:	4413      	add	r3, r2
 800bf76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bf78:	88fa      	ldrh	r2, [r7, #6]
 800bf7a:	8b3b      	ldrh	r3, [r7, #24]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	88fb      	ldrh	r3, [r7, #6]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <pbuf_copy_partial+0xca>
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1c4      	bne.n	800bf20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bf96:	8afb      	ldrh	r3, [r7, #22]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	08016e5c 	.word	0x08016e5c
 800bfa4:	080171a4 	.word	0x080171a4
 800bfa8:	08016ebc 	.word	0x08016ebc
 800bfac:	080171c4 	.word	0x080171c4

0800bfb0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	603a      	str	r2, [r7, #0]
 800bfba:	71fb      	strb	r3, [r7, #7]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	8919      	ldrh	r1, [r3, #8]
 800bfc4:	88ba      	ldrh	r2, [r7, #4]
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff faa5 	bl	800b518 <pbuf_alloc>
 800bfce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <pbuf_clone+0x2a>
    return NULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e011      	b.n	800bffe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7ff fea3 	bl	800bd28 <pbuf_copy>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bfe6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d006      	beq.n	800bffc <pbuf_clone+0x4c>
 800bfee:	4b06      	ldr	r3, [pc, #24]	; (800c008 <pbuf_clone+0x58>)
 800bff0:	f240 5224 	movw	r2, #1316	; 0x524
 800bff4:	4905      	ldr	r1, [pc, #20]	; (800c00c <pbuf_clone+0x5c>)
 800bff6:	4806      	ldr	r0, [pc, #24]	; (800c010 <pbuf_clone+0x60>)
 800bff8:	f009 f856 	bl	80150a8 <iprintf>
  return q;
 800bffc:	68fb      	ldr	r3, [r7, #12]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	08016e5c 	.word	0x08016e5c
 800c00c:	080172d0 	.word	0x080172d0
 800c010:	08016ebc 	.word	0x08016ebc

0800c014 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c018:	f009 f85e 	bl	80150d8 <rand>
 800c01c:	4603      	mov	r3, r0
 800c01e:	b29b      	uxth	r3, r3
 800c020:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c024:	b29b      	uxth	r3, r3
 800c026:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	4b01      	ldr	r3, [pc, #4]	; (800c034 <tcp_init+0x20>)
 800c02e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c030:	bf00      	nop
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20000024 	.word	0x20000024

0800c038 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7d1b      	ldrb	r3, [r3, #20]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d105      	bne.n	800c054 <tcp_free+0x1c>
 800c048:	4b06      	ldr	r3, [pc, #24]	; (800c064 <tcp_free+0x2c>)
 800c04a:	22d4      	movs	r2, #212	; 0xd4
 800c04c:	4906      	ldr	r1, [pc, #24]	; (800c068 <tcp_free+0x30>)
 800c04e:	4807      	ldr	r0, [pc, #28]	; (800c06c <tcp_free+0x34>)
 800c050:	f009 f82a 	bl	80150a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	2000      	movs	r0, #0
 800c058:	f7fe fea2 	bl	800ada0 <memp_free>
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	0801735c 	.word	0x0801735c
 800c068:	0801738c 	.word	0x0801738c
 800c06c:	080173a0 	.word	0x080173a0

0800c070 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7d1b      	ldrb	r3, [r3, #20]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d105      	bne.n	800c08c <tcp_free_listen+0x1c>
 800c080:	4b06      	ldr	r3, [pc, #24]	; (800c09c <tcp_free_listen+0x2c>)
 800c082:	22df      	movs	r2, #223	; 0xdf
 800c084:	4906      	ldr	r1, [pc, #24]	; (800c0a0 <tcp_free_listen+0x30>)
 800c086:	4807      	ldr	r0, [pc, #28]	; (800c0a4 <tcp_free_listen+0x34>)
 800c088:	f009 f80e 	bl	80150a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	2001      	movs	r0, #1
 800c090:	f7fe fe86 	bl	800ada0 <memp_free>
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	0801735c 	.word	0x0801735c
 800c0a0:	080173c8 	.word	0x080173c8
 800c0a4:	080173a0 	.word	0x080173a0

0800c0a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c0ac:	f001 f8a6 	bl	800d1fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c0b0:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <tcp_tmr+0x28>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <tcp_tmr+0x28>)
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	4b04      	ldr	r3, [pc, #16]	; (800c0d0 <tcp_tmr+0x28>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c0c8:	f000 fd58 	bl	800cb7c <tcp_slowtmr>
  }
}
 800c0cc:	bf00      	nop
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	20011811 	.word	0x20011811

0800c0d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d105      	bne.n	800c0f0 <tcp_remove_listener+0x1c>
 800c0e4:	4b0d      	ldr	r3, [pc, #52]	; (800c11c <tcp_remove_listener+0x48>)
 800c0e6:	22ff      	movs	r2, #255	; 0xff
 800c0e8:	490d      	ldr	r1, [pc, #52]	; (800c120 <tcp_remove_listener+0x4c>)
 800c0ea:	480e      	ldr	r0, [pc, #56]	; (800c124 <tcp_remove_listener+0x50>)
 800c0ec:	f008 ffdc 	bl	80150a8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	e00a      	b.n	800c10c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d102      	bne.n	800c106 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2200      	movs	r2, #0
 800c104:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1f1      	bne.n	800c0f6 <tcp_remove_listener+0x22>
    }
  }
}
 800c112:	bf00      	nop
 800c114:	bf00      	nop
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	0801735c 	.word	0x0801735c
 800c120:	080173e4 	.word	0x080173e4
 800c124:	080173a0 	.word	0x080173a0

0800c128 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d106      	bne.n	800c144 <tcp_listen_closed+0x1c>
 800c136:	4b14      	ldr	r3, [pc, #80]	; (800c188 <tcp_listen_closed+0x60>)
 800c138:	f240 1211 	movw	r2, #273	; 0x111
 800c13c:	4913      	ldr	r1, [pc, #76]	; (800c18c <tcp_listen_closed+0x64>)
 800c13e:	4814      	ldr	r0, [pc, #80]	; (800c190 <tcp_listen_closed+0x68>)
 800c140:	f008 ffb2 	bl	80150a8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	7d1b      	ldrb	r3, [r3, #20]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d006      	beq.n	800c15a <tcp_listen_closed+0x32>
 800c14c:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <tcp_listen_closed+0x60>)
 800c14e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c152:	4910      	ldr	r1, [pc, #64]	; (800c194 <tcp_listen_closed+0x6c>)
 800c154:	480e      	ldr	r0, [pc, #56]	; (800c190 <tcp_listen_closed+0x68>)
 800c156:	f008 ffa7 	bl	80150a8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c15a:	2301      	movs	r3, #1
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	e00b      	b.n	800c178 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c160:	4a0d      	ldr	r2, [pc, #52]	; (800c198 <tcp_listen_closed+0x70>)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7ff ffb1 	bl	800c0d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b03      	cmp	r3, #3
 800c17c:	d9f0      	bls.n	800c160 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c17e:	bf00      	nop
 800c180:	bf00      	nop
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	0801735c 	.word	0x0801735c
 800c18c:	0801740c 	.word	0x0801740c
 800c190:	080173a0 	.word	0x080173a0
 800c194:	08017418 	.word	0x08017418
 800c198:	08019030 	.word	0x08019030

0800c19c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c19c:	b5b0      	push	{r4, r5, r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af04      	add	r7, sp, #16
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d106      	bne.n	800c1bc <tcp_close_shutdown+0x20>
 800c1ae:	4b63      	ldr	r3, [pc, #396]	; (800c33c <tcp_close_shutdown+0x1a0>)
 800c1b0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c1b4:	4962      	ldr	r1, [pc, #392]	; (800c340 <tcp_close_shutdown+0x1a4>)
 800c1b6:	4863      	ldr	r0, [pc, #396]	; (800c344 <tcp_close_shutdown+0x1a8>)
 800c1b8:	f008 ff76 	bl	80150a8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c1bc:	78fb      	ldrb	r3, [r7, #3]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d066      	beq.n	800c290 <tcp_close_shutdown+0xf4>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	7d1b      	ldrb	r3, [r3, #20]
 800c1c6:	2b04      	cmp	r3, #4
 800c1c8:	d003      	beq.n	800c1d2 <tcp_close_shutdown+0x36>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	7d1b      	ldrb	r3, [r3, #20]
 800c1ce:	2b07      	cmp	r3, #7
 800c1d0:	d15e      	bne.n	800c290 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d104      	bne.n	800c1e4 <tcp_close_shutdown+0x48>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c1e2:	d055      	beq.n	800c290 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	8b5b      	ldrh	r3, [r3, #26]
 800c1e8:	f003 0310 	and.w	r3, r3, #16
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d106      	bne.n	800c1fe <tcp_close_shutdown+0x62>
 800c1f0:	4b52      	ldr	r3, [pc, #328]	; (800c33c <tcp_close_shutdown+0x1a0>)
 800c1f2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c1f6:	4954      	ldr	r1, [pc, #336]	; (800c348 <tcp_close_shutdown+0x1ac>)
 800c1f8:	4852      	ldr	r0, [pc, #328]	; (800c344 <tcp_close_shutdown+0x1a8>)
 800c1fa:	f008 ff55 	bl	80150a8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c206:	687d      	ldr	r5, [r7, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3304      	adds	r3, #4
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	8ad2      	ldrh	r2, [r2, #22]
 800c210:	6879      	ldr	r1, [r7, #4]
 800c212:	8b09      	ldrh	r1, [r1, #24]
 800c214:	9102      	str	r1, [sp, #8]
 800c216:	9201      	str	r2, [sp, #4]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	462b      	mov	r3, r5
 800c21c:	4622      	mov	r2, r4
 800c21e:	4601      	mov	r1, r0
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f005 fdbb 	bl	8011d9c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fb98 	bl	800d95c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c22c:	4b47      	ldr	r3, [pc, #284]	; (800c34c <tcp_close_shutdown+0x1b0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	429a      	cmp	r2, r3
 800c234:	d105      	bne.n	800c242 <tcp_close_shutdown+0xa6>
 800c236:	4b45      	ldr	r3, [pc, #276]	; (800c34c <tcp_close_shutdown+0x1b0>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	4a43      	ldr	r2, [pc, #268]	; (800c34c <tcp_close_shutdown+0x1b0>)
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	e013      	b.n	800c26a <tcp_close_shutdown+0xce>
 800c242:	4b42      	ldr	r3, [pc, #264]	; (800c34c <tcp_close_shutdown+0x1b0>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	e00c      	b.n	800c264 <tcp_close_shutdown+0xc8>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	429a      	cmp	r2, r3
 800c252:	d104      	bne.n	800c25e <tcp_close_shutdown+0xc2>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	60da      	str	r2, [r3, #12]
 800c25c:	e005      	b.n	800c26a <tcp_close_shutdown+0xce>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1ef      	bne.n	800c24a <tcp_close_shutdown+0xae>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	60da      	str	r2, [r3, #12]
 800c270:	4b37      	ldr	r3, [pc, #220]	; (800c350 <tcp_close_shutdown+0x1b4>)
 800c272:	2201      	movs	r2, #1
 800c274:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c276:	4b37      	ldr	r3, [pc, #220]	; (800c354 <tcp_close_shutdown+0x1b8>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d102      	bne.n	800c286 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c280:	f004 f830 	bl	80102e4 <tcp_trigger_input_pcb_close>
 800c284:	e002      	b.n	800c28c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff fed6 	bl	800c038 <tcp_free>
      }
      return ERR_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	e050      	b.n	800c332 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7d1b      	ldrb	r3, [r3, #20]
 800c294:	2b02      	cmp	r3, #2
 800c296:	d03b      	beq.n	800c310 <tcp_close_shutdown+0x174>
 800c298:	2b02      	cmp	r3, #2
 800c29a:	dc44      	bgt.n	800c326 <tcp_close_shutdown+0x18a>
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <tcp_close_shutdown+0x10a>
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d02a      	beq.n	800c2fa <tcp_close_shutdown+0x15e>
 800c2a4:	e03f      	b.n	800c326 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	8adb      	ldrh	r3, [r3, #22]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d021      	beq.n	800c2f2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2ae:	4b2a      	ldr	r3, [pc, #168]	; (800c358 <tcp_close_shutdown+0x1bc>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d105      	bne.n	800c2c4 <tcp_close_shutdown+0x128>
 800c2b8:	4b27      	ldr	r3, [pc, #156]	; (800c358 <tcp_close_shutdown+0x1bc>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	4a26      	ldr	r2, [pc, #152]	; (800c358 <tcp_close_shutdown+0x1bc>)
 800c2c0:	6013      	str	r3, [r2, #0]
 800c2c2:	e013      	b.n	800c2ec <tcp_close_shutdown+0x150>
 800c2c4:	4b24      	ldr	r3, [pc, #144]	; (800c358 <tcp_close_shutdown+0x1bc>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	60bb      	str	r3, [r7, #8]
 800c2ca:	e00c      	b.n	800c2e6 <tcp_close_shutdown+0x14a>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d104      	bne.n	800c2e0 <tcp_close_shutdown+0x144>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68da      	ldr	r2, [r3, #12]
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	60da      	str	r2, [r3, #12]
 800c2de:	e005      	b.n	800c2ec <tcp_close_shutdown+0x150>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	60bb      	str	r3, [r7, #8]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1ef      	bne.n	800c2cc <tcp_close_shutdown+0x130>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fea0 	bl	800c038 <tcp_free>
      break;
 800c2f8:	e01a      	b.n	800c330 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff ff14 	bl	800c128 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4816      	ldr	r0, [pc, #88]	; (800c35c <tcp_close_shutdown+0x1c0>)
 800c304:	f001 fb7a 	bl	800d9fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff feb1 	bl	800c070 <tcp_free_listen>
      break;
 800c30e:	e00f      	b.n	800c330 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	480e      	ldr	r0, [pc, #56]	; (800c34c <tcp_close_shutdown+0x1b0>)
 800c314:	f001 fb72 	bl	800d9fc <tcp_pcb_remove>
 800c318:	4b0d      	ldr	r3, [pc, #52]	; (800c350 <tcp_close_shutdown+0x1b4>)
 800c31a:	2201      	movs	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff fe8a 	bl	800c038 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c324:	e004      	b.n	800c330 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f81a 	bl	800c360 <tcp_close_shutdown_fin>
 800c32c:	4603      	mov	r3, r0
 800c32e:	e000      	b.n	800c332 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bdb0      	pop	{r4, r5, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	0801735c 	.word	0x0801735c
 800c340:	08017430 	.word	0x08017430
 800c344:	080173a0 	.word	0x080173a0
 800c348:	08017450 	.word	0x08017450
 800c34c:	20011808 	.word	0x20011808
 800c350:	20011810 	.word	0x20011810
 800c354:	20011848 	.word	0x20011848
 800c358:	20011800 	.word	0x20011800
 800c35c:	20011804 	.word	0x20011804

0800c360 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <tcp_close_shutdown_fin+0x1c>
 800c36e:	4b2e      	ldr	r3, [pc, #184]	; (800c428 <tcp_close_shutdown_fin+0xc8>)
 800c370:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c374:	492d      	ldr	r1, [pc, #180]	; (800c42c <tcp_close_shutdown_fin+0xcc>)
 800c376:	482e      	ldr	r0, [pc, #184]	; (800c430 <tcp_close_shutdown_fin+0xd0>)
 800c378:	f008 fe96 	bl	80150a8 <iprintf>

  switch (pcb->state) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7d1b      	ldrb	r3, [r3, #20]
 800c380:	2b07      	cmp	r3, #7
 800c382:	d020      	beq.n	800c3c6 <tcp_close_shutdown_fin+0x66>
 800c384:	2b07      	cmp	r3, #7
 800c386:	dc2b      	bgt.n	800c3e0 <tcp_close_shutdown_fin+0x80>
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d002      	beq.n	800c392 <tcp_close_shutdown_fin+0x32>
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d00d      	beq.n	800c3ac <tcp_close_shutdown_fin+0x4c>
 800c390:	e026      	b.n	800c3e0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f004 fe10 	bl	8010fb8 <tcp_send_fin>
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d11f      	bne.n	800c3e4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2205      	movs	r2, #5
 800c3a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3aa:	e01b      	b.n	800c3e4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f004 fe03 	bl	8010fb8 <tcp_send_fin>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d114      	bne.n	800c3e8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2205      	movs	r2, #5
 800c3c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3c4:	e010      	b.n	800c3e8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f004 fdf6 	bl	8010fb8 <tcp_send_fin>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d109      	bne.n	800c3ec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2209      	movs	r2, #9
 800c3dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3de:	e005      	b.n	800c3ec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e01c      	b.n	800c41e <tcp_close_shutdown_fin+0xbe>
      break;
 800c3e4:	bf00      	nop
 800c3e6:	e002      	b.n	800c3ee <tcp_close_shutdown_fin+0x8e>
      break;
 800c3e8:	bf00      	nop
 800c3ea:	e000      	b.n	800c3ee <tcp_close_shutdown_fin+0x8e>
      break;
 800c3ec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d103      	bne.n	800c3fe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f004 ff1c 	bl	8011234 <tcp_output>
 800c3fc:	e00d      	b.n	800c41a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c406:	d108      	bne.n	800c41a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	8b5b      	ldrh	r3, [r3, #26]
 800c40c:	f043 0308 	orr.w	r3, r3, #8
 800c410:	b29a      	uxth	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	e001      	b.n	800c41e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	0801735c 	.word	0x0801735c
 800c42c:	0801740c 	.word	0x0801740c
 800c430:	080173a0 	.word	0x080173a0

0800c434 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d109      	bne.n	800c456 <tcp_close+0x22>
 800c442:	4b0f      	ldr	r3, [pc, #60]	; (800c480 <tcp_close+0x4c>)
 800c444:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c448:	490e      	ldr	r1, [pc, #56]	; (800c484 <tcp_close+0x50>)
 800c44a:	480f      	ldr	r0, [pc, #60]	; (800c488 <tcp_close+0x54>)
 800c44c:	f008 fe2c 	bl	80150a8 <iprintf>
 800c450:	f06f 030f 	mvn.w	r3, #15
 800c454:	e00f      	b.n	800c476 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	7d1b      	ldrb	r3, [r3, #20]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d006      	beq.n	800c46c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	8b5b      	ldrh	r3, [r3, #26]
 800c462:	f043 0310 	orr.w	r3, r3, #16
 800c466:	b29a      	uxth	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c46c:	2101      	movs	r1, #1
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff fe94 	bl	800c19c <tcp_close_shutdown>
 800c474:	4603      	mov	r3, r0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	0801735c 	.word	0x0801735c
 800c484:	0801746c 	.word	0x0801746c
 800c488:	080173a0 	.word	0x080173a0

0800c48c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d109      	bne.n	800c4b2 <tcp_shutdown+0x26>
 800c49e:	4b26      	ldr	r3, [pc, #152]	; (800c538 <tcp_shutdown+0xac>)
 800c4a0:	f240 2207 	movw	r2, #519	; 0x207
 800c4a4:	4925      	ldr	r1, [pc, #148]	; (800c53c <tcp_shutdown+0xb0>)
 800c4a6:	4826      	ldr	r0, [pc, #152]	; (800c540 <tcp_shutdown+0xb4>)
 800c4a8:	f008 fdfe 	bl	80150a8 <iprintf>
 800c4ac:	f06f 030f 	mvn.w	r3, #15
 800c4b0:	e03d      	b.n	800c52e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	7d1b      	ldrb	r3, [r3, #20]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d102      	bne.n	800c4c0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c4ba:	f06f 030a 	mvn.w	r3, #10
 800c4be:	e036      	b.n	800c52e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d01b      	beq.n	800c4fe <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	8b5b      	ldrh	r3, [r3, #26]
 800c4ca:	f043 0310 	orr.w	r3, r3, #16
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d005      	beq.n	800c4e6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c4da:	2101      	movs	r1, #1
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff fe5d 	bl	800c19c <tcp_close_shutdown>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	e023      	b.n	800c52e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d007      	beq.n	800c4fe <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff faf4 	bl	800bae0 <pbuf_free>
      pcb->refused_data = NULL;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d013      	beq.n	800c52c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	7d1b      	ldrb	r3, [r3, #20]
 800c508:	2b04      	cmp	r3, #4
 800c50a:	dc02      	bgt.n	800c512 <tcp_shutdown+0x86>
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	da02      	bge.n	800c516 <tcp_shutdown+0x8a>
 800c510:	e009      	b.n	800c526 <tcp_shutdown+0x9a>
 800c512:	2b07      	cmp	r3, #7
 800c514:	d107      	bne.n	800c526 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	4619      	mov	r1, r3
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f7ff fe3d 	bl	800c19c <tcp_close_shutdown>
 800c522:	4603      	mov	r3, r0
 800c524:	e003      	b.n	800c52e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c526:	f06f 030a 	mvn.w	r3, #10
 800c52a:	e000      	b.n	800c52e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	0801735c 	.word	0x0801735c
 800c53c:	08017484 	.word	0x08017484
 800c540:	080173a0 	.word	0x080173a0

0800c544 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08e      	sub	sp, #56	; 0x38
 800c548:	af04      	add	r7, sp, #16
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d107      	bne.n	800c564 <tcp_abandon+0x20>
 800c554:	4b52      	ldr	r3, [pc, #328]	; (800c6a0 <tcp_abandon+0x15c>)
 800c556:	f240 223d 	movw	r2, #573	; 0x23d
 800c55a:	4952      	ldr	r1, [pc, #328]	; (800c6a4 <tcp_abandon+0x160>)
 800c55c:	4852      	ldr	r0, [pc, #328]	; (800c6a8 <tcp_abandon+0x164>)
 800c55e:	f008 fda3 	bl	80150a8 <iprintf>
 800c562:	e099      	b.n	800c698 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	7d1b      	ldrb	r3, [r3, #20]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d106      	bne.n	800c57a <tcp_abandon+0x36>
 800c56c:	4b4c      	ldr	r3, [pc, #304]	; (800c6a0 <tcp_abandon+0x15c>)
 800c56e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c572:	494e      	ldr	r1, [pc, #312]	; (800c6ac <tcp_abandon+0x168>)
 800c574:	484c      	ldr	r0, [pc, #304]	; (800c6a8 <tcp_abandon+0x164>)
 800c576:	f008 fd97 	bl	80150a8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	7d1b      	ldrb	r3, [r3, #20]
 800c57e:	2b0a      	cmp	r3, #10
 800c580:	d107      	bne.n	800c592 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	484a      	ldr	r0, [pc, #296]	; (800c6b0 <tcp_abandon+0x16c>)
 800c586:	f001 fa39 	bl	800d9fc <tcp_pcb_remove>
    tcp_free(pcb);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff fd54 	bl	800c038 <tcp_free>
 800c590:	e082      	b.n	800c698 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7d1b      	ldrb	r3, [r3, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d126      	bne.n	800c60a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	8adb      	ldrh	r3, [r3, #22]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d02e      	beq.n	800c622 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c5c4:	4b3b      	ldr	r3, [pc, #236]	; (800c6b4 <tcp_abandon+0x170>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d105      	bne.n	800c5da <tcp_abandon+0x96>
 800c5ce:	4b39      	ldr	r3, [pc, #228]	; (800c6b4 <tcp_abandon+0x170>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	4a37      	ldr	r2, [pc, #220]	; (800c6b4 <tcp_abandon+0x170>)
 800c5d6:	6013      	str	r3, [r2, #0]
 800c5d8:	e013      	b.n	800c602 <tcp_abandon+0xbe>
 800c5da:	4b36      	ldr	r3, [pc, #216]	; (800c6b4 <tcp_abandon+0x170>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	61fb      	str	r3, [r7, #28]
 800c5e0:	e00c      	b.n	800c5fc <tcp_abandon+0xb8>
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d104      	bne.n	800c5f6 <tcp_abandon+0xb2>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68da      	ldr	r2, [r3, #12]
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	60da      	str	r2, [r3, #12]
 800c5f4:	e005      	b.n	800c602 <tcp_abandon+0xbe>
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1ef      	bne.n	800c5e2 <tcp_abandon+0x9e>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	60da      	str	r2, [r3, #12]
 800c608:	e00b      	b.n	800c622 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	8adb      	ldrh	r3, [r3, #22]
 800c612:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	4828      	ldr	r0, [pc, #160]	; (800c6b8 <tcp_abandon+0x174>)
 800c618:	f001 f9f0 	bl	800d9fc <tcp_pcb_remove>
 800c61c:	4b27      	ldr	r3, [pc, #156]	; (800c6bc <tcp_abandon+0x178>)
 800c61e:	2201      	movs	r2, #1
 800c620:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c626:	2b00      	cmp	r3, #0
 800c628:	d004      	beq.n	800c634 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 fec4 	bl	800d3bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d004      	beq.n	800c646 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c640:	4618      	mov	r0, r3
 800c642:	f000 febb 	bl	800d3bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c652:	4618      	mov	r0, r3
 800c654:	f000 feb2 	bl	800d3bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00e      	beq.n	800c67c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	3304      	adds	r3, #4
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	8b12      	ldrh	r2, [r2, #24]
 800c668:	9202      	str	r2, [sp, #8]
 800c66a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c66c:	9201      	str	r2, [sp, #4]
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	460b      	mov	r3, r1
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	69b9      	ldr	r1, [r7, #24]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f005 fb90 	bl	8011d9c <tcp_rst>
    }
    last_state = pcb->state;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	7d1b      	ldrb	r3, [r3, #20]
 800c680:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7ff fcd8 	bl	800c038 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d004      	beq.n	800c698 <tcp_abandon+0x154>
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	f06f 010c 	mvn.w	r1, #12
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	4798      	blx	r3
  }
}
 800c698:	3728      	adds	r7, #40	; 0x28
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	0801735c 	.word	0x0801735c
 800c6a4:	080174a0 	.word	0x080174a0
 800c6a8:	080173a0 	.word	0x080173a0
 800c6ac:	080174bc 	.word	0x080174bc
 800c6b0:	2001180c 	.word	0x2001180c
 800c6b4:	20011800 	.word	0x20011800
 800c6b8:	20011808 	.word	0x20011808
 800c6bc:	20011810 	.word	0x20011810

0800c6c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c6c8:	2101      	movs	r1, #1
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff ff3a 	bl	800c544 <tcp_abandon>
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c6e6:	2304      	movs	r3, #4
 800c6e8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c6f0:	4b3e      	ldr	r3, [pc, #248]	; (800c7ec <tcp_bind+0x114>)
 800c6f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d109      	bne.n	800c70e <tcp_bind+0x36>
 800c6fa:	4b3d      	ldr	r3, [pc, #244]	; (800c7f0 <tcp_bind+0x118>)
 800c6fc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c700:	493c      	ldr	r1, [pc, #240]	; (800c7f4 <tcp_bind+0x11c>)
 800c702:	483d      	ldr	r0, [pc, #244]	; (800c7f8 <tcp_bind+0x120>)
 800c704:	f008 fcd0 	bl	80150a8 <iprintf>
 800c708:	f06f 030f 	mvn.w	r3, #15
 800c70c:	e06a      	b.n	800c7e4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	7d1b      	ldrb	r3, [r3, #20]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d009      	beq.n	800c72a <tcp_bind+0x52>
 800c716:	4b36      	ldr	r3, [pc, #216]	; (800c7f0 <tcp_bind+0x118>)
 800c718:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c71c:	4937      	ldr	r1, [pc, #220]	; (800c7fc <tcp_bind+0x124>)
 800c71e:	4836      	ldr	r0, [pc, #216]	; (800c7f8 <tcp_bind+0x120>)
 800c720:	f008 fcc2 	bl	80150a8 <iprintf>
 800c724:	f06f 0305 	mvn.w	r3, #5
 800c728:	e05c      	b.n	800c7e4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c72a:	88fb      	ldrh	r3, [r7, #6]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d109      	bne.n	800c744 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c730:	f000 f9de 	bl	800caf0 <tcp_new_port>
 800c734:	4603      	mov	r3, r0
 800c736:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c738:	88fb      	ldrh	r3, [r7, #6]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d135      	bne.n	800c7aa <tcp_bind+0xd2>
      return ERR_BUF;
 800c73e:	f06f 0301 	mvn.w	r3, #1
 800c742:	e04f      	b.n	800c7e4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c744:	2300      	movs	r3, #0
 800c746:	61fb      	str	r3, [r7, #28]
 800c748:	e02b      	b.n	800c7a2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c74a:	4a2d      	ldr	r2, [pc, #180]	; (800c800 <tcp_bind+0x128>)
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	61bb      	str	r3, [r7, #24]
 800c756:	e01e      	b.n	800c796 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	8adb      	ldrh	r3, [r3, #22]
 800c75c:	88fa      	ldrh	r2, [r7, #6]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d116      	bne.n	800c790 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c762:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c764:	2b00      	cmp	r3, #0
 800c766:	d010      	beq.n	800c78a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00c      	beq.n	800c78a <tcp_bind+0xb2>
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d009      	beq.n	800c78a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d005      	beq.n	800c78a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c786:	429a      	cmp	r2, r3
 800c788:	d102      	bne.n	800c790 <tcp_bind+0xb8>
              return ERR_USE;
 800c78a:	f06f 0307 	mvn.w	r3, #7
 800c78e:	e029      	b.n	800c7e4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	61bb      	str	r3, [r7, #24]
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1dd      	bne.n	800c758 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	61fb      	str	r3, [r7, #28]
 800c7a2:	69fa      	ldr	r2, [r7, #28]
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	dbcf      	blt.n	800c74a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00c      	beq.n	800c7ca <tcp_bind+0xf2>
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d008      	beq.n	800c7ca <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <tcp_bind+0xec>
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	e000      	b.n	800c7c6 <tcp_bind+0xee>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	88fa      	ldrh	r2, [r7, #6]
 800c7ce:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c7d0:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <tcp_bind+0x12c>)
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	60da      	str	r2, [r3, #12]
 800c7d8:	4a0a      	ldr	r2, [pc, #40]	; (800c804 <tcp_bind+0x12c>)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	f005 fc9f 	bl	8012120 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3720      	adds	r7, #32
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	08019058 	.word	0x08019058
 800c7f0:	0801735c 	.word	0x0801735c
 800c7f4:	080174f0 	.word	0x080174f0
 800c7f8:	080173a0 	.word	0x080173a0
 800c7fc:	08017508 	.word	0x08017508
 800c800:	08019030 	.word	0x08019030
 800c804:	20011800 	.word	0x20011800

0800c808 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	4613      	mov	r3, r2
 800c814:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d106      	bne.n	800c82a <tcp_accept_null+0x22>
 800c81c:	4b07      	ldr	r3, [pc, #28]	; (800c83c <tcp_accept_null+0x34>)
 800c81e:	f240 320f 	movw	r2, #783	; 0x30f
 800c822:	4907      	ldr	r1, [pc, #28]	; (800c840 <tcp_accept_null+0x38>)
 800c824:	4807      	ldr	r0, [pc, #28]	; (800c844 <tcp_accept_null+0x3c>)
 800c826:	f008 fc3f 	bl	80150a8 <iprintf>

  tcp_abort(pcb);
 800c82a:	68b8      	ldr	r0, [r7, #8]
 800c82c:	f7ff ff48 	bl	800c6c0 <tcp_abort>

  return ERR_ABRT;
 800c830:	f06f 030c 	mvn.w	r3, #12
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	0801735c 	.word	0x0801735c
 800c840:	08017530 	.word	0x08017530
 800c844:	080173a0 	.word	0x080173a0

0800c848 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b088      	sub	sp, #32
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	460b      	mov	r3, r1
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c856:	2300      	movs	r3, #0
 800c858:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d109      	bne.n	800c874 <tcp_listen_with_backlog_and_err+0x2c>
 800c860:	4b47      	ldr	r3, [pc, #284]	; (800c980 <tcp_listen_with_backlog_and_err+0x138>)
 800c862:	f240 3259 	movw	r2, #857	; 0x359
 800c866:	4947      	ldr	r1, [pc, #284]	; (800c984 <tcp_listen_with_backlog_and_err+0x13c>)
 800c868:	4847      	ldr	r0, [pc, #284]	; (800c988 <tcp_listen_with_backlog_and_err+0x140>)
 800c86a:	f008 fc1d 	bl	80150a8 <iprintf>
 800c86e:	23f0      	movs	r3, #240	; 0xf0
 800c870:	76fb      	strb	r3, [r7, #27]
 800c872:	e079      	b.n	800c968 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	7d1b      	ldrb	r3, [r3, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d009      	beq.n	800c890 <tcp_listen_with_backlog_and_err+0x48>
 800c87c:	4b40      	ldr	r3, [pc, #256]	; (800c980 <tcp_listen_with_backlog_and_err+0x138>)
 800c87e:	f240 325a 	movw	r2, #858	; 0x35a
 800c882:	4942      	ldr	r1, [pc, #264]	; (800c98c <tcp_listen_with_backlog_and_err+0x144>)
 800c884:	4840      	ldr	r0, [pc, #256]	; (800c988 <tcp_listen_with_backlog_and_err+0x140>)
 800c886:	f008 fc0f 	bl	80150a8 <iprintf>
 800c88a:	23f1      	movs	r3, #241	; 0xf1
 800c88c:	76fb      	strb	r3, [r7, #27]
 800c88e:	e06b      	b.n	800c968 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	7d1b      	ldrb	r3, [r3, #20]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d104      	bne.n	800c8a2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c89c:	23f7      	movs	r3, #247	; 0xf7
 800c89e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c8a0:	e062      	b.n	800c968 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c8a2:	2001      	movs	r0, #1
 800c8a4:	f7fe fa06 	bl	800acb4 <memp_malloc>
 800c8a8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d102      	bne.n	800c8b6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c8b0:	23ff      	movs	r3, #255	; 0xff
 800c8b2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c8b4:	e058      	b.n	800c968 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	691a      	ldr	r2, [r3, #16]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	8ada      	ldrh	r2, [r3, #22]
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	7d5a      	ldrb	r2, [r3, #21]
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	7a5a      	ldrb	r2, [r3, #9]
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	7ada      	ldrb	r2, [r3, #11]
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	7a9a      	ldrb	r2, [r3, #10]
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	8adb      	ldrh	r3, [r3, #22]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d021      	beq.n	800c946 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c902:	4b23      	ldr	r3, [pc, #140]	; (800c990 <tcp_listen_with_backlog_and_err+0x148>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d105      	bne.n	800c918 <tcp_listen_with_backlog_and_err+0xd0>
 800c90c:	4b20      	ldr	r3, [pc, #128]	; (800c990 <tcp_listen_with_backlog_and_err+0x148>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	4a1f      	ldr	r2, [pc, #124]	; (800c990 <tcp_listen_with_backlog_and_err+0x148>)
 800c914:	6013      	str	r3, [r2, #0]
 800c916:	e013      	b.n	800c940 <tcp_listen_with_backlog_and_err+0xf8>
 800c918:	4b1d      	ldr	r3, [pc, #116]	; (800c990 <tcp_listen_with_backlog_and_err+0x148>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	e00c      	b.n	800c93a <tcp_listen_with_backlog_and_err+0xf2>
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	429a      	cmp	r2, r3
 800c928:	d104      	bne.n	800c934 <tcp_listen_with_backlog_and_err+0xec>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	60da      	str	r2, [r3, #12]
 800c932:	e005      	b.n	800c940 <tcp_listen_with_backlog_and_err+0xf8>
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1ef      	bne.n	800c920 <tcp_listen_with_backlog_and_err+0xd8>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7ff fb76 	bl	800c038 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	4a11      	ldr	r2, [pc, #68]	; (800c994 <tcp_listen_with_backlog_and_err+0x14c>)
 800c950:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c952:	4b11      	ldr	r3, [pc, #68]	; (800c998 <tcp_listen_with_backlog_and_err+0x150>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	60da      	str	r2, [r3, #12]
 800c95a:	4a0f      	ldr	r2, [pc, #60]	; (800c998 <tcp_listen_with_backlog_and_err+0x150>)
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	f005 fbde 	bl	8012120 <tcp_timer_needed>
  res = ERR_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7efa      	ldrb	r2, [r7, #27]
 800c972:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c974:	69fb      	ldr	r3, [r7, #28]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3720      	adds	r7, #32
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	0801735c 	.word	0x0801735c
 800c984:	08017550 	.word	0x08017550
 800c988:	080173a0 	.word	0x080173a0
 800c98c:	08017580 	.word	0x08017580
 800c990:	20011800 	.word	0x20011800
 800c994:	0800c809 	.word	0x0800c809
 800c998:	20011804 	.word	0x20011804

0800c99c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d106      	bne.n	800c9b8 <tcp_update_rcv_ann_wnd+0x1c>
 800c9aa:	4b25      	ldr	r3, [pc, #148]	; (800ca40 <tcp_update_rcv_ann_wnd+0xa4>)
 800c9ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c9b0:	4924      	ldr	r1, [pc, #144]	; (800ca44 <tcp_update_rcv_ann_wnd+0xa8>)
 800c9b2:	4825      	ldr	r0, [pc, #148]	; (800ca48 <tcp_update_rcv_ann_wnd+0xac>)
 800c9b4:	f008 fb78 	bl	80150a8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c9c0:	4413      	add	r3, r2
 800c9c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c9cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c9d0:	bf28      	it	cs
 800c9d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c9d6:	b292      	uxth	r2, r2
 800c9d8:	4413      	add	r3, r2
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	db08      	blt.n	800c9f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	e020      	b.n	800ca36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	dd03      	ble.n	800ca0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ca08:	e014      	b.n	800ca34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca1c:	d306      	bcc.n	800ca2c <tcp_update_rcv_ann_wnd+0x90>
 800ca1e:	4b08      	ldr	r3, [pc, #32]	; (800ca40 <tcp_update_rcv_ann_wnd+0xa4>)
 800ca20:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ca24:	4909      	ldr	r1, [pc, #36]	; (800ca4c <tcp_update_rcv_ann_wnd+0xb0>)
 800ca26:	4808      	ldr	r0, [pc, #32]	; (800ca48 <tcp_update_rcv_ann_wnd+0xac>)
 800ca28:	f008 fb3e 	bl	80150a8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ca34:	2300      	movs	r3, #0
  }
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	0801735c 	.word	0x0801735c
 800ca44:	080175b8 	.word	0x080175b8
 800ca48:	080173a0 	.word	0x080173a0
 800ca4c:	080175dc 	.word	0x080175dc

0800ca50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d107      	bne.n	800ca72 <tcp_recved+0x22>
 800ca62:	4b1f      	ldr	r3, [pc, #124]	; (800cae0 <tcp_recved+0x90>)
 800ca64:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ca68:	491e      	ldr	r1, [pc, #120]	; (800cae4 <tcp_recved+0x94>)
 800ca6a:	481f      	ldr	r0, [pc, #124]	; (800cae8 <tcp_recved+0x98>)
 800ca6c:	f008 fb1c 	bl	80150a8 <iprintf>
 800ca70:	e032      	b.n	800cad8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	7d1b      	ldrb	r3, [r3, #20]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d106      	bne.n	800ca88 <tcp_recved+0x38>
 800ca7a:	4b19      	ldr	r3, [pc, #100]	; (800cae0 <tcp_recved+0x90>)
 800ca7c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ca80:	491a      	ldr	r1, [pc, #104]	; (800caec <tcp_recved+0x9c>)
 800ca82:	4819      	ldr	r0, [pc, #100]	; (800cae8 <tcp_recved+0x98>)
 800ca84:	f008 fb10 	bl	80150a8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca8c:	887b      	ldrh	r3, [r7, #2]
 800ca8e:	4413      	add	r3, r2
 800ca90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ca92:	89fb      	ldrh	r3, [r7, #14]
 800ca94:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca98:	d804      	bhi.n	800caa4 <tcp_recved+0x54>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca9e:	89fa      	ldrh	r2, [r7, #14]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d204      	bcs.n	800caae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800caaa:	851a      	strh	r2, [r3, #40]	; 0x28
 800caac:	e002      	b.n	800cab4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	89fa      	ldrh	r2, [r7, #14]
 800cab2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7ff ff71 	bl	800c99c <tcp_update_rcv_ann_wnd>
 800caba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cac2:	d309      	bcc.n	800cad8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	8b5b      	ldrh	r3, [r3, #26]
 800cac8:	f043 0302 	orr.w	r3, r3, #2
 800cacc:	b29a      	uxth	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f004 fbae 	bl	8011234 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	0801735c 	.word	0x0801735c
 800cae4:	080175f8 	.word	0x080175f8
 800cae8:	080173a0 	.word	0x080173a0
 800caec:	08017610 	.word	0x08017610

0800caf0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cafa:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <tcp_new_port+0x84>)
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	3301      	adds	r3, #1
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	4b1c      	ldr	r3, [pc, #112]	; (800cb74 <tcp_new_port+0x84>)
 800cb04:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cb06:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <tcp_new_port+0x84>)
 800cb08:	881b      	ldrh	r3, [r3, #0]
 800cb0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d103      	bne.n	800cb1a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cb12:	4b18      	ldr	r3, [pc, #96]	; (800cb74 <tcp_new_port+0x84>)
 800cb14:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cb18:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	71fb      	strb	r3, [r7, #7]
 800cb1e:	e01e      	b.n	800cb5e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb20:	79fb      	ldrb	r3, [r7, #7]
 800cb22:	4a15      	ldr	r2, [pc, #84]	; (800cb78 <tcp_new_port+0x88>)
 800cb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	603b      	str	r3, [r7, #0]
 800cb2c:	e011      	b.n	800cb52 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	8ada      	ldrh	r2, [r3, #22]
 800cb32:	4b10      	ldr	r3, [pc, #64]	; (800cb74 <tcp_new_port+0x84>)
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d108      	bne.n	800cb4c <tcp_new_port+0x5c>
        n++;
 800cb3a:	88bb      	ldrh	r3, [r7, #4]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cb40:	88bb      	ldrh	r3, [r7, #4]
 800cb42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb46:	d3d8      	bcc.n	800cafa <tcp_new_port+0xa>
          return 0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e00d      	b.n	800cb68 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	603b      	str	r3, [r7, #0]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1ea      	bne.n	800cb2e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	71fb      	strb	r3, [r7, #7]
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d9dd      	bls.n	800cb20 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cb64:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <tcp_new_port+0x84>)
 800cb66:	881b      	ldrh	r3, [r3, #0]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	20000024 	.word	0x20000024
 800cb78:	08019030 	.word	0x08019030

0800cb7c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cb7c:	b5b0      	push	{r4, r5, r7, lr}
 800cb7e:	b090      	sub	sp, #64	; 0x40
 800cb80:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cb88:	4b94      	ldr	r3, [pc, #592]	; (800cddc <tcp_slowtmr+0x260>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	4a93      	ldr	r2, [pc, #588]	; (800cddc <tcp_slowtmr+0x260>)
 800cb90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cb92:	4b93      	ldr	r3, [pc, #588]	; (800cde0 <tcp_slowtmr+0x264>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	3301      	adds	r3, #1
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	4b91      	ldr	r3, [pc, #580]	; (800cde0 <tcp_slowtmr+0x264>)
 800cb9c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cba2:	4b90      	ldr	r3, [pc, #576]	; (800cde4 <tcp_slowtmr+0x268>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cba8:	e29d      	b.n	800d0e6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	7d1b      	ldrb	r3, [r3, #20]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d106      	bne.n	800cbc0 <tcp_slowtmr+0x44>
 800cbb2:	4b8d      	ldr	r3, [pc, #564]	; (800cde8 <tcp_slowtmr+0x26c>)
 800cbb4:	f240 42be 	movw	r2, #1214	; 0x4be
 800cbb8:	498c      	ldr	r1, [pc, #560]	; (800cdec <tcp_slowtmr+0x270>)
 800cbba:	488d      	ldr	r0, [pc, #564]	; (800cdf0 <tcp_slowtmr+0x274>)
 800cbbc:	f008 fa74 	bl	80150a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc2:	7d1b      	ldrb	r3, [r3, #20]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d106      	bne.n	800cbd6 <tcp_slowtmr+0x5a>
 800cbc8:	4b87      	ldr	r3, [pc, #540]	; (800cde8 <tcp_slowtmr+0x26c>)
 800cbca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cbce:	4989      	ldr	r1, [pc, #548]	; (800cdf4 <tcp_slowtmr+0x278>)
 800cbd0:	4887      	ldr	r0, [pc, #540]	; (800cdf0 <tcp_slowtmr+0x274>)
 800cbd2:	f008 fa69 	bl	80150a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	7d1b      	ldrb	r3, [r3, #20]
 800cbda:	2b0a      	cmp	r3, #10
 800cbdc:	d106      	bne.n	800cbec <tcp_slowtmr+0x70>
 800cbde:	4b82      	ldr	r3, [pc, #520]	; (800cde8 <tcp_slowtmr+0x26c>)
 800cbe0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cbe4:	4984      	ldr	r1, [pc, #528]	; (800cdf8 <tcp_slowtmr+0x27c>)
 800cbe6:	4882      	ldr	r0, [pc, #520]	; (800cdf0 <tcp_slowtmr+0x274>)
 800cbe8:	f008 fa5e 	bl	80150a8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	7f9a      	ldrb	r2, [r3, #30]
 800cbf0:	4b7b      	ldr	r3, [pc, #492]	; (800cde0 <tcp_slowtmr+0x264>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d105      	bne.n	800cc04 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cc02:	e270      	b.n	800d0e6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cc04:	4b76      	ldr	r3, [pc, #472]	; (800cde0 <tcp_slowtmr+0x264>)
 800cc06:	781a      	ldrb	r2, [r3, #0]
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	7d1b      	ldrb	r3, [r3, #20]
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d10a      	bne.n	800cc36 <tcp_slowtmr+0xba>
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc26:	2b05      	cmp	r3, #5
 800cc28:	d905      	bls.n	800cc36 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cc2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc2e:	3301      	adds	r3, #1
 800cc30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc34:	e11e      	b.n	800ce74 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc3c:	2b0b      	cmp	r3, #11
 800cc3e:	d905      	bls.n	800cc4c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc44:	3301      	adds	r3, #1
 800cc46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc4a:	e113      	b.n	800ce74 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d075      	beq.n	800cd42 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d006      	beq.n	800cc6c <tcp_slowtmr+0xf0>
 800cc5e:	4b62      	ldr	r3, [pc, #392]	; (800cde8 <tcp_slowtmr+0x26c>)
 800cc60:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cc64:	4965      	ldr	r1, [pc, #404]	; (800cdfc <tcp_slowtmr+0x280>)
 800cc66:	4862      	ldr	r0, [pc, #392]	; (800cdf0 <tcp_slowtmr+0x274>)
 800cc68:	f008 fa1e 	bl	80150a8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <tcp_slowtmr+0x106>
 800cc74:	4b5c      	ldr	r3, [pc, #368]	; (800cde8 <tcp_slowtmr+0x26c>)
 800cc76:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cc7a:	4961      	ldr	r1, [pc, #388]	; (800ce00 <tcp_slowtmr+0x284>)
 800cc7c:	485c      	ldr	r0, [pc, #368]	; (800cdf0 <tcp_slowtmr+0x274>)
 800cc7e:	f008 fa13 	bl	80150a8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc88:	2b0b      	cmp	r3, #11
 800cc8a:	d905      	bls.n	800cc98 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc90:	3301      	adds	r3, #1
 800cc92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc96:	e0ed      	b.n	800ce74 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	4a58      	ldr	r2, [pc, #352]	; (800ce04 <tcp_slowtmr+0x288>)
 800cca2:	5cd3      	ldrb	r3, [r2, r3]
 800cca4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ccac:	7c7a      	ldrb	r2, [r7, #17]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d907      	bls.n	800ccc2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ccc8:	7c7a      	ldrb	r2, [r7, #17]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	f200 80d2 	bhi.w	800ce74 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d108      	bne.n	800ccf0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ccde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce0:	f005 f950 	bl	8011f84 <tcp_zero_window_probe>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d014      	beq.n	800cd14 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ccea:	2300      	movs	r3, #0
 800ccec:	623b      	str	r3, [r7, #32]
 800ccee:	e011      	b.n	800cd14 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccfa:	f004 f815 	bl	8010d28 <tcp_split_unsent_seg>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d107      	bne.n	800cd14 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cd04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd06:	f004 fa95 	bl	8011234 <tcp_output>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 80ac 	beq.w	800ce74 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd2a:	2b06      	cmp	r3, #6
 800cd2c:	f200 80a2 	bhi.w	800ce74 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd36:	3301      	adds	r3, #1
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cd40:	e098      	b.n	800ce74 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	db0f      	blt.n	800cd6c <tcp_slowtmr+0x1f0>
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d008      	beq.n	800cd6c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	3301      	adds	r3, #1
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	b21a      	sxth	r2, r3
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	db7b      	blt.n	800ce74 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cd7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd7e:	f004 fd4b 	bl	8011818 <tcp_rexmit_rto_prepare>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d007      	beq.n	800cd98 <tcp_slowtmr+0x21c>
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d171      	bne.n	800ce74 <tcp_slowtmr+0x2f8>
 800cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d06d      	beq.n	800ce74 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9a:	7d1b      	ldrb	r3, [r3, #20]
 800cd9c:	2b02      	cmp	r3, #2
 800cd9e:	d03a      	beq.n	800ce16 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cda6:	2b0c      	cmp	r3, #12
 800cda8:	bf28      	it	cs
 800cdaa:	230c      	movcs	r3, #12
 800cdac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cdb4:	10db      	asrs	r3, r3, #3
 800cdb6:	b21b      	sxth	r3, r3
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cdc0:	4413      	add	r3, r2
 800cdc2:	7efa      	ldrb	r2, [r7, #27]
 800cdc4:	4910      	ldr	r1, [pc, #64]	; (800ce08 <tcp_slowtmr+0x28c>)
 800cdc6:	5c8a      	ldrb	r2, [r1, r2]
 800cdc8:	4093      	lsls	r3, r2
 800cdca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	dc1a      	bgt.n	800ce0c <tcp_slowtmr+0x290>
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	b21a      	sxth	r2, r3
 800cdda:	e019      	b.n	800ce10 <tcp_slowtmr+0x294>
 800cddc:	200117fc 	.word	0x200117fc
 800cde0:	20011812 	.word	0x20011812
 800cde4:	20011808 	.word	0x20011808
 800cde8:	0801735c 	.word	0x0801735c
 800cdec:	080176a0 	.word	0x080176a0
 800cdf0:	080173a0 	.word	0x080173a0
 800cdf4:	080176cc 	.word	0x080176cc
 800cdf8:	080176f8 	.word	0x080176f8
 800cdfc:	08017728 	.word	0x08017728
 800ce00:	0801775c 	.word	0x0801775c
 800ce04:	08019028 	.word	0x08019028
 800ce08:	08019018 	.word	0x08019018
 800ce0c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	2200      	movs	r2, #0
 800ce1a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	bf28      	it	cs
 800ce2c:	4613      	movcs	r3, r2
 800ce2e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ce30:	8a7b      	ldrh	r3, [r7, #18]
 800ce32:	085b      	lsrs	r3, r3, #1
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d206      	bcs.n	800ce5c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ce5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ce6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce70:	f004 fd42 	bl	80118f8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ce74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce76:	7d1b      	ldrb	r3, [r3, #20]
 800ce78:	2b06      	cmp	r3, #6
 800ce7a:	d111      	bne.n	800cea0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7e:	8b5b      	ldrh	r3, [r3, #26]
 800ce80:	f003 0310 	and.w	r3, r3, #16
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00b      	beq.n	800cea0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce88:	4b9c      	ldr	r3, [pc, #624]	; (800d0fc <tcp_slowtmr+0x580>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	6a1b      	ldr	r3, [r3, #32]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	2b28      	cmp	r3, #40	; 0x28
 800ce94:	d904      	bls.n	800cea0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ce96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	7a5b      	ldrb	r3, [r3, #9]
 800cea4:	f003 0308 	and.w	r3, r3, #8
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d04a      	beq.n	800cf42 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ceb0:	2b04      	cmp	r3, #4
 800ceb2:	d003      	beq.n	800cebc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ceb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ceb8:	2b07      	cmp	r3, #7
 800ceba:	d142      	bne.n	800cf42 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cebc:	4b8f      	ldr	r3, [pc, #572]	; (800d0fc <tcp_slowtmr+0x580>)
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec2:	6a1b      	ldr	r3, [r3, #32]
 800cec4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cecc:	4b8c      	ldr	r3, [pc, #560]	; (800d100 <tcp_slowtmr+0x584>)
 800cece:	440b      	add	r3, r1
 800ced0:	498c      	ldr	r1, [pc, #560]	; (800d104 <tcp_slowtmr+0x588>)
 800ced2:	fba1 1303 	umull	r1, r3, r1, r3
 800ced6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d90a      	bls.n	800cef2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cee0:	3301      	adds	r3, #1
 800cee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ceea:	3301      	adds	r3, #1
 800ceec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cef0:	e027      	b.n	800cf42 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cef2:	4b82      	ldr	r3, [pc, #520]	; (800d0fc <tcp_slowtmr+0x580>)
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cf08:	4618      	mov	r0, r3
 800cf0a:	4b7f      	ldr	r3, [pc, #508]	; (800d108 <tcp_slowtmr+0x58c>)
 800cf0c:	fb00 f303 	mul.w	r3, r0, r3
 800cf10:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cf12:	497c      	ldr	r1, [pc, #496]	; (800d104 <tcp_slowtmr+0x588>)
 800cf14:	fba1 1303 	umull	r1, r3, r1, r3
 800cf18:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d911      	bls.n	800cf42 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cf1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf20:	f004 fff0 	bl	8011f04 <tcp_keepalive>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cf2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d107      	bne.n	800cf42 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cf38:	3301      	adds	r3, #1
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d011      	beq.n	800cf6e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cf4a:	4b6c      	ldr	r3, [pc, #432]	; (800d0fc <tcp_slowtmr+0x580>)
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	1ad2      	subs	r2, r2, r3
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	440b      	add	r3, r1
 800cf62:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d302      	bcc.n	800cf6e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cf68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf6a:	f000 feab 	bl	800dcc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	7d1b      	ldrb	r3, [r3, #20]
 800cf72:	2b03      	cmp	r3, #3
 800cf74:	d10b      	bne.n	800cf8e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf76:	4b61      	ldr	r3, [pc, #388]	; (800d0fc <tcp_slowtmr+0x580>)
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	2b28      	cmp	r3, #40	; 0x28
 800cf82:	d904      	bls.n	800cf8e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cf84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf88:	3301      	adds	r3, #1
 800cf8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf90:	7d1b      	ldrb	r3, [r3, #20]
 800cf92:	2b09      	cmp	r3, #9
 800cf94:	d10b      	bne.n	800cfae <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf96:	4b59      	ldr	r3, [pc, #356]	; (800d0fc <tcp_slowtmr+0x580>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	6a1b      	ldr	r3, [r3, #32]
 800cf9e:	1ad3      	subs	r3, r2, r3
 800cfa0:	2bf0      	cmp	r3, #240	; 0xf0
 800cfa2:	d904      	bls.n	800cfae <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cfae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d060      	beq.n	800d078 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfbc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cfbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfc0:	f000 fccc 	bl	800d95c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d010      	beq.n	800cfec <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cfca:	4b50      	ldr	r3, [pc, #320]	; (800d10c <tcp_slowtmr+0x590>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d106      	bne.n	800cfe2 <tcp_slowtmr+0x466>
 800cfd4:	4b4e      	ldr	r3, [pc, #312]	; (800d110 <tcp_slowtmr+0x594>)
 800cfd6:	f240 526d 	movw	r2, #1389	; 0x56d
 800cfda:	494e      	ldr	r1, [pc, #312]	; (800d114 <tcp_slowtmr+0x598>)
 800cfdc:	484e      	ldr	r0, [pc, #312]	; (800d118 <tcp_slowtmr+0x59c>)
 800cfde:	f008 f863 	bl	80150a8 <iprintf>
        prev->next = pcb->next;
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	68da      	ldr	r2, [r3, #12]
 800cfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe8:	60da      	str	r2, [r3, #12]
 800cfea:	e00f      	b.n	800d00c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cfec:	4b47      	ldr	r3, [pc, #284]	; (800d10c <tcp_slowtmr+0x590>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d006      	beq.n	800d004 <tcp_slowtmr+0x488>
 800cff6:	4b46      	ldr	r3, [pc, #280]	; (800d110 <tcp_slowtmr+0x594>)
 800cff8:	f240 5271 	movw	r2, #1393	; 0x571
 800cffc:	4947      	ldr	r1, [pc, #284]	; (800d11c <tcp_slowtmr+0x5a0>)
 800cffe:	4846      	ldr	r0, [pc, #280]	; (800d118 <tcp_slowtmr+0x59c>)
 800d000:	f008 f852 	bl	80150a8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	4a40      	ldr	r2, [pc, #256]	; (800d10c <tcp_slowtmr+0x590>)
 800d00a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d00c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d010:	2b00      	cmp	r3, #0
 800d012:	d013      	beq.n	800d03c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d016:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d01c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d020:	3304      	adds	r3, #4
 800d022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d024:	8ad2      	ldrh	r2, [r2, #22]
 800d026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d028:	8b09      	ldrh	r1, [r1, #24]
 800d02a:	9102      	str	r1, [sp, #8]
 800d02c:	9201      	str	r2, [sp, #4]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	462b      	mov	r3, r5
 800d032:	4622      	mov	r2, r4
 800d034:	4601      	mov	r1, r0
 800d036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d038:	f004 feb0 	bl	8011d9c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d044:	7d1b      	ldrb	r3, [r3, #20]
 800d046:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d052:	6838      	ldr	r0, [r7, #0]
 800d054:	f7fe fff0 	bl	800c038 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d058:	4b31      	ldr	r3, [pc, #196]	; (800d120 <tcp_slowtmr+0x5a4>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d004      	beq.n	800d06e <tcp_slowtmr+0x4f2>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f06f 010c 	mvn.w	r1, #12
 800d06a:	68b8      	ldr	r0, [r7, #8]
 800d06c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d06e:	4b2c      	ldr	r3, [pc, #176]	; (800d120 <tcp_slowtmr+0x5a4>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d037      	beq.n	800d0e6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d076:	e592      	b.n	800cb9e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d084:	7f1b      	ldrb	r3, [r3, #28]
 800d086:	3301      	adds	r3, #1
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	7f1a      	ldrb	r2, [r3, #28]
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	7f5b      	ldrb	r3, [r3, #29]
 800d096:	429a      	cmp	r2, r3
 800d098:	d325      	bcc.n	800d0e6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09c:	2200      	movs	r2, #0
 800d09e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d0a0:	4b1f      	ldr	r3, [pc, #124]	; (800d120 <tcp_slowtmr+0x5a4>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00b      	beq.n	800d0c8 <tcp_slowtmr+0x54c>
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b8:	6912      	ldr	r2, [r2, #16]
 800d0ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0bc:	4610      	mov	r0, r2
 800d0be:	4798      	blx	r3
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d0c6:	e002      	b.n	800d0ce <tcp_slowtmr+0x552>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d0ce:	4b14      	ldr	r3, [pc, #80]	; (800d120 <tcp_slowtmr+0x5a4>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d000      	beq.n	800d0d8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d0d6:	e562      	b.n	800cb9e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d0d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0e2:	f004 f8a7 	bl	8011234 <tcp_output>
  while (pcb != NULL) {
 800d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f47f ad5e 	bne.w	800cbaa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d0f2:	4b0c      	ldr	r3, [pc, #48]	; (800d124 <tcp_slowtmr+0x5a8>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d0f8:	e069      	b.n	800d1ce <tcp_slowtmr+0x652>
 800d0fa:	bf00      	nop
 800d0fc:	200117fc 	.word	0x200117fc
 800d100:	000a4cb8 	.word	0x000a4cb8
 800d104:	10624dd3 	.word	0x10624dd3
 800d108:	000124f8 	.word	0x000124f8
 800d10c:	20011808 	.word	0x20011808
 800d110:	0801735c 	.word	0x0801735c
 800d114:	08017794 	.word	0x08017794
 800d118:	080173a0 	.word	0x080173a0
 800d11c:	080177c0 	.word	0x080177c0
 800d120:	20011810 	.word	0x20011810
 800d124:	2001180c 	.word	0x2001180c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	7d1b      	ldrb	r3, [r3, #20]
 800d12c:	2b0a      	cmp	r3, #10
 800d12e:	d006      	beq.n	800d13e <tcp_slowtmr+0x5c2>
 800d130:	4b2b      	ldr	r3, [pc, #172]	; (800d1e0 <tcp_slowtmr+0x664>)
 800d132:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d136:	492b      	ldr	r1, [pc, #172]	; (800d1e4 <tcp_slowtmr+0x668>)
 800d138:	482b      	ldr	r0, [pc, #172]	; (800d1e8 <tcp_slowtmr+0x66c>)
 800d13a:	f007 ffb5 	bl	80150a8 <iprintf>
    pcb_remove = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d144:	4b29      	ldr	r3, [pc, #164]	; (800d1ec <tcp_slowtmr+0x670>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	2bf0      	cmp	r3, #240	; 0xf0
 800d150:	d904      	bls.n	800d15c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d156:	3301      	adds	r3, #1
 800d158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d160:	2b00      	cmp	r3, #0
 800d162:	d02f      	beq.n	800d1c4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d166:	f000 fbf9 	bl	800d95c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d010      	beq.n	800d192 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d170:	4b1f      	ldr	r3, [pc, #124]	; (800d1f0 <tcp_slowtmr+0x674>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d176:	429a      	cmp	r2, r3
 800d178:	d106      	bne.n	800d188 <tcp_slowtmr+0x60c>
 800d17a:	4b19      	ldr	r3, [pc, #100]	; (800d1e0 <tcp_slowtmr+0x664>)
 800d17c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d180:	491c      	ldr	r1, [pc, #112]	; (800d1f4 <tcp_slowtmr+0x678>)
 800d182:	4819      	ldr	r0, [pc, #100]	; (800d1e8 <tcp_slowtmr+0x66c>)
 800d184:	f007 ff90 	bl	80150a8 <iprintf>
        prev->next = pcb->next;
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	68da      	ldr	r2, [r3, #12]
 800d18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18e:	60da      	str	r2, [r3, #12]
 800d190:	e00f      	b.n	800d1b2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d192:	4b17      	ldr	r3, [pc, #92]	; (800d1f0 <tcp_slowtmr+0x674>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d198:	429a      	cmp	r2, r3
 800d19a:	d006      	beq.n	800d1aa <tcp_slowtmr+0x62e>
 800d19c:	4b10      	ldr	r3, [pc, #64]	; (800d1e0 <tcp_slowtmr+0x664>)
 800d19e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d1a2:	4915      	ldr	r1, [pc, #84]	; (800d1f8 <tcp_slowtmr+0x67c>)
 800d1a4:	4810      	ldr	r0, [pc, #64]	; (800d1e8 <tcp_slowtmr+0x66c>)
 800d1a6:	f007 ff7f 	bl	80150a8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	4a10      	ldr	r2, [pc, #64]	; (800d1f0 <tcp_slowtmr+0x674>)
 800d1b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d1bc:	69f8      	ldr	r0, [r7, #28]
 800d1be:	f7fe ff3b 	bl	800c038 <tcp_free>
 800d1c2:	e004      	b.n	800d1ce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1a9      	bne.n	800d128 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop
 800d1d8:	3730      	adds	r7, #48	; 0x30
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bdb0      	pop	{r4, r5, r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	0801735c 	.word	0x0801735c
 800d1e4:	080177ec 	.word	0x080177ec
 800d1e8:	080173a0 	.word	0x080173a0
 800d1ec:	200117fc 	.word	0x200117fc
 800d1f0:	2001180c 	.word	0x2001180c
 800d1f4:	0801781c 	.word	0x0801781c
 800d1f8:	08017844 	.word	0x08017844

0800d1fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d202:	4b2d      	ldr	r3, [pc, #180]	; (800d2b8 <tcp_fasttmr+0xbc>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	3301      	adds	r3, #1
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	4b2b      	ldr	r3, [pc, #172]	; (800d2b8 <tcp_fasttmr+0xbc>)
 800d20c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d20e:	4b2b      	ldr	r3, [pc, #172]	; (800d2bc <tcp_fasttmr+0xc0>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d214:	e048      	b.n	800d2a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7f9a      	ldrb	r2, [r3, #30]
 800d21a:	4b27      	ldr	r3, [pc, #156]	; (800d2b8 <tcp_fasttmr+0xbc>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d03f      	beq.n	800d2a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d222:	4b25      	ldr	r3, [pc, #148]	; (800d2b8 <tcp_fasttmr+0xbc>)
 800d224:	781a      	ldrb	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	8b5b      	ldrh	r3, [r3, #26]
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d010      	beq.n	800d258 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	8b5b      	ldrh	r3, [r3, #26]
 800d23a:	f043 0302 	orr.w	r3, r3, #2
 800d23e:	b29a      	uxth	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f003 fff5 	bl	8011234 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	8b5b      	ldrh	r3, [r3, #26]
 800d24e:	f023 0303 	bic.w	r3, r3, #3
 800d252:	b29a      	uxth	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	8b5b      	ldrh	r3, [r3, #26]
 800d25c:	f003 0308 	and.w	r3, r3, #8
 800d260:	2b00      	cmp	r3, #0
 800d262:	d009      	beq.n	800d278 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	8b5b      	ldrh	r3, [r3, #26]
 800d268:	f023 0308 	bic.w	r3, r3, #8
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff f874 	bl	800c360 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00a      	beq.n	800d29c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d286:	4b0e      	ldr	r3, [pc, #56]	; (800d2c0 <tcp_fasttmr+0xc4>)
 800d288:	2200      	movs	r2, #0
 800d28a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f819 	bl	800d2c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d292:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <tcp_fasttmr+0xc4>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d000      	beq.n	800d29c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d29a:	e7b8      	b.n	800d20e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	607b      	str	r3, [r7, #4]
 800d2a0:	e002      	b.n	800d2a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1b3      	bne.n	800d216 <tcp_fasttmr+0x1a>
    }
  }
}
 800d2ae:	bf00      	nop
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20011812 	.word	0x20011812
 800d2bc:	20011808 	.word	0x20011808
 800d2c0:	20011810 	.word	0x20011810

0800d2c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d2c4:	b590      	push	{r4, r7, lr}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d109      	bne.n	800d2e6 <tcp_process_refused_data+0x22>
 800d2d2:	4b37      	ldr	r3, [pc, #220]	; (800d3b0 <tcp_process_refused_data+0xec>)
 800d2d4:	f240 6209 	movw	r2, #1545	; 0x609
 800d2d8:	4936      	ldr	r1, [pc, #216]	; (800d3b4 <tcp_process_refused_data+0xf0>)
 800d2da:	4837      	ldr	r0, [pc, #220]	; (800d3b8 <tcp_process_refused_data+0xf4>)
 800d2dc:	f007 fee4 	bl	80150a8 <iprintf>
 800d2e0:	f06f 030f 	mvn.w	r3, #15
 800d2e4:	e060      	b.n	800d3a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ea:	7b5b      	ldrb	r3, [r3, #13]
 800d2ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00b      	beq.n	800d31c <tcp_process_refused_data+0x58>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6918      	ldr	r0, [r3, #16]
 800d30e:	2300      	movs	r3, #0
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	6879      	ldr	r1, [r7, #4]
 800d314:	47a0      	blx	r4
 800d316:	4603      	mov	r3, r0
 800d318:	73fb      	strb	r3, [r7, #15]
 800d31a:	e007      	b.n	800d32c <tcp_process_refused_data+0x68>
 800d31c:	2300      	movs	r3, #0
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	6879      	ldr	r1, [r7, #4]
 800d322:	2000      	movs	r0, #0
 800d324:	f000 f8a4 	bl	800d470 <tcp_recv_null>
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d12a      	bne.n	800d38a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	f003 0320 	and.w	r3, r3, #32
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d033      	beq.n	800d3a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d342:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d346:	d005      	beq.n	800d354 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d34c:	3301      	adds	r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00b      	beq.n	800d376 <tcp_process_refused_data+0xb2>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6918      	ldr	r0, [r3, #16]
 800d368:	2300      	movs	r3, #0
 800d36a:	2200      	movs	r2, #0
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	47a0      	blx	r4
 800d370:	4603      	mov	r3, r0
 800d372:	73fb      	strb	r3, [r7, #15]
 800d374:	e001      	b.n	800d37a <tcp_process_refused_data+0xb6>
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d37e:	f113 0f0d 	cmn.w	r3, #13
 800d382:	d110      	bne.n	800d3a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d384:	f06f 030c 	mvn.w	r3, #12
 800d388:	e00e      	b.n	800d3a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d38e:	f113 0f0d 	cmn.w	r3, #13
 800d392:	d102      	bne.n	800d39a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d394:	f06f 030c 	mvn.w	r3, #12
 800d398:	e006      	b.n	800d3a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d3a0:	f06f 0304 	mvn.w	r3, #4
 800d3a4:	e000      	b.n	800d3a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd90      	pop	{r4, r7, pc}
 800d3b0:	0801735c 	.word	0x0801735c
 800d3b4:	0801786c 	.word	0x0801786c
 800d3b8:	080173a0 	.word	0x080173a0

0800d3bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d3c4:	e007      	b.n	800d3d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f80a 	bl	800d3e6 <tcp_seg_free>
    seg = next;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1f4      	bne.n	800d3c6 <tcp_segs_free+0xa>
  }
}
 800d3dc:	bf00      	nop
 800d3de:	bf00      	nop
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00c      	beq.n	800d40e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d004      	beq.n	800d406 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	4618      	mov	r0, r3
 800d402:	f7fe fb6d 	bl	800bae0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d406:	6879      	ldr	r1, [r7, #4]
 800d408:	2002      	movs	r0, #2
 800d40a:	f7fd fcc9 	bl	800ada0 <memp_free>
  }
}
 800d40e:	bf00      	nop
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
	...

0800d418 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d106      	bne.n	800d434 <tcp_seg_copy+0x1c>
 800d426:	4b0f      	ldr	r3, [pc, #60]	; (800d464 <tcp_seg_copy+0x4c>)
 800d428:	f240 6282 	movw	r2, #1666	; 0x682
 800d42c:	490e      	ldr	r1, [pc, #56]	; (800d468 <tcp_seg_copy+0x50>)
 800d42e:	480f      	ldr	r0, [pc, #60]	; (800d46c <tcp_seg_copy+0x54>)
 800d430:	f007 fe3a 	bl	80150a8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d434:	2002      	movs	r0, #2
 800d436:	f7fd fc3d 	bl	800acb4 <memp_malloc>
 800d43a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <tcp_seg_copy+0x2e>
    return NULL;
 800d442:	2300      	movs	r3, #0
 800d444:	e00a      	b.n	800d45c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d446:	2210      	movs	r2, #16
 800d448:	6879      	ldr	r1, [r7, #4]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f007 fd81 	bl	8014f52 <memcpy>
  pbuf_ref(cseg->p);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	4618      	mov	r0, r3
 800d456:	f7fe fbe9 	bl	800bc2c <pbuf_ref>
  return cseg;
 800d45a:	68fb      	ldr	r3, [r7, #12]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	0801735c 	.word	0x0801735c
 800d468:	080178b0 	.word	0x080178b0
 800d46c:	080173a0 	.word	0x080173a0

0800d470 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d109      	bne.n	800d498 <tcp_recv_null+0x28>
 800d484:	4b12      	ldr	r3, [pc, #72]	; (800d4d0 <tcp_recv_null+0x60>)
 800d486:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d48a:	4912      	ldr	r1, [pc, #72]	; (800d4d4 <tcp_recv_null+0x64>)
 800d48c:	4812      	ldr	r0, [pc, #72]	; (800d4d8 <tcp_recv_null+0x68>)
 800d48e:	f007 fe0b 	bl	80150a8 <iprintf>
 800d492:	f06f 030f 	mvn.w	r3, #15
 800d496:	e016      	b.n	800d4c6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d009      	beq.n	800d4b2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	891b      	ldrh	r3, [r3, #8]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	68b8      	ldr	r0, [r7, #8]
 800d4a6:	f7ff fad3 	bl	800ca50 <tcp_recved>
    pbuf_free(p);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7fe fb18 	bl	800bae0 <pbuf_free>
 800d4b0:	e008      	b.n	800d4c4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d4b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d104      	bne.n	800d4c4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d4ba:	68b8      	ldr	r0, [r7, #8]
 800d4bc:	f7fe ffba 	bl	800c434 <tcp_close>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	e000      	b.n	800d4c6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	0801735c 	.word	0x0801735c
 800d4d4:	080178cc 	.word	0x080178cc
 800d4d8:	080173a0 	.word	0x080173a0

0800d4dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b086      	sub	sp, #24
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d4e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	db01      	blt.n	800d4f2 <tcp_kill_prio+0x16>
 800d4ee:	79fb      	ldrb	r3, [r7, #7]
 800d4f0:	e000      	b.n	800d4f4 <tcp_kill_prio+0x18>
 800d4f2:	237f      	movs	r3, #127	; 0x7f
 800d4f4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d4f6:	7afb      	ldrb	r3, [r7, #11]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d034      	beq.n	800d566 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d4fc:	7afb      	ldrb	r3, [r7, #11]
 800d4fe:	3b01      	subs	r3, #1
 800d500:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d506:	2300      	movs	r3, #0
 800d508:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d50a:	4b19      	ldr	r3, [pc, #100]	; (800d570 <tcp_kill_prio+0x94>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	617b      	str	r3, [r7, #20]
 800d510:	e01f      	b.n	800d552 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	7d5b      	ldrb	r3, [r3, #21]
 800d516:	7afa      	ldrb	r2, [r7, #11]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d80c      	bhi.n	800d536 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d520:	7afa      	ldrb	r2, [r7, #11]
 800d522:	429a      	cmp	r2, r3
 800d524:	d112      	bne.n	800d54c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d526:	4b13      	ldr	r3, [pc, #76]	; (800d574 <tcp_kill_prio+0x98>)
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	6a1b      	ldr	r3, [r3, #32]
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	429a      	cmp	r2, r3
 800d534:	d80a      	bhi.n	800d54c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d536:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <tcp_kill_prio+0x98>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	7d5b      	ldrb	r3, [r3, #21]
 800d54a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1dc      	bne.n	800d512 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d004      	beq.n	800d568 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d55e:	6938      	ldr	r0, [r7, #16]
 800d560:	f7ff f8ae 	bl	800c6c0 <tcp_abort>
 800d564:	e000      	b.n	800d568 <tcp_kill_prio+0x8c>
    return;
 800d566:	bf00      	nop
  }
}
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	20011808 	.word	0x20011808
 800d574:	200117fc 	.word	0x200117fc

0800d578 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d582:	79fb      	ldrb	r3, [r7, #7]
 800d584:	2b08      	cmp	r3, #8
 800d586:	d009      	beq.n	800d59c <tcp_kill_state+0x24>
 800d588:	79fb      	ldrb	r3, [r7, #7]
 800d58a:	2b09      	cmp	r3, #9
 800d58c:	d006      	beq.n	800d59c <tcp_kill_state+0x24>
 800d58e:	4b1a      	ldr	r3, [pc, #104]	; (800d5f8 <tcp_kill_state+0x80>)
 800d590:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d594:	4919      	ldr	r1, [pc, #100]	; (800d5fc <tcp_kill_state+0x84>)
 800d596:	481a      	ldr	r0, [pc, #104]	; (800d600 <tcp_kill_state+0x88>)
 800d598:	f007 fd86 	bl	80150a8 <iprintf>

  inactivity = 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5a4:	4b17      	ldr	r3, [pc, #92]	; (800d604 <tcp_kill_state+0x8c>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	617b      	str	r3, [r7, #20]
 800d5aa:	e017      	b.n	800d5dc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	7d1b      	ldrb	r3, [r3, #20]
 800d5b0:	79fa      	ldrb	r2, [r7, #7]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d10f      	bne.n	800d5d6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5b6:	4b14      	ldr	r3, [pc, #80]	; (800d608 <tcp_kill_state+0x90>)
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d807      	bhi.n	800d5d6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d5c6:	4b10      	ldr	r3, [pc, #64]	; (800d608 <tcp_kill_state+0x90>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1e4      	bne.n	800d5ac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d003      	beq.n	800d5f0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	6938      	ldr	r0, [r7, #16]
 800d5ec:	f7fe ffaa 	bl	800c544 <tcp_abandon>
  }
}
 800d5f0:	bf00      	nop
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	0801735c 	.word	0x0801735c
 800d5fc:	080178e8 	.word	0x080178e8
 800d600:	080173a0 	.word	0x080173a0
 800d604:	20011808 	.word	0x20011808
 800d608:	200117fc 	.word	0x200117fc

0800d60c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d61a:	4b12      	ldr	r3, [pc, #72]	; (800d664 <tcp_kill_timewait+0x58>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	e012      	b.n	800d648 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d622:	4b11      	ldr	r3, [pc, #68]	; (800d668 <tcp_kill_timewait+0x5c>)
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6a1b      	ldr	r3, [r3, #32]
 800d62a:	1ad3      	subs	r3, r2, r3
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d807      	bhi.n	800d642 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d632:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <tcp_kill_timewait+0x5c>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1e9      	bne.n	800d622 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d654:	68b8      	ldr	r0, [r7, #8]
 800d656:	f7ff f833 	bl	800c6c0 <tcp_abort>
  }
}
 800d65a:	bf00      	nop
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	2001180c 	.word	0x2001180c
 800d668:	200117fc 	.word	0x200117fc

0800d66c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d672:	4b10      	ldr	r3, [pc, #64]	; (800d6b4 <tcp_handle_closepend+0x48>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d678:	e014      	b.n	800d6a4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	8b5b      	ldrh	r3, [r3, #26]
 800d684:	f003 0308 	and.w	r3, r3, #8
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d009      	beq.n	800d6a0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	8b5b      	ldrh	r3, [r3, #26]
 800d690:	f023 0308 	bic.w	r3, r3, #8
 800d694:	b29a      	uxth	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7fe fe60 	bl	800c360 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e7      	bne.n	800d67a <tcp_handle_closepend+0xe>
  }
}
 800d6aa:	bf00      	nop
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20011808 	.word	0x20011808

0800d6b8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	f7fd faf6 	bl	800acb4 <memp_malloc>
 800d6c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d126      	bne.n	800d71e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d6d0:	f7ff ffcc 	bl	800d66c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d6d4:	f7ff ff9a 	bl	800d60c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6d8:	2000      	movs	r0, #0
 800d6da:	f7fd faeb 	bl	800acb4 <memp_malloc>
 800d6de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d11b      	bne.n	800d71e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d6e6:	2009      	movs	r0, #9
 800d6e8:	f7ff ff46 	bl	800d578 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	f7fd fae1 	bl	800acb4 <memp_malloc>
 800d6f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d111      	bne.n	800d71e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d6fa:	2008      	movs	r0, #8
 800d6fc:	f7ff ff3c 	bl	800d578 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d700:	2000      	movs	r0, #0
 800d702:	f7fd fad7 	bl	800acb4 <memp_malloc>
 800d706:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d107      	bne.n	800d71e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d70e:	79fb      	ldrb	r3, [r7, #7]
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff fee3 	bl	800d4dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d716:	2000      	movs	r0, #0
 800d718:	f7fd facc 	bl	800acb4 <memp_malloc>
 800d71c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d03f      	beq.n	800d7a4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d724:	229c      	movs	r2, #156	; 0x9c
 800d726:	2100      	movs	r1, #0
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f007 fc20 	bl	8014f6e <memset>
    pcb->prio = prio;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	79fa      	ldrb	r2, [r7, #7]
 800d732:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d73a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d744:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	22ff      	movs	r2, #255	; 0xff
 800d752:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d75a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2206      	movs	r2, #6
 800d760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2206      	movs	r2, #6
 800d768:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d770:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2201      	movs	r2, #1
 800d776:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d77a:	4b0d      	ldr	r3, [pc, #52]	; (800d7b0 <tcp_alloc+0xf8>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <tcp_alloc+0xfc>)
 800d784:	781a      	ldrb	r2, [r3, #0]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d790:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	4a08      	ldr	r2, [pc, #32]	; (800d7b8 <tcp_alloc+0x100>)
 800d798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4a07      	ldr	r2, [pc, #28]	; (800d7bc <tcp_alloc+0x104>)
 800d7a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	200117fc 	.word	0x200117fc
 800d7b4:	20011812 	.word	0x20011812
 800d7b8:	0800d471 	.word	0x0800d471
 800d7bc:	006ddd00 	.word	0x006ddd00

0800d7c0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d7ca:	2040      	movs	r0, #64	; 0x40
 800d7cc:	f7ff ff74 	bl	800d6b8 <tcp_alloc>
 800d7d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	611a      	str	r2, [r3, #16]
  }
}
 800d7f2:	bf00      	nop
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
	...

0800d800 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00e      	beq.n	800d82e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d106      	bne.n	800d826 <tcp_recv+0x26>
 800d818:	4b07      	ldr	r3, [pc, #28]	; (800d838 <tcp_recv+0x38>)
 800d81a:	f240 72df 	movw	r2, #2015	; 0x7df
 800d81e:	4907      	ldr	r1, [pc, #28]	; (800d83c <tcp_recv+0x3c>)
 800d820:	4807      	ldr	r0, [pc, #28]	; (800d840 <tcp_recv+0x40>)
 800d822:	f007 fc41 	bl	80150a8 <iprintf>
    pcb->recv = recv;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	683a      	ldr	r2, [r7, #0]
 800d82a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	0801735c 	.word	0x0801735c
 800d83c:	080178f8 	.word	0x080178f8
 800d840:	080173a0 	.word	0x080173a0

0800d844 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00e      	beq.n	800d872 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7d1b      	ldrb	r3, [r3, #20]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d106      	bne.n	800d86a <tcp_sent+0x26>
 800d85c:	4b07      	ldr	r3, [pc, #28]	; (800d87c <tcp_sent+0x38>)
 800d85e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d862:	4907      	ldr	r1, [pc, #28]	; (800d880 <tcp_sent+0x3c>)
 800d864:	4807      	ldr	r0, [pc, #28]	; (800d884 <tcp_sent+0x40>)
 800d866:	f007 fc1f 	bl	80150a8 <iprintf>
    pcb->sent = sent;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d872:	bf00      	nop
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	0801735c 	.word	0x0801735c
 800d880:	08017920 	.word	0x08017920
 800d884:	080173a0 	.word	0x080173a0

0800d888 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00e      	beq.n	800d8b6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d106      	bne.n	800d8ae <tcp_err+0x26>
 800d8a0:	4b07      	ldr	r3, [pc, #28]	; (800d8c0 <tcp_err+0x38>)
 800d8a2:	f640 020d 	movw	r2, #2061	; 0x80d
 800d8a6:	4907      	ldr	r1, [pc, #28]	; (800d8c4 <tcp_err+0x3c>)
 800d8a8:	4807      	ldr	r0, [pc, #28]	; (800d8c8 <tcp_err+0x40>)
 800d8aa:	f007 fbfd 	bl	80150a8 <iprintf>
    pcb->errf = err;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	683a      	ldr	r2, [r7, #0]
 800d8b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d8b6:	bf00      	nop
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	0801735c 	.word	0x0801735c
 800d8c4:	08017948 	.word	0x08017948
 800d8c8:	080173a0 	.word	0x080173a0

0800d8cc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d008      	beq.n	800d8ee <tcp_accept+0x22>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7d1b      	ldrb	r3, [r3, #20]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d104      	bne.n	800d8ee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	619a      	str	r2, [r3, #24]
  }
}
 800d8ee:	bf00      	nop
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
	...

0800d8fc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	4613      	mov	r3, r2
 800d908:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d107      	bne.n	800d920 <tcp_poll+0x24>
 800d910:	4b0e      	ldr	r3, [pc, #56]	; (800d94c <tcp_poll+0x50>)
 800d912:	f640 023d 	movw	r2, #2109	; 0x83d
 800d916:	490e      	ldr	r1, [pc, #56]	; (800d950 <tcp_poll+0x54>)
 800d918:	480e      	ldr	r0, [pc, #56]	; (800d954 <tcp_poll+0x58>)
 800d91a:	f007 fbc5 	bl	80150a8 <iprintf>
 800d91e:	e011      	b.n	800d944 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	7d1b      	ldrb	r3, [r3, #20]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d106      	bne.n	800d936 <tcp_poll+0x3a>
 800d928:	4b08      	ldr	r3, [pc, #32]	; (800d94c <tcp_poll+0x50>)
 800d92a:	f640 023e 	movw	r2, #2110	; 0x83e
 800d92e:	490a      	ldr	r1, [pc, #40]	; (800d958 <tcp_poll+0x5c>)
 800d930:	4808      	ldr	r0, [pc, #32]	; (800d954 <tcp_poll+0x58>)
 800d932:	f007 fbb9 	bl	80150a8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	79fa      	ldrb	r2, [r7, #7]
 800d942:	775a      	strb	r2, [r3, #29]
}
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	0801735c 	.word	0x0801735c
 800d950:	08017970 	.word	0x08017970
 800d954:	080173a0 	.word	0x080173a0
 800d958:	08017988 	.word	0x08017988

0800d95c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d107      	bne.n	800d97a <tcp_pcb_purge+0x1e>
 800d96a:	4b21      	ldr	r3, [pc, #132]	; (800d9f0 <tcp_pcb_purge+0x94>)
 800d96c:	f640 0251 	movw	r2, #2129	; 0x851
 800d970:	4920      	ldr	r1, [pc, #128]	; (800d9f4 <tcp_pcb_purge+0x98>)
 800d972:	4821      	ldr	r0, [pc, #132]	; (800d9f8 <tcp_pcb_purge+0x9c>)
 800d974:	f007 fb98 	bl	80150a8 <iprintf>
 800d978:	e037      	b.n	800d9ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	7d1b      	ldrb	r3, [r3, #20]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d033      	beq.n	800d9ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d986:	2b0a      	cmp	r3, #10
 800d988:	d02f      	beq.n	800d9ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d02b      	beq.n	800d9ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d996:	2b00      	cmp	r3, #0
 800d998:	d007      	beq.n	800d9aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe f89e 	bl	800bae0 <pbuf_free>
      pcb->refused_data = NULL;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d002      	beq.n	800d9b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f986 	bl	800dcc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff fcf9 	bl	800d3bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff fcf4 	bl	800d3bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	0801735c 	.word	0x0801735c
 800d9f4:	080179a8 	.word	0x080179a8
 800d9f8:	080173a0 	.word	0x080173a0

0800d9fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <tcp_pcb_remove+0x1e>
 800da0c:	4b3e      	ldr	r3, [pc, #248]	; (800db08 <tcp_pcb_remove+0x10c>)
 800da0e:	f640 0283 	movw	r2, #2179	; 0x883
 800da12:	493e      	ldr	r1, [pc, #248]	; (800db0c <tcp_pcb_remove+0x110>)
 800da14:	483e      	ldr	r0, [pc, #248]	; (800db10 <tcp_pcb_remove+0x114>)
 800da16:	f007 fb47 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d106      	bne.n	800da2e <tcp_pcb_remove+0x32>
 800da20:	4b39      	ldr	r3, [pc, #228]	; (800db08 <tcp_pcb_remove+0x10c>)
 800da22:	f640 0284 	movw	r2, #2180	; 0x884
 800da26:	493b      	ldr	r1, [pc, #236]	; (800db14 <tcp_pcb_remove+0x118>)
 800da28:	4839      	ldr	r0, [pc, #228]	; (800db10 <tcp_pcb_remove+0x114>)
 800da2a:	f007 fb3d 	bl	80150a8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	429a      	cmp	r2, r3
 800da36:	d105      	bne.n	800da44 <tcp_pcb_remove+0x48>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	e013      	b.n	800da6c <tcp_pcb_remove+0x70>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	60fb      	str	r3, [r7, #12]
 800da4a:	e00c      	b.n	800da66 <tcp_pcb_remove+0x6a>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	683a      	ldr	r2, [r7, #0]
 800da52:	429a      	cmp	r2, r3
 800da54:	d104      	bne.n	800da60 <tcp_pcb_remove+0x64>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	60da      	str	r2, [r3, #12]
 800da5e:	e005      	b.n	800da6c <tcp_pcb_remove+0x70>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1ef      	bne.n	800da4c <tcp_pcb_remove+0x50>
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	2200      	movs	r2, #0
 800da70:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800da72:	6838      	ldr	r0, [r7, #0]
 800da74:	f7ff ff72 	bl	800d95c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	7d1b      	ldrb	r3, [r3, #20]
 800da7c:	2b0a      	cmp	r3, #10
 800da7e:	d013      	beq.n	800daa8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800da84:	2b01      	cmp	r3, #1
 800da86:	d00f      	beq.n	800daa8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	8b5b      	ldrh	r3, [r3, #26]
 800da8c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800da90:	2b00      	cmp	r3, #0
 800da92:	d009      	beq.n	800daa8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	8b5b      	ldrh	r3, [r3, #26]
 800da98:	f043 0302 	orr.w	r3, r3, #2
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800daa2:	6838      	ldr	r0, [r7, #0]
 800daa4:	f003 fbc6 	bl	8011234 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	7d1b      	ldrb	r3, [r3, #20]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d020      	beq.n	800daf2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d006      	beq.n	800dac6 <tcp_pcb_remove+0xca>
 800dab8:	4b13      	ldr	r3, [pc, #76]	; (800db08 <tcp_pcb_remove+0x10c>)
 800daba:	f640 0293 	movw	r2, #2195	; 0x893
 800dabe:	4916      	ldr	r1, [pc, #88]	; (800db18 <tcp_pcb_remove+0x11c>)
 800dac0:	4813      	ldr	r0, [pc, #76]	; (800db10 <tcp_pcb_remove+0x114>)
 800dac2:	f007 faf1 	bl	80150a8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d006      	beq.n	800dadc <tcp_pcb_remove+0xe0>
 800dace:	4b0e      	ldr	r3, [pc, #56]	; (800db08 <tcp_pcb_remove+0x10c>)
 800dad0:	f640 0294 	movw	r2, #2196	; 0x894
 800dad4:	4911      	ldr	r1, [pc, #68]	; (800db1c <tcp_pcb_remove+0x120>)
 800dad6:	480e      	ldr	r0, [pc, #56]	; (800db10 <tcp_pcb_remove+0x114>)
 800dad8:	f007 fae6 	bl	80150a8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d006      	beq.n	800daf2 <tcp_pcb_remove+0xf6>
 800dae4:	4b08      	ldr	r3, [pc, #32]	; (800db08 <tcp_pcb_remove+0x10c>)
 800dae6:	f640 0296 	movw	r2, #2198	; 0x896
 800daea:	490d      	ldr	r1, [pc, #52]	; (800db20 <tcp_pcb_remove+0x124>)
 800daec:	4808      	ldr	r0, [pc, #32]	; (800db10 <tcp_pcb_remove+0x114>)
 800daee:	f007 fadb 	bl	80150a8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2200      	movs	r2, #0
 800daf6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2200      	movs	r2, #0
 800dafc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dafe:	bf00      	nop
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	0801735c 	.word	0x0801735c
 800db0c:	080179c4 	.word	0x080179c4
 800db10:	080173a0 	.word	0x080173a0
 800db14:	080179e0 	.word	0x080179e0
 800db18:	08017a00 	.word	0x08017a00
 800db1c:	08017a18 	.word	0x08017a18
 800db20:	08017a34 	.word	0x08017a34

0800db24 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d106      	bne.n	800db40 <tcp_next_iss+0x1c>
 800db32:	4b0a      	ldr	r3, [pc, #40]	; (800db5c <tcp_next_iss+0x38>)
 800db34:	f640 02af 	movw	r2, #2223	; 0x8af
 800db38:	4909      	ldr	r1, [pc, #36]	; (800db60 <tcp_next_iss+0x3c>)
 800db3a:	480a      	ldr	r0, [pc, #40]	; (800db64 <tcp_next_iss+0x40>)
 800db3c:	f007 fab4 	bl	80150a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800db40:	4b09      	ldr	r3, [pc, #36]	; (800db68 <tcp_next_iss+0x44>)
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	4b09      	ldr	r3, [pc, #36]	; (800db6c <tcp_next_iss+0x48>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4413      	add	r3, r2
 800db4a:	4a07      	ldr	r2, [pc, #28]	; (800db68 <tcp_next_iss+0x44>)
 800db4c:	6013      	str	r3, [r2, #0]
  return iss;
 800db4e:	4b06      	ldr	r3, [pc, #24]	; (800db68 <tcp_next_iss+0x44>)
 800db50:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800db52:	4618      	mov	r0, r3
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	0801735c 	.word	0x0801735c
 800db60:	08017a4c 	.word	0x08017a4c
 800db64:	080173a0 	.word	0x080173a0
 800db68:	20000028 	.word	0x20000028
 800db6c:	200117fc 	.word	0x200117fc

0800db70 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	4603      	mov	r3, r0
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d106      	bne.n	800db92 <tcp_eff_send_mss_netif+0x22>
 800db84:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <tcp_eff_send_mss_netif+0x68>)
 800db86:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800db8a:	4914      	ldr	r1, [pc, #80]	; (800dbdc <tcp_eff_send_mss_netif+0x6c>)
 800db8c:	4814      	ldr	r0, [pc, #80]	; (800dbe0 <tcp_eff_send_mss_netif+0x70>)
 800db8e:	f007 fa8b 	bl	80150a8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d101      	bne.n	800db9c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800db98:	89fb      	ldrh	r3, [r7, #14]
 800db9a:	e019      	b.n	800dbd0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dba0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dba2:	8afb      	ldrh	r3, [r7, #22]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d012      	beq.n	800dbce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dba8:	2328      	movs	r3, #40	; 0x28
 800dbaa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dbac:	8afa      	ldrh	r2, [r7, #22]
 800dbae:	8abb      	ldrh	r3, [r7, #20]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d904      	bls.n	800dbbe <tcp_eff_send_mss_netif+0x4e>
 800dbb4:	8afa      	ldrh	r2, [r7, #22]
 800dbb6:	8abb      	ldrh	r3, [r7, #20]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	e000      	b.n	800dbc0 <tcp_eff_send_mss_netif+0x50>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dbc2:	8a7a      	ldrh	r2, [r7, #18]
 800dbc4:	89fb      	ldrh	r3, [r7, #14]
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	bf28      	it	cs
 800dbca:	4613      	movcs	r3, r2
 800dbcc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dbce:	89fb      	ldrh	r3, [r7, #14]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	0801735c 	.word	0x0801735c
 800dbdc:	08017a68 	.word	0x08017a68
 800dbe0:	080173a0 	.word	0x080173a0

0800dbe4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d119      	bne.n	800dc2c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dbf8:	4b10      	ldr	r3, [pc, #64]	; (800dc3c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dbfa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dbfe:	4910      	ldr	r1, [pc, #64]	; (800dc40 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dc00:	4810      	ldr	r0, [pc, #64]	; (800dc44 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dc02:	f007 fa51 	bl	80150a8 <iprintf>

  while (pcb != NULL) {
 800dc06:	e011      	b.n	800dc2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d108      	bne.n	800dc26 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f7fe fd50 	bl	800c6c0 <tcp_abort>
      pcb = next;
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	60fb      	str	r3, [r7, #12]
 800dc24:	e002      	b.n	800dc2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d1ea      	bne.n	800dc08 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dc32:	bf00      	nop
 800dc34:	bf00      	nop
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	0801735c 	.word	0x0801735c
 800dc40:	08017a90 	.word	0x08017a90
 800dc44:	080173a0 	.word	0x080173a0

0800dc48 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d02a      	beq.n	800dcae <tcp_netif_ip_addr_changed+0x66>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d026      	beq.n	800dcae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dc60:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <tcp_netif_ip_addr_changed+0x70>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff ffbc 	bl	800dbe4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dc6c:	4b13      	ldr	r3, [pc, #76]	; (800dcbc <tcp_netif_ip_addr_changed+0x74>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4619      	mov	r1, r3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7ff ffb6 	bl	800dbe4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d017      	beq.n	800dcae <tcp_netif_ip_addr_changed+0x66>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d013      	beq.n	800dcae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc86:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <tcp_netif_ip_addr_changed+0x78>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	60fb      	str	r3, [r7, #12]
 800dc8c:	e00c      	b.n	800dca8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d103      	bne.n	800dca2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	60fb      	str	r3, [r7, #12]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1ef      	bne.n	800dc8e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dcae:	bf00      	nop
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20011808 	.word	0x20011808
 800dcbc:	20011800 	.word	0x20011800
 800dcc0:	20011804 	.word	0x20011804

0800dcc4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d007      	beq.n	800dce4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7ff fb6f 	bl	800d3bc <tcp_segs_free>
    pcb->ooseq = NULL;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dcec:	b590      	push	{r4, r7, lr}
 800dcee:	b08d      	sub	sp, #52	; 0x34
 800dcf0:	af04      	add	r7, sp, #16
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d105      	bne.n	800dd08 <tcp_input+0x1c>
 800dcfc:	4b9b      	ldr	r3, [pc, #620]	; (800df6c <tcp_input+0x280>)
 800dcfe:	2283      	movs	r2, #131	; 0x83
 800dd00:	499b      	ldr	r1, [pc, #620]	; (800df70 <tcp_input+0x284>)
 800dd02:	489c      	ldr	r0, [pc, #624]	; (800df74 <tcp_input+0x288>)
 800dd04:	f007 f9d0 	bl	80150a8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	4a9a      	ldr	r2, [pc, #616]	; (800df78 <tcp_input+0x28c>)
 800dd0e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	895b      	ldrh	r3, [r3, #10]
 800dd14:	2b13      	cmp	r3, #19
 800dd16:	f240 83d1 	bls.w	800e4bc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd1a:	4b98      	ldr	r3, [pc, #608]	; (800df7c <tcp_input+0x290>)
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	4a97      	ldr	r2, [pc, #604]	; (800df7c <tcp_input+0x290>)
 800dd20:	6812      	ldr	r2, [r2, #0]
 800dd22:	4611      	mov	r1, r2
 800dd24:	4618      	mov	r0, r3
 800dd26:	f005 fedb 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f040 83c7 	bne.w	800e4c0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dd32:	4b92      	ldr	r3, [pc, #584]	; (800df7c <tcp_input+0x290>)
 800dd34:	695b      	ldr	r3, [r3, #20]
 800dd36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd3a:	2be0      	cmp	r3, #224	; 0xe0
 800dd3c:	f000 83c0 	beq.w	800e4c0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dd40:	4b8d      	ldr	r3, [pc, #564]	; (800df78 <tcp_input+0x28c>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	899b      	ldrh	r3, [r3, #12]
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fc fadd 	bl	800a308 <lwip_htons>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	0b1b      	lsrs	r3, r3, #12
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dd5a:	7cbb      	ldrb	r3, [r7, #18]
 800dd5c:	2b13      	cmp	r3, #19
 800dd5e:	f240 83b1 	bls.w	800e4c4 <tcp_input+0x7d8>
 800dd62:	7cbb      	ldrb	r3, [r7, #18]
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	891b      	ldrh	r3, [r3, #8]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	f200 83aa 	bhi.w	800e4c4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dd70:	7cbb      	ldrb	r3, [r7, #18]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	3b14      	subs	r3, #20
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	4b81      	ldr	r3, [pc, #516]	; (800df80 <tcp_input+0x294>)
 800dd7a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dd7c:	4b81      	ldr	r3, [pc, #516]	; (800df84 <tcp_input+0x298>)
 800dd7e:	2200      	movs	r2, #0
 800dd80:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	895a      	ldrh	r2, [r3, #10]
 800dd86:	7cbb      	ldrb	r3, [r7, #18]
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d309      	bcc.n	800dda2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dd8e:	4b7c      	ldr	r3, [pc, #496]	; (800df80 <tcp_input+0x294>)
 800dd90:	881a      	ldrh	r2, [r3, #0]
 800dd92:	4b7d      	ldr	r3, [pc, #500]	; (800df88 <tcp_input+0x29c>)
 800dd94:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dd96:	7cbb      	ldrb	r3, [r7, #18]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7fd fe1a 	bl	800b9d4 <pbuf_remove_header>
 800dda0:	e04e      	b.n	800de40 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d105      	bne.n	800ddb6 <tcp_input+0xca>
 800ddaa:	4b70      	ldr	r3, [pc, #448]	; (800df6c <tcp_input+0x280>)
 800ddac:	22c2      	movs	r2, #194	; 0xc2
 800ddae:	4977      	ldr	r1, [pc, #476]	; (800df8c <tcp_input+0x2a0>)
 800ddb0:	4870      	ldr	r0, [pc, #448]	; (800df74 <tcp_input+0x288>)
 800ddb2:	f007 f979 	bl	80150a8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ddb6:	2114      	movs	r1, #20
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7fd fe0b 	bl	800b9d4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	895a      	ldrh	r2, [r3, #10]
 800ddc2:	4b71      	ldr	r3, [pc, #452]	; (800df88 <tcp_input+0x29c>)
 800ddc4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ddc6:	4b6e      	ldr	r3, [pc, #440]	; (800df80 <tcp_input+0x294>)
 800ddc8:	881a      	ldrh	r2, [r3, #0]
 800ddca:	4b6f      	ldr	r3, [pc, #444]	; (800df88 <tcp_input+0x29c>)
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ddd2:	4b6d      	ldr	r3, [pc, #436]	; (800df88 <tcp_input+0x29c>)
 800ddd4:	881b      	ldrh	r3, [r3, #0]
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7fd fdfb 	bl	800b9d4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	895b      	ldrh	r3, [r3, #10]
 800dde4:	8a3a      	ldrh	r2, [r7, #16]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	f200 836e 	bhi.w	800e4c8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	4a64      	ldr	r2, [pc, #400]	; (800df84 <tcp_input+0x298>)
 800ddf4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	8a3a      	ldrh	r2, [r7, #16]
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fd fde8 	bl	800b9d4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	891a      	ldrh	r2, [r3, #8]
 800de08:	8a3b      	ldrh	r3, [r7, #16]
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	895b      	ldrh	r3, [r3, #10]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d005      	beq.n	800de26 <tcp_input+0x13a>
 800de1a:	4b54      	ldr	r3, [pc, #336]	; (800df6c <tcp_input+0x280>)
 800de1c:	22df      	movs	r2, #223	; 0xdf
 800de1e:	495c      	ldr	r1, [pc, #368]	; (800df90 <tcp_input+0x2a4>)
 800de20:	4854      	ldr	r0, [pc, #336]	; (800df74 <tcp_input+0x288>)
 800de22:	f007 f941 	bl	80150a8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	891a      	ldrh	r2, [r3, #8]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	891b      	ldrh	r3, [r3, #8]
 800de30:	429a      	cmp	r2, r3
 800de32:	d005      	beq.n	800de40 <tcp_input+0x154>
 800de34:	4b4d      	ldr	r3, [pc, #308]	; (800df6c <tcp_input+0x280>)
 800de36:	22e0      	movs	r2, #224	; 0xe0
 800de38:	4956      	ldr	r1, [pc, #344]	; (800df94 <tcp_input+0x2a8>)
 800de3a:	484e      	ldr	r0, [pc, #312]	; (800df74 <tcp_input+0x288>)
 800de3c:	f007 f934 	bl	80150a8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800de40:	4b4d      	ldr	r3, [pc, #308]	; (800df78 <tcp_input+0x28c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	b29b      	uxth	r3, r3
 800de48:	4a4b      	ldr	r2, [pc, #300]	; (800df78 <tcp_input+0x28c>)
 800de4a:	6814      	ldr	r4, [r2, #0]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fc fa5b 	bl	800a308 <lwip_htons>
 800de52:	4603      	mov	r3, r0
 800de54:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800de56:	4b48      	ldr	r3, [pc, #288]	; (800df78 <tcp_input+0x28c>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	885b      	ldrh	r3, [r3, #2]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	4a46      	ldr	r2, [pc, #280]	; (800df78 <tcp_input+0x28c>)
 800de60:	6814      	ldr	r4, [r2, #0]
 800de62:	4618      	mov	r0, r3
 800de64:	f7fc fa50 	bl	800a308 <lwip_htons>
 800de68:	4603      	mov	r3, r0
 800de6a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800de6c:	4b42      	ldr	r3, [pc, #264]	; (800df78 <tcp_input+0x28c>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	4a41      	ldr	r2, [pc, #260]	; (800df78 <tcp_input+0x28c>)
 800de74:	6814      	ldr	r4, [r2, #0]
 800de76:	4618      	mov	r0, r3
 800de78:	f7fc fa5b 	bl	800a332 <lwip_htonl>
 800de7c:	4603      	mov	r3, r0
 800de7e:	6063      	str	r3, [r4, #4]
 800de80:	6863      	ldr	r3, [r4, #4]
 800de82:	4a45      	ldr	r2, [pc, #276]	; (800df98 <tcp_input+0x2ac>)
 800de84:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800de86:	4b3c      	ldr	r3, [pc, #240]	; (800df78 <tcp_input+0x28c>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	4a3a      	ldr	r2, [pc, #232]	; (800df78 <tcp_input+0x28c>)
 800de8e:	6814      	ldr	r4, [r2, #0]
 800de90:	4618      	mov	r0, r3
 800de92:	f7fc fa4e 	bl	800a332 <lwip_htonl>
 800de96:	4603      	mov	r3, r0
 800de98:	60a3      	str	r3, [r4, #8]
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	4a3f      	ldr	r2, [pc, #252]	; (800df9c <tcp_input+0x2b0>)
 800de9e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dea0:	4b35      	ldr	r3, [pc, #212]	; (800df78 <tcp_input+0x28c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	89db      	ldrh	r3, [r3, #14]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	4a33      	ldr	r2, [pc, #204]	; (800df78 <tcp_input+0x28c>)
 800deaa:	6814      	ldr	r4, [r2, #0]
 800deac:	4618      	mov	r0, r3
 800deae:	f7fc fa2b 	bl	800a308 <lwip_htons>
 800deb2:	4603      	mov	r3, r0
 800deb4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800deb6:	4b30      	ldr	r3, [pc, #192]	; (800df78 <tcp_input+0x28c>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	899b      	ldrh	r3, [r3, #12]
 800debc:	b29b      	uxth	r3, r3
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fc fa22 	bl	800a308 <lwip_htons>
 800dec4:	4603      	mov	r3, r0
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800decc:	b2da      	uxtb	r2, r3
 800dece:	4b34      	ldr	r3, [pc, #208]	; (800dfa0 <tcp_input+0x2b4>)
 800ded0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	891a      	ldrh	r2, [r3, #8]
 800ded6:	4b33      	ldr	r3, [pc, #204]	; (800dfa4 <tcp_input+0x2b8>)
 800ded8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800deda:	4b31      	ldr	r3, [pc, #196]	; (800dfa0 <tcp_input+0x2b4>)
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	f003 0303 	and.w	r3, r3, #3
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00c      	beq.n	800df00 <tcp_input+0x214>
    tcplen++;
 800dee6:	4b2f      	ldr	r3, [pc, #188]	; (800dfa4 <tcp_input+0x2b8>)
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	3301      	adds	r3, #1
 800deec:	b29a      	uxth	r2, r3
 800deee:	4b2d      	ldr	r3, [pc, #180]	; (800dfa4 <tcp_input+0x2b8>)
 800def0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	891a      	ldrh	r2, [r3, #8]
 800def6:	4b2b      	ldr	r3, [pc, #172]	; (800dfa4 <tcp_input+0x2b8>)
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	429a      	cmp	r2, r3
 800defc:	f200 82e6 	bhi.w	800e4cc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800df00:	2300      	movs	r3, #0
 800df02:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df04:	4b28      	ldr	r3, [pc, #160]	; (800dfa8 <tcp_input+0x2bc>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	61fb      	str	r3, [r7, #28]
 800df0a:	e09d      	b.n	800e048 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d105      	bne.n	800df20 <tcp_input+0x234>
 800df14:	4b15      	ldr	r3, [pc, #84]	; (800df6c <tcp_input+0x280>)
 800df16:	22fb      	movs	r2, #251	; 0xfb
 800df18:	4924      	ldr	r1, [pc, #144]	; (800dfac <tcp_input+0x2c0>)
 800df1a:	4816      	ldr	r0, [pc, #88]	; (800df74 <tcp_input+0x288>)
 800df1c:	f007 f8c4 	bl	80150a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	7d1b      	ldrb	r3, [r3, #20]
 800df24:	2b0a      	cmp	r3, #10
 800df26:	d105      	bne.n	800df34 <tcp_input+0x248>
 800df28:	4b10      	ldr	r3, [pc, #64]	; (800df6c <tcp_input+0x280>)
 800df2a:	22fc      	movs	r2, #252	; 0xfc
 800df2c:	4920      	ldr	r1, [pc, #128]	; (800dfb0 <tcp_input+0x2c4>)
 800df2e:	4811      	ldr	r0, [pc, #68]	; (800df74 <tcp_input+0x288>)
 800df30:	f007 f8ba 	bl	80150a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	7d1b      	ldrb	r3, [r3, #20]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d105      	bne.n	800df48 <tcp_input+0x25c>
 800df3c:	4b0b      	ldr	r3, [pc, #44]	; (800df6c <tcp_input+0x280>)
 800df3e:	22fd      	movs	r2, #253	; 0xfd
 800df40:	491c      	ldr	r1, [pc, #112]	; (800dfb4 <tcp_input+0x2c8>)
 800df42:	480c      	ldr	r0, [pc, #48]	; (800df74 <tcp_input+0x288>)
 800df44:	f007 f8b0 	bl	80150a8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	7a1b      	ldrb	r3, [r3, #8]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d033      	beq.n	800dfb8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	7a1a      	ldrb	r2, [r3, #8]
 800df54:	4b09      	ldr	r3, [pc, #36]	; (800df7c <tcp_input+0x290>)
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df5c:	3301      	adds	r3, #1
 800df5e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df60:	429a      	cmp	r2, r3
 800df62:	d029      	beq.n	800dfb8 <tcp_input+0x2cc>
      prev = pcb;
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	61bb      	str	r3, [r7, #24]
      continue;
 800df68:	e06b      	b.n	800e042 <tcp_input+0x356>
 800df6a:	bf00      	nop
 800df6c:	08017ac4 	.word	0x08017ac4
 800df70:	08017af8 	.word	0x08017af8
 800df74:	08017b10 	.word	0x08017b10
 800df78:	20011824 	.word	0x20011824
 800df7c:	20009770 	.word	0x20009770
 800df80:	20011828 	.word	0x20011828
 800df84:	2001182c 	.word	0x2001182c
 800df88:	2001182a 	.word	0x2001182a
 800df8c:	08017b38 	.word	0x08017b38
 800df90:	08017b48 	.word	0x08017b48
 800df94:	08017b54 	.word	0x08017b54
 800df98:	20011834 	.word	0x20011834
 800df9c:	20011838 	.word	0x20011838
 800dfa0:	20011840 	.word	0x20011840
 800dfa4:	2001183e 	.word	0x2001183e
 800dfa8:	20011808 	.word	0x20011808
 800dfac:	08017b74 	.word	0x08017b74
 800dfb0:	08017b9c 	.word	0x08017b9c
 800dfb4:	08017bc8 	.word	0x08017bc8
    }

    if (pcb->remote_port == tcphdr->src &&
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	8b1a      	ldrh	r2, [r3, #24]
 800dfbc:	4b72      	ldr	r3, [pc, #456]	; (800e188 <tcp_input+0x49c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d13a      	bne.n	800e03e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	8ada      	ldrh	r2, [r3, #22]
 800dfcc:	4b6e      	ldr	r3, [pc, #440]	; (800e188 <tcp_input+0x49c>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	885b      	ldrh	r3, [r3, #2]
 800dfd2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d132      	bne.n	800e03e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	4b6b      	ldr	r3, [pc, #428]	; (800e18c <tcp_input+0x4a0>)
 800dfde:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d12c      	bne.n	800e03e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	4b68      	ldr	r3, [pc, #416]	; (800e18c <tcp_input+0x4a0>)
 800dfea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d126      	bne.n	800e03e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	69fa      	ldr	r2, [r7, #28]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d106      	bne.n	800e008 <tcp_input+0x31c>
 800dffa:	4b65      	ldr	r3, [pc, #404]	; (800e190 <tcp_input+0x4a4>)
 800dffc:	f240 120d 	movw	r2, #269	; 0x10d
 800e000:	4964      	ldr	r1, [pc, #400]	; (800e194 <tcp_input+0x4a8>)
 800e002:	4865      	ldr	r0, [pc, #404]	; (800e198 <tcp_input+0x4ac>)
 800e004:	f007 f850 	bl	80150a8 <iprintf>
      if (prev != NULL) {
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00a      	beq.n	800e024 <tcp_input+0x338>
        prev->next = pcb->next;
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	68da      	ldr	r2, [r3, #12]
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e016:	4b61      	ldr	r3, [pc, #388]	; (800e19c <tcp_input+0x4b0>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e01e:	4a5f      	ldr	r2, [pc, #380]	; (800e19c <tcp_input+0x4b0>)
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	69fa      	ldr	r2, [r7, #28]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d111      	bne.n	800e052 <tcp_input+0x366>
 800e02e:	4b58      	ldr	r3, [pc, #352]	; (800e190 <tcp_input+0x4a4>)
 800e030:	f240 1215 	movw	r2, #277	; 0x115
 800e034:	495a      	ldr	r1, [pc, #360]	; (800e1a0 <tcp_input+0x4b4>)
 800e036:	4858      	ldr	r0, [pc, #352]	; (800e198 <tcp_input+0x4ac>)
 800e038:	f007 f836 	bl	80150a8 <iprintf>
      break;
 800e03c:	e009      	b.n	800e052 <tcp_input+0x366>
    }
    prev = pcb;
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	61fb      	str	r3, [r7, #28]
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f47f af5e 	bne.w	800df0c <tcp_input+0x220>
 800e050:	e000      	b.n	800e054 <tcp_input+0x368>
      break;
 800e052:	bf00      	nop
  }

  if (pcb == NULL) {
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	2b00      	cmp	r3, #0
 800e058:	f040 80aa 	bne.w	800e1b0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e05c:	4b51      	ldr	r3, [pc, #324]	; (800e1a4 <tcp_input+0x4b8>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	61fb      	str	r3, [r7, #28]
 800e062:	e03f      	b.n	800e0e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	7d1b      	ldrb	r3, [r3, #20]
 800e068:	2b0a      	cmp	r3, #10
 800e06a:	d006      	beq.n	800e07a <tcp_input+0x38e>
 800e06c:	4b48      	ldr	r3, [pc, #288]	; (800e190 <tcp_input+0x4a4>)
 800e06e:	f240 121f 	movw	r2, #287	; 0x11f
 800e072:	494d      	ldr	r1, [pc, #308]	; (800e1a8 <tcp_input+0x4bc>)
 800e074:	4848      	ldr	r0, [pc, #288]	; (800e198 <tcp_input+0x4ac>)
 800e076:	f007 f817 	bl	80150a8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	7a1b      	ldrb	r3, [r3, #8]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d009      	beq.n	800e096 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	7a1a      	ldrb	r2, [r3, #8]
 800e086:	4b41      	ldr	r3, [pc, #260]	; (800e18c <tcp_input+0x4a0>)
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e08e:	3301      	adds	r3, #1
 800e090:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e092:	429a      	cmp	r2, r3
 800e094:	d122      	bne.n	800e0dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	8b1a      	ldrh	r2, [r3, #24]
 800e09a:	4b3b      	ldr	r3, [pc, #236]	; (800e188 <tcp_input+0x49c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	881b      	ldrh	r3, [r3, #0]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d11b      	bne.n	800e0de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	8ada      	ldrh	r2, [r3, #22]
 800e0aa:	4b37      	ldr	r3, [pc, #220]	; (800e188 <tcp_input+0x49c>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	885b      	ldrh	r3, [r3, #2]
 800e0b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d113      	bne.n	800e0de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	685a      	ldr	r2, [r3, #4]
 800e0ba:	4b34      	ldr	r3, [pc, #208]	; (800e18c <tcp_input+0x4a0>)
 800e0bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d10d      	bne.n	800e0de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	4b31      	ldr	r3, [pc, #196]	; (800e18c <tcp_input+0x4a0>)
 800e0c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d107      	bne.n	800e0de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e0ce:	69f8      	ldr	r0, [r7, #28]
 800e0d0:	f000 fb56 	bl	800e780 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7fd fd03 	bl	800bae0 <pbuf_free>
        return;
 800e0da:	e1fd      	b.n	800e4d8 <tcp_input+0x7ec>
        continue;
 800e0dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	61fb      	str	r3, [r7, #28]
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d1bc      	bne.n	800e064 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e0ee:	4b2f      	ldr	r3, [pc, #188]	; (800e1ac <tcp_input+0x4c0>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	617b      	str	r3, [r7, #20]
 800e0f4:	e02a      	b.n	800e14c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	7a1b      	ldrb	r3, [r3, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00c      	beq.n	800e118 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	7a1a      	ldrb	r2, [r3, #8]
 800e102:	4b22      	ldr	r3, [pc, #136]	; (800e18c <tcp_input+0x4a0>)
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e10a:	3301      	adds	r3, #1
 800e10c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e10e:	429a      	cmp	r2, r3
 800e110:	d002      	beq.n	800e118 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	61bb      	str	r3, [r7, #24]
        continue;
 800e116:	e016      	b.n	800e146 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	8ada      	ldrh	r2, [r3, #22]
 800e11c:	4b1a      	ldr	r3, [pc, #104]	; (800e188 <tcp_input+0x49c>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	885b      	ldrh	r3, [r3, #2]
 800e122:	b29b      	uxth	r3, r3
 800e124:	429a      	cmp	r2, r3
 800e126:	d10c      	bne.n	800e142 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	4b17      	ldr	r3, [pc, #92]	; (800e18c <tcp_input+0x4a0>)
 800e12e:	695b      	ldr	r3, [r3, #20]
 800e130:	429a      	cmp	r2, r3
 800e132:	d00f      	beq.n	800e154 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00d      	beq.n	800e156 <tcp_input+0x46a>
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d009      	beq.n	800e156 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	617b      	str	r3, [r7, #20]
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1d1      	bne.n	800e0f6 <tcp_input+0x40a>
 800e152:	e000      	b.n	800e156 <tcp_input+0x46a>
            break;
 800e154:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d029      	beq.n	800e1b0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00a      	beq.n	800e178 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	68da      	ldr	r2, [r3, #12]
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e16a:	4b10      	ldr	r3, [pc, #64]	; (800e1ac <tcp_input+0x4c0>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e172:	4a0e      	ldr	r2, [pc, #56]	; (800e1ac <tcp_input+0x4c0>)
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e178:	6978      	ldr	r0, [r7, #20]
 800e17a:	f000 fa03 	bl	800e584 <tcp_listen_input>
      }
      pbuf_free(p);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7fd fcae 	bl	800bae0 <pbuf_free>
      return;
 800e184:	e1a8      	b.n	800e4d8 <tcp_input+0x7ec>
 800e186:	bf00      	nop
 800e188:	20011824 	.word	0x20011824
 800e18c:	20009770 	.word	0x20009770
 800e190:	08017ac4 	.word	0x08017ac4
 800e194:	08017bf0 	.word	0x08017bf0
 800e198:	08017b10 	.word	0x08017b10
 800e19c:	20011808 	.word	0x20011808
 800e1a0:	08017c1c 	.word	0x08017c1c
 800e1a4:	2001180c 	.word	0x2001180c
 800e1a8:	08017c48 	.word	0x08017c48
 800e1ac:	20011804 	.word	0x20011804
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f000 8158 	beq.w	800e468 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e1b8:	4b95      	ldr	r3, [pc, #596]	; (800e410 <tcp_input+0x724>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	891a      	ldrh	r2, [r3, #8]
 800e1c2:	4b93      	ldr	r3, [pc, #588]	; (800e410 <tcp_input+0x724>)
 800e1c4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e1c6:	4a92      	ldr	r2, [pc, #584]	; (800e410 <tcp_input+0x724>)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e1cc:	4b91      	ldr	r3, [pc, #580]	; (800e414 <tcp_input+0x728>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a8f      	ldr	r2, [pc, #572]	; (800e410 <tcp_input+0x724>)
 800e1d2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e1d4:	4b90      	ldr	r3, [pc, #576]	; (800e418 <tcp_input+0x72c>)
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e1da:	4b90      	ldr	r3, [pc, #576]	; (800e41c <tcp_input+0x730>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e1e0:	4b8f      	ldr	r3, [pc, #572]	; (800e420 <tcp_input+0x734>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e1e6:	4b8f      	ldr	r3, [pc, #572]	; (800e424 <tcp_input+0x738>)
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	f003 0308 	and.w	r3, r3, #8
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d006      	beq.n	800e200 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7b5b      	ldrb	r3, [r3, #13]
 800e1f6:	f043 0301 	orr.w	r3, r3, #1
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e204:	2b00      	cmp	r3, #0
 800e206:	d017      	beq.n	800e238 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e208:	69f8      	ldr	r0, [r7, #28]
 800e20a:	f7ff f85b 	bl	800d2c4 <tcp_process_refused_data>
 800e20e:	4603      	mov	r3, r0
 800e210:	f113 0f0d 	cmn.w	r3, #13
 800e214:	d007      	beq.n	800e226 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00c      	beq.n	800e238 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e21e:	4b82      	ldr	r3, [pc, #520]	; (800e428 <tcp_input+0x73c>)
 800e220:	881b      	ldrh	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f040 80e3 	bne.w	800e3f6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e230:	69f8      	ldr	r0, [r7, #28]
 800e232:	f003 fe05 	bl	8011e40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e236:	e0de      	b.n	800e3f6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e238:	4a7c      	ldr	r2, [pc, #496]	; (800e42c <tcp_input+0x740>)
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e23e:	69f8      	ldr	r0, [r7, #28]
 800e240:	f000 fb18 	bl	800e874 <tcp_process>
 800e244:	4603      	mov	r3, r0
 800e246:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e248:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e24c:	f113 0f0d 	cmn.w	r3, #13
 800e250:	f000 80d3 	beq.w	800e3fa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e254:	4b71      	ldr	r3, [pc, #452]	; (800e41c <tcp_input+0x730>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	f003 0308 	and.w	r3, r3, #8
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d015      	beq.n	800e28c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e266:	2b00      	cmp	r3, #0
 800e268:	d008      	beq.n	800e27c <tcp_input+0x590>
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e270:	69fa      	ldr	r2, [r7, #28]
 800e272:	6912      	ldr	r2, [r2, #16]
 800e274:	f06f 010d 	mvn.w	r1, #13
 800e278:	4610      	mov	r0, r2
 800e27a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e27c:	69f9      	ldr	r1, [r7, #28]
 800e27e:	486c      	ldr	r0, [pc, #432]	; (800e430 <tcp_input+0x744>)
 800e280:	f7ff fbbc 	bl	800d9fc <tcp_pcb_remove>
        tcp_free(pcb);
 800e284:	69f8      	ldr	r0, [r7, #28]
 800e286:	f7fd fed7 	bl	800c038 <tcp_free>
 800e28a:	e0da      	b.n	800e442 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e290:	4b63      	ldr	r3, [pc, #396]	; (800e420 <tcp_input+0x734>)
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d01d      	beq.n	800e2d4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e298:	4b61      	ldr	r3, [pc, #388]	; (800e420 <tcp_input+0x734>)
 800e29a:	881b      	ldrh	r3, [r3, #0]
 800e29c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00a      	beq.n	800e2be <tcp_input+0x5d2>
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ae:	69fa      	ldr	r2, [r7, #28]
 800e2b0:	6910      	ldr	r0, [r2, #16]
 800e2b2:	89fa      	ldrh	r2, [r7, #14]
 800e2b4:	69f9      	ldr	r1, [r7, #28]
 800e2b6:	4798      	blx	r3
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	74fb      	strb	r3, [r7, #19]
 800e2bc:	e001      	b.n	800e2c2 <tcp_input+0x5d6>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e2c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2c6:	f113 0f0d 	cmn.w	r3, #13
 800e2ca:	f000 8098 	beq.w	800e3fe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e2ce:	4b54      	ldr	r3, [pc, #336]	; (800e420 <tcp_input+0x734>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e2d4:	69f8      	ldr	r0, [r7, #28]
 800e2d6:	f000 f915 	bl	800e504 <tcp_input_delayed_close>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f040 8090 	bne.w	800e402 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e2e2:	4b4d      	ldr	r3, [pc, #308]	; (800e418 <tcp_input+0x72c>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d041      	beq.n	800e36e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d006      	beq.n	800e300 <tcp_input+0x614>
 800e2f2:	4b50      	ldr	r3, [pc, #320]	; (800e434 <tcp_input+0x748>)
 800e2f4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e2f8:	494f      	ldr	r1, [pc, #316]	; (800e438 <tcp_input+0x74c>)
 800e2fa:	4850      	ldr	r0, [pc, #320]	; (800e43c <tcp_input+0x750>)
 800e2fc:	f006 fed4 	bl	80150a8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	8b5b      	ldrh	r3, [r3, #26]
 800e304:	f003 0310 	and.w	r3, r3, #16
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d008      	beq.n	800e31e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e30c:	4b42      	ldr	r3, [pc, #264]	; (800e418 <tcp_input+0x72c>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4618      	mov	r0, r3
 800e312:	f7fd fbe5 	bl	800bae0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e316:	69f8      	ldr	r0, [r7, #28]
 800e318:	f7fe f9d2 	bl	800c6c0 <tcp_abort>
            goto aborted;
 800e31c:	e091      	b.n	800e442 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00c      	beq.n	800e342 <tcp_input+0x656>
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	6918      	ldr	r0, [r3, #16]
 800e332:	4b39      	ldr	r3, [pc, #228]	; (800e418 <tcp_input+0x72c>)
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	2300      	movs	r3, #0
 800e338:	69f9      	ldr	r1, [r7, #28]
 800e33a:	47a0      	blx	r4
 800e33c:	4603      	mov	r3, r0
 800e33e:	74fb      	strb	r3, [r7, #19]
 800e340:	e008      	b.n	800e354 <tcp_input+0x668>
 800e342:	4b35      	ldr	r3, [pc, #212]	; (800e418 <tcp_input+0x72c>)
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	2300      	movs	r3, #0
 800e348:	69f9      	ldr	r1, [r7, #28]
 800e34a:	2000      	movs	r0, #0
 800e34c:	f7ff f890 	bl	800d470 <tcp_recv_null>
 800e350:	4603      	mov	r3, r0
 800e352:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e354:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e358:	f113 0f0d 	cmn.w	r3, #13
 800e35c:	d053      	beq.n	800e406 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e35e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d003      	beq.n	800e36e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e366:	4b2c      	ldr	r3, [pc, #176]	; (800e418 <tcp_input+0x72c>)
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e36e:	4b2b      	ldr	r3, [pc, #172]	; (800e41c <tcp_input+0x730>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	f003 0320 	and.w	r3, r3, #32
 800e376:	2b00      	cmp	r3, #0
 800e378:	d030      	beq.n	800e3dc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d009      	beq.n	800e396 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e386:	7b5a      	ldrb	r2, [r3, #13]
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e38c:	f042 0220 	orr.w	r2, r2, #32
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	735a      	strb	r2, [r3, #13]
 800e394:	e022      	b.n	800e3dc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e39a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e39e:	d005      	beq.n	800e3ac <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	b29a      	uxth	r2, r3
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00b      	beq.n	800e3ce <tcp_input+0x6e2>
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	6918      	ldr	r0, [r3, #16]
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	69f9      	ldr	r1, [r7, #28]
 800e3c6:	47a0      	blx	r4
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	74fb      	strb	r3, [r7, #19]
 800e3cc:	e001      	b.n	800e3d2 <tcp_input+0x6e6>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e3d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3d6:	f113 0f0d 	cmn.w	r3, #13
 800e3da:	d016      	beq.n	800e40a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e3dc:	4b13      	ldr	r3, [pc, #76]	; (800e42c <tcp_input+0x740>)
 800e3de:	2200      	movs	r2, #0
 800e3e0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e3e2:	69f8      	ldr	r0, [r7, #28]
 800e3e4:	f000 f88e 	bl	800e504 <tcp_input_delayed_close>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d128      	bne.n	800e440 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e3ee:	69f8      	ldr	r0, [r7, #28]
 800e3f0:	f002 ff20 	bl	8011234 <tcp_output>
 800e3f4:	e025      	b.n	800e442 <tcp_input+0x756>
        goto aborted;
 800e3f6:	bf00      	nop
 800e3f8:	e023      	b.n	800e442 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e3fa:	bf00      	nop
 800e3fc:	e021      	b.n	800e442 <tcp_input+0x756>
              goto aborted;
 800e3fe:	bf00      	nop
 800e400:	e01f      	b.n	800e442 <tcp_input+0x756>
          goto aborted;
 800e402:	bf00      	nop
 800e404:	e01d      	b.n	800e442 <tcp_input+0x756>
            goto aborted;
 800e406:	bf00      	nop
 800e408:	e01b      	b.n	800e442 <tcp_input+0x756>
              goto aborted;
 800e40a:	bf00      	nop
 800e40c:	e019      	b.n	800e442 <tcp_input+0x756>
 800e40e:	bf00      	nop
 800e410:	20011814 	.word	0x20011814
 800e414:	20011824 	.word	0x20011824
 800e418:	20011844 	.word	0x20011844
 800e41c:	20011841 	.word	0x20011841
 800e420:	2001183c 	.word	0x2001183c
 800e424:	20011840 	.word	0x20011840
 800e428:	2001183e 	.word	0x2001183e
 800e42c:	20011848 	.word	0x20011848
 800e430:	20011808 	.word	0x20011808
 800e434:	08017ac4 	.word	0x08017ac4
 800e438:	08017c78 	.word	0x08017c78
 800e43c:	08017b10 	.word	0x08017b10
          goto aborted;
 800e440:	bf00      	nop
    tcp_input_pcb = NULL;
 800e442:	4b27      	ldr	r3, [pc, #156]	; (800e4e0 <tcp_input+0x7f4>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e448:	4b26      	ldr	r3, [pc, #152]	; (800e4e4 <tcp_input+0x7f8>)
 800e44a:	2200      	movs	r2, #0
 800e44c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e44e:	4b26      	ldr	r3, [pc, #152]	; (800e4e8 <tcp_input+0x7fc>)
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d03f      	beq.n	800e4d6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e456:	4b24      	ldr	r3, [pc, #144]	; (800e4e8 <tcp_input+0x7fc>)
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fd fb40 	bl	800bae0 <pbuf_free>
      inseg.p = NULL;
 800e460:	4b21      	ldr	r3, [pc, #132]	; (800e4e8 <tcp_input+0x7fc>)
 800e462:	2200      	movs	r2, #0
 800e464:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e466:	e036      	b.n	800e4d6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e468:	4b20      	ldr	r3, [pc, #128]	; (800e4ec <tcp_input+0x800>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	899b      	ldrh	r3, [r3, #12]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	4618      	mov	r0, r3
 800e472:	f7fb ff49 	bl	800a308 <lwip_htons>
 800e476:	4603      	mov	r3, r0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	f003 0304 	and.w	r3, r3, #4
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d118      	bne.n	800e4b4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e482:	4b1b      	ldr	r3, [pc, #108]	; (800e4f0 <tcp_input+0x804>)
 800e484:	6819      	ldr	r1, [r3, #0]
 800e486:	4b1b      	ldr	r3, [pc, #108]	; (800e4f4 <tcp_input+0x808>)
 800e488:	881b      	ldrh	r3, [r3, #0]
 800e48a:	461a      	mov	r2, r3
 800e48c:	4b1a      	ldr	r3, [pc, #104]	; (800e4f8 <tcp_input+0x80c>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e492:	4b16      	ldr	r3, [pc, #88]	; (800e4ec <tcp_input+0x800>)
 800e494:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e496:	885b      	ldrh	r3, [r3, #2]
 800e498:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e49a:	4a14      	ldr	r2, [pc, #80]	; (800e4ec <tcp_input+0x800>)
 800e49c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e49e:	8812      	ldrh	r2, [r2, #0]
 800e4a0:	b292      	uxth	r2, r2
 800e4a2:	9202      	str	r2, [sp, #8]
 800e4a4:	9301      	str	r3, [sp, #4]
 800e4a6:	4b15      	ldr	r3, [pc, #84]	; (800e4fc <tcp_input+0x810>)
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	4b15      	ldr	r3, [pc, #84]	; (800e500 <tcp_input+0x814>)
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	f003 fc74 	bl	8011d9c <tcp_rst>
    pbuf_free(p);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7fd fb13 	bl	800bae0 <pbuf_free>
  return;
 800e4ba:	e00c      	b.n	800e4d6 <tcp_input+0x7ea>
    goto dropped;
 800e4bc:	bf00      	nop
 800e4be:	e006      	b.n	800e4ce <tcp_input+0x7e2>
    goto dropped;
 800e4c0:	bf00      	nop
 800e4c2:	e004      	b.n	800e4ce <tcp_input+0x7e2>
    goto dropped;
 800e4c4:	bf00      	nop
 800e4c6:	e002      	b.n	800e4ce <tcp_input+0x7e2>
      goto dropped;
 800e4c8:	bf00      	nop
 800e4ca:	e000      	b.n	800e4ce <tcp_input+0x7e2>
      goto dropped;
 800e4cc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f7fd fb06 	bl	800bae0 <pbuf_free>
 800e4d4:	e000      	b.n	800e4d8 <tcp_input+0x7ec>
  return;
 800e4d6:	bf00      	nop
}
 800e4d8:	3724      	adds	r7, #36	; 0x24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd90      	pop	{r4, r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20011848 	.word	0x20011848
 800e4e4:	20011844 	.word	0x20011844
 800e4e8:	20011814 	.word	0x20011814
 800e4ec:	20011824 	.word	0x20011824
 800e4f0:	20011838 	.word	0x20011838
 800e4f4:	2001183e 	.word	0x2001183e
 800e4f8:	20011834 	.word	0x20011834
 800e4fc:	20009780 	.word	0x20009780
 800e500:	20009784 	.word	0x20009784

0800e504 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d106      	bne.n	800e520 <tcp_input_delayed_close+0x1c>
 800e512:	4b17      	ldr	r3, [pc, #92]	; (800e570 <tcp_input_delayed_close+0x6c>)
 800e514:	f240 225a 	movw	r2, #602	; 0x25a
 800e518:	4916      	ldr	r1, [pc, #88]	; (800e574 <tcp_input_delayed_close+0x70>)
 800e51a:	4817      	ldr	r0, [pc, #92]	; (800e578 <tcp_input_delayed_close+0x74>)
 800e51c:	f006 fdc4 	bl	80150a8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e520:	4b16      	ldr	r3, [pc, #88]	; (800e57c <tcp_input_delayed_close+0x78>)
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	f003 0310 	and.w	r3, r3, #16
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d01c      	beq.n	800e566 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	8b5b      	ldrh	r3, [r3, #26]
 800e530:	f003 0310 	and.w	r3, r3, #16
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10d      	bne.n	800e554 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d008      	beq.n	800e554 <tcp_input_delayed_close+0x50>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	6912      	ldr	r2, [r2, #16]
 800e54c:	f06f 010e 	mvn.w	r1, #14
 800e550:	4610      	mov	r0, r2
 800e552:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e554:	6879      	ldr	r1, [r7, #4]
 800e556:	480a      	ldr	r0, [pc, #40]	; (800e580 <tcp_input_delayed_close+0x7c>)
 800e558:	f7ff fa50 	bl	800d9fc <tcp_pcb_remove>
    tcp_free(pcb);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7fd fd6b 	bl	800c038 <tcp_free>
    return 1;
 800e562:	2301      	movs	r3, #1
 800e564:	e000      	b.n	800e568 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	08017ac4 	.word	0x08017ac4
 800e574:	08017c94 	.word	0x08017c94
 800e578:	08017b10 	.word	0x08017b10
 800e57c:	20011841 	.word	0x20011841
 800e580:	20011808 	.word	0x20011808

0800e584 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e584:	b590      	push	{r4, r7, lr}
 800e586:	b08b      	sub	sp, #44	; 0x2c
 800e588:	af04      	add	r7, sp, #16
 800e58a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e58c:	4b6f      	ldr	r3, [pc, #444]	; (800e74c <tcp_listen_input+0x1c8>)
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	f003 0304 	and.w	r3, r3, #4
 800e594:	2b00      	cmp	r3, #0
 800e596:	f040 80d2 	bne.w	800e73e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d106      	bne.n	800e5ae <tcp_listen_input+0x2a>
 800e5a0:	4b6b      	ldr	r3, [pc, #428]	; (800e750 <tcp_listen_input+0x1cc>)
 800e5a2:	f240 2281 	movw	r2, #641	; 0x281
 800e5a6:	496b      	ldr	r1, [pc, #428]	; (800e754 <tcp_listen_input+0x1d0>)
 800e5a8:	486b      	ldr	r0, [pc, #428]	; (800e758 <tcp_listen_input+0x1d4>)
 800e5aa:	f006 fd7d 	bl	80150a8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e5ae:	4b67      	ldr	r3, [pc, #412]	; (800e74c <tcp_listen_input+0x1c8>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	f003 0310 	and.w	r3, r3, #16
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d019      	beq.n	800e5ee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5ba:	4b68      	ldr	r3, [pc, #416]	; (800e75c <tcp_listen_input+0x1d8>)
 800e5bc:	6819      	ldr	r1, [r3, #0]
 800e5be:	4b68      	ldr	r3, [pc, #416]	; (800e760 <tcp_listen_input+0x1dc>)
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	4b67      	ldr	r3, [pc, #412]	; (800e764 <tcp_listen_input+0x1e0>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5ca:	4b67      	ldr	r3, [pc, #412]	; (800e768 <tcp_listen_input+0x1e4>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5ce:	885b      	ldrh	r3, [r3, #2]
 800e5d0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5d2:	4a65      	ldr	r2, [pc, #404]	; (800e768 <tcp_listen_input+0x1e4>)
 800e5d4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5d6:	8812      	ldrh	r2, [r2, #0]
 800e5d8:	b292      	uxth	r2, r2
 800e5da:	9202      	str	r2, [sp, #8]
 800e5dc:	9301      	str	r3, [sp, #4]
 800e5de:	4b63      	ldr	r3, [pc, #396]	; (800e76c <tcp_listen_input+0x1e8>)
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	4b63      	ldr	r3, [pc, #396]	; (800e770 <tcp_listen_input+0x1ec>)
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f003 fbd8 	bl	8011d9c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e5ec:	e0a9      	b.n	800e742 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e5ee:	4b57      	ldr	r3, [pc, #348]	; (800e74c <tcp_listen_input+0x1c8>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	f003 0302 	and.w	r3, r3, #2
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 80a3 	beq.w	800e742 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	7d5b      	ldrb	r3, [r3, #21]
 800e600:	4618      	mov	r0, r3
 800e602:	f7ff f859 	bl	800d6b8 <tcp_alloc>
 800e606:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d111      	bne.n	800e632 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00a      	beq.n	800e62c <tcp_listen_input+0xa8>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	6910      	ldr	r0, [r2, #16]
 800e61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e622:	2100      	movs	r1, #0
 800e624:	4798      	blx	r3
 800e626:	4603      	mov	r3, r0
 800e628:	73bb      	strb	r3, [r7, #14]
      return;
 800e62a:	e08b      	b.n	800e744 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e62c:	23f0      	movs	r3, #240	; 0xf0
 800e62e:	73bb      	strb	r3, [r7, #14]
      return;
 800e630:	e088      	b.n	800e744 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e632:	4b50      	ldr	r3, [pc, #320]	; (800e774 <tcp_listen_input+0x1f0>)
 800e634:	695a      	ldr	r2, [r3, #20]
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e63a:	4b4e      	ldr	r3, [pc, #312]	; (800e774 <tcp_listen_input+0x1f0>)
 800e63c:	691a      	ldr	r2, [r3, #16]
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	8ada      	ldrh	r2, [r3, #22]
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e64a:	4b47      	ldr	r3, [pc, #284]	; (800e768 <tcp_listen_input+0x1e4>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	b29a      	uxth	r2, r3
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	2203      	movs	r2, #3
 800e65a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e65c:	4b41      	ldr	r3, [pc, #260]	; (800e764 <tcp_listen_input+0x1e0>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e66e:	6978      	ldr	r0, [r7, #20]
 800e670:	f7ff fa58 	bl	800db24 <tcp_next_iss>
 800e674:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	693a      	ldr	r2, [r7, #16]
 800e67a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	693a      	ldr	r2, [r7, #16]
 800e680:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	693a      	ldr	r2, [r7, #16]
 800e68c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e68e:	4b35      	ldr	r3, [pc, #212]	; (800e764 <tcp_listen_input+0x1e0>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	1e5a      	subs	r2, r3, #1
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	691a      	ldr	r2, [r3, #16]
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	7a5b      	ldrb	r3, [r3, #9]
 800e6aa:	f003 030c 	and.w	r3, r3, #12
 800e6ae:	b2da      	uxtb	r2, r3
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	7a1a      	ldrb	r2, [r3, #8]
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e6bc:	4b2e      	ldr	r3, [pc, #184]	; (800e778 <tcp_listen_input+0x1f4>)
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	60da      	str	r2, [r3, #12]
 800e6c4:	4a2c      	ldr	r2, [pc, #176]	; (800e778 <tcp_listen_input+0x1f4>)
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	f003 fd29 	bl	8012120 <tcp_timer_needed>
 800e6ce:	4b2b      	ldr	r3, [pc, #172]	; (800e77c <tcp_listen_input+0x1f8>)
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e6d4:	6978      	ldr	r0, [r7, #20]
 800e6d6:	f001 fd8f 	bl	80101f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e6da:	4b23      	ldr	r3, [pc, #140]	; (800e768 <tcp_listen_input+0x1e4>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	89db      	ldrh	r3, [r3, #14]
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f004 ff63 	bl	80135c8 <ip4_route>
 800e702:	4601      	mov	r1, r0
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	3304      	adds	r3, #4
 800e708:	461a      	mov	r2, r3
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff fa30 	bl	800db70 <tcp_eff_send_mss_netif>
 800e710:	4603      	mov	r3, r0
 800e712:	461a      	mov	r2, r3
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e718:	2112      	movs	r1, #18
 800e71a:	6978      	ldr	r0, [r7, #20]
 800e71c:	f002 fc9c 	bl	8011058 <tcp_enqueue_flags>
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d004      	beq.n	800e736 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e72c:	2100      	movs	r1, #0
 800e72e:	6978      	ldr	r0, [r7, #20]
 800e730:	f7fd ff08 	bl	800c544 <tcp_abandon>
      return;
 800e734:	e006      	b.n	800e744 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e736:	6978      	ldr	r0, [r7, #20]
 800e738:	f002 fd7c 	bl	8011234 <tcp_output>
  return;
 800e73c:	e001      	b.n	800e742 <tcp_listen_input+0x1be>
    return;
 800e73e:	bf00      	nop
 800e740:	e000      	b.n	800e744 <tcp_listen_input+0x1c0>
  return;
 800e742:	bf00      	nop
}
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}
 800e74a:	bf00      	nop
 800e74c:	20011840 	.word	0x20011840
 800e750:	08017ac4 	.word	0x08017ac4
 800e754:	08017cbc 	.word	0x08017cbc
 800e758:	08017b10 	.word	0x08017b10
 800e75c:	20011838 	.word	0x20011838
 800e760:	2001183e 	.word	0x2001183e
 800e764:	20011834 	.word	0x20011834
 800e768:	20011824 	.word	0x20011824
 800e76c:	20009780 	.word	0x20009780
 800e770:	20009784 	.word	0x20009784
 800e774:	20009770 	.word	0x20009770
 800e778:	20011808 	.word	0x20011808
 800e77c:	20011810 	.word	0x20011810

0800e780 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af04      	add	r7, sp, #16
 800e786:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e788:	4b2f      	ldr	r3, [pc, #188]	; (800e848 <tcp_timewait_input+0xc8>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	f003 0304 	and.w	r3, r3, #4
 800e790:	2b00      	cmp	r3, #0
 800e792:	d153      	bne.n	800e83c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d106      	bne.n	800e7a8 <tcp_timewait_input+0x28>
 800e79a:	4b2c      	ldr	r3, [pc, #176]	; (800e84c <tcp_timewait_input+0xcc>)
 800e79c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e7a0:	492b      	ldr	r1, [pc, #172]	; (800e850 <tcp_timewait_input+0xd0>)
 800e7a2:	482c      	ldr	r0, [pc, #176]	; (800e854 <tcp_timewait_input+0xd4>)
 800e7a4:	f006 fc80 	bl	80150a8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e7a8:	4b27      	ldr	r3, [pc, #156]	; (800e848 <tcp_timewait_input+0xc8>)
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	f003 0302 	and.w	r3, r3, #2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d02a      	beq.n	800e80a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e7b4:	4b28      	ldr	r3, [pc, #160]	; (800e858 <tcp_timewait_input+0xd8>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	db2d      	blt.n	800e81e <tcp_timewait_input+0x9e>
 800e7c2:	4b25      	ldr	r3, [pc, #148]	; (800e858 <tcp_timewait_input+0xd8>)
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ca:	6879      	ldr	r1, [r7, #4]
 800e7cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7ce:	440b      	add	r3, r1
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	dc23      	bgt.n	800e81e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7d6:	4b21      	ldr	r3, [pc, #132]	; (800e85c <tcp_timewait_input+0xdc>)
 800e7d8:	6819      	ldr	r1, [r3, #0]
 800e7da:	4b21      	ldr	r3, [pc, #132]	; (800e860 <tcp_timewait_input+0xe0>)
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4b1d      	ldr	r3, [pc, #116]	; (800e858 <tcp_timewait_input+0xd8>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7e6:	4b1f      	ldr	r3, [pc, #124]	; (800e864 <tcp_timewait_input+0xe4>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ea:	885b      	ldrh	r3, [r3, #2]
 800e7ec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7ee:	4a1d      	ldr	r2, [pc, #116]	; (800e864 <tcp_timewait_input+0xe4>)
 800e7f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7f2:	8812      	ldrh	r2, [r2, #0]
 800e7f4:	b292      	uxth	r2, r2
 800e7f6:	9202      	str	r2, [sp, #8]
 800e7f8:	9301      	str	r3, [sp, #4]
 800e7fa:	4b1b      	ldr	r3, [pc, #108]	; (800e868 <tcp_timewait_input+0xe8>)
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	4b1b      	ldr	r3, [pc, #108]	; (800e86c <tcp_timewait_input+0xec>)
 800e800:	4602      	mov	r2, r0
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f003 faca 	bl	8011d9c <tcp_rst>
      return;
 800e808:	e01b      	b.n	800e842 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e80a:	4b0f      	ldr	r3, [pc, #60]	; (800e848 <tcp_timewait_input+0xc8>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	f003 0301 	and.w	r3, r3, #1
 800e812:	2b00      	cmp	r3, #0
 800e814:	d003      	beq.n	800e81e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e816:	4b16      	ldr	r3, [pc, #88]	; (800e870 <tcp_timewait_input+0xf0>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e81e:	4b10      	ldr	r3, [pc, #64]	; (800e860 <tcp_timewait_input+0xe0>)
 800e820:	881b      	ldrh	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00c      	beq.n	800e840 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	8b5b      	ldrh	r3, [r3, #26]
 800e82a:	f043 0302 	orr.w	r3, r3, #2
 800e82e:	b29a      	uxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f002 fcfd 	bl	8011234 <tcp_output>
  }
  return;
 800e83a:	e001      	b.n	800e840 <tcp_timewait_input+0xc0>
    return;
 800e83c:	bf00      	nop
 800e83e:	e000      	b.n	800e842 <tcp_timewait_input+0xc2>
  return;
 800e840:	bf00      	nop
}
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20011840 	.word	0x20011840
 800e84c:	08017ac4 	.word	0x08017ac4
 800e850:	08017cdc 	.word	0x08017cdc
 800e854:	08017b10 	.word	0x08017b10
 800e858:	20011834 	.word	0x20011834
 800e85c:	20011838 	.word	0x20011838
 800e860:	2001183e 	.word	0x2001183e
 800e864:	20011824 	.word	0x20011824
 800e868:	20009780 	.word	0x20009780
 800e86c:	20009784 	.word	0x20009784
 800e870:	200117fc 	.word	0x200117fc

0800e874 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b08d      	sub	sp, #52	; 0x34
 800e878:	af04      	add	r7, sp, #16
 800e87a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e87c:	2300      	movs	r3, #0
 800e87e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e880:	2300      	movs	r3, #0
 800e882:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d106      	bne.n	800e898 <tcp_process+0x24>
 800e88a:	4b9d      	ldr	r3, [pc, #628]	; (800eb00 <tcp_process+0x28c>)
 800e88c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e890:	499c      	ldr	r1, [pc, #624]	; (800eb04 <tcp_process+0x290>)
 800e892:	489d      	ldr	r0, [pc, #628]	; (800eb08 <tcp_process+0x294>)
 800e894:	f006 fc08 	bl	80150a8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e898:	4b9c      	ldr	r3, [pc, #624]	; (800eb0c <tcp_process+0x298>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	f003 0304 	and.w	r3, r3, #4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d04e      	beq.n	800e942 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	7d1b      	ldrb	r3, [r3, #20]
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d108      	bne.n	800e8be <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8b0:	4b97      	ldr	r3, [pc, #604]	; (800eb10 <tcp_process+0x29c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d123      	bne.n	800e900 <tcp_process+0x8c>
        acceptable = 1;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	76fb      	strb	r3, [r7, #27]
 800e8bc:	e020      	b.n	800e900 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8c2:	4b94      	ldr	r3, [pc, #592]	; (800eb14 <tcp_process+0x2a0>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d102      	bne.n	800e8d0 <tcp_process+0x5c>
        acceptable = 1;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	76fb      	strb	r3, [r7, #27]
 800e8ce:	e017      	b.n	800e900 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e8d0:	4b90      	ldr	r3, [pc, #576]	; (800eb14 <tcp_process+0x2a0>)
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	db10      	blt.n	800e900 <tcp_process+0x8c>
 800e8de:	4b8d      	ldr	r3, [pc, #564]	; (800eb14 <tcp_process+0x2a0>)
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e6:	6879      	ldr	r1, [r7, #4]
 800e8e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8ea:	440b      	add	r3, r1
 800e8ec:	1ad3      	subs	r3, r2, r3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	dc06      	bgt.n	800e900 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	8b5b      	ldrh	r3, [r3, #26]
 800e8f6:	f043 0302 	orr.w	r3, r3, #2
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e900:	7efb      	ldrb	r3, [r7, #27]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d01b      	beq.n	800e93e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	7d1b      	ldrb	r3, [r3, #20]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d106      	bne.n	800e91c <tcp_process+0xa8>
 800e90e:	4b7c      	ldr	r3, [pc, #496]	; (800eb00 <tcp_process+0x28c>)
 800e910:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e914:	4980      	ldr	r1, [pc, #512]	; (800eb18 <tcp_process+0x2a4>)
 800e916:	487c      	ldr	r0, [pc, #496]	; (800eb08 <tcp_process+0x294>)
 800e918:	f006 fbc6 	bl	80150a8 <iprintf>
      recv_flags |= TF_RESET;
 800e91c:	4b7f      	ldr	r3, [pc, #508]	; (800eb1c <tcp_process+0x2a8>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	f043 0308 	orr.w	r3, r3, #8
 800e924:	b2da      	uxtb	r2, r3
 800e926:	4b7d      	ldr	r3, [pc, #500]	; (800eb1c <tcp_process+0x2a8>)
 800e928:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	8b5b      	ldrh	r3, [r3, #26]
 800e92e:	f023 0301 	bic.w	r3, r3, #1
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e938:	f06f 030d 	mvn.w	r3, #13
 800e93c:	e37a      	b.n	800f034 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e93e:	2300      	movs	r3, #0
 800e940:	e378      	b.n	800f034 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e942:	4b72      	ldr	r3, [pc, #456]	; (800eb0c <tcp_process+0x298>)
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	f003 0302 	and.w	r3, r3, #2
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d010      	beq.n	800e970 <tcp_process+0xfc>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	7d1b      	ldrb	r3, [r3, #20]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d00c      	beq.n	800e970 <tcp_process+0xfc>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	7d1b      	ldrb	r3, [r3, #20]
 800e95a:	2b03      	cmp	r3, #3
 800e95c:	d008      	beq.n	800e970 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	8b5b      	ldrh	r3, [r3, #26]
 800e962:	f043 0302 	orr.w	r3, r3, #2
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	e361      	b.n	800f034 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	8b5b      	ldrh	r3, [r3, #26]
 800e974:	f003 0310 	and.w	r3, r3, #16
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d103      	bne.n	800e984 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e97c:	4b68      	ldr	r3, [pc, #416]	; (800eb20 <tcp_process+0x2ac>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f001 fc2f 	bl	80101f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7d1b      	ldrb	r3, [r3, #20]
 800e99e:	3b02      	subs	r3, #2
 800e9a0:	2b07      	cmp	r3, #7
 800e9a2:	f200 8337 	bhi.w	800f014 <tcp_process+0x7a0>
 800e9a6:	a201      	add	r2, pc, #4	; (adr r2, 800e9ac <tcp_process+0x138>)
 800e9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ac:	0800e9cd 	.word	0x0800e9cd
 800e9b0:	0800ebfd 	.word	0x0800ebfd
 800e9b4:	0800ed75 	.word	0x0800ed75
 800e9b8:	0800ed9f 	.word	0x0800ed9f
 800e9bc:	0800eec3 	.word	0x0800eec3
 800e9c0:	0800ed75 	.word	0x0800ed75
 800e9c4:	0800ef4f 	.word	0x0800ef4f
 800e9c8:	0800efdf 	.word	0x0800efdf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e9cc:	4b4f      	ldr	r3, [pc, #316]	; (800eb0c <tcp_process+0x298>)
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	f003 0310 	and.w	r3, r3, #16
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 80e4 	beq.w	800eba2 <tcp_process+0x32e>
 800e9da:	4b4c      	ldr	r3, [pc, #304]	; (800eb0c <tcp_process+0x298>)
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	f003 0302 	and.w	r3, r3, #2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f000 80dd 	beq.w	800eba2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ec:	1c5a      	adds	r2, r3, #1
 800e9ee:	4b48      	ldr	r3, [pc, #288]	; (800eb10 <tcp_process+0x29c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	f040 80d5 	bne.w	800eba2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e9f8:	4b46      	ldr	r3, [pc, #280]	; (800eb14 <tcp_process+0x2a0>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ea0a:	4b41      	ldr	r3, [pc, #260]	; (800eb10 <tcp_process+0x29c>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ea12:	4b44      	ldr	r3, [pc, #272]	; (800eb24 <tcp_process+0x2b0>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	89db      	ldrh	r3, [r3, #14]
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ea2c:	4b39      	ldr	r3, [pc, #228]	; (800eb14 <tcp_process+0x2a0>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	1e5a      	subs	r2, r3, #1
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2204      	movs	r2, #4
 800ea3a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3304      	adds	r3, #4
 800ea44:	4618      	mov	r0, r3
 800ea46:	f004 fdbf 	bl	80135c8 <ip4_route>
 800ea4a:	4601      	mov	r1, r0
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3304      	adds	r3, #4
 800ea50:	461a      	mov	r2, r3
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7ff f88c 	bl	800db70 <tcp_eff_send_mss_netif>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea64:	009a      	lsls	r2, r3, #2
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea6a:	005b      	lsls	r3, r3, #1
 800ea6c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea70:	428b      	cmp	r3, r1
 800ea72:	bf38      	it	cc
 800ea74:	460b      	movcc	r3, r1
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d204      	bcs.n	800ea84 <tcp_process+0x210>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	e00d      	b.n	800eaa0 <tcp_process+0x22c>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d904      	bls.n	800ea9c <tcp_process+0x228>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea96:	005b      	lsls	r3, r3, #1
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	e001      	b.n	800eaa0 <tcp_process+0x22c>
 800ea9c:	f241 131c 	movw	r3, #4380	; 0x111c
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d106      	bne.n	800eabe <tcp_process+0x24a>
 800eab0:	4b13      	ldr	r3, [pc, #76]	; (800eb00 <tcp_process+0x28c>)
 800eab2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eab6:	491c      	ldr	r1, [pc, #112]	; (800eb28 <tcp_process+0x2b4>)
 800eab8:	4813      	ldr	r0, [pc, #76]	; (800eb08 <tcp_process+0x294>)
 800eaba:	f006 faf5 	bl	80150a8 <iprintf>
        --pcb->snd_queuelen;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eac4:	3b01      	subs	r3, #1
 800eac6:	b29a      	uxth	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ead2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d12a      	bne.n	800eb30 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eade:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <tcp_process+0x280>
 800eae6:	4b06      	ldr	r3, [pc, #24]	; (800eb00 <tcp_process+0x28c>)
 800eae8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eaec:	490f      	ldr	r1, [pc, #60]	; (800eb2c <tcp_process+0x2b8>)
 800eaee:	4806      	ldr	r0, [pc, #24]	; (800eb08 <tcp_process+0x294>)
 800eaf0:	f006 fada 	bl	80150a8 <iprintf>
          pcb->unsent = rseg->next;
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	66da      	str	r2, [r3, #108]	; 0x6c
 800eafc:	e01c      	b.n	800eb38 <tcp_process+0x2c4>
 800eafe:	bf00      	nop
 800eb00:	08017ac4 	.word	0x08017ac4
 800eb04:	08017cfc 	.word	0x08017cfc
 800eb08:	08017b10 	.word	0x08017b10
 800eb0c:	20011840 	.word	0x20011840
 800eb10:	20011838 	.word	0x20011838
 800eb14:	20011834 	.word	0x20011834
 800eb18:	08017d18 	.word	0x08017d18
 800eb1c:	20011841 	.word	0x20011841
 800eb20:	200117fc 	.word	0x200117fc
 800eb24:	20011824 	.word	0x20011824
 800eb28:	08017d38 	.word	0x08017d38
 800eb2c:	08017d50 	.word	0x08017d50
        } else {
          pcb->unacked = rseg->next;
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eb38:	69f8      	ldr	r0, [r7, #28]
 800eb3a:	f7fe fc54 	bl	800d3e6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d104      	bne.n	800eb50 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb4c:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb4e:	e006      	b.n	800eb5e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00a      	beq.n	800eb7e <tcp_process+0x30a>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	6910      	ldr	r0, [r2, #16]
 800eb72:	2200      	movs	r2, #0
 800eb74:	6879      	ldr	r1, [r7, #4]
 800eb76:	4798      	blx	r3
 800eb78:	4603      	mov	r3, r0
 800eb7a:	76bb      	strb	r3, [r7, #26]
 800eb7c:	e001      	b.n	800eb82 <tcp_process+0x30e>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800eb82:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb86:	f113 0f0d 	cmn.w	r3, #13
 800eb8a:	d102      	bne.n	800eb92 <tcp_process+0x31e>
          return ERR_ABRT;
 800eb8c:	f06f 030c 	mvn.w	r3, #12
 800eb90:	e250      	b.n	800f034 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	8b5b      	ldrh	r3, [r3, #26]
 800eb96:	f043 0302 	orr.w	r3, r3, #2
 800eb9a:	b29a      	uxth	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800eba0:	e23a      	b.n	800f018 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800eba2:	4b98      	ldr	r3, [pc, #608]	; (800ee04 <tcp_process+0x590>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	f003 0310 	and.w	r3, r3, #16
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f000 8234 	beq.w	800f018 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb0:	4b95      	ldr	r3, [pc, #596]	; (800ee08 <tcp_process+0x594>)
 800ebb2:	6819      	ldr	r1, [r3, #0]
 800ebb4:	4b95      	ldr	r3, [pc, #596]	; (800ee0c <tcp_process+0x598>)
 800ebb6:	881b      	ldrh	r3, [r3, #0]
 800ebb8:	461a      	mov	r2, r3
 800ebba:	4b95      	ldr	r3, [pc, #596]	; (800ee10 <tcp_process+0x59c>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebc0:	4b94      	ldr	r3, [pc, #592]	; (800ee14 <tcp_process+0x5a0>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebc4:	885b      	ldrh	r3, [r3, #2]
 800ebc6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebc8:	4a92      	ldr	r2, [pc, #584]	; (800ee14 <tcp_process+0x5a0>)
 800ebca:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebcc:	8812      	ldrh	r2, [r2, #0]
 800ebce:	b292      	uxth	r2, r2
 800ebd0:	9202      	str	r2, [sp, #8]
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	4b90      	ldr	r3, [pc, #576]	; (800ee18 <tcp_process+0x5a4>)
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	4b90      	ldr	r3, [pc, #576]	; (800ee1c <tcp_process+0x5a8>)
 800ebda:	4602      	mov	r2, r0
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f003 f8dd 	bl	8011d9c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebe8:	2b05      	cmp	r3, #5
 800ebea:	f200 8215 	bhi.w	800f018 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f002 fea7 	bl	8011948 <tcp_rexmit_rto>
      break;
 800ebfa:	e20d      	b.n	800f018 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ebfc:	4b81      	ldr	r3, [pc, #516]	; (800ee04 <tcp_process+0x590>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	f003 0310 	and.w	r3, r3, #16
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 80a1 	beq.w	800ed4c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec0a:	4b7f      	ldr	r3, [pc, #508]	; (800ee08 <tcp_process+0x594>)
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	3b01      	subs	r3, #1
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	db7e      	blt.n	800ed18 <tcp_process+0x4a4>
 800ec1a:	4b7b      	ldr	r3, [pc, #492]	; (800ee08 <tcp_process+0x594>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	dc77      	bgt.n	800ed18 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2204      	movs	r2, #4
 800ec2c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d102      	bne.n	800ec3c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ec36:	23fa      	movs	r3, #250	; 0xfa
 800ec38:	76bb      	strb	r3, [r7, #26]
 800ec3a:	e01d      	b.n	800ec78 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d106      	bne.n	800ec54 <tcp_process+0x3e0>
 800ec46:	4b76      	ldr	r3, [pc, #472]	; (800ee20 <tcp_process+0x5ac>)
 800ec48:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ec4c:	4975      	ldr	r1, [pc, #468]	; (800ee24 <tcp_process+0x5b0>)
 800ec4e:	4876      	ldr	r0, [pc, #472]	; (800ee28 <tcp_process+0x5b4>)
 800ec50:	f006 fa2a 	bl	80150a8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec58:	699b      	ldr	r3, [r3, #24]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00a      	beq.n	800ec74 <tcp_process+0x400>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	6910      	ldr	r0, [r2, #16]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	6879      	ldr	r1, [r7, #4]
 800ec6c:	4798      	blx	r3
 800ec6e:	4603      	mov	r3, r0
 800ec70:	76bb      	strb	r3, [r7, #26]
 800ec72:	e001      	b.n	800ec78 <tcp_process+0x404>
 800ec74:	23f0      	movs	r3, #240	; 0xf0
 800ec76:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ec78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d00a      	beq.n	800ec96 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ec80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec84:	f113 0f0d 	cmn.w	r3, #13
 800ec88:	d002      	beq.n	800ec90 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7fd fd18 	bl	800c6c0 <tcp_abort>
            }
            return ERR_ABRT;
 800ec90:	f06f 030c 	mvn.w	r3, #12
 800ec94:	e1ce      	b.n	800f034 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fae0 	bl	800f25c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ec9c:	4b63      	ldr	r3, [pc, #396]	; (800ee2c <tcp_process+0x5b8>)
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d005      	beq.n	800ecb0 <tcp_process+0x43c>
            recv_acked--;
 800eca4:	4b61      	ldr	r3, [pc, #388]	; (800ee2c <tcp_process+0x5b8>)
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	4b5f      	ldr	r3, [pc, #380]	; (800ee2c <tcp_process+0x5b8>)
 800ecae:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecb4:	009a      	lsls	r2, r3, #2
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	f241 111c 	movw	r1, #4380	; 0x111c
 800ecc0:	428b      	cmp	r3, r1
 800ecc2:	bf38      	it	cc
 800ecc4:	460b      	movcc	r3, r1
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d204      	bcs.n	800ecd4 <tcp_process+0x460>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	e00d      	b.n	800ecf0 <tcp_process+0x47c>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	f241 121c 	movw	r2, #4380	; 0x111c
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d904      	bls.n	800ecec <tcp_process+0x478>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ece6:	005b      	lsls	r3, r3, #1
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	e001      	b.n	800ecf0 <tcp_process+0x47c>
 800ecec:	f241 131c 	movw	r3, #4380	; 0x111c
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ecf6:	4b4e      	ldr	r3, [pc, #312]	; (800ee30 <tcp_process+0x5bc>)
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	f003 0320 	and.w	r3, r3, #32
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d037      	beq.n	800ed72 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	8b5b      	ldrh	r3, [r3, #26]
 800ed06:	f043 0302 	orr.w	r3, r3, #2
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2207      	movs	r2, #7
 800ed14:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ed16:	e02c      	b.n	800ed72 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed18:	4b3b      	ldr	r3, [pc, #236]	; (800ee08 <tcp_process+0x594>)
 800ed1a:	6819      	ldr	r1, [r3, #0]
 800ed1c:	4b3b      	ldr	r3, [pc, #236]	; (800ee0c <tcp_process+0x598>)
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	461a      	mov	r2, r3
 800ed22:	4b3b      	ldr	r3, [pc, #236]	; (800ee10 <tcp_process+0x59c>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed28:	4b3a      	ldr	r3, [pc, #232]	; (800ee14 <tcp_process+0x5a0>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed2c:	885b      	ldrh	r3, [r3, #2]
 800ed2e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed30:	4a38      	ldr	r2, [pc, #224]	; (800ee14 <tcp_process+0x5a0>)
 800ed32:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed34:	8812      	ldrh	r2, [r2, #0]
 800ed36:	b292      	uxth	r2, r2
 800ed38:	9202      	str	r2, [sp, #8]
 800ed3a:	9301      	str	r3, [sp, #4]
 800ed3c:	4b36      	ldr	r3, [pc, #216]	; (800ee18 <tcp_process+0x5a4>)
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	4b36      	ldr	r3, [pc, #216]	; (800ee1c <tcp_process+0x5a8>)
 800ed42:	4602      	mov	r2, r0
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f003 f829 	bl	8011d9c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ed4a:	e167      	b.n	800f01c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ed4c:	4b2d      	ldr	r3, [pc, #180]	; (800ee04 <tcp_process+0x590>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	f003 0302 	and.w	r3, r3, #2
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f000 8161 	beq.w	800f01c <tcp_process+0x7a8>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5e:	1e5a      	subs	r2, r3, #1
 800ed60:	4b2b      	ldr	r3, [pc, #172]	; (800ee10 <tcp_process+0x59c>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	f040 8159 	bne.w	800f01c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f002 fe0e 	bl	801198c <tcp_rexmit>
      break;
 800ed70:	e154      	b.n	800f01c <tcp_process+0x7a8>
 800ed72:	e153      	b.n	800f01c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 fa71 	bl	800f25c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ed7a:	4b2d      	ldr	r3, [pc, #180]	; (800ee30 <tcp_process+0x5bc>)
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	f003 0320 	and.w	r3, r3, #32
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 814c 	beq.w	800f020 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	8b5b      	ldrh	r3, [r3, #26]
 800ed8c:	f043 0302 	orr.w	r3, r3, #2
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2207      	movs	r2, #7
 800ed9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed9c:	e140      	b.n	800f020 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 fa5c 	bl	800f25c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eda4:	4b22      	ldr	r3, [pc, #136]	; (800ee30 <tcp_process+0x5bc>)
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	f003 0320 	and.w	r3, r3, #32
 800edac:	2b00      	cmp	r3, #0
 800edae:	d071      	beq.n	800ee94 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800edb0:	4b14      	ldr	r3, [pc, #80]	; (800ee04 <tcp_process+0x590>)
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	f003 0310 	and.w	r3, r3, #16
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d060      	beq.n	800ee7e <tcp_process+0x60a>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edc0:	4b11      	ldr	r3, [pc, #68]	; (800ee08 <tcp_process+0x594>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d15a      	bne.n	800ee7e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d156      	bne.n	800ee7e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	8b5b      	ldrh	r3, [r3, #26]
 800edd4:	f043 0302 	orr.w	r3, r3, #2
 800edd8:	b29a      	uxth	r2, r3
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7fe fdbc 	bl	800d95c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ede4:	4b13      	ldr	r3, [pc, #76]	; (800ee34 <tcp_process+0x5c0>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	429a      	cmp	r2, r3
 800edec:	d105      	bne.n	800edfa <tcp_process+0x586>
 800edee:	4b11      	ldr	r3, [pc, #68]	; (800ee34 <tcp_process+0x5c0>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	4a0f      	ldr	r2, [pc, #60]	; (800ee34 <tcp_process+0x5c0>)
 800edf6:	6013      	str	r3, [r2, #0]
 800edf8:	e02e      	b.n	800ee58 <tcp_process+0x5e4>
 800edfa:	4b0e      	ldr	r3, [pc, #56]	; (800ee34 <tcp_process+0x5c0>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	617b      	str	r3, [r7, #20]
 800ee00:	e027      	b.n	800ee52 <tcp_process+0x5de>
 800ee02:	bf00      	nop
 800ee04:	20011840 	.word	0x20011840
 800ee08:	20011838 	.word	0x20011838
 800ee0c:	2001183e 	.word	0x2001183e
 800ee10:	20011834 	.word	0x20011834
 800ee14:	20011824 	.word	0x20011824
 800ee18:	20009780 	.word	0x20009780
 800ee1c:	20009784 	.word	0x20009784
 800ee20:	08017ac4 	.word	0x08017ac4
 800ee24:	08017d64 	.word	0x08017d64
 800ee28:	08017b10 	.word	0x08017b10
 800ee2c:	2001183c 	.word	0x2001183c
 800ee30:	20011841 	.word	0x20011841
 800ee34:	20011808 	.word	0x20011808
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d104      	bne.n	800ee4c <tcp_process+0x5d8>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	68da      	ldr	r2, [r3, #12]
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	60da      	str	r2, [r3, #12]
 800ee4a:	e005      	b.n	800ee58 <tcp_process+0x5e4>
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	617b      	str	r3, [r7, #20]
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d1ef      	bne.n	800ee38 <tcp_process+0x5c4>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	60da      	str	r2, [r3, #12]
 800ee5e:	4b77      	ldr	r3, [pc, #476]	; (800f03c <tcp_process+0x7c8>)
 800ee60:	2201      	movs	r2, #1
 800ee62:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	220a      	movs	r2, #10
 800ee68:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ee6a:	4b75      	ldr	r3, [pc, #468]	; (800f040 <tcp_process+0x7cc>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	60da      	str	r2, [r3, #12]
 800ee72:	4a73      	ldr	r2, [pc, #460]	; (800f040 <tcp_process+0x7cc>)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	f003 f952 	bl	8012120 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ee7c:	e0d2      	b.n	800f024 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	8b5b      	ldrh	r3, [r3, #26]
 800ee82:	f043 0302 	orr.w	r3, r3, #2
 800ee86:	b29a      	uxth	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2208      	movs	r2, #8
 800ee90:	751a      	strb	r2, [r3, #20]
      break;
 800ee92:	e0c7      	b.n	800f024 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee94:	4b6b      	ldr	r3, [pc, #428]	; (800f044 <tcp_process+0x7d0>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	f003 0310 	and.w	r3, r3, #16
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 80c1 	beq.w	800f024 <tcp_process+0x7b0>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eea6:	4b68      	ldr	r3, [pc, #416]	; (800f048 <tcp_process+0x7d4>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	f040 80ba 	bne.w	800f024 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f040 80b5 	bne.w	800f024 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2206      	movs	r2, #6
 800eebe:	751a      	strb	r2, [r3, #20]
      break;
 800eec0:	e0b0      	b.n	800f024 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 f9ca 	bl	800f25c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eec8:	4b60      	ldr	r3, [pc, #384]	; (800f04c <tcp_process+0x7d8>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	f003 0320 	and.w	r3, r3, #32
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f000 80a9 	beq.w	800f028 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	8b5b      	ldrh	r3, [r3, #26]
 800eeda:	f043 0302 	orr.w	r3, r3, #2
 800eede:	b29a      	uxth	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7fe fd39 	bl	800d95c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eeea:	4b59      	ldr	r3, [pc, #356]	; (800f050 <tcp_process+0x7dc>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d105      	bne.n	800ef00 <tcp_process+0x68c>
 800eef4:	4b56      	ldr	r3, [pc, #344]	; (800f050 <tcp_process+0x7dc>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	4a55      	ldr	r2, [pc, #340]	; (800f050 <tcp_process+0x7dc>)
 800eefc:	6013      	str	r3, [r2, #0]
 800eefe:	e013      	b.n	800ef28 <tcp_process+0x6b4>
 800ef00:	4b53      	ldr	r3, [pc, #332]	; (800f050 <tcp_process+0x7dc>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	613b      	str	r3, [r7, #16]
 800ef06:	e00c      	b.n	800ef22 <tcp_process+0x6ae>
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d104      	bne.n	800ef1c <tcp_process+0x6a8>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	60da      	str	r2, [r3, #12]
 800ef1a:	e005      	b.n	800ef28 <tcp_process+0x6b4>
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	613b      	str	r3, [r7, #16]
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1ef      	bne.n	800ef08 <tcp_process+0x694>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	60da      	str	r2, [r3, #12]
 800ef2e:	4b43      	ldr	r3, [pc, #268]	; (800f03c <tcp_process+0x7c8>)
 800ef30:	2201      	movs	r2, #1
 800ef32:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	220a      	movs	r2, #10
 800ef38:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef3a:	4b41      	ldr	r3, [pc, #260]	; (800f040 <tcp_process+0x7cc>)
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	60da      	str	r2, [r3, #12]
 800ef42:	4a3f      	ldr	r2, [pc, #252]	; (800f040 <tcp_process+0x7cc>)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	f003 f8ea 	bl	8012120 <tcp_timer_needed>
      }
      break;
 800ef4c:	e06c      	b.n	800f028 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f984 	bl	800f25c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ef54:	4b3b      	ldr	r3, [pc, #236]	; (800f044 <tcp_process+0x7d0>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	f003 0310 	and.w	r3, r3, #16
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d065      	beq.n	800f02c <tcp_process+0x7b8>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef64:	4b38      	ldr	r3, [pc, #224]	; (800f048 <tcp_process+0x7d4>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d15f      	bne.n	800f02c <tcp_process+0x7b8>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d15b      	bne.n	800f02c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f7fe fcf1 	bl	800d95c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef7a:	4b35      	ldr	r3, [pc, #212]	; (800f050 <tcp_process+0x7dc>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d105      	bne.n	800ef90 <tcp_process+0x71c>
 800ef84:	4b32      	ldr	r3, [pc, #200]	; (800f050 <tcp_process+0x7dc>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	4a31      	ldr	r2, [pc, #196]	; (800f050 <tcp_process+0x7dc>)
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	e013      	b.n	800efb8 <tcp_process+0x744>
 800ef90:	4b2f      	ldr	r3, [pc, #188]	; (800f050 <tcp_process+0x7dc>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	e00c      	b.n	800efb2 <tcp_process+0x73e>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d104      	bne.n	800efac <tcp_process+0x738>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	60da      	str	r2, [r3, #12]
 800efaa:	e005      	b.n	800efb8 <tcp_process+0x744>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	60fb      	str	r3, [r7, #12]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1ef      	bne.n	800ef98 <tcp_process+0x724>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	60da      	str	r2, [r3, #12]
 800efbe:	4b1f      	ldr	r3, [pc, #124]	; (800f03c <tcp_process+0x7c8>)
 800efc0:	2201      	movs	r2, #1
 800efc2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	220a      	movs	r2, #10
 800efc8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efca:	4b1d      	ldr	r3, [pc, #116]	; (800f040 <tcp_process+0x7cc>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	60da      	str	r2, [r3, #12]
 800efd2:	4a1b      	ldr	r2, [pc, #108]	; (800f040 <tcp_process+0x7cc>)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6013      	str	r3, [r2, #0]
 800efd8:	f003 f8a2 	bl	8012120 <tcp_timer_needed>
      }
      break;
 800efdc:	e026      	b.n	800f02c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f93c 	bl	800f25c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efe4:	4b17      	ldr	r3, [pc, #92]	; (800f044 <tcp_process+0x7d0>)
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	f003 0310 	and.w	r3, r3, #16
 800efec:	2b00      	cmp	r3, #0
 800efee:	d01f      	beq.n	800f030 <tcp_process+0x7bc>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eff4:	4b14      	ldr	r3, [pc, #80]	; (800f048 <tcp_process+0x7d4>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d119      	bne.n	800f030 <tcp_process+0x7bc>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f000:	2b00      	cmp	r3, #0
 800f002:	d115      	bne.n	800f030 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f004:	4b11      	ldr	r3, [pc, #68]	; (800f04c <tcp_process+0x7d8>)
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	f043 0310 	orr.w	r3, r3, #16
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	4b0f      	ldr	r3, [pc, #60]	; (800f04c <tcp_process+0x7d8>)
 800f010:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f012:	e00d      	b.n	800f030 <tcp_process+0x7bc>
    default:
      break;
 800f014:	bf00      	nop
 800f016:	e00c      	b.n	800f032 <tcp_process+0x7be>
      break;
 800f018:	bf00      	nop
 800f01a:	e00a      	b.n	800f032 <tcp_process+0x7be>
      break;
 800f01c:	bf00      	nop
 800f01e:	e008      	b.n	800f032 <tcp_process+0x7be>
      break;
 800f020:	bf00      	nop
 800f022:	e006      	b.n	800f032 <tcp_process+0x7be>
      break;
 800f024:	bf00      	nop
 800f026:	e004      	b.n	800f032 <tcp_process+0x7be>
      break;
 800f028:	bf00      	nop
 800f02a:	e002      	b.n	800f032 <tcp_process+0x7be>
      break;
 800f02c:	bf00      	nop
 800f02e:	e000      	b.n	800f032 <tcp_process+0x7be>
      break;
 800f030:	bf00      	nop
  }
  return ERR_OK;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	3724      	adds	r7, #36	; 0x24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd90      	pop	{r4, r7, pc}
 800f03c:	20011810 	.word	0x20011810
 800f040:	2001180c 	.word	0x2001180c
 800f044:	20011840 	.word	0x20011840
 800f048:	20011838 	.word	0x20011838
 800f04c:	20011841 	.word	0x20011841
 800f050:	20011808 	.word	0x20011808

0800f054 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f054:	b590      	push	{r4, r7, lr}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d106      	bne.n	800f072 <tcp_oos_insert_segment+0x1e>
 800f064:	4b3b      	ldr	r3, [pc, #236]	; (800f154 <tcp_oos_insert_segment+0x100>)
 800f066:	f240 421f 	movw	r2, #1055	; 0x41f
 800f06a:	493b      	ldr	r1, [pc, #236]	; (800f158 <tcp_oos_insert_segment+0x104>)
 800f06c:	483b      	ldr	r0, [pc, #236]	; (800f15c <tcp_oos_insert_segment+0x108>)
 800f06e:	f006 f81b 	bl	80150a8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	899b      	ldrh	r3, [r3, #12]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fb f944 	bl	800a308 <lwip_htons>
 800f080:	4603      	mov	r3, r0
 800f082:	b2db      	uxtb	r3, r3
 800f084:	f003 0301 	and.w	r3, r3, #1
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d028      	beq.n	800f0de <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f08c:	6838      	ldr	r0, [r7, #0]
 800f08e:	f7fe f995 	bl	800d3bc <tcp_segs_free>
    next = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	603b      	str	r3, [r7, #0]
 800f096:	e056      	b.n	800f146 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	899b      	ldrh	r3, [r3, #12]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fb f931 	bl	800a308 <lwip_htons>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00d      	beq.n	800f0ce <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	899b      	ldrh	r3, [r3, #12]
 800f0b8:	b29c      	uxth	r4, r3
 800f0ba:	2001      	movs	r0, #1
 800f0bc:	f7fb f924 	bl	800a308 <lwip_htons>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	4322      	orrs	r2, r4
 800f0ca:	b292      	uxth	r2, r2
 800f0cc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f7fe f984 	bl	800d3e6 <tcp_seg_free>
    while (next &&
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00e      	beq.n	800f102 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	891b      	ldrh	r3, [r3, #8]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	4b1d      	ldr	r3, [pc, #116]	; (800f160 <tcp_oos_insert_segment+0x10c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	441a      	add	r2, r3
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	8909      	ldrh	r1, [r1, #8]
 800f0fa:	440b      	add	r3, r1
 800f0fc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	daca      	bge.n	800f098 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d01e      	beq.n	800f146 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	891b      	ldrh	r3, [r3, #8]
 800f10c:	461a      	mov	r2, r3
 800f10e:	4b14      	ldr	r3, [pc, #80]	; (800f160 <tcp_oos_insert_segment+0x10c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	441a      	add	r2, r3
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	dd12      	ble.n	800f146 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	b29a      	uxth	r2, r3
 800f128:	4b0d      	ldr	r3, [pc, #52]	; (800f160 <tcp_oos_insert_segment+0x10c>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	b29a      	uxth	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	891b      	ldrh	r3, [r3, #8]
 800f13e:	4619      	mov	r1, r3
 800f140:	4610      	mov	r0, r2
 800f142:	f7fc fb47 	bl	800b7d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	601a      	str	r2, [r3, #0]
}
 800f14c:	bf00      	nop
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	bd90      	pop	{r4, r7, pc}
 800f154:	08017ac4 	.word	0x08017ac4
 800f158:	08017d84 	.word	0x08017d84
 800f15c:	08017b10 	.word	0x08017b10
 800f160:	20011834 	.word	0x20011834

0800f164 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f164:	b5b0      	push	{r4, r5, r7, lr}
 800f166:	b086      	sub	sp, #24
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	607a      	str	r2, [r7, #4]
 800f170:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f172:	e03e      	b.n	800f1f2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	4618      	mov	r0, r3
 800f184:	f7fc fd3a 	bl	800bbfc <pbuf_clen>
 800f188:	4603      	mov	r3, r0
 800f18a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f192:	8a7a      	ldrh	r2, [r7, #18]
 800f194:	429a      	cmp	r2, r3
 800f196:	d906      	bls.n	800f1a6 <tcp_free_acked_segments+0x42>
 800f198:	4b2a      	ldr	r3, [pc, #168]	; (800f244 <tcp_free_acked_segments+0xe0>)
 800f19a:	f240 4257 	movw	r2, #1111	; 0x457
 800f19e:	492a      	ldr	r1, [pc, #168]	; (800f248 <tcp_free_acked_segments+0xe4>)
 800f1a0:	482a      	ldr	r0, [pc, #168]	; (800f24c <tcp_free_acked_segments+0xe8>)
 800f1a2:	f005 ff81 	bl	80150a8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f1ac:	8a7b      	ldrh	r3, [r7, #18]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	891a      	ldrh	r2, [r3, #8]
 800f1bc:	4b24      	ldr	r3, [pc, #144]	; (800f250 <tcp_free_acked_segments+0xec>)
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	4b22      	ldr	r3, [pc, #136]	; (800f250 <tcp_free_acked_segments+0xec>)
 800f1c6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f1c8:	6978      	ldr	r0, [r7, #20]
 800f1ca:	f7fe f90c 	bl	800d3e6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00c      	beq.n	800f1f2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d109      	bne.n	800f1f2 <tcp_free_acked_segments+0x8e>
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d106      	bne.n	800f1f2 <tcp_free_acked_segments+0x8e>
 800f1e4:	4b17      	ldr	r3, [pc, #92]	; (800f244 <tcp_free_acked_segments+0xe0>)
 800f1e6:	f240 4261 	movw	r2, #1121	; 0x461
 800f1ea:	491a      	ldr	r1, [pc, #104]	; (800f254 <tcp_free_acked_segments+0xf0>)
 800f1ec:	4817      	ldr	r0, [pc, #92]	; (800f24c <tcp_free_acked_segments+0xe8>)
 800f1ee:	f005 ff5b 	bl	80150a8 <iprintf>
  while (seg_list != NULL &&
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d020      	beq.n	800f23a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fb f897 	bl	800a332 <lwip_htonl>
 800f204:	4604      	mov	r4, r0
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	891b      	ldrh	r3, [r3, #8]
 800f20a:	461d      	mov	r5, r3
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	899b      	ldrh	r3, [r3, #12]
 800f212:	b29b      	uxth	r3, r3
 800f214:	4618      	mov	r0, r3
 800f216:	f7fb f877 	bl	800a308 <lwip_htons>
 800f21a:	4603      	mov	r3, r0
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	f003 0303 	and.w	r3, r3, #3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d001      	beq.n	800f22a <tcp_free_acked_segments+0xc6>
 800f226:	2301      	movs	r3, #1
 800f228:	e000      	b.n	800f22c <tcp_free_acked_segments+0xc8>
 800f22a:	2300      	movs	r3, #0
 800f22c:	442b      	add	r3, r5
 800f22e:	18e2      	adds	r2, r4, r3
 800f230:	4b09      	ldr	r3, [pc, #36]	; (800f258 <tcp_free_acked_segments+0xf4>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f236:	2b00      	cmp	r3, #0
 800f238:	dd9c      	ble.n	800f174 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f23a:	68bb      	ldr	r3, [r7, #8]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bdb0      	pop	{r4, r5, r7, pc}
 800f244:	08017ac4 	.word	0x08017ac4
 800f248:	08017dac 	.word	0x08017dac
 800f24c:	08017b10 	.word	0x08017b10
 800f250:	2001183c 	.word	0x2001183c
 800f254:	08017dd4 	.word	0x08017dd4
 800f258:	20011838 	.word	0x20011838

0800f25c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f25c:	b5b0      	push	{r4, r5, r7, lr}
 800f25e:	b094      	sub	sp, #80	; 0x50
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f264:	2300      	movs	r3, #0
 800f266:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d106      	bne.n	800f27c <tcp_receive+0x20>
 800f26e:	4b91      	ldr	r3, [pc, #580]	; (800f4b4 <tcp_receive+0x258>)
 800f270:	f240 427b 	movw	r2, #1147	; 0x47b
 800f274:	4990      	ldr	r1, [pc, #576]	; (800f4b8 <tcp_receive+0x25c>)
 800f276:	4891      	ldr	r0, [pc, #580]	; (800f4bc <tcp_receive+0x260>)
 800f278:	f005 ff16 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	7d1b      	ldrb	r3, [r3, #20]
 800f280:	2b03      	cmp	r3, #3
 800f282:	d806      	bhi.n	800f292 <tcp_receive+0x36>
 800f284:	4b8b      	ldr	r3, [pc, #556]	; (800f4b4 <tcp_receive+0x258>)
 800f286:	f240 427c 	movw	r2, #1148	; 0x47c
 800f28a:	498d      	ldr	r1, [pc, #564]	; (800f4c0 <tcp_receive+0x264>)
 800f28c:	488b      	ldr	r0, [pc, #556]	; (800f4bc <tcp_receive+0x260>)
 800f28e:	f005 ff0b 	bl	80150a8 <iprintf>

  if (flags & TCP_ACK) {
 800f292:	4b8c      	ldr	r3, [pc, #560]	; (800f4c4 <tcp_receive+0x268>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	f003 0310 	and.w	r3, r3, #16
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f000 8264 	beq.w	800f768 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ac:	4413      	add	r3, r2
 800f2ae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2b4:	4b84      	ldr	r3, [pc, #528]	; (800f4c8 <tcp_receive+0x26c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	db1b      	blt.n	800f2f6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2c2:	4b81      	ldr	r3, [pc, #516]	; (800f4c8 <tcp_receive+0x26c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d106      	bne.n	800f2d8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2ce:	4b7f      	ldr	r3, [pc, #508]	; (800f4cc <tcp_receive+0x270>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	db0e      	blt.n	800f2f6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2dc:	4b7b      	ldr	r3, [pc, #492]	; (800f4cc <tcp_receive+0x270>)
 800f2de:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d125      	bne.n	800f330 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2e4:	4b7a      	ldr	r3, [pc, #488]	; (800f4d0 <tcp_receive+0x274>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	89db      	ldrh	r3, [r3, #14]
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d91c      	bls.n	800f330 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f2f6:	4b76      	ldr	r3, [pc, #472]	; (800f4d0 <tcp_receive+0x274>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	89db      	ldrh	r3, [r3, #14]
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f310:	429a      	cmp	r2, r3
 800f312:	d205      	bcs.n	800f320 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f320:	4b69      	ldr	r3, [pc, #420]	; (800f4c8 <tcp_receive+0x26c>)
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f328:	4b68      	ldr	r3, [pc, #416]	; (800f4cc <tcp_receive+0x270>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f330:	4b66      	ldr	r3, [pc, #408]	; (800f4cc <tcp_receive+0x270>)
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	dc58      	bgt.n	800f3f0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f33e:	4b65      	ldr	r3, [pc, #404]	; (800f4d4 <tcp_receive+0x278>)
 800f340:	881b      	ldrh	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d14b      	bne.n	800f3de <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f350:	4413      	add	r3, r2
 800f352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f354:	429a      	cmp	r2, r3
 800f356:	d142      	bne.n	800f3de <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f35e:	2b00      	cmp	r3, #0
 800f360:	db3d      	blt.n	800f3de <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f366:	4b59      	ldr	r3, [pc, #356]	; (800f4cc <tcp_receive+0x270>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d137      	bne.n	800f3de <tcp_receive+0x182>
              found_dupack = 1;
 800f36e:	2301      	movs	r3, #1
 800f370:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f378:	2bff      	cmp	r3, #255	; 0xff
 800f37a:	d007      	beq.n	800f38c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f382:	3301      	adds	r3, #1
 800f384:	b2da      	uxtb	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f392:	2b03      	cmp	r3, #3
 800f394:	d91b      	bls.n	800f3ce <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3a0:	4413      	add	r3, r2
 800f3a2:	b29a      	uxth	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d30a      	bcc.n	800f3c4 <tcp_receive+0x168>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3b8:	4413      	add	r3, r2
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3c2:	e004      	b.n	800f3ce <tcp_receive+0x172>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d902      	bls.n	800f3de <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f002 fb43 	bl	8011a64 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f040 8161 	bne.w	800f6a8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f3ee:	e15b      	b.n	800f6a8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3f0:	4b36      	ldr	r3, [pc, #216]	; (800f4cc <tcp_receive+0x270>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f2c0 814e 	blt.w	800f69e <tcp_receive+0x442>
 800f402:	4b32      	ldr	r3, [pc, #200]	; (800f4cc <tcp_receive+0x270>)
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f40a:	1ad3      	subs	r3, r2, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f300 8146 	bgt.w	800f69e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	8b5b      	ldrh	r3, [r3, #26]
 800f416:	f003 0304 	and.w	r3, r3, #4
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d010      	beq.n	800f440 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	8b5b      	ldrh	r3, [r3, #26]
 800f422:	f023 0304 	bic.w	r3, r3, #4
 800f426:	b29a      	uxth	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f44e:	10db      	asrs	r3, r3, #3
 800f450:	b21b      	sxth	r3, r3
 800f452:	b29a      	uxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	4413      	add	r3, r2
 800f45e:	b29b      	uxth	r3, r3
 800f460:	b21a      	sxth	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f468:	4b18      	ldr	r3, [pc, #96]	; (800f4cc <tcp_receive+0x270>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f472:	b29b      	uxth	r3, r3
 800f474:	1ad3      	subs	r3, r2, r3
 800f476:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f480:	4b12      	ldr	r3, [pc, #72]	; (800f4cc <tcp_receive+0x270>)
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	7d1b      	ldrb	r3, [r3, #20]
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	f240 8097 	bls.w	800f5c0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d245      	bcs.n	800f52e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	8b5b      	ldrh	r3, [r3, #26]
 800f4a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d014      	beq.n	800f4d8 <tcp_receive+0x27c>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e013      	b.n	800f4da <tcp_receive+0x27e>
 800f4b2:	bf00      	nop
 800f4b4:	08017ac4 	.word	0x08017ac4
 800f4b8:	08017df4 	.word	0x08017df4
 800f4bc:	08017b10 	.word	0x08017b10
 800f4c0:	08017e10 	.word	0x08017e10
 800f4c4:	20011840 	.word	0x20011840
 800f4c8:	20011834 	.word	0x20011834
 800f4cc:	20011838 	.word	0x20011838
 800f4d0:	20011824 	.word	0x20011824
 800f4d4:	2001183e 	.word	0x2001183e
 800f4d8:	2302      	movs	r3, #2
 800f4da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f4de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4e8:	fb12 f303 	smulbb	r3, r2, r3
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	bf28      	it	cs
 800f4f4:	4613      	movcs	r3, r2
 800f4f6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f500:	4413      	add	r3, r2
 800f502:	b29a      	uxth	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d309      	bcc.n	800f522 <tcp_receive+0x2c6>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f514:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f516:	4413      	add	r3, r2
 800f518:	b29a      	uxth	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f520:	e04e      	b.n	800f5c0 <tcp_receive+0x364>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f528:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f52c:	e048      	b.n	800f5c0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f536:	4413      	add	r3, r2
 800f538:	b29a      	uxth	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f540:	429a      	cmp	r2, r3
 800f542:	d309      	bcc.n	800f558 <tcp_receive+0x2fc>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f54a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f54c:	4413      	add	r3, r2
 800f54e:	b29a      	uxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f556:	e004      	b.n	800f562 <tcp_receive+0x306>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f55e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f56e:	429a      	cmp	r2, r3
 800f570:	d326      	bcc.n	800f5c0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	b29a      	uxth	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f592:	4413      	add	r3, r2
 800f594:	b29a      	uxth	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d30a      	bcc.n	800f5b6 <tcp_receive+0x35a>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5aa:	4413      	add	r3, r2
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5b4:	e004      	b.n	800f5c0 <tcp_receive+0x364>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5c8:	4a98      	ldr	r2, [pc, #608]	; (800f82c <tcp_receive+0x5d0>)
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7ff fdca 	bl	800f164 <tcp_free_acked_segments>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5de:	4a94      	ldr	r2, [pc, #592]	; (800f830 <tcp_receive+0x5d4>)
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7ff fdbf 	bl	800f164 <tcp_free_acked_segments>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d104      	bne.n	800f5fe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5fa:	861a      	strh	r2, [r3, #48]	; 0x30
 800f5fc:	e002      	b.n	800f604 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d103      	bne.n	800f61a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f620:	4b84      	ldr	r3, [pc, #528]	; (800f834 <tcp_receive+0x5d8>)
 800f622:	881b      	ldrh	r3, [r3, #0]
 800f624:	4413      	add	r3, r2
 800f626:	b29a      	uxth	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	8b5b      	ldrh	r3, [r3, #26]
 800f632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f636:	2b00      	cmp	r3, #0
 800f638:	d035      	beq.n	800f6a6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d118      	bne.n	800f674 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00c      	beq.n	800f664 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	4618      	mov	r0, r3
 800f658:	f7fa fe6b 	bl	800a332 <lwip_htonl>
 800f65c:	4603      	mov	r3, r0
 800f65e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f660:	2b00      	cmp	r3, #0
 800f662:	dc20      	bgt.n	800f6a6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	8b5b      	ldrh	r3, [r3, #26]
 800f668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f672:	e018      	b.n	800f6a6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	4618      	mov	r0, r3
 800f682:	f7fa fe56 	bl	800a332 <lwip_htonl>
 800f686:	4603      	mov	r3, r0
 800f688:	1ae3      	subs	r3, r4, r3
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	dc0b      	bgt.n	800f6a6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	8b5b      	ldrh	r3, [r3, #26]
 800f692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f69c:	e003      	b.n	800f6a6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f002 fbce 	bl	8011e40 <tcp_send_empty_ack>
 800f6a4:	e000      	b.n	800f6a8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6a6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d05b      	beq.n	800f768 <tcp_receive+0x50c>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6b4:	4b60      	ldr	r3, [pc, #384]	; (800f838 <tcp_receive+0x5dc>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	da54      	bge.n	800f768 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f6be:	4b5f      	ldr	r3, [pc, #380]	; (800f83c <tcp_receive+0x5e0>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f6d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6dc:	10db      	asrs	r3, r3, #3
 800f6de:	b21b      	sxth	r3, r3
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6f6:	4413      	add	r3, r2
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	b21a      	sxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f700:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f704:	2b00      	cmp	r3, #0
 800f706:	da05      	bge.n	800f714 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f70c:	425b      	negs	r3, r3
 800f70e:	b29b      	uxth	r3, r3
 800f710:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f714:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f71e:	109b      	asrs	r3, r3, #2
 800f720:	b21b      	sxth	r3, r3
 800f722:	b29b      	uxth	r3, r3
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	b29b      	uxth	r3, r3
 800f728:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f732:	b29a      	uxth	r2, r3
 800f734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f738:	4413      	add	r3, r2
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	b21a      	sxth	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f748:	10db      	asrs	r3, r3, #3
 800f74a:	b21b      	sxth	r3, r3
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f754:	b29b      	uxth	r3, r3
 800f756:	4413      	add	r3, r2
 800f758:	b29b      	uxth	r3, r3
 800f75a:	b21a      	sxth	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f768:	4b35      	ldr	r3, [pc, #212]	; (800f840 <tcp_receive+0x5e4>)
 800f76a:	881b      	ldrh	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f000 84e2 	beq.w	8010136 <tcp_receive+0xeda>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	7d1b      	ldrb	r3, [r3, #20]
 800f776:	2b06      	cmp	r3, #6
 800f778:	f200 84dd 	bhi.w	8010136 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f780:	4b30      	ldr	r3, [pc, #192]	; (800f844 <tcp_receive+0x5e8>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	3b01      	subs	r3, #1
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f2c0 808f 	blt.w	800f8ac <tcp_receive+0x650>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f792:	4b2b      	ldr	r3, [pc, #172]	; (800f840 <tcp_receive+0x5e4>)
 800f794:	881b      	ldrh	r3, [r3, #0]
 800f796:	4619      	mov	r1, r3
 800f798:	4b2a      	ldr	r3, [pc, #168]	; (800f844 <tcp_receive+0x5e8>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	440b      	add	r3, r1
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	f300 8082 	bgt.w	800f8ac <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f7a8:	4b27      	ldr	r3, [pc, #156]	; (800f848 <tcp_receive+0x5ec>)
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7b2:	4b24      	ldr	r3, [pc, #144]	; (800f844 <tcp_receive+0x5e8>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f7ba:	4b23      	ldr	r3, [pc, #140]	; (800f848 <tcp_receive+0x5ec>)
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d106      	bne.n	800f7d0 <tcp_receive+0x574>
 800f7c2:	4b22      	ldr	r3, [pc, #136]	; (800f84c <tcp_receive+0x5f0>)
 800f7c4:	f240 5294 	movw	r2, #1428	; 0x594
 800f7c8:	4921      	ldr	r1, [pc, #132]	; (800f850 <tcp_receive+0x5f4>)
 800f7ca:	4822      	ldr	r0, [pc, #136]	; (800f854 <tcp_receive+0x5f8>)
 800f7cc:	f005 fc6c 	bl	80150a8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d906      	bls.n	800f7e8 <tcp_receive+0x58c>
 800f7da:	4b1c      	ldr	r3, [pc, #112]	; (800f84c <tcp_receive+0x5f0>)
 800f7dc:	f240 5295 	movw	r2, #1429	; 0x595
 800f7e0:	491d      	ldr	r1, [pc, #116]	; (800f858 <tcp_receive+0x5fc>)
 800f7e2:	481c      	ldr	r0, [pc, #112]	; (800f854 <tcp_receive+0x5f8>)
 800f7e4:	f005 fc60 	bl	80150a8 <iprintf>
      off = (u16_t)off32;
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f7ee:	4b16      	ldr	r3, [pc, #88]	; (800f848 <tcp_receive+0x5ec>)
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	891b      	ldrh	r3, [r3, #8]
 800f7f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d906      	bls.n	800f80a <tcp_receive+0x5ae>
 800f7fc:	4b13      	ldr	r3, [pc, #76]	; (800f84c <tcp_receive+0x5f0>)
 800f7fe:	f240 5297 	movw	r2, #1431	; 0x597
 800f802:	4916      	ldr	r1, [pc, #88]	; (800f85c <tcp_receive+0x600>)
 800f804:	4813      	ldr	r0, [pc, #76]	; (800f854 <tcp_receive+0x5f8>)
 800f806:	f005 fc4f 	bl	80150a8 <iprintf>
      inseg.len -= off;
 800f80a:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <tcp_receive+0x5ec>)
 800f80c:	891a      	ldrh	r2, [r3, #8]
 800f80e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	b29a      	uxth	r2, r3
 800f816:	4b0c      	ldr	r3, [pc, #48]	; (800f848 <tcp_receive+0x5ec>)
 800f818:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f81a:	4b0b      	ldr	r3, [pc, #44]	; (800f848 <tcp_receive+0x5ec>)
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	891a      	ldrh	r2, [r3, #8]
 800f820:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f828:	e02a      	b.n	800f880 <tcp_receive+0x624>
 800f82a:	bf00      	nop
 800f82c:	08017e2c 	.word	0x08017e2c
 800f830:	08017e34 	.word	0x08017e34
 800f834:	2001183c 	.word	0x2001183c
 800f838:	20011838 	.word	0x20011838
 800f83c:	200117fc 	.word	0x200117fc
 800f840:	2001183e 	.word	0x2001183e
 800f844:	20011834 	.word	0x20011834
 800f848:	20011814 	.word	0x20011814
 800f84c:	08017ac4 	.word	0x08017ac4
 800f850:	08017e3c 	.word	0x08017e3c
 800f854:	08017b10 	.word	0x08017b10
 800f858:	08017e4c 	.word	0x08017e4c
 800f85c:	08017e5c 	.word	0x08017e5c
        off -= p->len;
 800f860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f862:	895b      	ldrh	r3, [r3, #10]
 800f864:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f870:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f872:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f876:	2200      	movs	r2, #0
 800f878:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f882:	895b      	ldrh	r3, [r3, #10]
 800f884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f888:	429a      	cmp	r2, r3
 800f88a:	d8e9      	bhi.n	800f860 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f88c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f890:	4619      	mov	r1, r3
 800f892:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f894:	f7fc f89e 	bl	800b9d4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89c:	4a91      	ldr	r2, [pc, #580]	; (800fae4 <tcp_receive+0x888>)
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	4b91      	ldr	r3, [pc, #580]	; (800fae8 <tcp_receive+0x88c>)
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	4a8f      	ldr	r2, [pc, #572]	; (800fae4 <tcp_receive+0x888>)
 800f8a6:	6812      	ldr	r2, [r2, #0]
 800f8a8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f8aa:	e00d      	b.n	800f8c8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f8ac:	4b8d      	ldr	r3, [pc, #564]	; (800fae4 <tcp_receive+0x888>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	da06      	bge.n	800f8c8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	8b5b      	ldrh	r3, [r3, #26]
 800f8be:	f043 0302 	orr.w	r3, r3, #2
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f8c8:	4b86      	ldr	r3, [pc, #536]	; (800fae4 <tcp_receive+0x888>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f2c0 842a 	blt.w	801012c <tcp_receive+0xed0>
 800f8d8:	4b82      	ldr	r3, [pc, #520]	; (800fae4 <tcp_receive+0x888>)
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e0:	6879      	ldr	r1, [r7, #4]
 800f8e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8e4:	440b      	add	r3, r1
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f300 841e 	bgt.w	801012c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8f4:	4b7b      	ldr	r3, [pc, #492]	; (800fae4 <tcp_receive+0x888>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	f040 829a 	bne.w	800fe32 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f8fe:	4b7a      	ldr	r3, [pc, #488]	; (800fae8 <tcp_receive+0x88c>)
 800f900:	891c      	ldrh	r4, [r3, #8]
 800f902:	4b79      	ldr	r3, [pc, #484]	; (800fae8 <tcp_receive+0x88c>)
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	899b      	ldrh	r3, [r3, #12]
 800f908:	b29b      	uxth	r3, r3
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fa fcfc 	bl	800a308 <lwip_htons>
 800f910:	4603      	mov	r3, r0
 800f912:	b2db      	uxtb	r3, r3
 800f914:	f003 0303 	and.w	r3, r3, #3
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <tcp_receive+0x6c4>
 800f91c:	2301      	movs	r3, #1
 800f91e:	e000      	b.n	800f922 <tcp_receive+0x6c6>
 800f920:	2300      	movs	r3, #0
 800f922:	4423      	add	r3, r4
 800f924:	b29a      	uxth	r2, r3
 800f926:	4b71      	ldr	r3, [pc, #452]	; (800faec <tcp_receive+0x890>)
 800f928:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f92e:	4b6f      	ldr	r3, [pc, #444]	; (800faec <tcp_receive+0x890>)
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	429a      	cmp	r2, r3
 800f934:	d275      	bcs.n	800fa22 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f936:	4b6c      	ldr	r3, [pc, #432]	; (800fae8 <tcp_receive+0x88c>)
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	899b      	ldrh	r3, [r3, #12]
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fa fce2 	bl	800a308 <lwip_htons>
 800f944:	4603      	mov	r3, r0
 800f946:	b2db      	uxtb	r3, r3
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d01f      	beq.n	800f990 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f950:	4b65      	ldr	r3, [pc, #404]	; (800fae8 <tcp_receive+0x88c>)
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	899b      	ldrh	r3, [r3, #12]
 800f956:	b29b      	uxth	r3, r3
 800f958:	b21b      	sxth	r3, r3
 800f95a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f95e:	b21c      	sxth	r4, r3
 800f960:	4b61      	ldr	r3, [pc, #388]	; (800fae8 <tcp_receive+0x88c>)
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	899b      	ldrh	r3, [r3, #12]
 800f966:	b29b      	uxth	r3, r3
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fa fccd 	bl	800a308 <lwip_htons>
 800f96e:	4603      	mov	r3, r0
 800f970:	b2db      	uxtb	r3, r3
 800f972:	b29b      	uxth	r3, r3
 800f974:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f978:	b29b      	uxth	r3, r3
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fa fcc4 	bl	800a308 <lwip_htons>
 800f980:	4603      	mov	r3, r0
 800f982:	b21b      	sxth	r3, r3
 800f984:	4323      	orrs	r3, r4
 800f986:	b21a      	sxth	r2, r3
 800f988:	4b57      	ldr	r3, [pc, #348]	; (800fae8 <tcp_receive+0x88c>)
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	b292      	uxth	r2, r2
 800f98e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f994:	4b54      	ldr	r3, [pc, #336]	; (800fae8 <tcp_receive+0x88c>)
 800f996:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f998:	4b53      	ldr	r3, [pc, #332]	; (800fae8 <tcp_receive+0x88c>)
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	899b      	ldrh	r3, [r3, #12]
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fa fcb1 	bl	800a308 <lwip_htons>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	f003 0302 	and.w	r3, r3, #2
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d005      	beq.n	800f9be <tcp_receive+0x762>
            inseg.len -= 1;
 800f9b2:	4b4d      	ldr	r3, [pc, #308]	; (800fae8 <tcp_receive+0x88c>)
 800f9b4:	891b      	ldrh	r3, [r3, #8]
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	4b4b      	ldr	r3, [pc, #300]	; (800fae8 <tcp_receive+0x88c>)
 800f9bc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f9be:	4b4a      	ldr	r3, [pc, #296]	; (800fae8 <tcp_receive+0x88c>)
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	4a49      	ldr	r2, [pc, #292]	; (800fae8 <tcp_receive+0x88c>)
 800f9c4:	8912      	ldrh	r2, [r2, #8]
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fb ff03 	bl	800b7d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f9ce:	4b46      	ldr	r3, [pc, #280]	; (800fae8 <tcp_receive+0x88c>)
 800f9d0:	891c      	ldrh	r4, [r3, #8]
 800f9d2:	4b45      	ldr	r3, [pc, #276]	; (800fae8 <tcp_receive+0x88c>)
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	899b      	ldrh	r3, [r3, #12]
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fa fc94 	bl	800a308 <lwip_htons>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0303 	and.w	r3, r3, #3
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <tcp_receive+0x794>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	e000      	b.n	800f9f2 <tcp_receive+0x796>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	4423      	add	r3, r4
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	4b3d      	ldr	r3, [pc, #244]	; (800faec <tcp_receive+0x890>)
 800f9f8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f9fa:	4b3c      	ldr	r3, [pc, #240]	; (800faec <tcp_receive+0x890>)
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	4b38      	ldr	r3, [pc, #224]	; (800fae4 <tcp_receive+0x888>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	441a      	add	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa0e:	440b      	add	r3, r1
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d006      	beq.n	800fa22 <tcp_receive+0x7c6>
 800fa14:	4b36      	ldr	r3, [pc, #216]	; (800faf0 <tcp_receive+0x894>)
 800fa16:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fa1a:	4936      	ldr	r1, [pc, #216]	; (800faf4 <tcp_receive+0x898>)
 800fa1c:	4836      	ldr	r0, [pc, #216]	; (800faf8 <tcp_receive+0x89c>)
 800fa1e:	f005 fb43 	bl	80150a8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f000 80e7 	beq.w	800fbfa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa2c:	4b2e      	ldr	r3, [pc, #184]	; (800fae8 <tcp_receive+0x88c>)
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	899b      	ldrh	r3, [r3, #12]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fa fc67 	bl	800a308 <lwip_htons>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	f003 0301 	and.w	r3, r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d010      	beq.n	800fa68 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fa46:	e00a      	b.n	800fa5e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa4c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f7fd fcc4 	bl	800d3e6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d1f0      	bne.n	800fa48 <tcp_receive+0x7ec>
 800fa66:	e0c8      	b.n	800fbfa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fa6e:	e052      	b.n	800fb16 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	899b      	ldrh	r3, [r3, #12]
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fa fc45 	bl	800a308 <lwip_htons>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	f003 0301 	and.w	r3, r3, #1
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d03d      	beq.n	800fb06 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fa8a:	4b17      	ldr	r3, [pc, #92]	; (800fae8 <tcp_receive+0x88c>)
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	899b      	ldrh	r3, [r3, #12]
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fa fc38 	bl	800a308 <lwip_htons>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d130      	bne.n	800fb06 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800faa4:	4b10      	ldr	r3, [pc, #64]	; (800fae8 <tcp_receive+0x88c>)
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	899b      	ldrh	r3, [r3, #12]
 800faaa:	b29c      	uxth	r4, r3
 800faac:	2001      	movs	r0, #1
 800faae:	f7fa fc2b 	bl	800a308 <lwip_htons>
 800fab2:	4603      	mov	r3, r0
 800fab4:	461a      	mov	r2, r3
 800fab6:	4b0c      	ldr	r3, [pc, #48]	; (800fae8 <tcp_receive+0x88c>)
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	4322      	orrs	r2, r4
 800fabc:	b292      	uxth	r2, r2
 800fabe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fac0:	4b09      	ldr	r3, [pc, #36]	; (800fae8 <tcp_receive+0x88c>)
 800fac2:	891c      	ldrh	r4, [r3, #8]
 800fac4:	4b08      	ldr	r3, [pc, #32]	; (800fae8 <tcp_receive+0x88c>)
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	899b      	ldrh	r3, [r3, #12]
 800faca:	b29b      	uxth	r3, r3
 800facc:	4618      	mov	r0, r3
 800face:	f7fa fc1b 	bl	800a308 <lwip_htons>
 800fad2:	4603      	mov	r3, r0
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	f003 0303 	and.w	r3, r3, #3
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00e      	beq.n	800fafc <tcp_receive+0x8a0>
 800fade:	2301      	movs	r3, #1
 800fae0:	e00d      	b.n	800fafe <tcp_receive+0x8a2>
 800fae2:	bf00      	nop
 800fae4:	20011834 	.word	0x20011834
 800fae8:	20011814 	.word	0x20011814
 800faec:	2001183e 	.word	0x2001183e
 800faf0:	08017ac4 	.word	0x08017ac4
 800faf4:	08017e6c 	.word	0x08017e6c
 800faf8:	08017b10 	.word	0x08017b10
 800fafc:	2300      	movs	r3, #0
 800fafe:	4423      	add	r3, r4
 800fb00:	b29a      	uxth	r2, r3
 800fb02:	4b98      	ldr	r3, [pc, #608]	; (800fd64 <tcp_receive+0xb08>)
 800fb04:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fb06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb08:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fb10:	6938      	ldr	r0, [r7, #16]
 800fb12:	f7fd fc68 	bl	800d3e6 <tcp_seg_free>
            while (next &&
 800fb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00e      	beq.n	800fb3a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fb1c:	4b91      	ldr	r3, [pc, #580]	; (800fd64 <tcp_receive+0xb08>)
 800fb1e:	881b      	ldrh	r3, [r3, #0]
 800fb20:	461a      	mov	r2, r3
 800fb22:	4b91      	ldr	r3, [pc, #580]	; (800fd68 <tcp_receive+0xb0c>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	441a      	add	r2, r3
 800fb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb30:	8909      	ldrh	r1, [r1, #8]
 800fb32:	440b      	add	r3, r1
 800fb34:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	da9a      	bge.n	800fa70 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d059      	beq.n	800fbf4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800fb40:	4b88      	ldr	r3, [pc, #544]	; (800fd64 <tcp_receive+0xb08>)
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	461a      	mov	r2, r3
 800fb46:	4b88      	ldr	r3, [pc, #544]	; (800fd68 <tcp_receive+0xb0c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	441a      	add	r2, r3
 800fb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	dd4d      	ble.n	800fbf4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	4b81      	ldr	r3, [pc, #516]	; (800fd68 <tcp_receive+0xb0c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	4b80      	ldr	r3, [pc, #512]	; (800fd6c <tcp_receive+0xb10>)
 800fb6c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb6e:	4b7f      	ldr	r3, [pc, #508]	; (800fd6c <tcp_receive+0xb10>)
 800fb70:	68db      	ldr	r3, [r3, #12]
 800fb72:	899b      	ldrh	r3, [r3, #12]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fa fbc6 	bl	800a308 <lwip_htons>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	f003 0302 	and.w	r3, r3, #2
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d005      	beq.n	800fb94 <tcp_receive+0x938>
                inseg.len -= 1;
 800fb88:	4b78      	ldr	r3, [pc, #480]	; (800fd6c <tcp_receive+0xb10>)
 800fb8a:	891b      	ldrh	r3, [r3, #8]
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	4b76      	ldr	r3, [pc, #472]	; (800fd6c <tcp_receive+0xb10>)
 800fb92:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fb94:	4b75      	ldr	r3, [pc, #468]	; (800fd6c <tcp_receive+0xb10>)
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	4a74      	ldr	r2, [pc, #464]	; (800fd6c <tcp_receive+0xb10>)
 800fb9a:	8912      	ldrh	r2, [r2, #8]
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fb fe18 	bl	800b7d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fba4:	4b71      	ldr	r3, [pc, #452]	; (800fd6c <tcp_receive+0xb10>)
 800fba6:	891c      	ldrh	r4, [r3, #8]
 800fba8:	4b70      	ldr	r3, [pc, #448]	; (800fd6c <tcp_receive+0xb10>)
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	899b      	ldrh	r3, [r3, #12]
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fa fba9 	bl	800a308 <lwip_htons>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	f003 0303 	and.w	r3, r3, #3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d001      	beq.n	800fbc6 <tcp_receive+0x96a>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	e000      	b.n	800fbc8 <tcp_receive+0x96c>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	4423      	add	r3, r4
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	4b65      	ldr	r3, [pc, #404]	; (800fd64 <tcp_receive+0xb08>)
 800fbce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fbd0:	4b64      	ldr	r3, [pc, #400]	; (800fd64 <tcp_receive+0xb08>)
 800fbd2:	881b      	ldrh	r3, [r3, #0]
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	4b64      	ldr	r3, [pc, #400]	; (800fd68 <tcp_receive+0xb0c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	441a      	add	r2, r3
 800fbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d006      	beq.n	800fbf4 <tcp_receive+0x998>
 800fbe6:	4b62      	ldr	r3, [pc, #392]	; (800fd70 <tcp_receive+0xb14>)
 800fbe8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fbec:	4961      	ldr	r1, [pc, #388]	; (800fd74 <tcp_receive+0xb18>)
 800fbee:	4862      	ldr	r0, [pc, #392]	; (800fd78 <tcp_receive+0xb1c>)
 800fbf0:	f005 fa5a 	bl	80150a8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbf8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fbfa:	4b5a      	ldr	r3, [pc, #360]	; (800fd64 <tcp_receive+0xb08>)
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	4b59      	ldr	r3, [pc, #356]	; (800fd68 <tcp_receive+0xb0c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	441a      	add	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc0e:	4b55      	ldr	r3, [pc, #340]	; (800fd64 <tcp_receive+0xb08>)
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d206      	bcs.n	800fc24 <tcp_receive+0x9c8>
 800fc16:	4b56      	ldr	r3, [pc, #344]	; (800fd70 <tcp_receive+0xb14>)
 800fc18:	f240 6207 	movw	r2, #1543	; 0x607
 800fc1c:	4957      	ldr	r1, [pc, #348]	; (800fd7c <tcp_receive+0xb20>)
 800fc1e:	4856      	ldr	r0, [pc, #344]	; (800fd78 <tcp_receive+0xb1c>)
 800fc20:	f005 fa42 	bl	80150a8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc28:	4b4e      	ldr	r3, [pc, #312]	; (800fd64 <tcp_receive+0xb08>)
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7fc feb1 	bl	800c99c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fc3a:	4b4c      	ldr	r3, [pc, #304]	; (800fd6c <tcp_receive+0xb10>)
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	891b      	ldrh	r3, [r3, #8]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d006      	beq.n	800fc52 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800fc44:	4b49      	ldr	r3, [pc, #292]	; (800fd6c <tcp_receive+0xb10>)
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	4a4d      	ldr	r2, [pc, #308]	; (800fd80 <tcp_receive+0xb24>)
 800fc4a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fc4c:	4b47      	ldr	r3, [pc, #284]	; (800fd6c <tcp_receive+0xb10>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc52:	4b46      	ldr	r3, [pc, #280]	; (800fd6c <tcp_receive+0xb10>)
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	899b      	ldrh	r3, [r3, #12]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fa fb54 	bl	800a308 <lwip_htons>
 800fc60:	4603      	mov	r3, r0
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	f003 0301 	and.w	r3, r3, #1
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f000 80b8 	beq.w	800fdde <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fc6e:	4b45      	ldr	r3, [pc, #276]	; (800fd84 <tcp_receive+0xb28>)
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	f043 0320 	orr.w	r3, r3, #32
 800fc76:	b2da      	uxtb	r2, r3
 800fc78:	4b42      	ldr	r3, [pc, #264]	; (800fd84 <tcp_receive+0xb28>)
 800fc7a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fc7c:	e0af      	b.n	800fdde <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc82:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	4a36      	ldr	r2, [pc, #216]	; (800fd68 <tcp_receive+0xb0c>)
 800fc8e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	891b      	ldrh	r3, [r3, #8]
 800fc94:	461c      	mov	r4, r3
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	899b      	ldrh	r3, [r3, #12]
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fa fb32 	bl	800a308 <lwip_htons>
 800fca4:	4603      	mov	r3, r0
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	f003 0303 	and.w	r3, r3, #3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <tcp_receive+0xa58>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e000      	b.n	800fcb6 <tcp_receive+0xa5a>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	191a      	adds	r2, r3, r4
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcbc:	441a      	add	r2, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcc6:	461c      	mov	r4, r3
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	891b      	ldrh	r3, [r3, #8]
 800fccc:	461d      	mov	r5, r3
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	899b      	ldrh	r3, [r3, #12]
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fa fb16 	bl	800a308 <lwip_htons>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	f003 0303 	and.w	r3, r3, #3
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d001      	beq.n	800fcec <tcp_receive+0xa90>
 800fce8:	2301      	movs	r3, #1
 800fcea:	e000      	b.n	800fcee <tcp_receive+0xa92>
 800fcec:	2300      	movs	r3, #0
 800fcee:	442b      	add	r3, r5
 800fcf0:	429c      	cmp	r4, r3
 800fcf2:	d206      	bcs.n	800fd02 <tcp_receive+0xaa6>
 800fcf4:	4b1e      	ldr	r3, [pc, #120]	; (800fd70 <tcp_receive+0xb14>)
 800fcf6:	f240 622b 	movw	r2, #1579	; 0x62b
 800fcfa:	4923      	ldr	r1, [pc, #140]	; (800fd88 <tcp_receive+0xb2c>)
 800fcfc:	481e      	ldr	r0, [pc, #120]	; (800fd78 <tcp_receive+0xb1c>)
 800fcfe:	f005 f9d3 	bl	80150a8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	891b      	ldrh	r3, [r3, #8]
 800fd06:	461c      	mov	r4, r3
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	68db      	ldr	r3, [r3, #12]
 800fd0c:	899b      	ldrh	r3, [r3, #12]
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7fa faf9 	bl	800a308 <lwip_htons>
 800fd16:	4603      	mov	r3, r0
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	f003 0303 	and.w	r3, r3, #3
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <tcp_receive+0xaca>
 800fd22:	2301      	movs	r3, #1
 800fd24:	e000      	b.n	800fd28 <tcp_receive+0xacc>
 800fd26:	2300      	movs	r3, #0
 800fd28:	1919      	adds	r1, r3, r4
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd2e:	b28b      	uxth	r3, r1
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7fc fe2f 	bl	800c99c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	891b      	ldrh	r3, [r3, #8]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d028      	beq.n	800fd9a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fd48:	4b0d      	ldr	r3, [pc, #52]	; (800fd80 <tcp_receive+0xb24>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d01d      	beq.n	800fd8c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800fd50:	4b0b      	ldr	r3, [pc, #44]	; (800fd80 <tcp_receive+0xb24>)
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	f7fb ff8e 	bl	800bc7c <pbuf_cat>
 800fd60:	e018      	b.n	800fd94 <tcp_receive+0xb38>
 800fd62:	bf00      	nop
 800fd64:	2001183e 	.word	0x2001183e
 800fd68:	20011834 	.word	0x20011834
 800fd6c:	20011814 	.word	0x20011814
 800fd70:	08017ac4 	.word	0x08017ac4
 800fd74:	08017ea4 	.word	0x08017ea4
 800fd78:	08017b10 	.word	0x08017b10
 800fd7c:	08017ee0 	.word	0x08017ee0
 800fd80:	20011844 	.word	0x20011844
 800fd84:	20011841 	.word	0x20011841
 800fd88:	08017f00 	.word	0x08017f00
            } else {
              recv_data = cseg->p;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	4a70      	ldr	r2, [pc, #448]	; (800ff54 <tcp_receive+0xcf8>)
 800fd92:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2200      	movs	r2, #0
 800fd98:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	899b      	ldrh	r3, [r3, #12]
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fa fab0 	bl	800a308 <lwip_htons>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	f003 0301 	and.w	r3, r3, #1
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00d      	beq.n	800fdd0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fdb4:	4b68      	ldr	r3, [pc, #416]	; (800ff58 <tcp_receive+0xcfc>)
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	f043 0320 	orr.w	r3, r3, #32
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	4b66      	ldr	r3, [pc, #408]	; (800ff58 <tcp_receive+0xcfc>)
 800fdc0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	7d1b      	ldrb	r3, [r3, #20]
 800fdc6:	2b04      	cmp	r3, #4
 800fdc8:	d102      	bne.n	800fdd0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2207      	movs	r2, #7
 800fdce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fdd8:	68b8      	ldr	r0, [r7, #8]
 800fdda:	f7fd fb04 	bl	800d3e6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d008      	beq.n	800fdf8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	f43f af43 	beq.w	800fc7e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	8b5b      	ldrh	r3, [r3, #26]
 800fdfc:	f003 0301 	and.w	r3, r3, #1
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00e      	beq.n	800fe22 <tcp_receive+0xbc6>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	8b5b      	ldrh	r3, [r3, #26]
 800fe08:	f023 0301 	bic.w	r3, r3, #1
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	835a      	strh	r2, [r3, #26]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	8b5b      	ldrh	r3, [r3, #26]
 800fe16:	f043 0302 	orr.w	r3, r3, #2
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe20:	e188      	b.n	8010134 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	8b5b      	ldrh	r3, [r3, #26]
 800fe26:	f043 0301 	orr.w	r3, r3, #1
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe30:	e180      	b.n	8010134 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d106      	bne.n	800fe48 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fe3a:	4848      	ldr	r0, [pc, #288]	; (800ff5c <tcp_receive+0xd00>)
 800fe3c:	f7fd faec 	bl	800d418 <tcp_seg_copy>
 800fe40:	4602      	mov	r2, r0
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	675a      	str	r2, [r3, #116]	; 0x74
 800fe46:	e16d      	b.n	8010124 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe50:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe52:	e157      	b.n	8010104 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	685a      	ldr	r2, [r3, #4]
 800fe5a:	4b41      	ldr	r3, [pc, #260]	; (800ff60 <tcp_receive+0xd04>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d11d      	bne.n	800fe9e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fe62:	4b3e      	ldr	r3, [pc, #248]	; (800ff5c <tcp_receive+0xd00>)
 800fe64:	891a      	ldrh	r2, [r3, #8]
 800fe66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe68:	891b      	ldrh	r3, [r3, #8]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	f240 814f 	bls.w	801010e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fe70:	483a      	ldr	r0, [pc, #232]	; (800ff5c <tcp_receive+0xd00>)
 800fe72:	f7fd fad1 	bl	800d418 <tcp_seg_copy>
 800fe76:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f000 8149 	beq.w	8010112 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fe80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d003      	beq.n	800fe8e <tcp_receive+0xc32>
                    prev->next = cseg;
 800fe86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	601a      	str	r2, [r3, #0]
 800fe8c:	e002      	b.n	800fe94 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fe94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe96:	6978      	ldr	r0, [r7, #20]
 800fe98:	f7ff f8dc 	bl	800f054 <tcp_oos_insert_segment>
                }
                break;
 800fe9c:	e139      	b.n	8010112 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fe9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d117      	bne.n	800fed4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fea4:	4b2e      	ldr	r3, [pc, #184]	; (800ff60 <tcp_receive+0xd04>)
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	1ad3      	subs	r3, r2, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	da57      	bge.n	800ff64 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800feb4:	4829      	ldr	r0, [pc, #164]	; (800ff5c <tcp_receive+0xd00>)
 800feb6:	f7fd faaf 	bl	800d418 <tcp_seg_copy>
 800feba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f000 8129 	beq.w	8010116 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	69ba      	ldr	r2, [r7, #24]
 800fec8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800feca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fecc:	69b8      	ldr	r0, [r7, #24]
 800fece:	f7ff f8c1 	bl	800f054 <tcp_oos_insert_segment>
                  }
                  break;
 800fed2:	e120      	b.n	8010116 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fed4:	4b22      	ldr	r3, [pc, #136]	; (800ff60 <tcp_receive+0xd04>)
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	1ad3      	subs	r3, r2, r3
 800fee0:	3b01      	subs	r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	db3e      	blt.n	800ff64 <tcp_receive+0xd08>
 800fee6:	4b1e      	ldr	r3, [pc, #120]	; (800ff60 <tcp_receive+0xd04>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	3301      	adds	r3, #1
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	dc35      	bgt.n	800ff64 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fef8:	4818      	ldr	r0, [pc, #96]	; (800ff5c <tcp_receive+0xd00>)
 800fefa:	f7fd fa8d 	bl	800d418 <tcp_seg_copy>
 800fefe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 8109 	beq.w	801011a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ff08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff10:	8912      	ldrh	r2, [r2, #8]
 800ff12:	441a      	add	r2, r3
 800ff14:	4b12      	ldr	r3, [pc, #72]	; (800ff60 <tcp_receive+0xd04>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	dd12      	ble.n	800ff44 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ff1e:	4b10      	ldr	r3, [pc, #64]	; (800ff60 <tcp_receive+0xd04>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	1ad3      	subs	r3, r2, r3
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff32:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ff34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff36:	685a      	ldr	r2, [r3, #4]
 800ff38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff3a:	891b      	ldrh	r3, [r3, #8]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	4610      	mov	r0, r2
 800ff40:	f7fb fc48 	bl	800b7d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ff44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff46:	69fa      	ldr	r2, [r7, #28]
 800ff48:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ff4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff4c:	69f8      	ldr	r0, [r7, #28]
 800ff4e:	f7ff f881 	bl	800f054 <tcp_oos_insert_segment>
                  }
                  break;
 800ff52:	e0e2      	b.n	801011a <tcp_receive+0xebe>
 800ff54:	20011844 	.word	0x20011844
 800ff58:	20011841 	.word	0x20011841
 800ff5c:	20011814 	.word	0x20011814
 800ff60:	20011834 	.word	0x20011834
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ff68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f040 80c6 	bne.w	80100fe <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ff72:	4b80      	ldr	r3, [pc, #512]	; (8010174 <tcp_receive+0xf18>)
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f340 80bd 	ble.w	80100fe <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	899b      	ldrh	r3, [r3, #12]
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fa f9bb 	bl	800a308 <lwip_htons>
 800ff92:	4603      	mov	r3, r0
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	f003 0301 	and.w	r3, r3, #1
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f040 80bf 	bne.w	801011e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ffa0:	4875      	ldr	r0, [pc, #468]	; (8010178 <tcp_receive+0xf1c>)
 800ffa2:	f7fd fa39 	bl	800d418 <tcp_seg_copy>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffaa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	f000 80b6 	beq.w	8010122 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ffb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffbe:	8912      	ldrh	r2, [r2, #8]
 800ffc0:	441a      	add	r2, r3
 800ffc2:	4b6c      	ldr	r3, [pc, #432]	; (8010174 <tcp_receive+0xf18>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	1ad3      	subs	r3, r2, r3
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	dd12      	ble.n	800fff2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ffcc:	4b69      	ldr	r3, [pc, #420]	; (8010174 <tcp_receive+0xf18>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe4:	685a      	ldr	r2, [r3, #4]
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe8:	891b      	ldrh	r3, [r3, #8]
 800ffea:	4619      	mov	r1, r3
 800ffec:	4610      	mov	r0, r2
 800ffee:	f7fb fbf1 	bl	800b7d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fff2:	4b62      	ldr	r3, [pc, #392]	; (801017c <tcp_receive+0xf20>)
 800fff4:	881b      	ldrh	r3, [r3, #0]
 800fff6:	461a      	mov	r2, r3
 800fff8:	4b5e      	ldr	r3, [pc, #376]	; (8010174 <tcp_receive+0xf18>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	441a      	add	r2, r3
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	6879      	ldr	r1, [r7, #4]
 8010004:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010006:	440b      	add	r3, r1
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	2b00      	cmp	r3, #0
 801000c:	f340 8089 	ble.w	8010122 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	899b      	ldrh	r3, [r3, #12]
 8010018:	b29b      	uxth	r3, r3
 801001a:	4618      	mov	r0, r3
 801001c:	f7fa f974 	bl	800a308 <lwip_htons>
 8010020:	4603      	mov	r3, r0
 8010022:	b2db      	uxtb	r3, r3
 8010024:	f003 0301 	and.w	r3, r3, #1
 8010028:	2b00      	cmp	r3, #0
 801002a:	d022      	beq.n	8010072 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801002c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	899b      	ldrh	r3, [r3, #12]
 8010034:	b29b      	uxth	r3, r3
 8010036:	b21b      	sxth	r3, r3
 8010038:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801003c:	b21c      	sxth	r4, r3
 801003e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	4618      	mov	r0, r3
 801004a:	f7fa f95d 	bl	800a308 <lwip_htons>
 801004e:	4603      	mov	r3, r0
 8010050:	b2db      	uxtb	r3, r3
 8010052:	b29b      	uxth	r3, r3
 8010054:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010058:	b29b      	uxth	r3, r3
 801005a:	4618      	mov	r0, r3
 801005c:	f7fa f954 	bl	800a308 <lwip_htons>
 8010060:	4603      	mov	r3, r0
 8010062:	b21b      	sxth	r3, r3
 8010064:	4323      	orrs	r3, r4
 8010066:	b21a      	sxth	r2, r3
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	b292      	uxth	r2, r2
 8010070:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010076:	b29a      	uxth	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801007c:	4413      	add	r3, r2
 801007e:	b299      	uxth	r1, r3
 8010080:	4b3c      	ldr	r3, [pc, #240]	; (8010174 <tcp_receive+0xf18>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	b29a      	uxth	r2, r3
 8010086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	1a8a      	subs	r2, r1, r2
 801008c:	b292      	uxth	r2, r2
 801008e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	685a      	ldr	r2, [r3, #4]
 8010096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	891b      	ldrh	r3, [r3, #8]
 801009c:	4619      	mov	r1, r3
 801009e:	4610      	mov	r0, r2
 80100a0:	f7fb fb98 	bl	800b7d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	891c      	ldrh	r4, [r3, #8]
 80100aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	899b      	ldrh	r3, [r3, #12]
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fa f927 	bl	800a308 <lwip_htons>
 80100ba:	4603      	mov	r3, r0
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	f003 0303 	and.w	r3, r3, #3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d001      	beq.n	80100ca <tcp_receive+0xe6e>
 80100c6:	2301      	movs	r3, #1
 80100c8:	e000      	b.n	80100cc <tcp_receive+0xe70>
 80100ca:	2300      	movs	r3, #0
 80100cc:	4423      	add	r3, r4
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	4b2a      	ldr	r3, [pc, #168]	; (801017c <tcp_receive+0xf20>)
 80100d2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100d4:	4b29      	ldr	r3, [pc, #164]	; (801017c <tcp_receive+0xf20>)
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	461a      	mov	r2, r3
 80100da:	4b26      	ldr	r3, [pc, #152]	; (8010174 <tcp_receive+0xf18>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	441a      	add	r2, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e4:	6879      	ldr	r1, [r7, #4]
 80100e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100e8:	440b      	add	r3, r1
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d019      	beq.n	8010122 <tcp_receive+0xec6>
 80100ee:	4b24      	ldr	r3, [pc, #144]	; (8010180 <tcp_receive+0xf24>)
 80100f0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80100f4:	4923      	ldr	r1, [pc, #140]	; (8010184 <tcp_receive+0xf28>)
 80100f6:	4824      	ldr	r0, [pc, #144]	; (8010188 <tcp_receive+0xf2c>)
 80100f8:	f004 ffd6 	bl	80150a8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80100fc:	e011      	b.n	8010122 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	63bb      	str	r3, [r7, #56]	; 0x38
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	2b00      	cmp	r3, #0
 8010108:	f47f aea4 	bne.w	800fe54 <tcp_receive+0xbf8>
 801010c:	e00a      	b.n	8010124 <tcp_receive+0xec8>
                break;
 801010e:	bf00      	nop
 8010110:	e008      	b.n	8010124 <tcp_receive+0xec8>
                break;
 8010112:	bf00      	nop
 8010114:	e006      	b.n	8010124 <tcp_receive+0xec8>
                  break;
 8010116:	bf00      	nop
 8010118:	e004      	b.n	8010124 <tcp_receive+0xec8>
                  break;
 801011a:	bf00      	nop
 801011c:	e002      	b.n	8010124 <tcp_receive+0xec8>
                  break;
 801011e:	bf00      	nop
 8010120:	e000      	b.n	8010124 <tcp_receive+0xec8>
                break;
 8010122:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f001 fe8b 	bl	8011e40 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801012a:	e003      	b.n	8010134 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f001 fe87 	bl	8011e40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010132:	e01a      	b.n	801016a <tcp_receive+0xf0e>
 8010134:	e019      	b.n	801016a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010136:	4b0f      	ldr	r3, [pc, #60]	; (8010174 <tcp_receive+0xf18>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	db0a      	blt.n	801015a <tcp_receive+0xefe>
 8010144:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <tcp_receive+0xf18>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014c:	6879      	ldr	r1, [r7, #4]
 801014e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010150:	440b      	add	r3, r1
 8010152:	1ad3      	subs	r3, r2, r3
 8010154:	3301      	adds	r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	dd07      	ble.n	801016a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8b5b      	ldrh	r3, [r3, #26]
 801015e:	f043 0302 	orr.w	r3, r3, #2
 8010162:	b29a      	uxth	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010168:	e7ff      	b.n	801016a <tcp_receive+0xf0e>
 801016a:	bf00      	nop
 801016c:	3750      	adds	r7, #80	; 0x50
 801016e:	46bd      	mov	sp, r7
 8010170:	bdb0      	pop	{r4, r5, r7, pc}
 8010172:	bf00      	nop
 8010174:	20011834 	.word	0x20011834
 8010178:	20011814 	.word	0x20011814
 801017c:	2001183e 	.word	0x2001183e
 8010180:	08017ac4 	.word	0x08017ac4
 8010184:	08017e6c 	.word	0x08017e6c
 8010188:	08017b10 	.word	0x08017b10

0801018c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010192:	4b15      	ldr	r3, [pc, #84]	; (80101e8 <tcp_get_next_optbyte+0x5c>)
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	1c5a      	adds	r2, r3, #1
 8010198:	b291      	uxth	r1, r2
 801019a:	4a13      	ldr	r2, [pc, #76]	; (80101e8 <tcp_get_next_optbyte+0x5c>)
 801019c:	8011      	strh	r1, [r2, #0]
 801019e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80101a0:	4b12      	ldr	r3, [pc, #72]	; (80101ec <tcp_get_next_optbyte+0x60>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d004      	beq.n	80101b2 <tcp_get_next_optbyte+0x26>
 80101a8:	4b11      	ldr	r3, [pc, #68]	; (80101f0 <tcp_get_next_optbyte+0x64>)
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	88fa      	ldrh	r2, [r7, #6]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d208      	bcs.n	80101c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80101b2:	4b10      	ldr	r3, [pc, #64]	; (80101f4 <tcp_get_next_optbyte+0x68>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	3314      	adds	r3, #20
 80101b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80101ba:	88fb      	ldrh	r3, [r7, #6]
 80101bc:	683a      	ldr	r2, [r7, #0]
 80101be:	4413      	add	r3, r2
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	e00b      	b.n	80101dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80101c4:	88fb      	ldrh	r3, [r7, #6]
 80101c6:	b2da      	uxtb	r2, r3
 80101c8:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <tcp_get_next_optbyte+0x64>)
 80101ca:	881b      	ldrh	r3, [r3, #0]
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	1ad3      	subs	r3, r2, r3
 80101d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80101d2:	4b06      	ldr	r3, [pc, #24]	; (80101ec <tcp_get_next_optbyte+0x60>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	797b      	ldrb	r3, [r7, #5]
 80101d8:	4413      	add	r3, r2
 80101da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80101dc:	4618      	mov	r0, r3
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr
 80101e8:	20011830 	.word	0x20011830
 80101ec:	2001182c 	.word	0x2001182c
 80101f0:	2001182a 	.word	0x2001182a
 80101f4:	20011824 	.word	0x20011824

080101f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d106      	bne.n	8010214 <tcp_parseopt+0x1c>
 8010206:	4b32      	ldr	r3, [pc, #200]	; (80102d0 <tcp_parseopt+0xd8>)
 8010208:	f240 727d 	movw	r2, #1917	; 0x77d
 801020c:	4931      	ldr	r1, [pc, #196]	; (80102d4 <tcp_parseopt+0xdc>)
 801020e:	4832      	ldr	r0, [pc, #200]	; (80102d8 <tcp_parseopt+0xe0>)
 8010210:	f004 ff4a 	bl	80150a8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010214:	4b31      	ldr	r3, [pc, #196]	; (80102dc <tcp_parseopt+0xe4>)
 8010216:	881b      	ldrh	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d055      	beq.n	80102c8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801021c:	4b30      	ldr	r3, [pc, #192]	; (80102e0 <tcp_parseopt+0xe8>)
 801021e:	2200      	movs	r2, #0
 8010220:	801a      	strh	r2, [r3, #0]
 8010222:	e045      	b.n	80102b0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010224:	f7ff ffb2 	bl	801018c <tcp_get_next_optbyte>
 8010228:	4603      	mov	r3, r0
 801022a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801022c:	7bfb      	ldrb	r3, [r7, #15]
 801022e:	2b02      	cmp	r3, #2
 8010230:	d006      	beq.n	8010240 <tcp_parseopt+0x48>
 8010232:	2b02      	cmp	r3, #2
 8010234:	dc2b      	bgt.n	801028e <tcp_parseopt+0x96>
 8010236:	2b00      	cmp	r3, #0
 8010238:	d041      	beq.n	80102be <tcp_parseopt+0xc6>
 801023a:	2b01      	cmp	r3, #1
 801023c:	d127      	bne.n	801028e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801023e:	e037      	b.n	80102b0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010240:	f7ff ffa4 	bl	801018c <tcp_get_next_optbyte>
 8010244:	4603      	mov	r3, r0
 8010246:	2b04      	cmp	r3, #4
 8010248:	d13b      	bne.n	80102c2 <tcp_parseopt+0xca>
 801024a:	4b25      	ldr	r3, [pc, #148]	; (80102e0 <tcp_parseopt+0xe8>)
 801024c:	881b      	ldrh	r3, [r3, #0]
 801024e:	3301      	adds	r3, #1
 8010250:	4a22      	ldr	r2, [pc, #136]	; (80102dc <tcp_parseopt+0xe4>)
 8010252:	8812      	ldrh	r2, [r2, #0]
 8010254:	4293      	cmp	r3, r2
 8010256:	da34      	bge.n	80102c2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010258:	f7ff ff98 	bl	801018c <tcp_get_next_optbyte>
 801025c:	4603      	mov	r3, r0
 801025e:	b29b      	uxth	r3, r3
 8010260:	021b      	lsls	r3, r3, #8
 8010262:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010264:	f7ff ff92 	bl	801018c <tcp_get_next_optbyte>
 8010268:	4603      	mov	r3, r0
 801026a:	b29a      	uxth	r2, r3
 801026c:	89bb      	ldrh	r3, [r7, #12]
 801026e:	4313      	orrs	r3, r2
 8010270:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010272:	89bb      	ldrh	r3, [r7, #12]
 8010274:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010278:	d804      	bhi.n	8010284 <tcp_parseopt+0x8c>
 801027a:	89bb      	ldrh	r3, [r7, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d001      	beq.n	8010284 <tcp_parseopt+0x8c>
 8010280:	89ba      	ldrh	r2, [r7, #12]
 8010282:	e001      	b.n	8010288 <tcp_parseopt+0x90>
 8010284:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801028c:	e010      	b.n	80102b0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801028e:	f7ff ff7d 	bl	801018c <tcp_get_next_optbyte>
 8010292:	4603      	mov	r3, r0
 8010294:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010296:	7afb      	ldrb	r3, [r7, #11]
 8010298:	2b01      	cmp	r3, #1
 801029a:	d914      	bls.n	80102c6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801029c:	7afb      	ldrb	r3, [r7, #11]
 801029e:	b29a      	uxth	r2, r3
 80102a0:	4b0f      	ldr	r3, [pc, #60]	; (80102e0 <tcp_parseopt+0xe8>)
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	4413      	add	r3, r2
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	3b02      	subs	r3, #2
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	4b0c      	ldr	r3, [pc, #48]	; (80102e0 <tcp_parseopt+0xe8>)
 80102ae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102b0:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <tcp_parseopt+0xe8>)
 80102b2:	881a      	ldrh	r2, [r3, #0]
 80102b4:	4b09      	ldr	r3, [pc, #36]	; (80102dc <tcp_parseopt+0xe4>)
 80102b6:	881b      	ldrh	r3, [r3, #0]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d3b3      	bcc.n	8010224 <tcp_parseopt+0x2c>
 80102bc:	e004      	b.n	80102c8 <tcp_parseopt+0xd0>
          return;
 80102be:	bf00      	nop
 80102c0:	e002      	b.n	80102c8 <tcp_parseopt+0xd0>
            return;
 80102c2:	bf00      	nop
 80102c4:	e000      	b.n	80102c8 <tcp_parseopt+0xd0>
            return;
 80102c6:	bf00      	nop
      }
    }
  }
}
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	08017ac4 	.word	0x08017ac4
 80102d4:	08017f28 	.word	0x08017f28
 80102d8:	08017b10 	.word	0x08017b10
 80102dc:	20011828 	.word	0x20011828
 80102e0:	20011830 	.word	0x20011830

080102e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80102e4:	b480      	push	{r7}
 80102e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80102e8:	4b05      	ldr	r3, [pc, #20]	; (8010300 <tcp_trigger_input_pcb_close+0x1c>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f043 0310 	orr.w	r3, r3, #16
 80102f0:	b2da      	uxtb	r2, r3
 80102f2:	4b03      	ldr	r3, [pc, #12]	; (8010300 <tcp_trigger_input_pcb_close+0x1c>)
 80102f4:	701a      	strb	r2, [r3, #0]
}
 80102f6:	bf00      	nop
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr
 8010300:	20011841 	.word	0x20011841

08010304 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00a      	beq.n	801032c <tcp_route+0x28>
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	7a1b      	ldrb	r3, [r3, #8]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d006      	beq.n	801032c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	7a1b      	ldrb	r3, [r3, #8]
 8010322:	4618      	mov	r0, r3
 8010324:	f7fb f84e 	bl	800b3c4 <netif_get_by_index>
 8010328:	4603      	mov	r3, r0
 801032a:	e003      	b.n	8010334 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f003 f94b 	bl	80135c8 <ip4_route>
 8010332:	4603      	mov	r3, r0
  }
}
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801033c:	b590      	push	{r4, r7, lr}
 801033e:	b087      	sub	sp, #28
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	603b      	str	r3, [r7, #0]
 8010348:	4613      	mov	r3, r2
 801034a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d105      	bne.n	801035e <tcp_create_segment+0x22>
 8010352:	4b44      	ldr	r3, [pc, #272]	; (8010464 <tcp_create_segment+0x128>)
 8010354:	22a3      	movs	r2, #163	; 0xa3
 8010356:	4944      	ldr	r1, [pc, #272]	; (8010468 <tcp_create_segment+0x12c>)
 8010358:	4844      	ldr	r0, [pc, #272]	; (801046c <tcp_create_segment+0x130>)
 801035a:	f004 fea5 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d105      	bne.n	8010370 <tcp_create_segment+0x34>
 8010364:	4b3f      	ldr	r3, [pc, #252]	; (8010464 <tcp_create_segment+0x128>)
 8010366:	22a4      	movs	r2, #164	; 0xa4
 8010368:	4941      	ldr	r1, [pc, #260]	; (8010470 <tcp_create_segment+0x134>)
 801036a:	4840      	ldr	r0, [pc, #256]	; (801046c <tcp_create_segment+0x130>)
 801036c:	f004 fe9c 	bl	80150a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010370:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f003 0304 	and.w	r3, r3, #4
 801037c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801037e:	2002      	movs	r0, #2
 8010380:	f7fa fc98 	bl	800acb4 <memp_malloc>
 8010384:	6138      	str	r0, [r7, #16]
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d104      	bne.n	8010396 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801038c:	68b8      	ldr	r0, [r7, #8]
 801038e:	f7fb fba7 	bl	800bae0 <pbuf_free>
    return NULL;
 8010392:	2300      	movs	r3, #0
 8010394:	e061      	b.n	801045a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801039c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	2200      	movs	r2, #0
 80103a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	68ba      	ldr	r2, [r7, #8]
 80103a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	891a      	ldrh	r2, [r3, #8]
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d205      	bcs.n	80103c2 <tcp_create_segment+0x86>
 80103b6:	4b2b      	ldr	r3, [pc, #172]	; (8010464 <tcp_create_segment+0x128>)
 80103b8:	22b0      	movs	r2, #176	; 0xb0
 80103ba:	492e      	ldr	r1, [pc, #184]	; (8010474 <tcp_create_segment+0x138>)
 80103bc:	482b      	ldr	r0, [pc, #172]	; (801046c <tcp_create_segment+0x130>)
 80103be:	f004 fe73 	bl	80150a8 <iprintf>
  seg->len = p->tot_len - optlen;
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	891a      	ldrh	r2, [r3, #8]
 80103c6:	7dfb      	ldrb	r3, [r7, #23]
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80103d2:	2114      	movs	r1, #20
 80103d4:	68b8      	ldr	r0, [r7, #8]
 80103d6:	f7fb faed 	bl	800b9b4 <pbuf_add_header>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80103e0:	6938      	ldr	r0, [r7, #16]
 80103e2:	f7fd f800 	bl	800d3e6 <tcp_seg_free>
    return NULL;
 80103e6:	2300      	movs	r3, #0
 80103e8:	e037      	b.n	801045a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	685a      	ldr	r2, [r3, #4]
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	8ada      	ldrh	r2, [r3, #22]
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	68dc      	ldr	r4, [r3, #12]
 80103fc:	4610      	mov	r0, r2
 80103fe:	f7f9 ff83 	bl	800a308 <lwip_htons>
 8010402:	4603      	mov	r3, r0
 8010404:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	8b1a      	ldrh	r2, [r3, #24]
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	68dc      	ldr	r4, [r3, #12]
 801040e:	4610      	mov	r0, r2
 8010410:	f7f9 ff7a 	bl	800a308 <lwip_htons>
 8010414:	4603      	mov	r3, r0
 8010416:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	68dc      	ldr	r4, [r3, #12]
 801041c:	6838      	ldr	r0, [r7, #0]
 801041e:	f7f9 ff88 	bl	800a332 <lwip_htonl>
 8010422:	4603      	mov	r3, r0
 8010424:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010426:	7dfb      	ldrb	r3, [r7, #23]
 8010428:	089b      	lsrs	r3, r3, #2
 801042a:	b2db      	uxtb	r3, r3
 801042c:	b29b      	uxth	r3, r3
 801042e:	3305      	adds	r3, #5
 8010430:	b29b      	uxth	r3, r3
 8010432:	031b      	lsls	r3, r3, #12
 8010434:	b29a      	uxth	r2, r3
 8010436:	79fb      	ldrb	r3, [r7, #7]
 8010438:	b29b      	uxth	r3, r3
 801043a:	4313      	orrs	r3, r2
 801043c:	b29a      	uxth	r2, r3
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	68dc      	ldr	r4, [r3, #12]
 8010442:	4610      	mov	r0, r2
 8010444:	f7f9 ff60 	bl	800a308 <lwip_htons>
 8010448:	4603      	mov	r3, r0
 801044a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	2200      	movs	r2, #0
 8010452:	749a      	strb	r2, [r3, #18]
 8010454:	2200      	movs	r2, #0
 8010456:	74da      	strb	r2, [r3, #19]
  return seg;
 8010458:	693b      	ldr	r3, [r7, #16]
}
 801045a:	4618      	mov	r0, r3
 801045c:	371c      	adds	r7, #28
 801045e:	46bd      	mov	sp, r7
 8010460:	bd90      	pop	{r4, r7, pc}
 8010462:	bf00      	nop
 8010464:	08017f44 	.word	0x08017f44
 8010468:	08017f78 	.word	0x08017f78
 801046c:	08017f98 	.word	0x08017f98
 8010470:	08017fc0 	.word	0x08017fc0
 8010474:	08017fe4 	.word	0x08017fe4

08010478 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af00      	add	r7, sp, #0
 801047e:	607b      	str	r3, [r7, #4]
 8010480:	4603      	mov	r3, r0
 8010482:	73fb      	strb	r3, [r7, #15]
 8010484:	460b      	mov	r3, r1
 8010486:	81bb      	strh	r3, [r7, #12]
 8010488:	4613      	mov	r3, r2
 801048a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801048c:	89bb      	ldrh	r3, [r7, #12]
 801048e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d105      	bne.n	80104a2 <tcp_pbuf_prealloc+0x2a>
 8010496:	4b30      	ldr	r3, [pc, #192]	; (8010558 <tcp_pbuf_prealloc+0xe0>)
 8010498:	22e8      	movs	r2, #232	; 0xe8
 801049a:	4930      	ldr	r1, [pc, #192]	; (801055c <tcp_pbuf_prealloc+0xe4>)
 801049c:	4830      	ldr	r0, [pc, #192]	; (8010560 <tcp_pbuf_prealloc+0xe8>)
 801049e:	f004 fe03 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80104a2:	6a3b      	ldr	r3, [r7, #32]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d105      	bne.n	80104b4 <tcp_pbuf_prealloc+0x3c>
 80104a8:	4b2b      	ldr	r3, [pc, #172]	; (8010558 <tcp_pbuf_prealloc+0xe0>)
 80104aa:	22e9      	movs	r2, #233	; 0xe9
 80104ac:	492d      	ldr	r1, [pc, #180]	; (8010564 <tcp_pbuf_prealloc+0xec>)
 80104ae:	482c      	ldr	r0, [pc, #176]	; (8010560 <tcp_pbuf_prealloc+0xe8>)
 80104b0:	f004 fdfa 	bl	80150a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80104b4:	89ba      	ldrh	r2, [r7, #12]
 80104b6:	897b      	ldrh	r3, [r7, #10]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d221      	bcs.n	8010500 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80104bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104c0:	f003 0302 	and.w	r3, r3, #2
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d111      	bne.n	80104ec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80104c8:	6a3b      	ldr	r3, [r7, #32]
 80104ca:	8b5b      	ldrh	r3, [r3, #26]
 80104cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d115      	bne.n	8010500 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80104d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d007      	beq.n	80104ec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d103      	bne.n	80104ec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d009      	beq.n	8010500 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80104ec:	89bb      	ldrh	r3, [r7, #12]
 80104ee:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80104f2:	f023 0203 	bic.w	r2, r3, #3
 80104f6:	897b      	ldrh	r3, [r7, #10]
 80104f8:	4293      	cmp	r3, r2
 80104fa:	bf28      	it	cs
 80104fc:	4613      	movcs	r3, r2
 80104fe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010500:	8af9      	ldrh	r1, [r7, #22]
 8010502:	7bfb      	ldrb	r3, [r7, #15]
 8010504:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010508:	4618      	mov	r0, r3
 801050a:	f7fb f805 	bl	800b518 <pbuf_alloc>
 801050e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d101      	bne.n	801051a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010516:	2300      	movs	r3, #0
 8010518:	e019      	b.n	801054e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d006      	beq.n	8010530 <tcp_pbuf_prealloc+0xb8>
 8010522:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <tcp_pbuf_prealloc+0xe0>)
 8010524:	f240 120b 	movw	r2, #267	; 0x10b
 8010528:	490f      	ldr	r1, [pc, #60]	; (8010568 <tcp_pbuf_prealloc+0xf0>)
 801052a:	480d      	ldr	r0, [pc, #52]	; (8010560 <tcp_pbuf_prealloc+0xe8>)
 801052c:	f004 fdbc 	bl	80150a8 <iprintf>
  *oversize = p->len - length;
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	895a      	ldrh	r2, [r3, #10]
 8010534:	89bb      	ldrh	r3, [r7, #12]
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	b29a      	uxth	r2, r3
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	89ba      	ldrh	r2, [r7, #12]
 8010542:	811a      	strh	r2, [r3, #8]
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	891a      	ldrh	r2, [r3, #8]
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	815a      	strh	r2, [r3, #10]
  return p;
 801054c:	693b      	ldr	r3, [r7, #16]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	08017f44 	.word	0x08017f44
 801055c:	08017ffc 	.word	0x08017ffc
 8010560:	08017f98 	.word	0x08017f98
 8010564:	08018020 	.word	0x08018020
 8010568:	08018040 	.word	0x08018040

0801056c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	460b      	mov	r3, r1
 8010576:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d106      	bne.n	801058c <tcp_write_checks+0x20>
 801057e:	4b33      	ldr	r3, [pc, #204]	; (801064c <tcp_write_checks+0xe0>)
 8010580:	f240 1233 	movw	r2, #307	; 0x133
 8010584:	4932      	ldr	r1, [pc, #200]	; (8010650 <tcp_write_checks+0xe4>)
 8010586:	4833      	ldr	r0, [pc, #204]	; (8010654 <tcp_write_checks+0xe8>)
 8010588:	f004 fd8e 	bl	80150a8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7d1b      	ldrb	r3, [r3, #20]
 8010590:	2b04      	cmp	r3, #4
 8010592:	d00e      	beq.n	80105b2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010598:	2b07      	cmp	r3, #7
 801059a:	d00a      	beq.n	80105b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d006      	beq.n	80105b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80105a8:	2b03      	cmp	r3, #3
 80105aa:	d002      	beq.n	80105b2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80105ac:	f06f 030a 	mvn.w	r3, #10
 80105b0:	e048      	b.n	8010644 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80105b2:	887b      	ldrh	r3, [r7, #2]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <tcp_write_checks+0x50>
    return ERR_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	e043      	b.n	8010644 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80105c2:	887a      	ldrh	r2, [r7, #2]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d909      	bls.n	80105dc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	8b5b      	ldrh	r3, [r3, #26]
 80105cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80105d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105da:	e033      	b.n	8010644 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105e2:	2b08      	cmp	r3, #8
 80105e4:	d909      	bls.n	80105fa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	8b5b      	ldrh	r3, [r3, #26]
 80105ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80105f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105f8:	e024      	b.n	8010644 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00f      	beq.n	8010624 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010608:	2b00      	cmp	r3, #0
 801060a:	d11a      	bne.n	8010642 <tcp_write_checks+0xd6>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010610:	2b00      	cmp	r3, #0
 8010612:	d116      	bne.n	8010642 <tcp_write_checks+0xd6>
 8010614:	4b0d      	ldr	r3, [pc, #52]	; (801064c <tcp_write_checks+0xe0>)
 8010616:	f240 1255 	movw	r2, #341	; 0x155
 801061a:	490f      	ldr	r1, [pc, #60]	; (8010658 <tcp_write_checks+0xec>)
 801061c:	480d      	ldr	r0, [pc, #52]	; (8010654 <tcp_write_checks+0xe8>)
 801061e:	f004 fd43 	bl	80150a8 <iprintf>
 8010622:	e00e      	b.n	8010642 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010628:	2b00      	cmp	r3, #0
 801062a:	d103      	bne.n	8010634 <tcp_write_checks+0xc8>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <tcp_write_checks+0xd6>
 8010634:	4b05      	ldr	r3, [pc, #20]	; (801064c <tcp_write_checks+0xe0>)
 8010636:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801063a:	4908      	ldr	r1, [pc, #32]	; (801065c <tcp_write_checks+0xf0>)
 801063c:	4805      	ldr	r0, [pc, #20]	; (8010654 <tcp_write_checks+0xe8>)
 801063e:	f004 fd33 	bl	80150a8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	08017f44 	.word	0x08017f44
 8010650:	08018054 	.word	0x08018054
 8010654:	08017f98 	.word	0x08017f98
 8010658:	08018074 	.word	0x08018074
 801065c:	080180b0 	.word	0x080180b0

08010660 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010660:	b590      	push	{r4, r7, lr}
 8010662:	b09b      	sub	sp, #108	; 0x6c
 8010664:	af04      	add	r7, sp, #16
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	4611      	mov	r1, r2
 801066c:	461a      	mov	r2, r3
 801066e:	460b      	mov	r3, r1
 8010670:	80fb      	strh	r3, [r7, #6]
 8010672:	4613      	mov	r3, r2
 8010674:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010676:	2300      	movs	r3, #0
 8010678:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801067a:	2300      	movs	r3, #0
 801067c:	653b      	str	r3, [r7, #80]	; 0x50
 801067e:	2300      	movs	r3, #0
 8010680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010682:	2300      	movs	r3, #0
 8010684:	64bb      	str	r3, [r7, #72]	; 0x48
 8010686:	2300      	movs	r3, #0
 8010688:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801068a:	2300      	movs	r3, #0
 801068c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010690:	2300      	movs	r3, #0
 8010692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010696:	2300      	movs	r3, #0
 8010698:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801069a:	2300      	movs	r3, #0
 801069c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801069e:	2300      	movs	r3, #0
 80106a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d109      	bne.n	80106bc <tcp_write+0x5c>
 80106a8:	4ba4      	ldr	r3, [pc, #656]	; (801093c <tcp_write+0x2dc>)
 80106aa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80106ae:	49a4      	ldr	r1, [pc, #656]	; (8010940 <tcp_write+0x2e0>)
 80106b0:	48a4      	ldr	r0, [pc, #656]	; (8010944 <tcp_write+0x2e4>)
 80106b2:	f004 fcf9 	bl	80150a8 <iprintf>
 80106b6:	f06f 030f 	mvn.w	r3, #15
 80106ba:	e32a      	b.n	8010d12 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80106c2:	085b      	lsrs	r3, r3, #1
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106ca:	4293      	cmp	r3, r2
 80106cc:	bf28      	it	cs
 80106ce:	4613      	movcs	r3, r2
 80106d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80106d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d102      	bne.n	80106de <tcp_write+0x7e>
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106dc:	e000      	b.n	80106e0 <tcp_write+0x80>
 80106de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d109      	bne.n	80106fc <tcp_write+0x9c>
 80106e8:	4b94      	ldr	r3, [pc, #592]	; (801093c <tcp_write+0x2dc>)
 80106ea:	f240 12ad 	movw	r2, #429	; 0x1ad
 80106ee:	4996      	ldr	r1, [pc, #600]	; (8010948 <tcp_write+0x2e8>)
 80106f0:	4894      	ldr	r0, [pc, #592]	; (8010944 <tcp_write+0x2e4>)
 80106f2:	f004 fcd9 	bl	80150a8 <iprintf>
 80106f6:	f06f 030f 	mvn.w	r3, #15
 80106fa:	e30a      	b.n	8010d12 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80106fc:	88fb      	ldrh	r3, [r7, #6]
 80106fe:	4619      	mov	r1, r3
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f7ff ff33 	bl	801056c <tcp_write_checks>
 8010706:	4603      	mov	r3, r0
 8010708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801070c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <tcp_write+0xba>
    return err;
 8010714:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010718:	e2fb      	b.n	8010d12 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010720:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010724:	2300      	movs	r3, #0
 8010726:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801072e:	2b00      	cmp	r3, #0
 8010730:	f000 80f6 	beq.w	8010920 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010738:	653b      	str	r3, [r7, #80]	; 0x50
 801073a:	e002      	b.n	8010742 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801073c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1f8      	bne.n	801073c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801074a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801074c:	7a9b      	ldrb	r3, [r3, #10]
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	b29b      	uxth	r3, r3
 8010752:	f003 0304 	and.w	r3, r3, #4
 8010756:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010758:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801075a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075c:	891b      	ldrh	r3, [r3, #8]
 801075e:	4619      	mov	r1, r3
 8010760:	8c3b      	ldrh	r3, [r7, #32]
 8010762:	440b      	add	r3, r1
 8010764:	429a      	cmp	r2, r3
 8010766:	da06      	bge.n	8010776 <tcp_write+0x116>
 8010768:	4b74      	ldr	r3, [pc, #464]	; (801093c <tcp_write+0x2dc>)
 801076a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801076e:	4977      	ldr	r1, [pc, #476]	; (801094c <tcp_write+0x2ec>)
 8010770:	4874      	ldr	r0, [pc, #464]	; (8010944 <tcp_write+0x2e4>)
 8010772:	f004 fc99 	bl	80150a8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010778:	891a      	ldrh	r2, [r3, #8]
 801077a:	8c3b      	ldrh	r3, [r7, #32]
 801077c:	4413      	add	r3, r2
 801077e:	b29b      	uxth	r3, r3
 8010780:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801078c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801078e:	8a7b      	ldrh	r3, [r7, #18]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d026      	beq.n	80107e2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010794:	8a7b      	ldrh	r3, [r7, #18]
 8010796:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010798:	429a      	cmp	r2, r3
 801079a:	d206      	bcs.n	80107aa <tcp_write+0x14a>
 801079c:	4b67      	ldr	r3, [pc, #412]	; (801093c <tcp_write+0x2dc>)
 801079e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80107a2:	496b      	ldr	r1, [pc, #428]	; (8010950 <tcp_write+0x2f0>)
 80107a4:	4867      	ldr	r0, [pc, #412]	; (8010944 <tcp_write+0x2e4>)
 80107a6:	f004 fc7f 	bl	80150a8 <iprintf>
      seg = last_unsent;
 80107aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ac:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80107ae:	8a7b      	ldrh	r3, [r7, #18]
 80107b0:	88fa      	ldrh	r2, [r7, #6]
 80107b2:	4293      	cmp	r3, r2
 80107b4:	bf28      	it	cs
 80107b6:	4613      	movcs	r3, r2
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107bc:	4293      	cmp	r3, r2
 80107be:	bf28      	it	cs
 80107c0:	4613      	movcs	r3, r2
 80107c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80107c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107ca:	4413      	add	r3, r2
 80107cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80107d0:	8a7a      	ldrh	r2, [r7, #18]
 80107d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107d4:	1ad3      	subs	r3, r2, r3
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80107da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107de:	1ad3      	subs	r3, r2, r3
 80107e0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80107e2:	8a7b      	ldrh	r3, [r7, #18]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00b      	beq.n	8010800 <tcp_write+0x1a0>
 80107e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107ec:	88fb      	ldrh	r3, [r7, #6]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d006      	beq.n	8010800 <tcp_write+0x1a0>
 80107f2:	4b52      	ldr	r3, [pc, #328]	; (801093c <tcp_write+0x2dc>)
 80107f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107f8:	4956      	ldr	r1, [pc, #344]	; (8010954 <tcp_write+0x2f4>)
 80107fa:	4852      	ldr	r0, [pc, #328]	; (8010944 <tcp_write+0x2e4>)
 80107fc:	f004 fc54 	bl	80150a8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010804:	88fb      	ldrh	r3, [r7, #6]
 8010806:	429a      	cmp	r2, r3
 8010808:	f080 8167 	bcs.w	8010ada <tcp_write+0x47a>
 801080c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801080e:	2b00      	cmp	r3, #0
 8010810:	f000 8163 	beq.w	8010ada <tcp_write+0x47a>
 8010814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010816:	891b      	ldrh	r3, [r3, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 815e 	beq.w	8010ada <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801081e:	88fa      	ldrh	r2, [r7, #6]
 8010820:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010824:	1ad2      	subs	r2, r2, r3
 8010826:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010828:	4293      	cmp	r3, r2
 801082a:	bfa8      	it	ge
 801082c:	4613      	movge	r3, r2
 801082e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010832:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010834:	797b      	ldrb	r3, [r7, #5]
 8010836:	f003 0301 	and.w	r3, r3, #1
 801083a:	2b00      	cmp	r3, #0
 801083c:	d027      	beq.n	801088e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801083e:	f107 0012 	add.w	r0, r7, #18
 8010842:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010844:	8bf9      	ldrh	r1, [r7, #30]
 8010846:	2301      	movs	r3, #1
 8010848:	9302      	str	r3, [sp, #8]
 801084a:	797b      	ldrb	r3, [r7, #5]
 801084c:	9301      	str	r3, [sp, #4]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	9300      	str	r3, [sp, #0]
 8010852:	4603      	mov	r3, r0
 8010854:	2000      	movs	r0, #0
 8010856:	f7ff fe0f 	bl	8010478 <tcp_pbuf_prealloc>
 801085a:	6578      	str	r0, [r7, #84]	; 0x54
 801085c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 8225 	beq.w	8010cae <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010866:	6858      	ldr	r0, [r3, #4]
 8010868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801086c:	68ba      	ldr	r2, [r7, #8]
 801086e:	4413      	add	r3, r2
 8010870:	8bfa      	ldrh	r2, [r7, #30]
 8010872:	4619      	mov	r1, r3
 8010874:	f004 fb6d 	bl	8014f52 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010878:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801087a:	f7fb f9bf 	bl	800bbfc <pbuf_clen>
 801087e:	4603      	mov	r3, r0
 8010880:	461a      	mov	r2, r3
 8010882:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010886:	4413      	add	r3, r2
 8010888:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801088c:	e041      	b.n	8010912 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801088e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	637b      	str	r3, [r7, #52]	; 0x34
 8010894:	e002      	b.n	801089c <tcp_write+0x23c>
 8010896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	637b      	str	r3, [r7, #52]	; 0x34
 801089c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d1f8      	bne.n	8010896 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80108a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a6:	7b1b      	ldrb	r3, [r3, #12]
 80108a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d115      	bne.n	80108dc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80108b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108b6:	8952      	ldrh	r2, [r2, #10]
 80108b8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d10d      	bne.n	80108dc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80108c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d006      	beq.n	80108d6 <tcp_write+0x276>
 80108c8:	4b1c      	ldr	r3, [pc, #112]	; (801093c <tcp_write+0x2dc>)
 80108ca:	f240 2231 	movw	r2, #561	; 0x231
 80108ce:	4922      	ldr	r1, [pc, #136]	; (8010958 <tcp_write+0x2f8>)
 80108d0:	481c      	ldr	r0, [pc, #112]	; (8010944 <tcp_write+0x2e4>)
 80108d2:	f004 fbe9 	bl	80150a8 <iprintf>
          extendlen = seglen;
 80108d6:	8bfb      	ldrh	r3, [r7, #30]
 80108d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80108da:	e01a      	b.n	8010912 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80108dc:	8bfb      	ldrh	r3, [r7, #30]
 80108de:	2201      	movs	r2, #1
 80108e0:	4619      	mov	r1, r3
 80108e2:	2000      	movs	r0, #0
 80108e4:	f7fa fe18 	bl	800b518 <pbuf_alloc>
 80108e8:	6578      	str	r0, [r7, #84]	; 0x54
 80108ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f000 81e0 	beq.w	8010cb2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80108f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	441a      	add	r2, r3
 80108fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108fc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80108fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010900:	f7fb f97c 	bl	800bbfc <pbuf_clen>
 8010904:	4603      	mov	r3, r0
 8010906:	461a      	mov	r2, r3
 8010908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801090c:	4413      	add	r3, r2
 801090e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010912:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010916:	8bfb      	ldrh	r3, [r7, #30]
 8010918:	4413      	add	r3, r2
 801091a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801091e:	e0dc      	b.n	8010ada <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010926:	2b00      	cmp	r3, #0
 8010928:	f000 80d7 	beq.w	8010ada <tcp_write+0x47a>
 801092c:	4b03      	ldr	r3, [pc, #12]	; (801093c <tcp_write+0x2dc>)
 801092e:	f240 224a 	movw	r2, #586	; 0x24a
 8010932:	490a      	ldr	r1, [pc, #40]	; (801095c <tcp_write+0x2fc>)
 8010934:	4803      	ldr	r0, [pc, #12]	; (8010944 <tcp_write+0x2e4>)
 8010936:	f004 fbb7 	bl	80150a8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801093a:	e0ce      	b.n	8010ada <tcp_write+0x47a>
 801093c:	08017f44 	.word	0x08017f44
 8010940:	080180e4 	.word	0x080180e4
 8010944:	08017f98 	.word	0x08017f98
 8010948:	080180fc 	.word	0x080180fc
 801094c:	08018130 	.word	0x08018130
 8010950:	08018148 	.word	0x08018148
 8010954:	08018168 	.word	0x08018168
 8010958:	08018188 	.word	0x08018188
 801095c:	080181b4 	.word	0x080181b4
    struct pbuf *p;
    u16_t left = len - pos;
 8010960:	88fa      	ldrh	r2, [r7, #6]
 8010962:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801096a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801096e:	b29b      	uxth	r3, r3
 8010970:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010976:	8b7a      	ldrh	r2, [r7, #26]
 8010978:	8bbb      	ldrh	r3, [r7, #28]
 801097a:	4293      	cmp	r3, r2
 801097c:	bf28      	it	cs
 801097e:	4613      	movcs	r3, r2
 8010980:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010982:	797b      	ldrb	r3, [r7, #5]
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d036      	beq.n	80109fa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010990:	b29a      	uxth	r2, r3
 8010992:	8b3b      	ldrh	r3, [r7, #24]
 8010994:	4413      	add	r3, r2
 8010996:	b299      	uxth	r1, r3
 8010998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801099a:	2b00      	cmp	r3, #0
 801099c:	bf0c      	ite	eq
 801099e:	2301      	moveq	r3, #1
 80109a0:	2300      	movne	r3, #0
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	f107 0012 	add.w	r0, r7, #18
 80109a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80109aa:	9302      	str	r3, [sp, #8]
 80109ac:	797b      	ldrb	r3, [r7, #5]
 80109ae:	9301      	str	r3, [sp, #4]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	9300      	str	r3, [sp, #0]
 80109b4:	4603      	mov	r3, r0
 80109b6:	2036      	movs	r0, #54	; 0x36
 80109b8:	f7ff fd5e 	bl	8010478 <tcp_pbuf_prealloc>
 80109bc:	6338      	str	r0, [r7, #48]	; 0x30
 80109be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f000 8178 	beq.w	8010cb6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	895b      	ldrh	r3, [r3, #10]
 80109ca:	8b3a      	ldrh	r2, [r7, #24]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d906      	bls.n	80109de <tcp_write+0x37e>
 80109d0:	4b8c      	ldr	r3, [pc, #560]	; (8010c04 <tcp_write+0x5a4>)
 80109d2:	f240 2266 	movw	r2, #614	; 0x266
 80109d6:	498c      	ldr	r1, [pc, #560]	; (8010c08 <tcp_write+0x5a8>)
 80109d8:	488c      	ldr	r0, [pc, #560]	; (8010c0c <tcp_write+0x5ac>)
 80109da:	f004 fb65 	bl	80150a8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	685a      	ldr	r2, [r3, #4]
 80109e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109e6:	18d0      	adds	r0, r2, r3
 80109e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	4413      	add	r3, r2
 80109f0:	8b3a      	ldrh	r2, [r7, #24]
 80109f2:	4619      	mov	r1, r3
 80109f4:	f004 faad 	bl	8014f52 <memcpy>
 80109f8:	e02f      	b.n	8010a5a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80109fa:	8a7b      	ldrh	r3, [r7, #18]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d006      	beq.n	8010a0e <tcp_write+0x3ae>
 8010a00:	4b80      	ldr	r3, [pc, #512]	; (8010c04 <tcp_write+0x5a4>)
 8010a02:	f240 2271 	movw	r2, #625	; 0x271
 8010a06:	4982      	ldr	r1, [pc, #520]	; (8010c10 <tcp_write+0x5b0>)
 8010a08:	4880      	ldr	r0, [pc, #512]	; (8010c0c <tcp_write+0x5ac>)
 8010a0a:	f004 fb4d 	bl	80150a8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010a0e:	8b3b      	ldrh	r3, [r7, #24]
 8010a10:	2201      	movs	r2, #1
 8010a12:	4619      	mov	r1, r3
 8010a14:	2036      	movs	r0, #54	; 0x36
 8010a16:	f7fa fd7f 	bl	800b518 <pbuf_alloc>
 8010a1a:	6178      	str	r0, [r7, #20]
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f000 814b 	beq.w	8010cba <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010a24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	441a      	add	r2, r3
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	2036      	movs	r0, #54	; 0x36
 8010a3e:	f7fa fd6b 	bl	800b518 <pbuf_alloc>
 8010a42:	6338      	str	r0, [r7, #48]	; 0x30
 8010a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d103      	bne.n	8010a52 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010a4a:	6978      	ldr	r0, [r7, #20]
 8010a4c:	f7fb f848 	bl	800bae0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010a50:	e136      	b.n	8010cc0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010a52:	6979      	ldr	r1, [r7, #20]
 8010a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a56:	f7fb f911 	bl	800bc7c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a5c:	f7fb f8ce 	bl	800bbfc <pbuf_clen>
 8010a60:	4603      	mov	r3, r0
 8010a62:	461a      	mov	r2, r3
 8010a64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a68:	4413      	add	r3, r2
 8010a6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a72:	2b09      	cmp	r3, #9
 8010a74:	d903      	bls.n	8010a7e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a78:	f7fb f832 	bl	800bae0 <pbuf_free>
      goto memerr;
 8010a7c:	e120      	b.n	8010cc0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a86:	441a      	add	r2, r3
 8010a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	4613      	mov	r3, r2
 8010a90:	2200      	movs	r2, #0
 8010a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f7ff fc51 	bl	801033c <tcp_create_segment>
 8010a9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	f000 810d 	beq.w	8010cbe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d102      	bne.n	8010ab0 <tcp_write+0x450>
      queue = seg;
 8010aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aac:	647b      	str	r3, [r7, #68]	; 0x44
 8010aae:	e00c      	b.n	8010aca <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d106      	bne.n	8010ac4 <tcp_write+0x464>
 8010ab6:	4b53      	ldr	r3, [pc, #332]	; (8010c04 <tcp_write+0x5a4>)
 8010ab8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010abc:	4955      	ldr	r1, [pc, #340]	; (8010c14 <tcp_write+0x5b4>)
 8010abe:	4853      	ldr	r0, [pc, #332]	; (8010c0c <tcp_write+0x5ac>)
 8010ac0:	f004 faf2 	bl	80150a8 <iprintf>
      prev_seg->next = seg;
 8010ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ac8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010acc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010ace:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ad2:	8b3b      	ldrh	r3, [r7, #24]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010ada:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ade:	88fb      	ldrh	r3, [r7, #6]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	f4ff af3d 	bcc.w	8010960 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010ae6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d02c      	beq.n	8010b46 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010af2:	e01e      	b.n	8010b32 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af6:	891a      	ldrh	r2, [r3, #8]
 8010af8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010afa:	4413      	add	r3, r2
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b00:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d110      	bne.n	8010b2c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b10:	8952      	ldrh	r2, [r2, #10]
 8010b12:	4413      	add	r3, r2
 8010b14:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b16:	68b9      	ldr	r1, [r7, #8]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f004 fa1a 	bl	8014f52 <memcpy>
        p->len += oversize_used;
 8010b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b20:	895a      	ldrh	r2, [r3, #10]
 8010b22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b24:	4413      	add	r3, r2
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1dd      	bne.n	8010af4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b3a:	891a      	ldrh	r2, [r3, #8]
 8010b3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b3e:	4413      	add	r3, r2
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b44:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010b46:	8a7a      	ldrh	r2, [r7, #18]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d018      	beq.n	8010b86 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d106      	bne.n	8010b68 <tcp_write+0x508>
 8010b5a:	4b2a      	ldr	r3, [pc, #168]	; (8010c04 <tcp_write+0x5a4>)
 8010b5c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010b60:	492d      	ldr	r1, [pc, #180]	; (8010c18 <tcp_write+0x5b8>)
 8010b62:	482a      	ldr	r0, [pc, #168]	; (8010c0c <tcp_write+0x5ac>)
 8010b64:	f004 faa0 	bl	80150a8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fb f884 	bl	800bc7c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b76:	891a      	ldrh	r2, [r3, #8]
 8010b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b7a:	891b      	ldrh	r3, [r3, #8]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b82:	811a      	strh	r2, [r3, #8]
 8010b84:	e037      	b.n	8010bf6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010b86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d034      	beq.n	8010bf6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d003      	beq.n	8010b9a <tcp_write+0x53a>
 8010b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d106      	bne.n	8010ba8 <tcp_write+0x548>
 8010b9a:	4b1a      	ldr	r3, [pc, #104]	; (8010c04 <tcp_write+0x5a4>)
 8010b9c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010ba0:	491e      	ldr	r1, [pc, #120]	; (8010c1c <tcp_write+0x5bc>)
 8010ba2:	481a      	ldr	r0, [pc, #104]	; (8010c0c <tcp_write+0x5ac>)
 8010ba4:	f004 fa80 	bl	80150a8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bae:	e009      	b.n	8010bc4 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	891a      	ldrh	r2, [r3, #8]
 8010bb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bb6:	4413      	add	r3, r2
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d1f1      	bne.n	8010bb0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bce:	891a      	ldrh	r2, [r3, #8]
 8010bd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bd2:	4413      	add	r3, r2
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bdc:	895a      	ldrh	r2, [r3, #10]
 8010bde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010be0:	4413      	add	r3, r2
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bea:	891a      	ldrh	r2, [r3, #8]
 8010bec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bee:	4413      	add	r3, r2
 8010bf0:	b29a      	uxth	r2, r3
 8010bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bf4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d111      	bne.n	8010c20 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c00:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c02:	e010      	b.n	8010c26 <tcp_write+0x5c6>
 8010c04:	08017f44 	.word	0x08017f44
 8010c08:	080181e4 	.word	0x080181e4
 8010c0c:	08017f98 	.word	0x08017f98
 8010c10:	08018224 	.word	0x08018224
 8010c14:	08018234 	.word	0x08018234
 8010c18:	08018248 	.word	0x08018248
 8010c1c:	08018280 	.word	0x08018280
  } else {
    last_unsent->next = queue;
 8010c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c24:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010c2a:	88fb      	ldrh	r3, [r7, #6]
 8010c2c:	441a      	add	r2, r3
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010c38:	88fb      	ldrh	r3, [r7, #6]
 8010c3a:	1ad3      	subs	r3, r2, r3
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010c4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00e      	beq.n	8010c76 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10a      	bne.n	8010c76 <tcp_write+0x616>
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d106      	bne.n	8010c76 <tcp_write+0x616>
 8010c68:	4b2c      	ldr	r3, [pc, #176]	; (8010d1c <tcp_write+0x6bc>)
 8010c6a:	f240 3212 	movw	r2, #786	; 0x312
 8010c6e:	492c      	ldr	r1, [pc, #176]	; (8010d20 <tcp_write+0x6c0>)
 8010c70:	482c      	ldr	r0, [pc, #176]	; (8010d24 <tcp_write+0x6c4>)
 8010c72:	f004 fa19 	bl	80150a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d016      	beq.n	8010caa <tcp_write+0x64a>
 8010c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d012      	beq.n	8010caa <tcp_write+0x64a>
 8010c84:	797b      	ldrb	r3, [r7, #5]
 8010c86:	f003 0302 	and.w	r3, r3, #2
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d10d      	bne.n	8010caa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	899b      	ldrh	r3, [r3, #12]
 8010c94:	b29c      	uxth	r4, r3
 8010c96:	2008      	movs	r0, #8
 8010c98:	f7f9 fb36 	bl	800a308 <lwip_htons>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	4322      	orrs	r2, r4
 8010ca6:	b292      	uxth	r2, r2
 8010ca8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010caa:	2300      	movs	r3, #0
 8010cac:	e031      	b.n	8010d12 <tcp_write+0x6b2>
          goto memerr;
 8010cae:	bf00      	nop
 8010cb0:	e006      	b.n	8010cc0 <tcp_write+0x660>
            goto memerr;
 8010cb2:	bf00      	nop
 8010cb4:	e004      	b.n	8010cc0 <tcp_write+0x660>
        goto memerr;
 8010cb6:	bf00      	nop
 8010cb8:	e002      	b.n	8010cc0 <tcp_write+0x660>
        goto memerr;
 8010cba:	bf00      	nop
 8010cbc:	e000      	b.n	8010cc0 <tcp_write+0x660>
      goto memerr;
 8010cbe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	8b5b      	ldrh	r3, [r3, #26]
 8010cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d002      	beq.n	8010cda <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010cd4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010cd6:	f7fa ff03 	bl	800bae0 <pbuf_free>
  }
  if (queue != NULL) {
 8010cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8010ce0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010ce2:	f7fc fb6b 	bl	800d3bc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d00e      	beq.n	8010d0e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d10a      	bne.n	8010d0e <tcp_write+0x6ae>
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d106      	bne.n	8010d0e <tcp_write+0x6ae>
 8010d00:	4b06      	ldr	r3, [pc, #24]	; (8010d1c <tcp_write+0x6bc>)
 8010d02:	f240 3227 	movw	r2, #807	; 0x327
 8010d06:	4906      	ldr	r1, [pc, #24]	; (8010d20 <tcp_write+0x6c0>)
 8010d08:	4806      	ldr	r0, [pc, #24]	; (8010d24 <tcp_write+0x6c4>)
 8010d0a:	f004 f9cd 	bl	80150a8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	375c      	adds	r7, #92	; 0x5c
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd90      	pop	{r4, r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	08017f44 	.word	0x08017f44
 8010d20:	080182b8 	.word	0x080182b8
 8010d24:	08017f98 	.word	0x08017f98

08010d28 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d28:	b590      	push	{r4, r7, lr}
 8010d2a:	b08b      	sub	sp, #44	; 0x2c
 8010d2c:	af02      	add	r7, sp, #8
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010d34:	2300      	movs	r3, #0
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	2300      	movs	r3, #0
 8010d3a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <tcp_split_unsent_seg+0x2c>
 8010d46:	4b95      	ldr	r3, [pc, #596]	; (8010f9c <tcp_split_unsent_seg+0x274>)
 8010d48:	f240 324b 	movw	r2, #843	; 0x34b
 8010d4c:	4994      	ldr	r1, [pc, #592]	; (8010fa0 <tcp_split_unsent_seg+0x278>)
 8010d4e:	4895      	ldr	r0, [pc, #596]	; (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010d50:	f004 f9aa 	bl	80150a8 <iprintf>

  useg = pcb->unsent;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d58:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d102      	bne.n	8010d66 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d64:	e116      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010d66:	887b      	ldrh	r3, [r7, #2]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d109      	bne.n	8010d80 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010d6c:	4b8b      	ldr	r3, [pc, #556]	; (8010f9c <tcp_split_unsent_seg+0x274>)
 8010d6e:	f240 3253 	movw	r2, #851	; 0x353
 8010d72:	498d      	ldr	r1, [pc, #564]	; (8010fa8 <tcp_split_unsent_seg+0x280>)
 8010d74:	488b      	ldr	r0, [pc, #556]	; (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010d76:	f004 f997 	bl	80150a8 <iprintf>
    return ERR_VAL;
 8010d7a:	f06f 0305 	mvn.w	r3, #5
 8010d7e:	e109      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	891b      	ldrh	r3, [r3, #8]
 8010d84:	887a      	ldrh	r2, [r7, #2]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d301      	bcc.n	8010d8e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	e102      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d92:	887a      	ldrh	r2, [r7, #2]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d906      	bls.n	8010da6 <tcp_split_unsent_seg+0x7e>
 8010d98:	4b80      	ldr	r3, [pc, #512]	; (8010f9c <tcp_split_unsent_seg+0x274>)
 8010d9a:	f240 325b 	movw	r2, #859	; 0x35b
 8010d9e:	4983      	ldr	r1, [pc, #524]	; (8010fac <tcp_split_unsent_seg+0x284>)
 8010da0:	4880      	ldr	r0, [pc, #512]	; (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010da2:	f004 f981 	bl	80150a8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	891b      	ldrh	r3, [r3, #8]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <tcp_split_unsent_seg+0x94>
 8010dae:	4b7b      	ldr	r3, [pc, #492]	; (8010f9c <tcp_split_unsent_seg+0x274>)
 8010db0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010db4:	497e      	ldr	r1, [pc, #504]	; (8010fb0 <tcp_split_unsent_seg+0x288>)
 8010db6:	487b      	ldr	r0, [pc, #492]	; (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010db8:	f004 f976 	bl	80150a8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	7a9b      	ldrb	r3, [r3, #10]
 8010dc0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010dc2:	7bfb      	ldrb	r3, [r7, #15]
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	f003 0304 	and.w	r3, r3, #4
 8010dcc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	891a      	ldrh	r2, [r3, #8]
 8010dd2:	887b      	ldrh	r3, [r7, #2]
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010dd8:	7bbb      	ldrb	r3, [r7, #14]
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	89bb      	ldrh	r3, [r7, #12]
 8010dde:	4413      	add	r3, r2
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010de6:	4619      	mov	r1, r3
 8010de8:	2036      	movs	r0, #54	; 0x36
 8010dea:	f7fa fb95 	bl	800b518 <pbuf_alloc>
 8010dee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f000 80b7 	beq.w	8010f66 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	891a      	ldrh	r2, [r3, #8]
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	891b      	ldrh	r3, [r3, #8]
 8010e02:	1ad3      	subs	r3, r2, r3
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	887b      	ldrh	r3, [r7, #2]
 8010e08:	4413      	add	r3, r2
 8010e0a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	6858      	ldr	r0, [r3, #4]
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	685a      	ldr	r2, [r3, #4]
 8010e14:	7bbb      	ldrb	r3, [r7, #14]
 8010e16:	18d1      	adds	r1, r2, r3
 8010e18:	897b      	ldrh	r3, [r7, #10]
 8010e1a:	89ba      	ldrh	r2, [r7, #12]
 8010e1c:	f7fb f856 	bl	800becc <pbuf_copy_partial>
 8010e20:	4603      	mov	r3, r0
 8010e22:	461a      	mov	r2, r3
 8010e24:	89bb      	ldrh	r3, [r7, #12]
 8010e26:	4293      	cmp	r3, r2
 8010e28:	f040 809f 	bne.w	8010f6a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	899b      	ldrh	r3, [r3, #12]
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7f9 fa67 	bl	800a308 <lwip_htons>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e42:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e44:	2300      	movs	r3, #0
 8010e46:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e48:	7efb      	ldrb	r3, [r7, #27]
 8010e4a:	f003 0308 	and.w	r3, r3, #8
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d007      	beq.n	8010e62 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e52:	7efb      	ldrb	r3, [r7, #27]
 8010e54:	f023 0308 	bic.w	r3, r3, #8
 8010e58:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010e5a:	7ebb      	ldrb	r3, [r7, #26]
 8010e5c:	f043 0308 	orr.w	r3, r3, #8
 8010e60:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010e62:	7efb      	ldrb	r3, [r7, #27]
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d007      	beq.n	8010e7c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010e6c:	7efb      	ldrb	r3, [r7, #27]
 8010e6e:	f023 0301 	bic.w	r3, r3, #1
 8010e72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010e74:	7ebb      	ldrb	r3, [r7, #26]
 8010e76:	f043 0301 	orr.w	r3, r3, #1
 8010e7a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7f9 fa55 	bl	800a332 <lwip_htonl>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	887b      	ldrh	r3, [r7, #2]
 8010e8c:	18d1      	adds	r1, r2, r3
 8010e8e:	7eba      	ldrb	r2, [r7, #26]
 8010e90:	7bfb      	ldrb	r3, [r7, #15]
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	460b      	mov	r3, r1
 8010e96:	6939      	ldr	r1, [r7, #16]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff fa4f 	bl	801033c <tcp_create_segment>
 8010e9e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d063      	beq.n	8010f6e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fa fea6 	bl	800bbfc <pbuf_clen>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010eba:	1a9b      	subs	r3, r3, r2
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	6858      	ldr	r0, [r3, #4]
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	891a      	ldrh	r2, [r3, #8]
 8010ece:	89bb      	ldrh	r3, [r7, #12]
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	f7fa fc7d 	bl	800b7d4 <pbuf_realloc>
  useg->len -= remainder;
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	891a      	ldrh	r2, [r3, #8]
 8010ede:	89bb      	ldrh	r3, [r7, #12]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	899b      	ldrh	r3, [r3, #12]
 8010eee:	b29c      	uxth	r4, r3
 8010ef0:	7efb      	ldrb	r3, [r7, #27]
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7f9 fa07 	bl	800a308 <lwip_htons>
 8010efa:	4603      	mov	r3, r0
 8010efc:	461a      	mov	r2, r3
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	4322      	orrs	r2, r4
 8010f04:	b292      	uxth	r2, r2
 8010f06:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fa fe75 	bl	800bbfc <pbuf_clen>
 8010f12:	4603      	mov	r3, r0
 8010f14:	461a      	mov	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f1c:	4413      	add	r3, r2
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fa fe66 	bl	800bbfc <pbuf_clen>
 8010f30:	4603      	mov	r3, r0
 8010f32:	461a      	mov	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f3a:	4413      	add	r3, r2
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	69fa      	ldr	r2, [r7, #28]
 8010f50:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d103      	bne.n	8010f62 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010f62:	2300      	movs	r3, #0
 8010f64:	e016      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010f66:	bf00      	nop
 8010f68:	e002      	b.n	8010f70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f6a:	bf00      	nop
 8010f6c:	e000      	b.n	8010f70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f6e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d006      	beq.n	8010f84 <tcp_split_unsent_seg+0x25c>
 8010f76:	4b09      	ldr	r3, [pc, #36]	; (8010f9c <tcp_split_unsent_seg+0x274>)
 8010f78:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010f7c:	490d      	ldr	r1, [pc, #52]	; (8010fb4 <tcp_split_unsent_seg+0x28c>)
 8010f7e:	4809      	ldr	r0, [pc, #36]	; (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010f80:	f004 f892 	bl	80150a8 <iprintf>
  if (p != NULL) {
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d002      	beq.n	8010f90 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010f8a:	6938      	ldr	r0, [r7, #16]
 8010f8c:	f7fa fda8 	bl	800bae0 <pbuf_free>
  }

  return ERR_MEM;
 8010f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3724      	adds	r7, #36	; 0x24
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd90      	pop	{r4, r7, pc}
 8010f9c:	08017f44 	.word	0x08017f44
 8010fa0:	080182d8 	.word	0x080182d8
 8010fa4:	08017f98 	.word	0x08017f98
 8010fa8:	080182fc 	.word	0x080182fc
 8010fac:	08018320 	.word	0x08018320
 8010fb0:	08018330 	.word	0x08018330
 8010fb4:	08018340 	.word	0x08018340

08010fb8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010fb8:	b590      	push	{r4, r7, lr}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d106      	bne.n	8010fd4 <tcp_send_fin+0x1c>
 8010fc6:	4b21      	ldr	r3, [pc, #132]	; (801104c <tcp_send_fin+0x94>)
 8010fc8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010fcc:	4920      	ldr	r1, [pc, #128]	; (8011050 <tcp_send_fin+0x98>)
 8010fce:	4821      	ldr	r0, [pc, #132]	; (8011054 <tcp_send_fin+0x9c>)
 8010fd0:	f004 f86a 	bl	80150a8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d02e      	beq.n	801103a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe0:	60fb      	str	r3, [r7, #12]
 8010fe2:	e002      	b.n	8010fea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1f8      	bne.n	8010fe4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	899b      	ldrh	r3, [r3, #12]
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7f9 f984 	bl	800a308 <lwip_htons>
 8011000:	4603      	mov	r3, r0
 8011002:	b2db      	uxtb	r3, r3
 8011004:	f003 0307 	and.w	r3, r3, #7
 8011008:	2b00      	cmp	r3, #0
 801100a:	d116      	bne.n	801103a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	899b      	ldrh	r3, [r3, #12]
 8011012:	b29c      	uxth	r4, r3
 8011014:	2001      	movs	r0, #1
 8011016:	f7f9 f977 	bl	800a308 <lwip_htons>
 801101a:	4603      	mov	r3, r0
 801101c:	461a      	mov	r2, r3
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	4322      	orrs	r2, r4
 8011024:	b292      	uxth	r2, r2
 8011026:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	8b5b      	ldrh	r3, [r3, #26]
 801102c:	f043 0320 	orr.w	r3, r3, #32
 8011030:	b29a      	uxth	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011036:	2300      	movs	r3, #0
 8011038:	e004      	b.n	8011044 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801103a:	2101      	movs	r1, #1
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 f80b 	bl	8011058 <tcp_enqueue_flags>
 8011042:	4603      	mov	r3, r0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	bd90      	pop	{r4, r7, pc}
 801104c:	08017f44 	.word	0x08017f44
 8011050:	0801834c 	.word	0x0801834c
 8011054:	08017f98 	.word	0x08017f98

08011058 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	; 0x28
 801105c:	af02      	add	r7, sp, #8
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	460b      	mov	r3, r1
 8011062:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011064:	2300      	movs	r3, #0
 8011066:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011068:	2300      	movs	r3, #0
 801106a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801106c:	78fb      	ldrb	r3, [r7, #3]
 801106e:	f003 0303 	and.w	r3, r3, #3
 8011072:	2b00      	cmp	r3, #0
 8011074:	d106      	bne.n	8011084 <tcp_enqueue_flags+0x2c>
 8011076:	4b67      	ldr	r3, [pc, #412]	; (8011214 <tcp_enqueue_flags+0x1bc>)
 8011078:	f240 4211 	movw	r2, #1041	; 0x411
 801107c:	4966      	ldr	r1, [pc, #408]	; (8011218 <tcp_enqueue_flags+0x1c0>)
 801107e:	4867      	ldr	r0, [pc, #412]	; (801121c <tcp_enqueue_flags+0x1c4>)
 8011080:	f004 f812 	bl	80150a8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d106      	bne.n	8011098 <tcp_enqueue_flags+0x40>
 801108a:	4b62      	ldr	r3, [pc, #392]	; (8011214 <tcp_enqueue_flags+0x1bc>)
 801108c:	f240 4213 	movw	r2, #1043	; 0x413
 8011090:	4963      	ldr	r1, [pc, #396]	; (8011220 <tcp_enqueue_flags+0x1c8>)
 8011092:	4862      	ldr	r0, [pc, #392]	; (801121c <tcp_enqueue_flags+0x1c4>)
 8011094:	f004 f808 	bl	80150a8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011098:	78fb      	ldrb	r3, [r7, #3]
 801109a:	f003 0302 	and.w	r3, r3, #2
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d001      	beq.n	80110a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80110a2:	2301      	movs	r3, #1
 80110a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80110a6:	7ffb      	ldrb	r3, [r7, #31]
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	f003 0304 	and.w	r3, r3, #4
 80110b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80110b2:	7dfb      	ldrb	r3, [r7, #23]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110ba:	4619      	mov	r1, r3
 80110bc:	2036      	movs	r0, #54	; 0x36
 80110be:	f7fa fa2b 	bl	800b518 <pbuf_alloc>
 80110c2:	6138      	str	r0, [r7, #16]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d109      	bne.n	80110de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8b5b      	ldrh	r3, [r3, #26]
 80110ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80110d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110dc:	e095      	b.n	801120a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	895a      	ldrh	r2, [r3, #10]
 80110e2:	7dfb      	ldrb	r3, [r7, #23]
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d206      	bcs.n	80110f8 <tcp_enqueue_flags+0xa0>
 80110ea:	4b4a      	ldr	r3, [pc, #296]	; (8011214 <tcp_enqueue_flags+0x1bc>)
 80110ec:	f240 4239 	movw	r2, #1081	; 0x439
 80110f0:	494c      	ldr	r1, [pc, #304]	; (8011224 <tcp_enqueue_flags+0x1cc>)
 80110f2:	484a      	ldr	r0, [pc, #296]	; (801121c <tcp_enqueue_flags+0x1c4>)
 80110f4:	f003 ffd8 	bl	80150a8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80110fc:	78fa      	ldrb	r2, [r7, #3]
 80110fe:	7ffb      	ldrb	r3, [r7, #31]
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	460b      	mov	r3, r1
 8011104:	6939      	ldr	r1, [r7, #16]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7ff f918 	bl	801033c <tcp_create_segment>
 801110c:	60f8      	str	r0, [r7, #12]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d109      	bne.n	8011128 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8b5b      	ldrh	r3, [r3, #26]
 8011118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801111c:	b29a      	uxth	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011126:	e070      	b.n	801120a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	f003 0303 	and.w	r3, r3, #3
 8011130:	2b00      	cmp	r3, #0
 8011132:	d006      	beq.n	8011142 <tcp_enqueue_flags+0xea>
 8011134:	4b37      	ldr	r3, [pc, #220]	; (8011214 <tcp_enqueue_flags+0x1bc>)
 8011136:	f240 4242 	movw	r2, #1090	; 0x442
 801113a:	493b      	ldr	r1, [pc, #236]	; (8011228 <tcp_enqueue_flags+0x1d0>)
 801113c:	4837      	ldr	r0, [pc, #220]	; (801121c <tcp_enqueue_flags+0x1c4>)
 801113e:	f003 ffb3 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	891b      	ldrh	r3, [r3, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d006      	beq.n	8011158 <tcp_enqueue_flags+0x100>
 801114a:	4b32      	ldr	r3, [pc, #200]	; (8011214 <tcp_enqueue_flags+0x1bc>)
 801114c:	f240 4243 	movw	r2, #1091	; 0x443
 8011150:	4936      	ldr	r1, [pc, #216]	; (801122c <tcp_enqueue_flags+0x1d4>)
 8011152:	4832      	ldr	r0, [pc, #200]	; (801121c <tcp_enqueue_flags+0x1c4>)
 8011154:	f003 ffa8 	bl	80150a8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801115c:	2b00      	cmp	r3, #0
 801115e:	d103      	bne.n	8011168 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68fa      	ldr	r2, [r7, #12]
 8011164:	66da      	str	r2, [r3, #108]	; 0x6c
 8011166:	e00d      	b.n	8011184 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801116c:	61bb      	str	r3, [r7, #24]
 801116e:	e002      	b.n	8011176 <tcp_enqueue_flags+0x11e>
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	61bb      	str	r3, [r7, #24]
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1f8      	bne.n	8011170 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801117e:	69bb      	ldr	r3, [r7, #24]
 8011180:	68fa      	ldr	r2, [r7, #12]
 8011182:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801118c:	78fb      	ldrb	r3, [r7, #3]
 801118e:	f003 0302 	and.w	r3, r3, #2
 8011192:	2b00      	cmp	r3, #0
 8011194:	d104      	bne.n	80111a0 <tcp_enqueue_flags+0x148>
 8011196:	78fb      	ldrb	r3, [r7, #3]
 8011198:	f003 0301 	and.w	r3, r3, #1
 801119c:	2b00      	cmp	r3, #0
 801119e:	d004      	beq.n	80111aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111a4:	1c5a      	adds	r2, r3, #1
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80111aa:	78fb      	ldrb	r3, [r7, #3]
 80111ac:	f003 0301 	and.w	r3, r3, #1
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d006      	beq.n	80111c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	8b5b      	ldrh	r3, [r3, #26]
 80111b8:	f043 0320 	orr.w	r3, r3, #32
 80111bc:	b29a      	uxth	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fa fd18 	bl	800bbfc <pbuf_clen>
 80111cc:	4603      	mov	r3, r0
 80111ce:	461a      	mov	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111d6:	4413      	add	r3, r2
 80111d8:	b29a      	uxth	r2, r3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00e      	beq.n	8011208 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d10a      	bne.n	8011208 <tcp_enqueue_flags+0x1b0>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d106      	bne.n	8011208 <tcp_enqueue_flags+0x1b0>
 80111fa:	4b06      	ldr	r3, [pc, #24]	; (8011214 <tcp_enqueue_flags+0x1bc>)
 80111fc:	f240 4265 	movw	r2, #1125	; 0x465
 8011200:	490b      	ldr	r1, [pc, #44]	; (8011230 <tcp_enqueue_flags+0x1d8>)
 8011202:	4806      	ldr	r0, [pc, #24]	; (801121c <tcp_enqueue_flags+0x1c4>)
 8011204:	f003 ff50 	bl	80150a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3720      	adds	r7, #32
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	08017f44 	.word	0x08017f44
 8011218:	08018368 	.word	0x08018368
 801121c:	08017f98 	.word	0x08017f98
 8011220:	080183c0 	.word	0x080183c0
 8011224:	080183e0 	.word	0x080183e0
 8011228:	0801841c 	.word	0x0801841c
 801122c:	08018434 	.word	0x08018434
 8011230:	08018460 	.word	0x08018460

08011234 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011234:	b5b0      	push	{r4, r5, r7, lr}
 8011236:	b08a      	sub	sp, #40	; 0x28
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d106      	bne.n	8011250 <tcp_output+0x1c>
 8011242:	4b8a      	ldr	r3, [pc, #552]	; (801146c <tcp_output+0x238>)
 8011244:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011248:	4989      	ldr	r1, [pc, #548]	; (8011470 <tcp_output+0x23c>)
 801124a:	488a      	ldr	r0, [pc, #552]	; (8011474 <tcp_output+0x240>)
 801124c:	f003 ff2c 	bl	80150a8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	7d1b      	ldrb	r3, [r3, #20]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d106      	bne.n	8011266 <tcp_output+0x32>
 8011258:	4b84      	ldr	r3, [pc, #528]	; (801146c <tcp_output+0x238>)
 801125a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801125e:	4986      	ldr	r1, [pc, #536]	; (8011478 <tcp_output+0x244>)
 8011260:	4884      	ldr	r0, [pc, #528]	; (8011474 <tcp_output+0x240>)
 8011262:	f003 ff21 	bl	80150a8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011266:	4b85      	ldr	r3, [pc, #532]	; (801147c <tcp_output+0x248>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	429a      	cmp	r2, r3
 801126e:	d101      	bne.n	8011274 <tcp_output+0x40>
    return ERR_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	e1ce      	b.n	8011612 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011280:	4293      	cmp	r3, r2
 8011282:	bf28      	it	cs
 8011284:	4613      	movcs	r3, r2
 8011286:	b29b      	uxth	r3, r3
 8011288:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801128e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10b      	bne.n	80112ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8b5b      	ldrh	r3, [r3, #26]
 801129a:	f003 0302 	and.w	r3, r3, #2
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f000 81aa 	beq.w	80115f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 fdcb 	bl	8011e40 <tcp_send_empty_ack>
 80112aa:	4603      	mov	r3, r0
 80112ac:	e1b1      	b.n	8011612 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80112ae:	6879      	ldr	r1, [r7, #4]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	3304      	adds	r3, #4
 80112b4:	461a      	mov	r2, r3
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f7ff f824 	bl	8010304 <tcp_route>
 80112bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d102      	bne.n	80112ca <tcp_output+0x96>
    return ERR_RTE;
 80112c4:	f06f 0303 	mvn.w	r3, #3
 80112c8:	e1a3      	b.n	8011612 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d003      	beq.n	80112d8 <tcp_output+0xa4>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d111      	bne.n	80112fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d002      	beq.n	80112e4 <tcp_output+0xb0>
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	3304      	adds	r3, #4
 80112e2:	e000      	b.n	80112e6 <tcp_output+0xb2>
 80112e4:	2300      	movs	r3, #0
 80112e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d102      	bne.n	80112f4 <tcp_output+0xc0>
      return ERR_RTE;
 80112ee:	f06f 0303 	mvn.w	r3, #3
 80112f2:	e18e      	b.n	8011612 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80112fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	4618      	mov	r0, r3
 8011304:	f7f9 f815 	bl	800a332 <lwip_htonl>
 8011308:	4602      	mov	r2, r0
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011312:	8912      	ldrh	r2, [r2, #8]
 8011314:	4413      	add	r3, r2
 8011316:	69ba      	ldr	r2, [r7, #24]
 8011318:	429a      	cmp	r2, r3
 801131a:	d227      	bcs.n	801136c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011322:	461a      	mov	r2, r3
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	4293      	cmp	r3, r2
 8011328:	d114      	bne.n	8011354 <tcp_output+0x120>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801132e:	2b00      	cmp	r3, #0
 8011330:	d110      	bne.n	8011354 <tcp_output+0x120>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10b      	bne.n	8011354 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2201      	movs	r2, #1
 8011348:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	8b5b      	ldrh	r3, [r3, #26]
 8011358:	f003 0302 	and.w	r3, r3, #2
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 814d 	beq.w	80115fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fd6c 	bl	8011e40 <tcp_send_empty_ack>
 8011368:	4603      	mov	r3, r0
 801136a:	e152      	b.n	8011612 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2200      	movs	r2, #0
 8011370:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011378:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	2b00      	cmp	r3, #0
 801137e:	f000 811c 	beq.w	80115ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011382:	e002      	b.n	801138a <tcp_output+0x156>
 8011384:	6a3b      	ldr	r3, [r7, #32]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	623b      	str	r3, [r7, #32]
 801138a:	6a3b      	ldr	r3, [r7, #32]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d1f8      	bne.n	8011384 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011392:	e112      	b.n	80115ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	899b      	ldrh	r3, [r3, #12]
 801139a:	b29b      	uxth	r3, r3
 801139c:	4618      	mov	r0, r3
 801139e:	f7f8 ffb3 	bl	800a308 <lwip_htons>
 80113a2:	4603      	mov	r3, r0
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	f003 0304 	and.w	r3, r3, #4
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d006      	beq.n	80113bc <tcp_output+0x188>
 80113ae:	4b2f      	ldr	r3, [pc, #188]	; (801146c <tcp_output+0x238>)
 80113b0:	f240 5236 	movw	r2, #1334	; 0x536
 80113b4:	4932      	ldr	r1, [pc, #200]	; (8011480 <tcp_output+0x24c>)
 80113b6:	482f      	ldr	r0, [pc, #188]	; (8011474 <tcp_output+0x240>)
 80113b8:	f003 fe76 	bl	80150a8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d01f      	beq.n	8011404 <tcp_output+0x1d0>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	8b5b      	ldrh	r3, [r3, #26]
 80113c8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d119      	bne.n	8011404 <tcp_output+0x1d0>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00b      	beq.n	80113f0 <tcp_output+0x1bc>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d110      	bne.n	8011404 <tcp_output+0x1d0>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e6:	891a      	ldrh	r2, [r3, #8]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d209      	bcs.n	8011404 <tcp_output+0x1d0>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d004      	beq.n	8011404 <tcp_output+0x1d0>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011400:	2b08      	cmp	r3, #8
 8011402:	d901      	bls.n	8011408 <tcp_output+0x1d4>
 8011404:	2301      	movs	r3, #1
 8011406:	e000      	b.n	801140a <tcp_output+0x1d6>
 8011408:	2300      	movs	r3, #0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d106      	bne.n	801141c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	8b5b      	ldrh	r3, [r3, #26]
 8011412:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 80e4 	beq.w	80115e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7d1b      	ldrb	r3, [r3, #20]
 8011420:	2b02      	cmp	r3, #2
 8011422:	d00d      	beq.n	8011440 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	899b      	ldrh	r3, [r3, #12]
 801142a:	b29c      	uxth	r4, r3
 801142c:	2010      	movs	r0, #16
 801142e:	f7f8 ff6b 	bl	800a308 <lwip_htons>
 8011432:	4603      	mov	r3, r0
 8011434:	461a      	mov	r2, r3
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	4322      	orrs	r2, r4
 801143c:	b292      	uxth	r2, r2
 801143e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011440:	697a      	ldr	r2, [r7, #20]
 8011442:	6879      	ldr	r1, [r7, #4]
 8011444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011446:	f000 f909 	bl	801165c <tcp_output_segment>
 801144a:	4603      	mov	r3, r0
 801144c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d016      	beq.n	8011484 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	8b5b      	ldrh	r3, [r3, #26]
 801145a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801145e:	b29a      	uxth	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	835a      	strh	r2, [r3, #26]
      return err;
 8011464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011468:	e0d3      	b.n	8011612 <tcp_output+0x3de>
 801146a:	bf00      	nop
 801146c:	08017f44 	.word	0x08017f44
 8011470:	08018488 	.word	0x08018488
 8011474:	08017f98 	.word	0x08017f98
 8011478:	080184a0 	.word	0x080184a0
 801147c:	20011848 	.word	0x20011848
 8011480:	080184c8 	.word	0x080184c8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7d1b      	ldrb	r3, [r3, #20]
 8011490:	2b02      	cmp	r3, #2
 8011492:	d006      	beq.n	80114a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	8b5b      	ldrh	r3, [r3, #26]
 8011498:	f023 0303 	bic.w	r3, r3, #3
 801149c:	b29a      	uxth	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7f8 ff42 	bl	800a332 <lwip_htonl>
 80114ae:	4604      	mov	r4, r0
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	891b      	ldrh	r3, [r3, #8]
 80114b4:	461d      	mov	r5, r3
 80114b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	899b      	ldrh	r3, [r3, #12]
 80114bc:	b29b      	uxth	r3, r3
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f8 ff22 	bl	800a308 <lwip_htons>
 80114c4:	4603      	mov	r3, r0
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	f003 0303 	and.w	r3, r3, #3
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <tcp_output+0x2a0>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e000      	b.n	80114d6 <tcp_output+0x2a2>
 80114d4:	2300      	movs	r3, #0
 80114d6:	442b      	add	r3, r5
 80114d8:	4423      	add	r3, r4
 80114da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	1ad3      	subs	r3, r2, r3
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	da02      	bge.n	80114ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	68ba      	ldr	r2, [r7, #8]
 80114ec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80114ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f0:	891b      	ldrh	r3, [r3, #8]
 80114f2:	461c      	mov	r4, r3
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	899b      	ldrh	r3, [r3, #12]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7f8 ff03 	bl	800a308 <lwip_htons>
 8011502:	4603      	mov	r3, r0
 8011504:	b2db      	uxtb	r3, r3
 8011506:	f003 0303 	and.w	r3, r3, #3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <tcp_output+0x2de>
 801150e:	2301      	movs	r3, #1
 8011510:	e000      	b.n	8011514 <tcp_output+0x2e0>
 8011512:	2300      	movs	r3, #0
 8011514:	4423      	add	r3, r4
 8011516:	2b00      	cmp	r3, #0
 8011518:	d049      	beq.n	80115ae <tcp_output+0x37a>
      seg->next = NULL;
 801151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151c:	2200      	movs	r2, #0
 801151e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011524:	2b00      	cmp	r3, #0
 8011526:	d105      	bne.n	8011534 <tcp_output+0x300>
        pcb->unacked = seg;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801152c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	623b      	str	r3, [r7, #32]
 8011532:	e03f      	b.n	80115b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	4618      	mov	r0, r3
 801153c:	f7f8 fef9 	bl	800a332 <lwip_htonl>
 8011540:	4604      	mov	r4, r0
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	4618      	mov	r0, r3
 801154a:	f7f8 fef2 	bl	800a332 <lwip_htonl>
 801154e:	4603      	mov	r3, r0
 8011550:	1ae3      	subs	r3, r4, r3
 8011552:	2b00      	cmp	r3, #0
 8011554:	da24      	bge.n	80115a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	3370      	adds	r3, #112	; 0x70
 801155a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801155c:	e002      	b.n	8011564 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d011      	beq.n	8011590 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	4618      	mov	r0, r3
 8011576:	f7f8 fedc 	bl	800a332 <lwip_htonl>
 801157a:	4604      	mov	r4, r0
 801157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	4618      	mov	r0, r3
 8011584:	f7f8 fed5 	bl	800a332 <lwip_htonl>
 8011588:	4603      	mov	r3, r0
 801158a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801158c:	2b00      	cmp	r3, #0
 801158e:	dbe6      	blt.n	801155e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011596:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	e009      	b.n	80115b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80115a0:	6a3b      	ldr	r3, [r7, #32]
 80115a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80115a6:	6a3b      	ldr	r3, [r7, #32]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	623b      	str	r3, [r7, #32]
 80115ac:	e002      	b.n	80115b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80115ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115b0:	f7fb ff19 	bl	800d3e6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80115ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d012      	beq.n	80115e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80115c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7f8 feb3 	bl	800a332 <lwip_htonl>
 80115cc:	4602      	mov	r2, r0
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115d6:	8912      	ldrh	r2, [r2, #8]
 80115d8:	4413      	add	r3, r2
  while (seg != NULL &&
 80115da:	69ba      	ldr	r2, [r7, #24]
 80115dc:	429a      	cmp	r2, r3
 80115de:	f4bf aed9 	bcs.w	8011394 <tcp_output+0x160>
 80115e2:	e000      	b.n	80115e6 <tcp_output+0x3b2>
      break;
 80115e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d108      	bne.n	8011600 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2200      	movs	r2, #0
 80115f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80115f6:	e004      	b.n	8011602 <tcp_output+0x3ce>
    goto output_done;
 80115f8:	bf00      	nop
 80115fa:	e002      	b.n	8011602 <tcp_output+0x3ce>
    goto output_done;
 80115fc:	bf00      	nop
 80115fe:	e000      	b.n	8011602 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011600:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	8b5b      	ldrh	r3, [r3, #26]
 8011606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801160a:	b29a      	uxth	r2, r3
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3728      	adds	r7, #40	; 0x28
 8011616:	46bd      	mov	sp, r7
 8011618:	bdb0      	pop	{r4, r5, r7, pc}
 801161a:	bf00      	nop

0801161c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d106      	bne.n	8011638 <tcp_output_segment_busy+0x1c>
 801162a:	4b09      	ldr	r3, [pc, #36]	; (8011650 <tcp_output_segment_busy+0x34>)
 801162c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011630:	4908      	ldr	r1, [pc, #32]	; (8011654 <tcp_output_segment_busy+0x38>)
 8011632:	4809      	ldr	r0, [pc, #36]	; (8011658 <tcp_output_segment_busy+0x3c>)
 8011634:	f003 fd38 	bl	80150a8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	7b9b      	ldrb	r3, [r3, #14]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d001      	beq.n	8011646 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011642:	2301      	movs	r3, #1
 8011644:	e000      	b.n	8011648 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	08017f44 	.word	0x08017f44
 8011654:	080184e0 	.word	0x080184e0
 8011658:	08017f98 	.word	0x08017f98

0801165c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801165c:	b5b0      	push	{r4, r5, r7, lr}
 801165e:	b08c      	sub	sp, #48	; 0x30
 8011660:	af04      	add	r7, sp, #16
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <tcp_output_segment+0x20>
 801166e:	4b63      	ldr	r3, [pc, #396]	; (80117fc <tcp_output_segment+0x1a0>)
 8011670:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011674:	4962      	ldr	r1, [pc, #392]	; (8011800 <tcp_output_segment+0x1a4>)
 8011676:	4863      	ldr	r0, [pc, #396]	; (8011804 <tcp_output_segment+0x1a8>)
 8011678:	f003 fd16 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d106      	bne.n	8011690 <tcp_output_segment+0x34>
 8011682:	4b5e      	ldr	r3, [pc, #376]	; (80117fc <tcp_output_segment+0x1a0>)
 8011684:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011688:	495f      	ldr	r1, [pc, #380]	; (8011808 <tcp_output_segment+0x1ac>)
 801168a:	485e      	ldr	r0, [pc, #376]	; (8011804 <tcp_output_segment+0x1a8>)
 801168c:	f003 fd0c 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <tcp_output_segment+0x48>
 8011696:	4b59      	ldr	r3, [pc, #356]	; (80117fc <tcp_output_segment+0x1a0>)
 8011698:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801169c:	495b      	ldr	r1, [pc, #364]	; (801180c <tcp_output_segment+0x1b0>)
 801169e:	4859      	ldr	r0, [pc, #356]	; (8011804 <tcp_output_segment+0x1a8>)
 80116a0:	f003 fd02 	bl	80150a8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f7ff ffb9 	bl	801161c <tcp_output_segment_busy>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d001      	beq.n	80116b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80116b0:	2300      	movs	r3, #0
 80116b2:	e09f      	b.n	80117f4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68dc      	ldr	r4, [r3, #12]
 80116bc:	4610      	mov	r0, r2
 80116be:	f7f8 fe38 	bl	800a332 <lwip_htonl>
 80116c2:	4603      	mov	r3, r0
 80116c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	68dc      	ldr	r4, [r3, #12]
 80116ce:	4610      	mov	r0, r2
 80116d0:	f7f8 fe1a 	bl	800a308 <lwip_htons>
 80116d4:	4603      	mov	r3, r0
 80116d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80116e0:	441a      	add	r2, r3
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	68db      	ldr	r3, [r3, #12]
 80116ea:	3314      	adds	r3, #20
 80116ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	7a9b      	ldrb	r3, [r3, #10]
 80116f2:	f003 0301 	and.w	r3, r3, #1
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d015      	beq.n	8011726 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	3304      	adds	r3, #4
 80116fe:	461a      	mov	r2, r3
 8011700:	6879      	ldr	r1, [r7, #4]
 8011702:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011706:	f7fc fa33 	bl	800db70 <tcp_eff_send_mss_netif>
 801170a:	4603      	mov	r3, r0
 801170c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801170e:	8b7b      	ldrh	r3, [r7, #26]
 8011710:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011714:	4618      	mov	r0, r3
 8011716:	f7f8 fe0c 	bl	800a332 <lwip_htonl>
 801171a:	4602      	mov	r2, r0
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	3304      	adds	r3, #4
 8011724:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801172c:	2b00      	cmp	r3, #0
 801172e:	da02      	bge.n	8011736 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	2200      	movs	r2, #0
 8011734:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801173a:	2b00      	cmp	r3, #0
 801173c:	d10c      	bne.n	8011758 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801173e:	4b34      	ldr	r3, [pc, #208]	; (8011810 <tcp_output_segment+0x1b4>)
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	4618      	mov	r0, r3
 801174e:	f7f8 fdf0 	bl	800a332 <lwip_htonl>
 8011752:	4602      	mov	r2, r0
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	68da      	ldr	r2, [r3, #12]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	1ad3      	subs	r3, r2, r3
 8011764:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	8959      	ldrh	r1, [r3, #10]
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	8b3a      	ldrh	r2, [r7, #24]
 8011772:	1a8a      	subs	r2, r1, r2
 8011774:	b292      	uxth	r2, r2
 8011776:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	8919      	ldrh	r1, [r3, #8]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	8b3a      	ldrh	r2, [r7, #24]
 8011784:	1a8a      	subs	r2, r1, r2
 8011786:	b292      	uxth	r2, r2
 8011788:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	68d2      	ldr	r2, [r2, #12]
 8011792:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	741a      	strb	r2, [r3, #16]
 801179c:	2200      	movs	r2, #0
 801179e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	f103 0214 	add.w	r2, r3, #20
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	7a9b      	ldrb	r3, [r3, #10]
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	f003 0304 	and.w	r3, r3, #4
 80117b2:	4413      	add	r3, r2
 80117b4:	69fa      	ldr	r2, [r7, #28]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d006      	beq.n	80117c8 <tcp_output_segment+0x16c>
 80117ba:	4b10      	ldr	r3, [pc, #64]	; (80117fc <tcp_output_segment+0x1a0>)
 80117bc:	f240 621c 	movw	r2, #1564	; 0x61c
 80117c0:	4914      	ldr	r1, [pc, #80]	; (8011814 <tcp_output_segment+0x1b8>)
 80117c2:	4810      	ldr	r0, [pc, #64]	; (8011804 <tcp_output_segment+0x1a8>)
 80117c4:	f003 fc70 	bl	80150a8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	6858      	ldr	r0, [r3, #4]
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	1d1c      	adds	r4, r3, #4
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	7add      	ldrb	r5, [r3, #11]
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	7a9b      	ldrb	r3, [r3, #10]
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	9202      	str	r2, [sp, #8]
 80117de:	2206      	movs	r2, #6
 80117e0:	9201      	str	r2, [sp, #4]
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	462b      	mov	r3, r5
 80117e6:	4622      	mov	r2, r4
 80117e8:	f002 f8a2 	bl	8013930 <ip4_output_if>
 80117ec:	4603      	mov	r3, r0
 80117ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80117f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3720      	adds	r7, #32
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bdb0      	pop	{r4, r5, r7, pc}
 80117fc:	08017f44 	.word	0x08017f44
 8011800:	08018508 	.word	0x08018508
 8011804:	08017f98 	.word	0x08017f98
 8011808:	08018528 	.word	0x08018528
 801180c:	08018548 	.word	0x08018548
 8011810:	200117fc 	.word	0x200117fc
 8011814:	0801856c 	.word	0x0801856c

08011818 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011818:	b5b0      	push	{r4, r5, r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <tcp_rexmit_rto_prepare+0x1c>
 8011826:	4b31      	ldr	r3, [pc, #196]	; (80118ec <tcp_rexmit_rto_prepare+0xd4>)
 8011828:	f240 6263 	movw	r2, #1635	; 0x663
 801182c:	4930      	ldr	r1, [pc, #192]	; (80118f0 <tcp_rexmit_rto_prepare+0xd8>)
 801182e:	4831      	ldr	r0, [pc, #196]	; (80118f4 <tcp_rexmit_rto_prepare+0xdc>)
 8011830:	f003 fc3a 	bl	80150a8 <iprintf>

  if (pcb->unacked == NULL) {
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011838:	2b00      	cmp	r3, #0
 801183a:	d102      	bne.n	8011842 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801183c:	f06f 0305 	mvn.w	r3, #5
 8011840:	e050      	b.n	80118e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011846:	60fb      	str	r3, [r7, #12]
 8011848:	e00b      	b.n	8011862 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801184a:	68f8      	ldr	r0, [r7, #12]
 801184c:	f7ff fee6 	bl	801161c <tcp_output_segment_busy>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d002      	beq.n	801185c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011856:	f06f 0305 	mvn.w	r3, #5
 801185a:	e043      	b.n	80118e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	60fb      	str	r3, [r7, #12]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d1ef      	bne.n	801184a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801186a:	68f8      	ldr	r0, [r7, #12]
 801186c:	f7ff fed6 	bl	801161c <tcp_output_segment_busy>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d002      	beq.n	801187c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011876:	f06f 0305 	mvn.w	r3, #5
 801187a:	e033      	b.n	80118e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	8b5b      	ldrh	r3, [r3, #26]
 8011896:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801189a:	b29a      	uxth	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7f8 fd43 	bl	800a332 <lwip_htonl>
 80118ac:	4604      	mov	r4, r0
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	891b      	ldrh	r3, [r3, #8]
 80118b2:	461d      	mov	r5, r3
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	899b      	ldrh	r3, [r3, #12]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	4618      	mov	r0, r3
 80118be:	f7f8 fd23 	bl	800a308 <lwip_htons>
 80118c2:	4603      	mov	r3, r0
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	f003 0303 	and.w	r3, r3, #3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d001      	beq.n	80118d2 <tcp_rexmit_rto_prepare+0xba>
 80118ce:	2301      	movs	r3, #1
 80118d0:	e000      	b.n	80118d4 <tcp_rexmit_rto_prepare+0xbc>
 80118d2:	2300      	movs	r3, #0
 80118d4:	442b      	add	r3, r5
 80118d6:	18e2      	adds	r2, r4, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bdb0      	pop	{r4, r5, r7, pc}
 80118ec:	08017f44 	.word	0x08017f44
 80118f0:	08018580 	.word	0x08018580
 80118f4:	08017f98 	.word	0x08017f98

080118f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d106      	bne.n	8011914 <tcp_rexmit_rto_commit+0x1c>
 8011906:	4b0d      	ldr	r3, [pc, #52]	; (801193c <tcp_rexmit_rto_commit+0x44>)
 8011908:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801190c:	490c      	ldr	r1, [pc, #48]	; (8011940 <tcp_rexmit_rto_commit+0x48>)
 801190e:	480d      	ldr	r0, [pc, #52]	; (8011944 <tcp_rexmit_rto_commit+0x4c>)
 8011910:	f003 fbca 	bl	80150a8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801191a:	2bff      	cmp	r3, #255	; 0xff
 801191c:	d007      	beq.n	801192e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011924:	3301      	adds	r3, #1
 8011926:	b2da      	uxtb	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fc80 	bl	8011234 <tcp_output>
}
 8011934:	bf00      	nop
 8011936:	3708      	adds	r7, #8
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	08017f44 	.word	0x08017f44
 8011940:	080185a4 	.word	0x080185a4
 8011944:	08017f98 	.word	0x08017f98

08011948 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <tcp_rexmit_rto+0x1c>
 8011956:	4b0a      	ldr	r3, [pc, #40]	; (8011980 <tcp_rexmit_rto+0x38>)
 8011958:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801195c:	4909      	ldr	r1, [pc, #36]	; (8011984 <tcp_rexmit_rto+0x3c>)
 801195e:	480a      	ldr	r0, [pc, #40]	; (8011988 <tcp_rexmit_rto+0x40>)
 8011960:	f003 fba2 	bl	80150a8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f7ff ff57 	bl	8011818 <tcp_rexmit_rto_prepare>
 801196a:	4603      	mov	r3, r0
 801196c:	2b00      	cmp	r3, #0
 801196e:	d102      	bne.n	8011976 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f7ff ffc1 	bl	80118f8 <tcp_rexmit_rto_commit>
  }
}
 8011976:	bf00      	nop
 8011978:	3708      	adds	r7, #8
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	08017f44 	.word	0x08017f44
 8011984:	080185c8 	.word	0x080185c8
 8011988:	08017f98 	.word	0x08017f98

0801198c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801198c:	b590      	push	{r4, r7, lr}
 801198e:	b085      	sub	sp, #20
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d106      	bne.n	80119a8 <tcp_rexmit+0x1c>
 801199a:	4b2f      	ldr	r3, [pc, #188]	; (8011a58 <tcp_rexmit+0xcc>)
 801199c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80119a0:	492e      	ldr	r1, [pc, #184]	; (8011a5c <tcp_rexmit+0xd0>)
 80119a2:	482f      	ldr	r0, [pc, #188]	; (8011a60 <tcp_rexmit+0xd4>)
 80119a4:	f003 fb80 	bl	80150a8 <iprintf>

  if (pcb->unacked == NULL) {
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d102      	bne.n	80119b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80119b0:	f06f 0305 	mvn.w	r3, #5
 80119b4:	e04c      	b.n	8011a50 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80119bc:	68b8      	ldr	r0, [r7, #8]
 80119be:	f7ff fe2d 	bl	801161c <tcp_output_segment_busy>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d002      	beq.n	80119ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80119c8:	f06f 0305 	mvn.w	r3, #5
 80119cc:	e040      	b.n	8011a50 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	336c      	adds	r3, #108	; 0x6c
 80119da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119dc:	e002      	b.n	80119e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d011      	beq.n	8011a10 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7f8 fc9c 	bl	800a332 <lwip_htonl>
 80119fa:	4604      	mov	r4, r0
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7f8 fc95 	bl	800a332 <lwip_htonl>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	dbe6      	blt.n	80119de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	68ba      	ldr	r2, [r7, #8]
 8011a1c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d103      	bne.n	8011a2e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a34:	2bff      	cmp	r3, #255	; 0xff
 8011a36:	d007      	beq.n	8011a48 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a3e:	3301      	adds	r3, #1
 8011a40:	b2da      	uxtb	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a4e:	2300      	movs	r3, #0
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3714      	adds	r7, #20
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd90      	pop	{r4, r7, pc}
 8011a58:	08017f44 	.word	0x08017f44
 8011a5c:	080185e4 	.word	0x080185e4
 8011a60:	08017f98 	.word	0x08017f98

08011a64 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d106      	bne.n	8011a80 <tcp_rexmit_fast+0x1c>
 8011a72:	4b2a      	ldr	r3, [pc, #168]	; (8011b1c <tcp_rexmit_fast+0xb8>)
 8011a74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011a78:	4929      	ldr	r1, [pc, #164]	; (8011b20 <tcp_rexmit_fast+0xbc>)
 8011a7a:	482a      	ldr	r0, [pc, #168]	; (8011b24 <tcp_rexmit_fast+0xc0>)
 8011a7c:	f003 fb14 	bl	80150a8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d045      	beq.n	8011b14 <tcp_rexmit_fast+0xb0>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	8b5b      	ldrh	r3, [r3, #26]
 8011a8c:	f003 0304 	and.w	r3, r3, #4
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d13f      	bne.n	8011b14 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7ff ff79 	bl	801198c <tcp_rexmit>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d139      	bne.n	8011b14 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011aac:	4293      	cmp	r3, r2
 8011aae:	bf28      	it	cs
 8011ab0:	4613      	movcs	r3, r2
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	da00      	bge.n	8011aba <tcp_rexmit_fast+0x56>
 8011ab8:	3301      	adds	r3, #1
 8011aba:	105b      	asrs	r3, r3, #1
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011aca:	461a      	mov	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d206      	bcs.n	8011ae4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ada:	005b      	lsls	r3, r3, #1
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aee:	4619      	mov	r1, r3
 8011af0:	0049      	lsls	r1, r1, #1
 8011af2:	440b      	add	r3, r1
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	4413      	add	r3, r2
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	8b5b      	ldrh	r3, [r3, #26]
 8011b04:	f043 0304 	orr.w	r3, r3, #4
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011b14:	bf00      	nop
 8011b16:	3708      	adds	r7, #8
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	08017f44 	.word	0x08017f44
 8011b20:	080185fc 	.word	0x080185fc
 8011b24:	08017f98 	.word	0x08017f98

08011b28 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b086      	sub	sp, #24
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	607b      	str	r3, [r7, #4]
 8011b32:	460b      	mov	r3, r1
 8011b34:	817b      	strh	r3, [r7, #10]
 8011b36:	4613      	mov	r3, r2
 8011b38:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011b3a:	897a      	ldrh	r2, [r7, #10]
 8011b3c:	893b      	ldrh	r3, [r7, #8]
 8011b3e:	4413      	add	r3, r2
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	3314      	adds	r3, #20
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	2022      	movs	r0, #34	; 0x22
 8011b4e:	f7f9 fce3 	bl	800b518 <pbuf_alloc>
 8011b52:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d04d      	beq.n	8011bf6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011b5a:	897b      	ldrh	r3, [r7, #10]
 8011b5c:	3313      	adds	r3, #19
 8011b5e:	697a      	ldr	r2, [r7, #20]
 8011b60:	8952      	ldrh	r2, [r2, #10]
 8011b62:	4293      	cmp	r3, r2
 8011b64:	db06      	blt.n	8011b74 <tcp_output_alloc_header_common+0x4c>
 8011b66:	4b26      	ldr	r3, [pc, #152]	; (8011c00 <tcp_output_alloc_header_common+0xd8>)
 8011b68:	f240 7223 	movw	r2, #1827	; 0x723
 8011b6c:	4925      	ldr	r1, [pc, #148]	; (8011c04 <tcp_output_alloc_header_common+0xdc>)
 8011b6e:	4826      	ldr	r0, [pc, #152]	; (8011c08 <tcp_output_alloc_header_common+0xe0>)
 8011b70:	f003 fa9a 	bl	80150a8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011b7a:	8c3b      	ldrh	r3, [r7, #32]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7f8 fbc3 	bl	800a308 <lwip_htons>
 8011b82:	4603      	mov	r3, r0
 8011b84:	461a      	mov	r2, r3
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7f8 fbbb 	bl	800a308 <lwip_htons>
 8011b92:	4603      	mov	r3, r0
 8011b94:	461a      	mov	r2, r3
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f7f8 fbc6 	bl	800a332 <lwip_htonl>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011bac:	897b      	ldrh	r3, [r7, #10]
 8011bae:	089b      	lsrs	r3, r3, #2
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	3305      	adds	r3, #5
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	031b      	lsls	r3, r3, #12
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7f8 fb9f 	bl	800a308 <lwip_htons>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	461a      	mov	r2, r3
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011bd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7f8 fb97 	bl	800a308 <lwip_htons>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	461a      	mov	r2, r3
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	2200      	movs	r2, #0
 8011be6:	741a      	strb	r2, [r3, #16]
 8011be8:	2200      	movs	r2, #0
 8011bea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	749a      	strb	r2, [r3, #18]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011bf6:	697b      	ldr	r3, [r7, #20]
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3718      	adds	r7, #24
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	08017f44 	.word	0x08017f44
 8011c04:	0801861c 	.word	0x0801861c
 8011c08:	08017f98 	.word	0x08017f98

08011c0c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c0c:	b5b0      	push	{r4, r5, r7, lr}
 8011c0e:	b08a      	sub	sp, #40	; 0x28
 8011c10:	af04      	add	r7, sp, #16
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	607b      	str	r3, [r7, #4]
 8011c16:	460b      	mov	r3, r1
 8011c18:	817b      	strh	r3, [r7, #10]
 8011c1a:	4613      	mov	r3, r2
 8011c1c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d106      	bne.n	8011c32 <tcp_output_alloc_header+0x26>
 8011c24:	4b15      	ldr	r3, [pc, #84]	; (8011c7c <tcp_output_alloc_header+0x70>)
 8011c26:	f240 7242 	movw	r2, #1858	; 0x742
 8011c2a:	4915      	ldr	r1, [pc, #84]	; (8011c80 <tcp_output_alloc_header+0x74>)
 8011c2c:	4815      	ldr	r0, [pc, #84]	; (8011c84 <tcp_output_alloc_header+0x78>)
 8011c2e:	f003 fa3b 	bl	80150a8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	8adb      	ldrh	r3, [r3, #22]
 8011c3a:	68fa      	ldr	r2, [r7, #12]
 8011c3c:	8b12      	ldrh	r2, [r2, #24]
 8011c3e:	68f9      	ldr	r1, [r7, #12]
 8011c40:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011c42:	893d      	ldrh	r5, [r7, #8]
 8011c44:	897c      	ldrh	r4, [r7, #10]
 8011c46:	9103      	str	r1, [sp, #12]
 8011c48:	2110      	movs	r1, #16
 8011c4a:	9102      	str	r1, [sp, #8]
 8011c4c:	9201      	str	r2, [sp, #4]
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	462a      	mov	r2, r5
 8011c54:	4621      	mov	r1, r4
 8011c56:	f7ff ff67 	bl	8011b28 <tcp_output_alloc_header_common>
 8011c5a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d006      	beq.n	8011c70 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c66:	68fa      	ldr	r2, [r7, #12]
 8011c68:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c6a:	441a      	add	r2, r3
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011c70:	697b      	ldr	r3, [r7, #20]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3718      	adds	r7, #24
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bdb0      	pop	{r4, r5, r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	08017f44 	.word	0x08017f44
 8011c80:	0801864c 	.word	0x0801864c
 8011c84:	08017f98 	.word	0x08017f98

08011c88 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b088      	sub	sp, #32
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	4611      	mov	r1, r2
 8011c94:	461a      	mov	r2, r3
 8011c96:	460b      	mov	r3, r1
 8011c98:	71fb      	strb	r3, [r7, #7]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d106      	bne.n	8011cb6 <tcp_output_fill_options+0x2e>
 8011ca8:	4b13      	ldr	r3, [pc, #76]	; (8011cf8 <tcp_output_fill_options+0x70>)
 8011caa:	f240 7256 	movw	r2, #1878	; 0x756
 8011cae:	4913      	ldr	r1, [pc, #76]	; (8011cfc <tcp_output_fill_options+0x74>)
 8011cb0:	4813      	ldr	r0, [pc, #76]	; (8011d00 <tcp_output_fill_options+0x78>)
 8011cb2:	f003 f9f9 	bl	80150a8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011cbc:	69bb      	ldr	r3, [r7, #24]
 8011cbe:	3314      	adds	r3, #20
 8011cc0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011cc2:	69bb      	ldr	r3, [r7, #24]
 8011cc4:	f103 0214 	add.w	r2, r3, #20
 8011cc8:	8bfb      	ldrh	r3, [r7, #30]
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	4619      	mov	r1, r3
 8011cce:	79fb      	ldrb	r3, [r7, #7]
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	f003 0304 	and.w	r3, r3, #4
 8011cd6:	440b      	add	r3, r1
 8011cd8:	4413      	add	r3, r2
 8011cda:	697a      	ldr	r2, [r7, #20]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d006      	beq.n	8011cee <tcp_output_fill_options+0x66>
 8011ce0:	4b05      	ldr	r3, [pc, #20]	; (8011cf8 <tcp_output_fill_options+0x70>)
 8011ce2:	f240 7275 	movw	r2, #1909	; 0x775
 8011ce6:	4907      	ldr	r1, [pc, #28]	; (8011d04 <tcp_output_fill_options+0x7c>)
 8011ce8:	4805      	ldr	r0, [pc, #20]	; (8011d00 <tcp_output_fill_options+0x78>)
 8011cea:	f003 f9dd 	bl	80150a8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011cee:	bf00      	nop
 8011cf0:	3720      	adds	r7, #32
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	08017f44 	.word	0x08017f44
 8011cfc:	08018674 	.word	0x08018674
 8011d00:	08017f98 	.word	0x08017f98
 8011d04:	0801856c 	.word	0x0801856c

08011d08 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b08a      	sub	sp, #40	; 0x28
 8011d0c:	af04      	add	r7, sp, #16
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d106      	bne.n	8011d2a <tcp_output_control_segment+0x22>
 8011d1c:	4b1c      	ldr	r3, [pc, #112]	; (8011d90 <tcp_output_control_segment+0x88>)
 8011d1e:	f240 7287 	movw	r2, #1927	; 0x787
 8011d22:	491c      	ldr	r1, [pc, #112]	; (8011d94 <tcp_output_control_segment+0x8c>)
 8011d24:	481c      	ldr	r0, [pc, #112]	; (8011d98 <tcp_output_control_segment+0x90>)
 8011d26:	f003 f9bf 	bl	80150a8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d2a:	683a      	ldr	r2, [r7, #0]
 8011d2c:	6879      	ldr	r1, [r7, #4]
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f7fe fae8 	bl	8010304 <tcp_route>
 8011d34:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d102      	bne.n	8011d42 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d3c:	23fc      	movs	r3, #252	; 0xfc
 8011d3e:	75fb      	strb	r3, [r7, #23]
 8011d40:	e01c      	b.n	8011d7c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d006      	beq.n	8011d56 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	7adb      	ldrb	r3, [r3, #11]
 8011d4c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	7a9b      	ldrb	r3, [r3, #10]
 8011d52:	757b      	strb	r3, [r7, #21]
 8011d54:	e003      	b.n	8011d5e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011d56:	23ff      	movs	r3, #255	; 0xff
 8011d58:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011d5e:	7dba      	ldrb	r2, [r7, #22]
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	9302      	str	r3, [sp, #8]
 8011d64:	2306      	movs	r3, #6
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	7d7b      	ldrb	r3, [r7, #21]
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	683a      	ldr	r2, [r7, #0]
 8011d70:	6879      	ldr	r1, [r7, #4]
 8011d72:	68b8      	ldr	r0, [r7, #8]
 8011d74:	f001 fddc 	bl	8013930 <ip4_output_if>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011d7c:	68b8      	ldr	r0, [r7, #8]
 8011d7e:	f7f9 feaf 	bl	800bae0 <pbuf_free>
  return err;
 8011d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	08017f44 	.word	0x08017f44
 8011d94:	0801869c 	.word	0x0801869c
 8011d98:	08017f98 	.word	0x08017f98

08011d9c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011d9c:	b590      	push	{r4, r7, lr}
 8011d9e:	b08b      	sub	sp, #44	; 0x2c
 8011da0:	af04      	add	r7, sp, #16
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	607a      	str	r2, [r7, #4]
 8011da8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d106      	bne.n	8011dbe <tcp_rst+0x22>
 8011db0:	4b1f      	ldr	r3, [pc, #124]	; (8011e30 <tcp_rst+0x94>)
 8011db2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011db6:	491f      	ldr	r1, [pc, #124]	; (8011e34 <tcp_rst+0x98>)
 8011db8:	481f      	ldr	r0, [pc, #124]	; (8011e38 <tcp_rst+0x9c>)
 8011dba:	f003 f975 	bl	80150a8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d106      	bne.n	8011dd2 <tcp_rst+0x36>
 8011dc4:	4b1a      	ldr	r3, [pc, #104]	; (8011e30 <tcp_rst+0x94>)
 8011dc6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011dca:	491c      	ldr	r1, [pc, #112]	; (8011e3c <tcp_rst+0xa0>)
 8011dcc:	481a      	ldr	r0, [pc, #104]	; (8011e38 <tcp_rst+0x9c>)
 8011dce:	f003 f96b 	bl	80150a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011dd6:	f246 0308 	movw	r3, #24584	; 0x6008
 8011dda:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
 8011dde:	b29c      	uxth	r4, r3
 8011de0:	68b8      	ldr	r0, [r7, #8]
 8011de2:	f7f8 faa6 	bl	800a332 <lwip_htonl>
 8011de6:	4602      	mov	r2, r0
 8011de8:	8abb      	ldrh	r3, [r7, #20]
 8011dea:	9303      	str	r3, [sp, #12]
 8011dec:	2314      	movs	r3, #20
 8011dee:	9302      	str	r3, [sp, #8]
 8011df0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011df2:	9301      	str	r3, [sp, #4]
 8011df4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7ff fe92 	bl	8011b28 <tcp_output_alloc_header_common>
 8011e04:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00c      	beq.n	8011e26 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e0c:	7dfb      	ldrb	r3, [r7, #23]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	6939      	ldr	r1, [r7, #16]
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f7ff ff38 	bl	8011c88 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1a:	683a      	ldr	r2, [r7, #0]
 8011e1c:	6939      	ldr	r1, [r7, #16]
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f7ff ff72 	bl	8011d08 <tcp_output_control_segment>
 8011e24:	e000      	b.n	8011e28 <tcp_rst+0x8c>
    return;
 8011e26:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e28:	371c      	adds	r7, #28
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd90      	pop	{r4, r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	08017f44 	.word	0x08017f44
 8011e34:	080186c8 	.word	0x080186c8
 8011e38:	08017f98 	.word	0x08017f98
 8011e3c:	080186e4 	.word	0x080186e4

08011e40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e40:	b590      	push	{r4, r7, lr}
 8011e42:	b087      	sub	sp, #28
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d106      	bne.n	8011e64 <tcp_send_empty_ack+0x24>
 8011e56:	4b28      	ldr	r3, [pc, #160]	; (8011ef8 <tcp_send_empty_ack+0xb8>)
 8011e58:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011e5c:	4927      	ldr	r1, [pc, #156]	; (8011efc <tcp_send_empty_ack+0xbc>)
 8011e5e:	4828      	ldr	r0, [pc, #160]	; (8011f00 <tcp_send_empty_ack+0xc0>)
 8011e60:	f003 f922 	bl	80150a8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e64:	7dfb      	ldrb	r3, [r7, #23]
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	f003 0304 	and.w	r3, r3, #4
 8011e6e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e70:	7d7b      	ldrb	r3, [r7, #21]
 8011e72:	b29c      	uxth	r4, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7f8 fa5a 	bl	800a332 <lwip_htonl>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2200      	movs	r2, #0
 8011e82:	4621      	mov	r1, r4
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7ff fec1 	bl	8011c0c <tcp_output_alloc_header>
 8011e8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d109      	bne.n	8011ea6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8b5b      	ldrh	r3, [r3, #26]
 8011e96:	f043 0303 	orr.w	r3, r3, #3
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ea0:	f06f 0301 	mvn.w	r3, #1
 8011ea4:	e023      	b.n	8011eee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ea6:	7dbb      	ldrb	r3, [r7, #22]
 8011ea8:	7dfa      	ldrb	r2, [r7, #23]
 8011eaa:	6939      	ldr	r1, [r7, #16]
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f7ff feeb 	bl	8011c88 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3304      	adds	r3, #4
 8011eb8:	6939      	ldr	r1, [r7, #16]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ff ff24 	bl	8011d08 <tcp_output_control_segment>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d007      	beq.n	8011edc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	8b5b      	ldrh	r3, [r3, #26]
 8011ed0:	f043 0303 	orr.w	r3, r3, #3
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	835a      	strh	r2, [r3, #26]
 8011eda:	e006      	b.n	8011eea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	8b5b      	ldrh	r3, [r3, #26]
 8011ee0:	f023 0303 	bic.w	r3, r3, #3
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	371c      	adds	r7, #28
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd90      	pop	{r4, r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	08017f44 	.word	0x08017f44
 8011efc:	08018700 	.word	0x08018700
 8011f00:	08017f98 	.word	0x08017f98

08011f04 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f04:	b590      	push	{r4, r7, lr}
 8011f06:	b087      	sub	sp, #28
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <tcp_keepalive+0x20>
 8011f16:	4b18      	ldr	r3, [pc, #96]	; (8011f78 <tcp_keepalive+0x74>)
 8011f18:	f640 0224 	movw	r2, #2084	; 0x824
 8011f1c:	4917      	ldr	r1, [pc, #92]	; (8011f7c <tcp_keepalive+0x78>)
 8011f1e:	4818      	ldr	r0, [pc, #96]	; (8011f80 <tcp_keepalive+0x7c>)
 8011f20:	f003 f8c2 	bl	80150a8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f24:	7dfb      	ldrb	r3, [r7, #23]
 8011f26:	b29c      	uxth	r4, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7f8 f9ff 	bl	800a332 <lwip_htonl>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2200      	movs	r2, #0
 8011f38:	4621      	mov	r1, r4
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f7ff fe66 	bl	8011c0c <tcp_output_alloc_header>
 8011f40:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d102      	bne.n	8011f4e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f4c:	e010      	b.n	8011f70 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f4e:	7dfb      	ldrb	r3, [r7, #23]
 8011f50:	2200      	movs	r2, #0
 8011f52:	6939      	ldr	r1, [r7, #16]
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7ff fe97 	bl	8011c88 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	3304      	adds	r3, #4
 8011f60:	6939      	ldr	r1, [r7, #16]
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7ff fed0 	bl	8011d08 <tcp_output_control_segment>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	371c      	adds	r7, #28
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd90      	pop	{r4, r7, pc}
 8011f78:	08017f44 	.word	0x08017f44
 8011f7c:	08018720 	.word	0x08018720
 8011f80:	08017f98 	.word	0x08017f98

08011f84 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011f84:	b590      	push	{r4, r7, lr}
 8011f86:	b08b      	sub	sp, #44	; 0x2c
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d106      	bne.n	8011fa6 <tcp_zero_window_probe+0x22>
 8011f98:	4b4c      	ldr	r3, [pc, #304]	; (80120cc <tcp_zero_window_probe+0x148>)
 8011f9a:	f640 024f 	movw	r2, #2127	; 0x84f
 8011f9e:	494c      	ldr	r1, [pc, #304]	; (80120d0 <tcp_zero_window_probe+0x14c>)
 8011fa0:	484c      	ldr	r0, [pc, #304]	; (80120d4 <tcp_zero_window_probe+0x150>)
 8011fa2:	f003 f881 	bl	80150a8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011faa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011fac:	6a3b      	ldr	r3, [r7, #32]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d101      	bne.n	8011fb6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e086      	b.n	80120c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fbc:	2bff      	cmp	r3, #255	; 0xff
 8011fbe:	d007      	beq.n	8011fd0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	b2da      	uxtb	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	899b      	ldrh	r3, [r3, #12]
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7f8 f995 	bl	800a308 <lwip_htons>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	f003 0301 	and.w	r3, r3, #1
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d005      	beq.n	8011ff6 <tcp_zero_window_probe+0x72>
 8011fea:	6a3b      	ldr	r3, [r7, #32]
 8011fec:	891b      	ldrh	r3, [r3, #8]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d101      	bne.n	8011ff6 <tcp_zero_window_probe+0x72>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e000      	b.n	8011ff8 <tcp_zero_window_probe+0x74>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011ffa:	7ffb      	ldrb	r3, [r7, #31]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	bf0c      	ite	eq
 8012000:	2301      	moveq	r3, #1
 8012002:	2300      	movne	r3, #0
 8012004:	b2db      	uxtb	r3, r3
 8012006:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801200c:	b299      	uxth	r1, r3
 801200e:	6a3b      	ldr	r3, [r7, #32]
 8012010:	68db      	ldr	r3, [r3, #12]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	8bba      	ldrh	r2, [r7, #28]
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7ff fdf8 	bl	8011c0c <tcp_output_alloc_header>
 801201c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d102      	bne.n	801202a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012028:	e04c      	b.n	80120c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012030:	7ffb      	ldrb	r3, [r7, #31]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d011      	beq.n	801205a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	899b      	ldrh	r3, [r3, #12]
 801203a:	b29b      	uxth	r3, r3
 801203c:	b21b      	sxth	r3, r3
 801203e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012042:	b21c      	sxth	r4, r3
 8012044:	2011      	movs	r0, #17
 8012046:	f7f8 f95f 	bl	800a308 <lwip_htons>
 801204a:	4603      	mov	r3, r0
 801204c:	b21b      	sxth	r3, r3
 801204e:	4323      	orrs	r3, r4
 8012050:	b21b      	sxth	r3, r3
 8012052:	b29a      	uxth	r2, r3
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	819a      	strh	r2, [r3, #12]
 8012058:	e010      	b.n	801207c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	3314      	adds	r3, #20
 8012060:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012062:	6a3b      	ldr	r3, [r7, #32]
 8012064:	6858      	ldr	r0, [r3, #4]
 8012066:	6a3b      	ldr	r3, [r7, #32]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	891a      	ldrh	r2, [r3, #8]
 801206c:	6a3b      	ldr	r3, [r7, #32]
 801206e:	891b      	ldrh	r3, [r3, #8]
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	b29b      	uxth	r3, r3
 8012074:	2201      	movs	r2, #1
 8012076:	6939      	ldr	r1, [r7, #16]
 8012078:	f7f9 ff28 	bl	800becc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801207c:	6a3b      	ldr	r3, [r7, #32]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	4618      	mov	r0, r3
 8012084:	f7f8 f955 	bl	800a332 <lwip_htonl>
 8012088:	4603      	mov	r3, r0
 801208a:	3301      	adds	r3, #1
 801208c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	2b00      	cmp	r3, #0
 8012098:	da02      	bge.n	80120a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80120a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120a4:	2200      	movs	r2, #0
 80120a6:	69b9      	ldr	r1, [r7, #24]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff fded 	bl	8011c88 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	3304      	adds	r3, #4
 80120b4:	69b9      	ldr	r1, [r7, #24]
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ff fe26 	bl	8011d08 <tcp_output_control_segment>
 80120bc:	4603      	mov	r3, r0
 80120be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80120c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	372c      	adds	r7, #44	; 0x2c
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd90      	pop	{r4, r7, pc}
 80120cc:	08017f44 	.word	0x08017f44
 80120d0:	0801873c 	.word	0x0801873c
 80120d4:	08017f98 	.word	0x08017f98

080120d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80120e0:	f7f9 ffe2 	bl	800c0a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80120e4:	4b0a      	ldr	r3, [pc, #40]	; (8012110 <tcpip_tcp_timer+0x38>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d103      	bne.n	80120f4 <tcpip_tcp_timer+0x1c>
 80120ec:	4b09      	ldr	r3, [pc, #36]	; (8012114 <tcpip_tcp_timer+0x3c>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d005      	beq.n	8012100 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80120f4:	2200      	movs	r2, #0
 80120f6:	4908      	ldr	r1, [pc, #32]	; (8012118 <tcpip_tcp_timer+0x40>)
 80120f8:	20fa      	movs	r0, #250	; 0xfa
 80120fa:	f000 f8f3 	bl	80122e4 <sys_timeout>
 80120fe:	e003      	b.n	8012108 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012100:	4b06      	ldr	r3, [pc, #24]	; (801211c <tcpip_tcp_timer+0x44>)
 8012102:	2200      	movs	r2, #0
 8012104:	601a      	str	r2, [r3, #0]
  }
}
 8012106:	bf00      	nop
 8012108:	bf00      	nop
 801210a:	3708      	adds	r7, #8
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	20011808 	.word	0x20011808
 8012114:	2001180c 	.word	0x2001180c
 8012118:	080120d9 	.word	0x080120d9
 801211c:	20011854 	.word	0x20011854

08012120 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012124:	4b0a      	ldr	r3, [pc, #40]	; (8012150 <tcp_timer_needed+0x30>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d10f      	bne.n	801214c <tcp_timer_needed+0x2c>
 801212c:	4b09      	ldr	r3, [pc, #36]	; (8012154 <tcp_timer_needed+0x34>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d103      	bne.n	801213c <tcp_timer_needed+0x1c>
 8012134:	4b08      	ldr	r3, [pc, #32]	; (8012158 <tcp_timer_needed+0x38>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d007      	beq.n	801214c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801213c:	4b04      	ldr	r3, [pc, #16]	; (8012150 <tcp_timer_needed+0x30>)
 801213e:	2201      	movs	r2, #1
 8012140:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012142:	2200      	movs	r2, #0
 8012144:	4905      	ldr	r1, [pc, #20]	; (801215c <tcp_timer_needed+0x3c>)
 8012146:	20fa      	movs	r0, #250	; 0xfa
 8012148:	f000 f8cc 	bl	80122e4 <sys_timeout>
  }
}
 801214c:	bf00      	nop
 801214e:	bd80      	pop	{r7, pc}
 8012150:	20011854 	.word	0x20011854
 8012154:	20011808 	.word	0x20011808
 8012158:	2001180c 	.word	0x2001180c
 801215c:	080120d9 	.word	0x080120d9

08012160 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801216c:	2009      	movs	r0, #9
 801216e:	f7f8 fda1 	bl	800acb4 <memp_malloc>
 8012172:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d109      	bne.n	801218e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d151      	bne.n	8012224 <sys_timeout_abs+0xc4>
 8012180:	4b2a      	ldr	r3, [pc, #168]	; (801222c <sys_timeout_abs+0xcc>)
 8012182:	22be      	movs	r2, #190	; 0xbe
 8012184:	492a      	ldr	r1, [pc, #168]	; (8012230 <sys_timeout_abs+0xd0>)
 8012186:	482b      	ldr	r0, [pc, #172]	; (8012234 <sys_timeout_abs+0xd4>)
 8012188:	f002 ff8e 	bl	80150a8 <iprintf>
    return;
 801218c:	e04a      	b.n	8012224 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	2200      	movs	r2, #0
 8012192:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	68ba      	ldr	r2, [r7, #8]
 8012198:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	68fa      	ldr	r2, [r7, #12]
 80121a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80121a6:	4b24      	ldr	r3, [pc, #144]	; (8012238 <sys_timeout_abs+0xd8>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d103      	bne.n	80121b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80121ae:	4a22      	ldr	r2, [pc, #136]	; (8012238 <sys_timeout_abs+0xd8>)
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	6013      	str	r3, [r2, #0]
    return;
 80121b4:	e037      	b.n	8012226 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	685a      	ldr	r2, [r3, #4]
 80121ba:	4b1f      	ldr	r3, [pc, #124]	; (8012238 <sys_timeout_abs+0xd8>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	0fdb      	lsrs	r3, r3, #31
 80121c4:	f003 0301 	and.w	r3, r3, #1
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d007      	beq.n	80121de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80121ce:	4b1a      	ldr	r3, [pc, #104]	; (8012238 <sys_timeout_abs+0xd8>)
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80121d6:	4a18      	ldr	r2, [pc, #96]	; (8012238 <sys_timeout_abs+0xd8>)
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	6013      	str	r3, [r2, #0]
 80121dc:	e023      	b.n	8012226 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80121de:	4b16      	ldr	r3, [pc, #88]	; (8012238 <sys_timeout_abs+0xd8>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	617b      	str	r3, [r7, #20]
 80121e4:	e01a      	b.n	801221c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d00b      	beq.n	8012206 <sys_timeout_abs+0xa6>
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	685a      	ldr	r2, [r3, #4]
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	0fdb      	lsrs	r3, r3, #31
 80121fc:	f003 0301 	and.w	r3, r3, #1
 8012200:	b2db      	uxtb	r3, r3
 8012202:	2b00      	cmp	r3, #0
 8012204:	d007      	beq.n	8012216 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	693a      	ldr	r2, [r7, #16]
 8012212:	601a      	str	r2, [r3, #0]
        break;
 8012214:	e007      	b.n	8012226 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	617b      	str	r3, [r7, #20]
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1e1      	bne.n	80121e6 <sys_timeout_abs+0x86>
 8012222:	e000      	b.n	8012226 <sys_timeout_abs+0xc6>
    return;
 8012224:	bf00      	nop
      }
    }
  }
}
 8012226:	3718      	adds	r7, #24
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	08018760 	.word	0x08018760
 8012230:	08018794 	.word	0x08018794
 8012234:	080187d4 	.word	0x080187d4
 8012238:	2001184c 	.word	0x2001184c

0801223c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	4798      	blx	r3

  now = sys_now();
 801224e:	f7f2 f8d7 	bl	8004400 <sys_now>
 8012252:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	681a      	ldr	r2, [r3, #0]
 8012258:	4b0f      	ldr	r3, [pc, #60]	; (8012298 <lwip_cyclic_timer+0x5c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4413      	add	r3, r2
 801225e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012260:	68fa      	ldr	r2, [r7, #12]
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	0fdb      	lsrs	r3, r3, #31
 8012268:	f003 0301 	and.w	r3, r3, #1
 801226c:	b2db      	uxtb	r3, r3
 801226e:	2b00      	cmp	r3, #0
 8012270:	d009      	beq.n	8012286 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	4413      	add	r3, r2
 801227a:	687a      	ldr	r2, [r7, #4]
 801227c:	4907      	ldr	r1, [pc, #28]	; (801229c <lwip_cyclic_timer+0x60>)
 801227e:	4618      	mov	r0, r3
 8012280:	f7ff ff6e 	bl	8012160 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012284:	e004      	b.n	8012290 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	4904      	ldr	r1, [pc, #16]	; (801229c <lwip_cyclic_timer+0x60>)
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	f7ff ff68 	bl	8012160 <sys_timeout_abs>
}
 8012290:	bf00      	nop
 8012292:	3718      	adds	r7, #24
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	20011850 	.word	0x20011850
 801229c:	0801223d 	.word	0x0801223d

080122a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122a6:	2301      	movs	r3, #1
 80122a8:	607b      	str	r3, [r7, #4]
 80122aa:	e00e      	b.n	80122ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80122ac:	4a0b      	ldr	r2, [pc, #44]	; (80122dc <sys_timeouts_init+0x3c>)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	4a08      	ldr	r2, [pc, #32]	; (80122dc <sys_timeouts_init+0x3c>)
 80122ba:	4413      	add	r3, r2
 80122bc:	461a      	mov	r2, r3
 80122be:	4908      	ldr	r1, [pc, #32]	; (80122e0 <sys_timeouts_init+0x40>)
 80122c0:	f000 f810 	bl	80122e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	3301      	adds	r3, #1
 80122c8:	607b      	str	r3, [r7, #4]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d9ed      	bls.n	80122ac <sys_timeouts_init+0xc>
  }
}
 80122d0:	bf00      	nop
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	08019040 	.word	0x08019040
 80122e0:	0801223d 	.word	0x0801223d

080122e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122f6:	d306      	bcc.n	8012306 <sys_timeout+0x22>
 80122f8:	4b0a      	ldr	r3, [pc, #40]	; (8012324 <sys_timeout+0x40>)
 80122fa:	f240 1229 	movw	r2, #297	; 0x129
 80122fe:	490a      	ldr	r1, [pc, #40]	; (8012328 <sys_timeout+0x44>)
 8012300:	480a      	ldr	r0, [pc, #40]	; (801232c <sys_timeout+0x48>)
 8012302:	f002 fed1 	bl	80150a8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012306:	f7f2 f87b 	bl	8004400 <sys_now>
 801230a:	4602      	mov	r2, r0
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4413      	add	r3, r2
 8012310:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	68b9      	ldr	r1, [r7, #8]
 8012316:	6978      	ldr	r0, [r7, #20]
 8012318:	f7ff ff22 	bl	8012160 <sys_timeout_abs>
#endif
}
 801231c:	bf00      	nop
 801231e:	3718      	adds	r7, #24
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	08018760 	.word	0x08018760
 8012328:	080187fc 	.word	0x080187fc
 801232c:	080187d4 	.word	0x080187d4

08012330 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012336:	f7f2 f863 	bl	8004400 <sys_now>
 801233a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801233c:	4b17      	ldr	r3, [pc, #92]	; (801239c <sys_check_timeouts+0x6c>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d022      	beq.n	801238e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	68fa      	ldr	r2, [r7, #12]
 801234e:	1ad3      	subs	r3, r2, r3
 8012350:	0fdb      	lsrs	r3, r3, #31
 8012352:	f003 0301 	and.w	r3, r3, #1
 8012356:	b2db      	uxtb	r3, r3
 8012358:	2b00      	cmp	r3, #0
 801235a:	d11a      	bne.n	8012392 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	4a0e      	ldr	r2, [pc, #56]	; (801239c <sys_check_timeouts+0x6c>)
 8012362:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	689b      	ldr	r3, [r3, #8]
 8012368:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	4a0a      	ldr	r2, [pc, #40]	; (80123a0 <sys_check_timeouts+0x70>)
 8012376:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012378:	68b9      	ldr	r1, [r7, #8]
 801237a:	2009      	movs	r0, #9
 801237c:	f7f8 fd10 	bl	800ada0 <memp_free>
    if (handler != NULL) {
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d0da      	beq.n	801233c <sys_check_timeouts+0xc>
      handler(arg);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6838      	ldr	r0, [r7, #0]
 801238a:	4798      	blx	r3
  do {
 801238c:	e7d6      	b.n	801233c <sys_check_timeouts+0xc>
      return;
 801238e:	bf00      	nop
 8012390:	e000      	b.n	8012394 <sys_check_timeouts+0x64>
      return;
 8012392:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	2001184c 	.word	0x2001184c
 80123a0:	20011850 	.word	0x20011850

080123a4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80123aa:	4b16      	ldr	r3, [pc, #88]	; (8012404 <sys_timeouts_sleeptime+0x60>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d102      	bne.n	80123b8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80123b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123b6:	e020      	b.n	80123fa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80123b8:	f7f2 f822 	bl	8004400 <sys_now>
 80123bc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80123be:	4b11      	ldr	r3, [pc, #68]	; (8012404 <sys_timeouts_sleeptime+0x60>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	685a      	ldr	r2, [r3, #4]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	0fdb      	lsrs	r3, r3, #31
 80123ca:	f003 0301 	and.w	r3, r3, #1
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d001      	beq.n	80123d8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80123d4:	2300      	movs	r3, #0
 80123d6:	e010      	b.n	80123fa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80123d8:	4b0a      	ldr	r3, [pc, #40]	; (8012404 <sys_timeouts_sleeptime+0x60>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	685a      	ldr	r2, [r3, #4]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	da06      	bge.n	80123f8 <sys_timeouts_sleeptime+0x54>
 80123ea:	4b07      	ldr	r3, [pc, #28]	; (8012408 <sys_timeouts_sleeptime+0x64>)
 80123ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80123f0:	4906      	ldr	r1, [pc, #24]	; (801240c <sys_timeouts_sleeptime+0x68>)
 80123f2:	4807      	ldr	r0, [pc, #28]	; (8012410 <sys_timeouts_sleeptime+0x6c>)
 80123f4:	f002 fe58 	bl	80150a8 <iprintf>
    return ret;
 80123f8:	683b      	ldr	r3, [r7, #0]
  }
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	2001184c 	.word	0x2001184c
 8012408:	08018760 	.word	0x08018760
 801240c:	08018834 	.word	0x08018834
 8012410:	080187d4 	.word	0x080187d4

08012414 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801241c:	4915      	ldr	r1, [pc, #84]	; (8012474 <etharp_free_entry+0x60>)
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	4613      	mov	r3, r2
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	4413      	add	r3, r2
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	440b      	add	r3, r1
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d013      	beq.n	8012458 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012430:	4910      	ldr	r1, [pc, #64]	; (8012474 <etharp_free_entry+0x60>)
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	4613      	mov	r3, r2
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	4413      	add	r3, r2
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	440b      	add	r3, r1
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4618      	mov	r0, r3
 8012442:	f7f9 fb4d 	bl	800bae0 <pbuf_free>
    arp_table[i].q = NULL;
 8012446:	490b      	ldr	r1, [pc, #44]	; (8012474 <etharp_free_entry+0x60>)
 8012448:	687a      	ldr	r2, [r7, #4]
 801244a:	4613      	mov	r3, r2
 801244c:	005b      	lsls	r3, r3, #1
 801244e:	4413      	add	r3, r2
 8012450:	00db      	lsls	r3, r3, #3
 8012452:	440b      	add	r3, r1
 8012454:	2200      	movs	r2, #0
 8012456:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012458:	4906      	ldr	r1, [pc, #24]	; (8012474 <etharp_free_entry+0x60>)
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	4613      	mov	r3, r2
 801245e:	005b      	lsls	r3, r3, #1
 8012460:	4413      	add	r3, r2
 8012462:	00db      	lsls	r3, r3, #3
 8012464:	440b      	add	r3, r1
 8012466:	3314      	adds	r3, #20
 8012468:	2200      	movs	r2, #0
 801246a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801246c:	bf00      	nop
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	20011858 	.word	0x20011858

08012478 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801247e:	2300      	movs	r3, #0
 8012480:	607b      	str	r3, [r7, #4]
 8012482:	e096      	b.n	80125b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012484:	494f      	ldr	r1, [pc, #316]	; (80125c4 <etharp_tmr+0x14c>)
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	4613      	mov	r3, r2
 801248a:	005b      	lsls	r3, r3, #1
 801248c:	4413      	add	r3, r2
 801248e:	00db      	lsls	r3, r3, #3
 8012490:	440b      	add	r3, r1
 8012492:	3314      	adds	r3, #20
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012498:	78fb      	ldrb	r3, [r7, #3]
 801249a:	2b00      	cmp	r3, #0
 801249c:	f000 8086 	beq.w	80125ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80124a0:	4948      	ldr	r1, [pc, #288]	; (80125c4 <etharp_tmr+0x14c>)
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	4613      	mov	r3, r2
 80124a6:	005b      	lsls	r3, r3, #1
 80124a8:	4413      	add	r3, r2
 80124aa:	00db      	lsls	r3, r3, #3
 80124ac:	440b      	add	r3, r1
 80124ae:	3312      	adds	r3, #18
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	3301      	adds	r3, #1
 80124b4:	b298      	uxth	r0, r3
 80124b6:	4943      	ldr	r1, [pc, #268]	; (80125c4 <etharp_tmr+0x14c>)
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	4613      	mov	r3, r2
 80124bc:	005b      	lsls	r3, r3, #1
 80124be:	4413      	add	r3, r2
 80124c0:	00db      	lsls	r3, r3, #3
 80124c2:	440b      	add	r3, r1
 80124c4:	3312      	adds	r3, #18
 80124c6:	4602      	mov	r2, r0
 80124c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80124ca:	493e      	ldr	r1, [pc, #248]	; (80125c4 <etharp_tmr+0x14c>)
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	4613      	mov	r3, r2
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	440b      	add	r3, r1
 80124d8:	3312      	adds	r3, #18
 80124da:	881b      	ldrh	r3, [r3, #0]
 80124dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80124e0:	d215      	bcs.n	801250e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80124e2:	4938      	ldr	r1, [pc, #224]	; (80125c4 <etharp_tmr+0x14c>)
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	4613      	mov	r3, r2
 80124e8:	005b      	lsls	r3, r3, #1
 80124ea:	4413      	add	r3, r2
 80124ec:	00db      	lsls	r3, r3, #3
 80124ee:	440b      	add	r3, r1
 80124f0:	3314      	adds	r3, #20
 80124f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d10e      	bne.n	8012516 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80124f8:	4932      	ldr	r1, [pc, #200]	; (80125c4 <etharp_tmr+0x14c>)
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	4613      	mov	r3, r2
 80124fe:	005b      	lsls	r3, r3, #1
 8012500:	4413      	add	r3, r2
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	440b      	add	r3, r1
 8012506:	3312      	adds	r3, #18
 8012508:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801250a:	2b04      	cmp	r3, #4
 801250c:	d903      	bls.n	8012516 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7ff ff80 	bl	8012414 <etharp_free_entry>
 8012514:	e04a      	b.n	80125ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012516:	492b      	ldr	r1, [pc, #172]	; (80125c4 <etharp_tmr+0x14c>)
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	4613      	mov	r3, r2
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	4413      	add	r3, r2
 8012520:	00db      	lsls	r3, r3, #3
 8012522:	440b      	add	r3, r1
 8012524:	3314      	adds	r3, #20
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	2b03      	cmp	r3, #3
 801252a:	d10a      	bne.n	8012542 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801252c:	4925      	ldr	r1, [pc, #148]	; (80125c4 <etharp_tmr+0x14c>)
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	4613      	mov	r3, r2
 8012532:	005b      	lsls	r3, r3, #1
 8012534:	4413      	add	r3, r2
 8012536:	00db      	lsls	r3, r3, #3
 8012538:	440b      	add	r3, r1
 801253a:	3314      	adds	r3, #20
 801253c:	2204      	movs	r2, #4
 801253e:	701a      	strb	r2, [r3, #0]
 8012540:	e034      	b.n	80125ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012542:	4920      	ldr	r1, [pc, #128]	; (80125c4 <etharp_tmr+0x14c>)
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	4613      	mov	r3, r2
 8012548:	005b      	lsls	r3, r3, #1
 801254a:	4413      	add	r3, r2
 801254c:	00db      	lsls	r3, r3, #3
 801254e:	440b      	add	r3, r1
 8012550:	3314      	adds	r3, #20
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	2b04      	cmp	r3, #4
 8012556:	d10a      	bne.n	801256e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012558:	491a      	ldr	r1, [pc, #104]	; (80125c4 <etharp_tmr+0x14c>)
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	4613      	mov	r3, r2
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	4413      	add	r3, r2
 8012562:	00db      	lsls	r3, r3, #3
 8012564:	440b      	add	r3, r1
 8012566:	3314      	adds	r3, #20
 8012568:	2202      	movs	r2, #2
 801256a:	701a      	strb	r2, [r3, #0]
 801256c:	e01e      	b.n	80125ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801256e:	4915      	ldr	r1, [pc, #84]	; (80125c4 <etharp_tmr+0x14c>)
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	4613      	mov	r3, r2
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	4413      	add	r3, r2
 8012578:	00db      	lsls	r3, r3, #3
 801257a:	440b      	add	r3, r1
 801257c:	3314      	adds	r3, #20
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	2b01      	cmp	r3, #1
 8012582:	d113      	bne.n	80125ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012584:	490f      	ldr	r1, [pc, #60]	; (80125c4 <etharp_tmr+0x14c>)
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	4613      	mov	r3, r2
 801258a:	005b      	lsls	r3, r3, #1
 801258c:	4413      	add	r3, r2
 801258e:	00db      	lsls	r3, r3, #3
 8012590:	440b      	add	r3, r1
 8012592:	3308      	adds	r3, #8
 8012594:	6818      	ldr	r0, [r3, #0]
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	4613      	mov	r3, r2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	4413      	add	r3, r2
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	4a08      	ldr	r2, [pc, #32]	; (80125c4 <etharp_tmr+0x14c>)
 80125a2:	4413      	add	r3, r2
 80125a4:	3304      	adds	r3, #4
 80125a6:	4619      	mov	r1, r3
 80125a8:	f000 fe6e 	bl	8013288 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	3301      	adds	r3, #1
 80125b0:	607b      	str	r3, [r7, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2b09      	cmp	r3, #9
 80125b6:	f77f af65 	ble.w	8012484 <etharp_tmr+0xc>
      }
    }
  }
}
 80125ba:	bf00      	nop
 80125bc:	bf00      	nop
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	20011858 	.word	0x20011858

080125c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	; 0x28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	460b      	mov	r3, r1
 80125d2:	607a      	str	r2, [r7, #4]
 80125d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80125d6:	230a      	movs	r3, #10
 80125d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80125da:	230a      	movs	r3, #10
 80125dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80125de:	230a      	movs	r3, #10
 80125e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80125e2:	2300      	movs	r3, #0
 80125e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80125e6:	230a      	movs	r3, #10
 80125e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	83bb      	strh	r3, [r7, #28]
 80125ee:	2300      	movs	r3, #0
 80125f0:	837b      	strh	r3, [r7, #26]
 80125f2:	2300      	movs	r3, #0
 80125f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125f6:	2300      	movs	r3, #0
 80125f8:	843b      	strh	r3, [r7, #32]
 80125fa:	e0ae      	b.n	801275a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80125fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012600:	49a6      	ldr	r1, [pc, #664]	; (801289c <etharp_find_entry+0x2d4>)
 8012602:	4613      	mov	r3, r2
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	4413      	add	r3, r2
 8012608:	00db      	lsls	r3, r3, #3
 801260a:	440b      	add	r3, r1
 801260c:	3314      	adds	r3, #20
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012612:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012616:	2b0a      	cmp	r3, #10
 8012618:	d105      	bne.n	8012626 <etharp_find_entry+0x5e>
 801261a:	7dfb      	ldrb	r3, [r7, #23]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d102      	bne.n	8012626 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012620:	8c3b      	ldrh	r3, [r7, #32]
 8012622:	847b      	strh	r3, [r7, #34]	; 0x22
 8012624:	e095      	b.n	8012752 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	2b00      	cmp	r3, #0
 801262a:	f000 8092 	beq.w	8012752 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801262e:	7dfb      	ldrb	r3, [r7, #23]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d009      	beq.n	8012648 <etharp_find_entry+0x80>
 8012634:	7dfb      	ldrb	r3, [r7, #23]
 8012636:	2b01      	cmp	r3, #1
 8012638:	d806      	bhi.n	8012648 <etharp_find_entry+0x80>
 801263a:	4b99      	ldr	r3, [pc, #612]	; (80128a0 <etharp_find_entry+0x2d8>)
 801263c:	f240 1223 	movw	r2, #291	; 0x123
 8012640:	4998      	ldr	r1, [pc, #608]	; (80128a4 <etharp_find_entry+0x2dc>)
 8012642:	4899      	ldr	r0, [pc, #612]	; (80128a8 <etharp_find_entry+0x2e0>)
 8012644:	f002 fd30 	bl	80150a8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d020      	beq.n	8012690 <etharp_find_entry+0xc8>
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	6819      	ldr	r1, [r3, #0]
 8012652:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012656:	4891      	ldr	r0, [pc, #580]	; (801289c <etharp_find_entry+0x2d4>)
 8012658:	4613      	mov	r3, r2
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	4413      	add	r3, r2
 801265e:	00db      	lsls	r3, r3, #3
 8012660:	4403      	add	r3, r0
 8012662:	3304      	adds	r3, #4
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4299      	cmp	r1, r3
 8012668:	d112      	bne.n	8012690 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00c      	beq.n	801268a <etharp_find_entry+0xc2>
 8012670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012674:	4989      	ldr	r1, [pc, #548]	; (801289c <etharp_find_entry+0x2d4>)
 8012676:	4613      	mov	r3, r2
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	4413      	add	r3, r2
 801267c:	00db      	lsls	r3, r3, #3
 801267e:	440b      	add	r3, r1
 8012680:	3308      	adds	r3, #8
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	429a      	cmp	r2, r3
 8012688:	d102      	bne.n	8012690 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801268a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801268e:	e100      	b.n	8012892 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012690:	7dfb      	ldrb	r3, [r7, #23]
 8012692:	2b01      	cmp	r3, #1
 8012694:	d140      	bne.n	8012718 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012696:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801269a:	4980      	ldr	r1, [pc, #512]	; (801289c <etharp_find_entry+0x2d4>)
 801269c:	4613      	mov	r3, r2
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	4413      	add	r3, r2
 80126a2:	00db      	lsls	r3, r3, #3
 80126a4:	440b      	add	r3, r1
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d01a      	beq.n	80126e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80126ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126b0:	497a      	ldr	r1, [pc, #488]	; (801289c <etharp_find_entry+0x2d4>)
 80126b2:	4613      	mov	r3, r2
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	4413      	add	r3, r2
 80126b8:	00db      	lsls	r3, r3, #3
 80126ba:	440b      	add	r3, r1
 80126bc:	3312      	adds	r3, #18
 80126be:	881b      	ldrh	r3, [r3, #0]
 80126c0:	8bba      	ldrh	r2, [r7, #28]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d845      	bhi.n	8012752 <etharp_find_entry+0x18a>
            old_queue = i;
 80126c6:	8c3b      	ldrh	r3, [r7, #32]
 80126c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80126ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126ce:	4973      	ldr	r1, [pc, #460]	; (801289c <etharp_find_entry+0x2d4>)
 80126d0:	4613      	mov	r3, r2
 80126d2:	005b      	lsls	r3, r3, #1
 80126d4:	4413      	add	r3, r2
 80126d6:	00db      	lsls	r3, r3, #3
 80126d8:	440b      	add	r3, r1
 80126da:	3312      	adds	r3, #18
 80126dc:	881b      	ldrh	r3, [r3, #0]
 80126de:	83bb      	strh	r3, [r7, #28]
 80126e0:	e037      	b.n	8012752 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80126e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126e6:	496d      	ldr	r1, [pc, #436]	; (801289c <etharp_find_entry+0x2d4>)
 80126e8:	4613      	mov	r3, r2
 80126ea:	005b      	lsls	r3, r3, #1
 80126ec:	4413      	add	r3, r2
 80126ee:	00db      	lsls	r3, r3, #3
 80126f0:	440b      	add	r3, r1
 80126f2:	3312      	adds	r3, #18
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	8b7a      	ldrh	r2, [r7, #26]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d82a      	bhi.n	8012752 <etharp_find_entry+0x18a>
            old_pending = i;
 80126fc:	8c3b      	ldrh	r3, [r7, #32]
 80126fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012700:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012704:	4965      	ldr	r1, [pc, #404]	; (801289c <etharp_find_entry+0x2d4>)
 8012706:	4613      	mov	r3, r2
 8012708:	005b      	lsls	r3, r3, #1
 801270a:	4413      	add	r3, r2
 801270c:	00db      	lsls	r3, r3, #3
 801270e:	440b      	add	r3, r1
 8012710:	3312      	adds	r3, #18
 8012712:	881b      	ldrh	r3, [r3, #0]
 8012714:	837b      	strh	r3, [r7, #26]
 8012716:	e01c      	b.n	8012752 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012718:	7dfb      	ldrb	r3, [r7, #23]
 801271a:	2b01      	cmp	r3, #1
 801271c:	d919      	bls.n	8012752 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801271e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012722:	495e      	ldr	r1, [pc, #376]	; (801289c <etharp_find_entry+0x2d4>)
 8012724:	4613      	mov	r3, r2
 8012726:	005b      	lsls	r3, r3, #1
 8012728:	4413      	add	r3, r2
 801272a:	00db      	lsls	r3, r3, #3
 801272c:	440b      	add	r3, r1
 801272e:	3312      	adds	r3, #18
 8012730:	881b      	ldrh	r3, [r3, #0]
 8012732:	8b3a      	ldrh	r2, [r7, #24]
 8012734:	429a      	cmp	r2, r3
 8012736:	d80c      	bhi.n	8012752 <etharp_find_entry+0x18a>
            old_stable = i;
 8012738:	8c3b      	ldrh	r3, [r7, #32]
 801273a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801273c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012740:	4956      	ldr	r1, [pc, #344]	; (801289c <etharp_find_entry+0x2d4>)
 8012742:	4613      	mov	r3, r2
 8012744:	005b      	lsls	r3, r3, #1
 8012746:	4413      	add	r3, r2
 8012748:	00db      	lsls	r3, r3, #3
 801274a:	440b      	add	r3, r1
 801274c:	3312      	adds	r3, #18
 801274e:	881b      	ldrh	r3, [r3, #0]
 8012750:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012752:	8c3b      	ldrh	r3, [r7, #32]
 8012754:	3301      	adds	r3, #1
 8012756:	b29b      	uxth	r3, r3
 8012758:	843b      	strh	r3, [r7, #32]
 801275a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801275e:	2b09      	cmp	r3, #9
 8012760:	f77f af4c 	ble.w	80125fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012764:	7afb      	ldrb	r3, [r7, #11]
 8012766:	f003 0302 	and.w	r3, r3, #2
 801276a:	2b00      	cmp	r3, #0
 801276c:	d108      	bne.n	8012780 <etharp_find_entry+0x1b8>
 801276e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012772:	2b0a      	cmp	r3, #10
 8012774:	d107      	bne.n	8012786 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012776:	7afb      	ldrb	r3, [r7, #11]
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	2b00      	cmp	r3, #0
 801277e:	d102      	bne.n	8012786 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012784:	e085      	b.n	8012892 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801278a:	2b09      	cmp	r3, #9
 801278c:	dc02      	bgt.n	8012794 <etharp_find_entry+0x1cc>
    i = empty;
 801278e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012790:	843b      	strh	r3, [r7, #32]
 8012792:	e039      	b.n	8012808 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012794:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012798:	2b09      	cmp	r3, #9
 801279a:	dc14      	bgt.n	80127c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801279c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801279e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80127a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127a4:	493d      	ldr	r1, [pc, #244]	; (801289c <etharp_find_entry+0x2d4>)
 80127a6:	4613      	mov	r3, r2
 80127a8:	005b      	lsls	r3, r3, #1
 80127aa:	4413      	add	r3, r2
 80127ac:	00db      	lsls	r3, r3, #3
 80127ae:	440b      	add	r3, r1
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d018      	beq.n	80127e8 <etharp_find_entry+0x220>
 80127b6:	4b3a      	ldr	r3, [pc, #232]	; (80128a0 <etharp_find_entry+0x2d8>)
 80127b8:	f240 126d 	movw	r2, #365	; 0x16d
 80127bc:	493b      	ldr	r1, [pc, #236]	; (80128ac <etharp_find_entry+0x2e4>)
 80127be:	483a      	ldr	r0, [pc, #232]	; (80128a8 <etharp_find_entry+0x2e0>)
 80127c0:	f002 fc72 	bl	80150a8 <iprintf>
 80127c4:	e010      	b.n	80127e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80127c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80127ca:	2b09      	cmp	r3, #9
 80127cc:	dc02      	bgt.n	80127d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80127ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127d0:	843b      	strh	r3, [r7, #32]
 80127d2:	e009      	b.n	80127e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80127d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80127d8:	2b09      	cmp	r3, #9
 80127da:	dc02      	bgt.n	80127e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80127dc:	8bfb      	ldrh	r3, [r7, #30]
 80127de:	843b      	strh	r3, [r7, #32]
 80127e0:	e002      	b.n	80127e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80127e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127e6:	e054      	b.n	8012892 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80127e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80127ec:	2b09      	cmp	r3, #9
 80127ee:	dd06      	ble.n	80127fe <etharp_find_entry+0x236>
 80127f0:	4b2b      	ldr	r3, [pc, #172]	; (80128a0 <etharp_find_entry+0x2d8>)
 80127f2:	f240 127f 	movw	r2, #383	; 0x17f
 80127f6:	492e      	ldr	r1, [pc, #184]	; (80128b0 <etharp_find_entry+0x2e8>)
 80127f8:	482b      	ldr	r0, [pc, #172]	; (80128a8 <etharp_find_entry+0x2e0>)
 80127fa:	f002 fc55 	bl	80150a8 <iprintf>
    etharp_free_entry(i);
 80127fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012802:	4618      	mov	r0, r3
 8012804:	f7ff fe06 	bl	8012414 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012808:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801280c:	2b09      	cmp	r3, #9
 801280e:	dd06      	ble.n	801281e <etharp_find_entry+0x256>
 8012810:	4b23      	ldr	r3, [pc, #140]	; (80128a0 <etharp_find_entry+0x2d8>)
 8012812:	f240 1283 	movw	r2, #387	; 0x183
 8012816:	4926      	ldr	r1, [pc, #152]	; (80128b0 <etharp_find_entry+0x2e8>)
 8012818:	4823      	ldr	r0, [pc, #140]	; (80128a8 <etharp_find_entry+0x2e0>)
 801281a:	f002 fc45 	bl	80150a8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801281e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012822:	491e      	ldr	r1, [pc, #120]	; (801289c <etharp_find_entry+0x2d4>)
 8012824:	4613      	mov	r3, r2
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	00db      	lsls	r3, r3, #3
 801282c:	440b      	add	r3, r1
 801282e:	3314      	adds	r3, #20
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d006      	beq.n	8012844 <etharp_find_entry+0x27c>
 8012836:	4b1a      	ldr	r3, [pc, #104]	; (80128a0 <etharp_find_entry+0x2d8>)
 8012838:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801283c:	491d      	ldr	r1, [pc, #116]	; (80128b4 <etharp_find_entry+0x2ec>)
 801283e:	481a      	ldr	r0, [pc, #104]	; (80128a8 <etharp_find_entry+0x2e0>)
 8012840:	f002 fc32 	bl	80150a8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00b      	beq.n	8012862 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801284a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	6819      	ldr	r1, [r3, #0]
 8012852:	4812      	ldr	r0, [pc, #72]	; (801289c <etharp_find_entry+0x2d4>)
 8012854:	4613      	mov	r3, r2
 8012856:	005b      	lsls	r3, r3, #1
 8012858:	4413      	add	r3, r2
 801285a:	00db      	lsls	r3, r3, #3
 801285c:	4403      	add	r3, r0
 801285e:	3304      	adds	r3, #4
 8012860:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012866:	490d      	ldr	r1, [pc, #52]	; (801289c <etharp_find_entry+0x2d4>)
 8012868:	4613      	mov	r3, r2
 801286a:	005b      	lsls	r3, r3, #1
 801286c:	4413      	add	r3, r2
 801286e:	00db      	lsls	r3, r3, #3
 8012870:	440b      	add	r3, r1
 8012872:	3312      	adds	r3, #18
 8012874:	2200      	movs	r2, #0
 8012876:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801287c:	4907      	ldr	r1, [pc, #28]	; (801289c <etharp_find_entry+0x2d4>)
 801287e:	4613      	mov	r3, r2
 8012880:	005b      	lsls	r3, r3, #1
 8012882:	4413      	add	r3, r2
 8012884:	00db      	lsls	r3, r3, #3
 8012886:	440b      	add	r3, r1
 8012888:	3308      	adds	r3, #8
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801288e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012892:	4618      	mov	r0, r3
 8012894:	3728      	adds	r7, #40	; 0x28
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	20011858 	.word	0x20011858
 80128a0:	08018848 	.word	0x08018848
 80128a4:	08018880 	.word	0x08018880
 80128a8:	080188c0 	.word	0x080188c0
 80128ac:	080188e8 	.word	0x080188e8
 80128b0:	08018900 	.word	0x08018900
 80128b4:	08018914 	.word	0x08018914

080128b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b088      	sub	sp, #32
 80128bc:	af02      	add	r7, sp, #8
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	607a      	str	r2, [r7, #4]
 80128c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80128cc:	2b06      	cmp	r3, #6
 80128ce:	d006      	beq.n	80128de <etharp_update_arp_entry+0x26>
 80128d0:	4b48      	ldr	r3, [pc, #288]	; (80129f4 <etharp_update_arp_entry+0x13c>)
 80128d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80128d6:	4948      	ldr	r1, [pc, #288]	; (80129f8 <etharp_update_arp_entry+0x140>)
 80128d8:	4848      	ldr	r0, [pc, #288]	; (80129fc <etharp_update_arp_entry+0x144>)
 80128da:	f002 fbe5 	bl	80150a8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d012      	beq.n	801290a <etharp_update_arp_entry+0x52>
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d00e      	beq.n	801290a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	68f9      	ldr	r1, [r7, #12]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f001 f8f4 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 80128f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d105      	bne.n	801290a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012906:	2be0      	cmp	r3, #224	; 0xe0
 8012908:	d102      	bne.n	8012910 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801290a:	f06f 030f 	mvn.w	r3, #15
 801290e:	e06c      	b.n	80129ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012910:	78fb      	ldrb	r3, [r7, #3]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	4619      	mov	r1, r3
 8012916:	68b8      	ldr	r0, [r7, #8]
 8012918:	f7ff fe56 	bl	80125c8 <etharp_find_entry>
 801291c:	4603      	mov	r3, r0
 801291e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012924:	2b00      	cmp	r3, #0
 8012926:	da02      	bge.n	801292e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012928:	8afb      	ldrh	r3, [r7, #22]
 801292a:	b25b      	sxtb	r3, r3
 801292c:	e05d      	b.n	80129ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801292e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012932:	4933      	ldr	r1, [pc, #204]	; (8012a00 <etharp_update_arp_entry+0x148>)
 8012934:	4613      	mov	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	440b      	add	r3, r1
 801293e:	3314      	adds	r3, #20
 8012940:	2202      	movs	r2, #2
 8012942:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012944:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012948:	492d      	ldr	r1, [pc, #180]	; (8012a00 <etharp_update_arp_entry+0x148>)
 801294a:	4613      	mov	r3, r2
 801294c:	005b      	lsls	r3, r3, #1
 801294e:	4413      	add	r3, r2
 8012950:	00db      	lsls	r3, r3, #3
 8012952:	440b      	add	r3, r1
 8012954:	3308      	adds	r3, #8
 8012956:	68fa      	ldr	r2, [r7, #12]
 8012958:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801295a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801295e:	4613      	mov	r3, r2
 8012960:	005b      	lsls	r3, r3, #1
 8012962:	4413      	add	r3, r2
 8012964:	00db      	lsls	r3, r3, #3
 8012966:	3308      	adds	r3, #8
 8012968:	4a25      	ldr	r2, [pc, #148]	; (8012a00 <etharp_update_arp_entry+0x148>)
 801296a:	4413      	add	r3, r2
 801296c:	3304      	adds	r3, #4
 801296e:	2206      	movs	r2, #6
 8012970:	6879      	ldr	r1, [r7, #4]
 8012972:	4618      	mov	r0, r3
 8012974:	f002 faed 	bl	8014f52 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012978:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801297c:	4920      	ldr	r1, [pc, #128]	; (8012a00 <etharp_update_arp_entry+0x148>)
 801297e:	4613      	mov	r3, r2
 8012980:	005b      	lsls	r3, r3, #1
 8012982:	4413      	add	r3, r2
 8012984:	00db      	lsls	r3, r3, #3
 8012986:	440b      	add	r3, r1
 8012988:	3312      	adds	r3, #18
 801298a:	2200      	movs	r2, #0
 801298c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801298e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012992:	491b      	ldr	r1, [pc, #108]	; (8012a00 <etharp_update_arp_entry+0x148>)
 8012994:	4613      	mov	r3, r2
 8012996:	005b      	lsls	r3, r3, #1
 8012998:	4413      	add	r3, r2
 801299a:	00db      	lsls	r3, r3, #3
 801299c:	440b      	add	r3, r1
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d021      	beq.n	80129e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80129a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129a8:	4915      	ldr	r1, [pc, #84]	; (8012a00 <etharp_update_arp_entry+0x148>)
 80129aa:	4613      	mov	r3, r2
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	4413      	add	r3, r2
 80129b0:	00db      	lsls	r3, r3, #3
 80129b2:	440b      	add	r3, r1
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80129b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129bc:	4910      	ldr	r1, [pc, #64]	; (8012a00 <etharp_update_arp_entry+0x148>)
 80129be:	4613      	mov	r3, r2
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	4413      	add	r3, r2
 80129c4:	00db      	lsls	r3, r3, #3
 80129c6:	440b      	add	r3, r1
 80129c8:	2200      	movs	r2, #0
 80129ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80129d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6939      	ldr	r1, [r7, #16]
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	f001 ff8d 	bl	80148fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80129e2:	6938      	ldr	r0, [r7, #16]
 80129e4:	f7f9 f87c 	bl	800bae0 <pbuf_free>
  }
  return ERR_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3718      	adds	r7, #24
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	08018848 	.word	0x08018848
 80129f8:	08018940 	.word	0x08018940
 80129fc:	080188c0 	.word	0x080188c0
 8012a00:	20011858 	.word	0x20011858

08012a04 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	e01e      	b.n	8012a50 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012a12:	4913      	ldr	r1, [pc, #76]	; (8012a60 <etharp_cleanup_netif+0x5c>)
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	4613      	mov	r3, r2
 8012a18:	005b      	lsls	r3, r3, #1
 8012a1a:	4413      	add	r3, r2
 8012a1c:	00db      	lsls	r3, r3, #3
 8012a1e:	440b      	add	r3, r1
 8012a20:	3314      	adds	r3, #20
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012a26:	7afb      	ldrb	r3, [r7, #11]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00e      	beq.n	8012a4a <etharp_cleanup_netif+0x46>
 8012a2c:	490c      	ldr	r1, [pc, #48]	; (8012a60 <etharp_cleanup_netif+0x5c>)
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	4613      	mov	r3, r2
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	4413      	add	r3, r2
 8012a36:	00db      	lsls	r3, r3, #3
 8012a38:	440b      	add	r3, r1
 8012a3a:	3308      	adds	r3, #8
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d102      	bne.n	8012a4a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f7ff fce5 	bl	8012414 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	60fb      	str	r3, [r7, #12]
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b09      	cmp	r3, #9
 8012a54:	dddd      	ble.n	8012a12 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012a56:	bf00      	nop
 8012a58:	bf00      	nop
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	20011858 	.word	0x20011858

08012a64 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012a64:	b5b0      	push	{r4, r5, r7, lr}
 8012a66:	b08a      	sub	sp, #40	; 0x28
 8012a68:	af04      	add	r7, sp, #16
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d107      	bne.n	8012a84 <etharp_input+0x20>
 8012a74:	4b3d      	ldr	r3, [pc, #244]	; (8012b6c <etharp_input+0x108>)
 8012a76:	f240 228a 	movw	r2, #650	; 0x28a
 8012a7a:	493d      	ldr	r1, [pc, #244]	; (8012b70 <etharp_input+0x10c>)
 8012a7c:	483d      	ldr	r0, [pc, #244]	; (8012b74 <etharp_input+0x110>)
 8012a7e:	f002 fb13 	bl	80150a8 <iprintf>
 8012a82:	e06f      	b.n	8012b64 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a94:	d10c      	bne.n	8012ab0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012a9a:	2b06      	cmp	r3, #6
 8012a9c:	d108      	bne.n	8012ab0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012aa2:	2b04      	cmp	r3, #4
 8012aa4:	d104      	bne.n	8012ab0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	885b      	ldrh	r3, [r3, #2]
 8012aaa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012aac:	2b08      	cmp	r3, #8
 8012aae:	d003      	beq.n	8012ab8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f7f9 f815 	bl	800bae0 <pbuf_free>
    return;
 8012ab6:	e055      	b.n	8012b64 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	330e      	adds	r3, #14
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	3318      	adds	r3, #24
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	3304      	adds	r3, #4
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d102      	bne.n	8012ad8 <etharp_input+0x74>
    for_us = 0;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	75fb      	strb	r3, [r7, #23]
 8012ad6:	e009      	b.n	8012aec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012ad8:	68ba      	ldr	r2, [r7, #8]
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	3304      	adds	r3, #4
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	bf0c      	ite	eq
 8012ae4:	2301      	moveq	r3, #1
 8012ae6:	2300      	movne	r3, #0
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	f103 0208 	add.w	r2, r3, #8
 8012af2:	7dfb      	ldrb	r3, [r7, #23]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d001      	beq.n	8012afc <etharp_input+0x98>
 8012af8:	2301      	movs	r3, #1
 8012afa:	e000      	b.n	8012afe <etharp_input+0x9a>
 8012afc:	2302      	movs	r3, #2
 8012afe:	f107 010c 	add.w	r1, r7, #12
 8012b02:	6838      	ldr	r0, [r7, #0]
 8012b04:	f7ff fed8 	bl	80128b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	88db      	ldrh	r3, [r3, #6]
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b12:	d003      	beq.n	8012b1c <etharp_input+0xb8>
 8012b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b18:	d01e      	beq.n	8012b58 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012b1a:	e020      	b.n	8012b5e <etharp_input+0xfa>
      if (for_us) {
 8012b1c:	7dfb      	ldrb	r3, [r7, #23]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d01c      	beq.n	8012b5c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012b38:	693a      	ldr	r2, [r7, #16]
 8012b3a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012b3c:	2102      	movs	r1, #2
 8012b3e:	9103      	str	r1, [sp, #12]
 8012b40:	f107 010c 	add.w	r1, r7, #12
 8012b44:	9102      	str	r1, [sp, #8]
 8012b46:	9201      	str	r2, [sp, #4]
 8012b48:	9300      	str	r3, [sp, #0]
 8012b4a:	462b      	mov	r3, r5
 8012b4c:	4622      	mov	r2, r4
 8012b4e:	4601      	mov	r1, r0
 8012b50:	6838      	ldr	r0, [r7, #0]
 8012b52:	f000 faeb 	bl	801312c <etharp_raw>
      break;
 8012b56:	e001      	b.n	8012b5c <etharp_input+0xf8>
      break;
 8012b58:	bf00      	nop
 8012b5a:	e000      	b.n	8012b5e <etharp_input+0xfa>
      break;
 8012b5c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f7f8 ffbe 	bl	800bae0 <pbuf_free>
}
 8012b64:	3718      	adds	r7, #24
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bdb0      	pop	{r4, r5, r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	08018848 	.word	0x08018848
 8012b70:	08018998 	.word	0x08018998
 8012b74:	080188c0 	.word	0x080188c0

08012b78 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b086      	sub	sp, #24
 8012b7c:	af02      	add	r7, sp, #8
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	60b9      	str	r1, [r7, #8]
 8012b82:	4613      	mov	r3, r2
 8012b84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012b86:	79fa      	ldrb	r2, [r7, #7]
 8012b88:	4944      	ldr	r1, [pc, #272]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	4413      	add	r3, r2
 8012b90:	00db      	lsls	r3, r3, #3
 8012b92:	440b      	add	r3, r1
 8012b94:	3314      	adds	r3, #20
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d806      	bhi.n	8012baa <etharp_output_to_arp_index+0x32>
 8012b9c:	4b40      	ldr	r3, [pc, #256]	; (8012ca0 <etharp_output_to_arp_index+0x128>)
 8012b9e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012ba2:	4940      	ldr	r1, [pc, #256]	; (8012ca4 <etharp_output_to_arp_index+0x12c>)
 8012ba4:	4840      	ldr	r0, [pc, #256]	; (8012ca8 <etharp_output_to_arp_index+0x130>)
 8012ba6:	f002 fa7f 	bl	80150a8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012baa:	79fa      	ldrb	r2, [r7, #7]
 8012bac:	493b      	ldr	r1, [pc, #236]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012bae:	4613      	mov	r3, r2
 8012bb0:	005b      	lsls	r3, r3, #1
 8012bb2:	4413      	add	r3, r2
 8012bb4:	00db      	lsls	r3, r3, #3
 8012bb6:	440b      	add	r3, r1
 8012bb8:	3314      	adds	r3, #20
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d153      	bne.n	8012c68 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012bc0:	79fa      	ldrb	r2, [r7, #7]
 8012bc2:	4936      	ldr	r1, [pc, #216]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012bc4:	4613      	mov	r3, r2
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	4413      	add	r3, r2
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	440b      	add	r3, r1
 8012bce:	3312      	adds	r3, #18
 8012bd0:	881b      	ldrh	r3, [r3, #0]
 8012bd2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012bd6:	d919      	bls.n	8012c0c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012bd8:	79fa      	ldrb	r2, [r7, #7]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	005b      	lsls	r3, r3, #1
 8012bde:	4413      	add	r3, r2
 8012be0:	00db      	lsls	r3, r3, #3
 8012be2:	4a2e      	ldr	r2, [pc, #184]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012be4:	4413      	add	r3, r2
 8012be6:	3304      	adds	r3, #4
 8012be8:	4619      	mov	r1, r3
 8012bea:	68f8      	ldr	r0, [r7, #12]
 8012bec:	f000 fb4c 	bl	8013288 <etharp_request>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d138      	bne.n	8012c68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012bf6:	79fa      	ldrb	r2, [r7, #7]
 8012bf8:	4928      	ldr	r1, [pc, #160]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	00db      	lsls	r3, r3, #3
 8012c02:	440b      	add	r3, r1
 8012c04:	3314      	adds	r3, #20
 8012c06:	2203      	movs	r2, #3
 8012c08:	701a      	strb	r2, [r3, #0]
 8012c0a:	e02d      	b.n	8012c68 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012c0c:	79fa      	ldrb	r2, [r7, #7]
 8012c0e:	4923      	ldr	r1, [pc, #140]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c10:	4613      	mov	r3, r2
 8012c12:	005b      	lsls	r3, r3, #1
 8012c14:	4413      	add	r3, r2
 8012c16:	00db      	lsls	r3, r3, #3
 8012c18:	440b      	add	r3, r1
 8012c1a:	3312      	adds	r3, #18
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c22:	d321      	bcc.n	8012c68 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012c24:	79fa      	ldrb	r2, [r7, #7]
 8012c26:	4613      	mov	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	4413      	add	r3, r2
 8012c2c:	00db      	lsls	r3, r3, #3
 8012c2e:	4a1b      	ldr	r2, [pc, #108]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c30:	4413      	add	r3, r2
 8012c32:	1d19      	adds	r1, r3, #4
 8012c34:	79fa      	ldrb	r2, [r7, #7]
 8012c36:	4613      	mov	r3, r2
 8012c38:	005b      	lsls	r3, r3, #1
 8012c3a:	4413      	add	r3, r2
 8012c3c:	00db      	lsls	r3, r3, #3
 8012c3e:	3308      	adds	r3, #8
 8012c40:	4a16      	ldr	r2, [pc, #88]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c42:	4413      	add	r3, r2
 8012c44:	3304      	adds	r3, #4
 8012c46:	461a      	mov	r2, r3
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f000 fafb 	bl	8013244 <etharp_request_dst>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d109      	bne.n	8012c68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012c54:	79fa      	ldrb	r2, [r7, #7]
 8012c56:	4911      	ldr	r1, [pc, #68]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c58:	4613      	mov	r3, r2
 8012c5a:	005b      	lsls	r3, r3, #1
 8012c5c:	4413      	add	r3, r2
 8012c5e:	00db      	lsls	r3, r3, #3
 8012c60:	440b      	add	r3, r1
 8012c62:	3314      	adds	r3, #20
 8012c64:	2203      	movs	r2, #3
 8012c66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012c6e:	79fa      	ldrb	r2, [r7, #7]
 8012c70:	4613      	mov	r3, r2
 8012c72:	005b      	lsls	r3, r3, #1
 8012c74:	4413      	add	r3, r2
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	3308      	adds	r3, #8
 8012c7a:	4a08      	ldr	r2, [pc, #32]	; (8012c9c <etharp_output_to_arp_index+0x124>)
 8012c7c:	4413      	add	r3, r2
 8012c7e:	3304      	adds	r3, #4
 8012c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c84:	9200      	str	r2, [sp, #0]
 8012c86:	460a      	mov	r2, r1
 8012c88:	68b9      	ldr	r1, [r7, #8]
 8012c8a:	68f8      	ldr	r0, [r7, #12]
 8012c8c:	f001 fe36 	bl	80148fc <ethernet_output>
 8012c90:	4603      	mov	r3, r0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	20011858 	.word	0x20011858
 8012ca0:	08018848 	.word	0x08018848
 8012ca4:	080189b8 	.word	0x080189b8
 8012ca8:	080188c0 	.word	0x080188c0

08012cac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b08a      	sub	sp, #40	; 0x28
 8012cb0:	af02      	add	r7, sp, #8
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <etharp_output+0x24>
 8012cc2:	4b73      	ldr	r3, [pc, #460]	; (8012e90 <etharp_output+0x1e4>)
 8012cc4:	f240 321e 	movw	r2, #798	; 0x31e
 8012cc8:	4972      	ldr	r1, [pc, #456]	; (8012e94 <etharp_output+0x1e8>)
 8012cca:	4873      	ldr	r0, [pc, #460]	; (8012e98 <etharp_output+0x1ec>)
 8012ccc:	f002 f9ec 	bl	80150a8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d106      	bne.n	8012ce4 <etharp_output+0x38>
 8012cd6:	4b6e      	ldr	r3, [pc, #440]	; (8012e90 <etharp_output+0x1e4>)
 8012cd8:	f240 321f 	movw	r2, #799	; 0x31f
 8012cdc:	496f      	ldr	r1, [pc, #444]	; (8012e9c <etharp_output+0x1f0>)
 8012cde:	486e      	ldr	r0, [pc, #440]	; (8012e98 <etharp_output+0x1ec>)
 8012ce0:	f002 f9e2 	bl	80150a8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d106      	bne.n	8012cf8 <etharp_output+0x4c>
 8012cea:	4b69      	ldr	r3, [pc, #420]	; (8012e90 <etharp_output+0x1e4>)
 8012cec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012cf0:	496b      	ldr	r1, [pc, #428]	; (8012ea0 <etharp_output+0x1f4>)
 8012cf2:	4869      	ldr	r0, [pc, #420]	; (8012e98 <etharp_output+0x1ec>)
 8012cf4:	f002 f9d8 	bl	80150a8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	68f9      	ldr	r1, [r7, #12]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f000 feee 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d002      	beq.n	8012d10 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012d0a:	4b66      	ldr	r3, [pc, #408]	; (8012ea4 <etharp_output+0x1f8>)
 8012d0c:	61fb      	str	r3, [r7, #28]
 8012d0e:	e0af      	b.n	8012e70 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d18:	2be0      	cmp	r3, #224	; 0xe0
 8012d1a:	d118      	bne.n	8012d4e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012d20:	2300      	movs	r3, #0
 8012d22:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012d24:	235e      	movs	r3, #94	; 0x5e
 8012d26:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	3302      	adds	r3, #2
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	3303      	adds	r3, #3
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012d46:	f107 0310 	add.w	r3, r7, #16
 8012d4a:	61fb      	str	r3, [r7, #28]
 8012d4c:	e090      	b.n	8012e70 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681a      	ldr	r2, [r3, #0]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	3304      	adds	r3, #4
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	405a      	eors	r2, r3
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	3308      	adds	r3, #8
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	4013      	ands	r3, r2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d012      	beq.n	8012d8c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d6c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d00b      	beq.n	8012d8c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	330c      	adds	r3, #12
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d003      	beq.n	8012d86 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	330c      	adds	r3, #12
 8012d82:	61bb      	str	r3, [r7, #24]
 8012d84:	e002      	b.n	8012d8c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012d86:	f06f 0303 	mvn.w	r3, #3
 8012d8a:	e07d      	b.n	8012e88 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012d8c:	4b46      	ldr	r3, [pc, #280]	; (8012ea8 <etharp_output+0x1fc>)
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	4619      	mov	r1, r3
 8012d92:	4a46      	ldr	r2, [pc, #280]	; (8012eac <etharp_output+0x200>)
 8012d94:	460b      	mov	r3, r1
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	440b      	add	r3, r1
 8012d9a:	00db      	lsls	r3, r3, #3
 8012d9c:	4413      	add	r3, r2
 8012d9e:	3314      	adds	r3, #20
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d925      	bls.n	8012df2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012da6:	4b40      	ldr	r3, [pc, #256]	; (8012ea8 <etharp_output+0x1fc>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	4619      	mov	r1, r3
 8012dac:	4a3f      	ldr	r2, [pc, #252]	; (8012eac <etharp_output+0x200>)
 8012dae:	460b      	mov	r3, r1
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	440b      	add	r3, r1
 8012db4:	00db      	lsls	r3, r3, #3
 8012db6:	4413      	add	r3, r2
 8012db8:	3308      	adds	r3, #8
 8012dba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012dbc:	68fa      	ldr	r2, [r7, #12]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d117      	bne.n	8012df2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	4b38      	ldr	r3, [pc, #224]	; (8012ea8 <etharp_output+0x1fc>)
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	4937      	ldr	r1, [pc, #220]	; (8012eac <etharp_output+0x200>)
 8012dce:	4603      	mov	r3, r0
 8012dd0:	005b      	lsls	r3, r3, #1
 8012dd2:	4403      	add	r3, r0
 8012dd4:	00db      	lsls	r3, r3, #3
 8012dd6:	440b      	add	r3, r1
 8012dd8:	3304      	adds	r3, #4
 8012dda:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d108      	bne.n	8012df2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012de0:	4b31      	ldr	r3, [pc, #196]	; (8012ea8 <etharp_output+0x1fc>)
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	461a      	mov	r2, r3
 8012de6:	68b9      	ldr	r1, [r7, #8]
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	f7ff fec5 	bl	8012b78 <etharp_output_to_arp_index>
 8012dee:	4603      	mov	r3, r0
 8012df0:	e04a      	b.n	8012e88 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012df2:	2300      	movs	r3, #0
 8012df4:	75fb      	strb	r3, [r7, #23]
 8012df6:	e031      	b.n	8012e5c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012df8:	7dfa      	ldrb	r2, [r7, #23]
 8012dfa:	492c      	ldr	r1, [pc, #176]	; (8012eac <etharp_output+0x200>)
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	005b      	lsls	r3, r3, #1
 8012e00:	4413      	add	r3, r2
 8012e02:	00db      	lsls	r3, r3, #3
 8012e04:	440b      	add	r3, r1
 8012e06:	3314      	adds	r3, #20
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d923      	bls.n	8012e56 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012e0e:	7dfa      	ldrb	r2, [r7, #23]
 8012e10:	4926      	ldr	r1, [pc, #152]	; (8012eac <etharp_output+0x200>)
 8012e12:	4613      	mov	r3, r2
 8012e14:	005b      	lsls	r3, r3, #1
 8012e16:	4413      	add	r3, r2
 8012e18:	00db      	lsls	r3, r3, #3
 8012e1a:	440b      	add	r3, r1
 8012e1c:	3308      	adds	r3, #8
 8012e1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d117      	bne.n	8012e56 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	6819      	ldr	r1, [r3, #0]
 8012e2a:	7dfa      	ldrb	r2, [r7, #23]
 8012e2c:	481f      	ldr	r0, [pc, #124]	; (8012eac <etharp_output+0x200>)
 8012e2e:	4613      	mov	r3, r2
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	4413      	add	r3, r2
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	4403      	add	r3, r0
 8012e38:	3304      	adds	r3, #4
 8012e3a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012e3c:	4299      	cmp	r1, r3
 8012e3e:	d10a      	bne.n	8012e56 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012e40:	4a19      	ldr	r2, [pc, #100]	; (8012ea8 <etharp_output+0x1fc>)
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012e46:	7dfb      	ldrb	r3, [r7, #23]
 8012e48:	461a      	mov	r2, r3
 8012e4a:	68b9      	ldr	r1, [r7, #8]
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f7ff fe93 	bl	8012b78 <etharp_output_to_arp_index>
 8012e52:	4603      	mov	r3, r0
 8012e54:	e018      	b.n	8012e88 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012e56:	7dfb      	ldrb	r3, [r7, #23]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	75fb      	strb	r3, [r7, #23]
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
 8012e5e:	2b09      	cmp	r3, #9
 8012e60:	d9ca      	bls.n	8012df8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	69b9      	ldr	r1, [r7, #24]
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	f000 f822 	bl	8012eb0 <etharp_query>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	e00b      	b.n	8012e88 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e7a:	9300      	str	r3, [sp, #0]
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	68b9      	ldr	r1, [r7, #8]
 8012e80:	68f8      	ldr	r0, [r7, #12]
 8012e82:	f001 fd3b 	bl	80148fc <ethernet_output>
 8012e86:	4603      	mov	r3, r0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3720      	adds	r7, #32
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	08018848 	.word	0x08018848
 8012e94:	08018998 	.word	0x08018998
 8012e98:	080188c0 	.word	0x080188c0
 8012e9c:	080189e8 	.word	0x080189e8
 8012ea0:	08018988 	.word	0x08018988
 8012ea4:	0801905c 	.word	0x0801905c
 8012ea8:	20011948 	.word	0x20011948
 8012eac:	20011858 	.word	0x20011858

08012eb0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b08c      	sub	sp, #48	; 0x30
 8012eb4:	af02      	add	r7, sp, #8
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	3326      	adds	r3, #38	; 0x26
 8012ec0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012ec2:	23ff      	movs	r3, #255	; 0xff
 8012ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	68f9      	ldr	r1, [r7, #12]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 fe04 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10c      	bne.n	8012ef8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ee6:	2be0      	cmp	r3, #224	; 0xe0
 8012ee8:	d006      	beq.n	8012ef8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d003      	beq.n	8012ef8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d102      	bne.n	8012efe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012ef8:	f06f 030f 	mvn.w	r3, #15
 8012efc:	e101      	b.n	8013102 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	2101      	movs	r1, #1
 8012f02:	68b8      	ldr	r0, [r7, #8]
 8012f04:	f7ff fb60 	bl	80125c8 <etharp_find_entry>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012f0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	da02      	bge.n	8012f1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012f14:	8a7b      	ldrh	r3, [r7, #18]
 8012f16:	b25b      	sxtb	r3, r3
 8012f18:	e0f3      	b.n	8013102 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012f1a:	8a7b      	ldrh	r3, [r7, #18]
 8012f1c:	2b7e      	cmp	r3, #126	; 0x7e
 8012f1e:	d906      	bls.n	8012f2e <etharp_query+0x7e>
 8012f20:	4b7a      	ldr	r3, [pc, #488]	; (801310c <etharp_query+0x25c>)
 8012f22:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012f26:	497a      	ldr	r1, [pc, #488]	; (8013110 <etharp_query+0x260>)
 8012f28:	487a      	ldr	r0, [pc, #488]	; (8013114 <etharp_query+0x264>)
 8012f2a:	f002 f8bd 	bl	80150a8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012f2e:	8a7b      	ldrh	r3, [r7, #18]
 8012f30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012f32:	7c7a      	ldrb	r2, [r7, #17]
 8012f34:	4978      	ldr	r1, [pc, #480]	; (8013118 <etharp_query+0x268>)
 8012f36:	4613      	mov	r3, r2
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	4413      	add	r3, r2
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	440b      	add	r3, r1
 8012f40:	3314      	adds	r3, #20
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d115      	bne.n	8012f74 <etharp_query+0xc4>
    is_new_entry = 1;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012f4c:	7c7a      	ldrb	r2, [r7, #17]
 8012f4e:	4972      	ldr	r1, [pc, #456]	; (8013118 <etharp_query+0x268>)
 8012f50:	4613      	mov	r3, r2
 8012f52:	005b      	lsls	r3, r3, #1
 8012f54:	4413      	add	r3, r2
 8012f56:	00db      	lsls	r3, r3, #3
 8012f58:	440b      	add	r3, r1
 8012f5a:	3314      	adds	r3, #20
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012f60:	7c7a      	ldrb	r2, [r7, #17]
 8012f62:	496d      	ldr	r1, [pc, #436]	; (8013118 <etharp_query+0x268>)
 8012f64:	4613      	mov	r3, r2
 8012f66:	005b      	lsls	r3, r3, #1
 8012f68:	4413      	add	r3, r2
 8012f6a:	00db      	lsls	r3, r3, #3
 8012f6c:	440b      	add	r3, r1
 8012f6e:	3308      	adds	r3, #8
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012f74:	7c7a      	ldrb	r2, [r7, #17]
 8012f76:	4968      	ldr	r1, [pc, #416]	; (8013118 <etharp_query+0x268>)
 8012f78:	4613      	mov	r3, r2
 8012f7a:	005b      	lsls	r3, r3, #1
 8012f7c:	4413      	add	r3, r2
 8012f7e:	00db      	lsls	r3, r3, #3
 8012f80:	440b      	add	r3, r1
 8012f82:	3314      	adds	r3, #20
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	2b01      	cmp	r3, #1
 8012f88:	d011      	beq.n	8012fae <etharp_query+0xfe>
 8012f8a:	7c7a      	ldrb	r2, [r7, #17]
 8012f8c:	4962      	ldr	r1, [pc, #392]	; (8013118 <etharp_query+0x268>)
 8012f8e:	4613      	mov	r3, r2
 8012f90:	005b      	lsls	r3, r3, #1
 8012f92:	4413      	add	r3, r2
 8012f94:	00db      	lsls	r3, r3, #3
 8012f96:	440b      	add	r3, r1
 8012f98:	3314      	adds	r3, #20
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d806      	bhi.n	8012fae <etharp_query+0xfe>
 8012fa0:	4b5a      	ldr	r3, [pc, #360]	; (801310c <etharp_query+0x25c>)
 8012fa2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012fa6:	495d      	ldr	r1, [pc, #372]	; (801311c <etharp_query+0x26c>)
 8012fa8:	485a      	ldr	r0, [pc, #360]	; (8013114 <etharp_query+0x264>)
 8012faa:	f002 f87d 	bl	80150a8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012fae:	6a3b      	ldr	r3, [r7, #32]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d102      	bne.n	8012fba <etharp_query+0x10a>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d10c      	bne.n	8012fd4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012fba:	68b9      	ldr	r1, [r7, #8]
 8012fbc:	68f8      	ldr	r0, [r7, #12]
 8012fbe:	f000 f963 	bl	8013288 <etharp_request>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d102      	bne.n	8012fd4 <etharp_query+0x124>
      return result;
 8012fce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012fd2:	e096      	b.n	8013102 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <etharp_query+0x138>
 8012fda:	4b4c      	ldr	r3, [pc, #304]	; (801310c <etharp_query+0x25c>)
 8012fdc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012fe0:	494f      	ldr	r1, [pc, #316]	; (8013120 <etharp_query+0x270>)
 8012fe2:	484c      	ldr	r0, [pc, #304]	; (8013114 <etharp_query+0x264>)
 8012fe4:	f002 f860 	bl	80150a8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012fe8:	7c7a      	ldrb	r2, [r7, #17]
 8012fea:	494b      	ldr	r1, [pc, #300]	; (8013118 <etharp_query+0x268>)
 8012fec:	4613      	mov	r3, r2
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	4413      	add	r3, r2
 8012ff2:	00db      	lsls	r3, r3, #3
 8012ff4:	440b      	add	r3, r1
 8012ff6:	3314      	adds	r3, #20
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d917      	bls.n	801302e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012ffe:	4a49      	ldr	r2, [pc, #292]	; (8013124 <etharp_query+0x274>)
 8013000:	7c7b      	ldrb	r3, [r7, #17]
 8013002:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013004:	7c7a      	ldrb	r2, [r7, #17]
 8013006:	4613      	mov	r3, r2
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	4413      	add	r3, r2
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	3308      	adds	r3, #8
 8013010:	4a41      	ldr	r2, [pc, #260]	; (8013118 <etharp_query+0x268>)
 8013012:	4413      	add	r3, r2
 8013014:	3304      	adds	r3, #4
 8013016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801301a:	9200      	str	r2, [sp, #0]
 801301c:	697a      	ldr	r2, [r7, #20]
 801301e:	6879      	ldr	r1, [r7, #4]
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f001 fc6b 	bl	80148fc <ethernet_output>
 8013026:	4603      	mov	r3, r0
 8013028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801302c:	e067      	b.n	80130fe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801302e:	7c7a      	ldrb	r2, [r7, #17]
 8013030:	4939      	ldr	r1, [pc, #228]	; (8013118 <etharp_query+0x268>)
 8013032:	4613      	mov	r3, r2
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4413      	add	r3, r2
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	440b      	add	r3, r1
 801303c:	3314      	adds	r3, #20
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	2b01      	cmp	r3, #1
 8013042:	d15c      	bne.n	80130fe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013044:	2300      	movs	r3, #0
 8013046:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801304c:	e01c      	b.n	8013088 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	895a      	ldrh	r2, [r3, #10]
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	891b      	ldrh	r3, [r3, #8]
 8013056:	429a      	cmp	r2, r3
 8013058:	d10a      	bne.n	8013070 <etharp_query+0x1c0>
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d006      	beq.n	8013070 <etharp_query+0x1c0>
 8013062:	4b2a      	ldr	r3, [pc, #168]	; (801310c <etharp_query+0x25c>)
 8013064:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013068:	492f      	ldr	r1, [pc, #188]	; (8013128 <etharp_query+0x278>)
 801306a:	482a      	ldr	r0, [pc, #168]	; (8013114 <etharp_query+0x264>)
 801306c:	f002 f81c 	bl	80150a8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	7b1b      	ldrb	r3, [r3, #12]
 8013074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <etharp_query+0x1d2>
        copy_needed = 1;
 801307c:	2301      	movs	r3, #1
 801307e:	61bb      	str	r3, [r7, #24]
        break;
 8013080:	e005      	b.n	801308e <etharp_query+0x1de>
      }
      p = p->next;
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d1df      	bne.n	801304e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d007      	beq.n	80130a4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	f44f 7120 	mov.w	r1, #640	; 0x280
 801309a:	200e      	movs	r0, #14
 801309c:	f7f8 ff88 	bl	800bfb0 <pbuf_clone>
 80130a0:	61f8      	str	r0, [r7, #28]
 80130a2:	e004      	b.n	80130ae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80130a8:	69f8      	ldr	r0, [r7, #28]
 80130aa:	f7f8 fdbf 	bl	800bc2c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d021      	beq.n	80130f8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80130b4:	7c7a      	ldrb	r2, [r7, #17]
 80130b6:	4918      	ldr	r1, [pc, #96]	; (8013118 <etharp_query+0x268>)
 80130b8:	4613      	mov	r3, r2
 80130ba:	005b      	lsls	r3, r3, #1
 80130bc:	4413      	add	r3, r2
 80130be:	00db      	lsls	r3, r3, #3
 80130c0:	440b      	add	r3, r1
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00a      	beq.n	80130de <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80130c8:	7c7a      	ldrb	r2, [r7, #17]
 80130ca:	4913      	ldr	r1, [pc, #76]	; (8013118 <etharp_query+0x268>)
 80130cc:	4613      	mov	r3, r2
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	4413      	add	r3, r2
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	440b      	add	r3, r1
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4618      	mov	r0, r3
 80130da:	f7f8 fd01 	bl	800bae0 <pbuf_free>
      }
      arp_table[i].q = p;
 80130de:	7c7a      	ldrb	r2, [r7, #17]
 80130e0:	490d      	ldr	r1, [pc, #52]	; (8013118 <etharp_query+0x268>)
 80130e2:	4613      	mov	r3, r2
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	4413      	add	r3, r2
 80130e8:	00db      	lsls	r3, r3, #3
 80130ea:	440b      	add	r3, r1
 80130ec:	69fa      	ldr	r2, [r7, #28]
 80130ee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80130f0:	2300      	movs	r3, #0
 80130f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130f6:	e002      	b.n	80130fe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80130f8:	23ff      	movs	r3, #255	; 0xff
 80130fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80130fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013102:	4618      	mov	r0, r3
 8013104:	3728      	adds	r7, #40	; 0x28
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	08018848 	.word	0x08018848
 8013110:	080189f4 	.word	0x080189f4
 8013114:	080188c0 	.word	0x080188c0
 8013118:	20011858 	.word	0x20011858
 801311c:	08018a04 	.word	0x08018a04
 8013120:	080189e8 	.word	0x080189e8
 8013124:	20011948 	.word	0x20011948
 8013128:	08018a2c 	.word	0x08018a2c

0801312c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b08a      	sub	sp, #40	; 0x28
 8013130:	af02      	add	r7, sp, #8
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	607a      	str	r2, [r7, #4]
 8013138:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801313a:	2300      	movs	r3, #0
 801313c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d106      	bne.n	8013152 <etharp_raw+0x26>
 8013144:	4b3a      	ldr	r3, [pc, #232]	; (8013230 <etharp_raw+0x104>)
 8013146:	f240 4257 	movw	r2, #1111	; 0x457
 801314a:	493a      	ldr	r1, [pc, #232]	; (8013234 <etharp_raw+0x108>)
 801314c:	483a      	ldr	r0, [pc, #232]	; (8013238 <etharp_raw+0x10c>)
 801314e:	f001 ffab 	bl	80150a8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013152:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013156:	211c      	movs	r1, #28
 8013158:	200e      	movs	r0, #14
 801315a:	f7f8 f9dd 	bl	800b518 <pbuf_alloc>
 801315e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d102      	bne.n	801316c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801316a:	e05d      	b.n	8013228 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	895b      	ldrh	r3, [r3, #10]
 8013170:	2b1b      	cmp	r3, #27
 8013172:	d806      	bhi.n	8013182 <etharp_raw+0x56>
 8013174:	4b2e      	ldr	r3, [pc, #184]	; (8013230 <etharp_raw+0x104>)
 8013176:	f240 4262 	movw	r2, #1122	; 0x462
 801317a:	4930      	ldr	r1, [pc, #192]	; (801323c <etharp_raw+0x110>)
 801317c:	482e      	ldr	r0, [pc, #184]	; (8013238 <etharp_raw+0x10c>)
 801317e:	f001 ff93 	bl	80150a8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801318a:	4618      	mov	r0, r3
 801318c:	f7f7 f8bc 	bl	800a308 <lwip_htons>
 8013190:	4603      	mov	r3, r0
 8013192:	461a      	mov	r2, r3
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801319e:	2b06      	cmp	r3, #6
 80131a0:	d006      	beq.n	80131b0 <etharp_raw+0x84>
 80131a2:	4b23      	ldr	r3, [pc, #140]	; (8013230 <etharp_raw+0x104>)
 80131a4:	f240 4269 	movw	r2, #1129	; 0x469
 80131a8:	4925      	ldr	r1, [pc, #148]	; (8013240 <etharp_raw+0x114>)
 80131aa:	4823      	ldr	r0, [pc, #140]	; (8013238 <etharp_raw+0x10c>)
 80131ac:	f001 ff7c 	bl	80150a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	3308      	adds	r3, #8
 80131b4:	2206      	movs	r2, #6
 80131b6:	6839      	ldr	r1, [r7, #0]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f001 feca 	bl	8014f52 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	3312      	adds	r3, #18
 80131c2:	2206      	movs	r2, #6
 80131c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80131c6:	4618      	mov	r0, r3
 80131c8:	f001 fec3 	bl	8014f52 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	330e      	adds	r3, #14
 80131d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131d2:	6812      	ldr	r2, [r2, #0]
 80131d4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	3318      	adds	r3, #24
 80131da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131dc:	6812      	ldr	r2, [r2, #0]
 80131de:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	2200      	movs	r2, #0
 80131e4:	701a      	strb	r2, [r3, #0]
 80131e6:	2200      	movs	r2, #0
 80131e8:	f042 0201 	orr.w	r2, r2, #1
 80131ec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	2200      	movs	r2, #0
 80131f2:	f042 0208 	orr.w	r2, r2, #8
 80131f6:	709a      	strb	r2, [r3, #2]
 80131f8:	2200      	movs	r2, #0
 80131fa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	2206      	movs	r2, #6
 8013200:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2204      	movs	r2, #4
 8013206:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013208:	f640 0306 	movw	r3, #2054	; 0x806
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	68ba      	ldr	r2, [r7, #8]
 8013212:	69b9      	ldr	r1, [r7, #24]
 8013214:	68f8      	ldr	r0, [r7, #12]
 8013216:	f001 fb71 	bl	80148fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801321a:	69b8      	ldr	r0, [r7, #24]
 801321c:	f7f8 fc60 	bl	800bae0 <pbuf_free>
  p = NULL;
 8013220:	2300      	movs	r3, #0
 8013222:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013224:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013228:	4618      	mov	r0, r3
 801322a:	3720      	adds	r7, #32
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	08018848 	.word	0x08018848
 8013234:	08018998 	.word	0x08018998
 8013238:	080188c0 	.word	0x080188c0
 801323c:	08018a48 	.word	0x08018a48
 8013240:	08018a7c 	.word	0x08018a7c

08013244 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b088      	sub	sp, #32
 8013248:	af04      	add	r7, sp, #16
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013260:	2201      	movs	r2, #1
 8013262:	9203      	str	r2, [sp, #12]
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	9202      	str	r2, [sp, #8]
 8013268:	4a06      	ldr	r2, [pc, #24]	; (8013284 <etharp_request_dst+0x40>)
 801326a:	9201      	str	r2, [sp, #4]
 801326c:	9300      	str	r3, [sp, #0]
 801326e:	4603      	mov	r3, r0
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	68f8      	ldr	r0, [r7, #12]
 8013274:	f7ff ff5a 	bl	801312c <etharp_raw>
 8013278:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801327a:	4618      	mov	r0, r3
 801327c:	3710      	adds	r7, #16
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	08019064 	.word	0x08019064

08013288 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013292:	4a05      	ldr	r2, [pc, #20]	; (80132a8 <etharp_request+0x20>)
 8013294:	6839      	ldr	r1, [r7, #0]
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f7ff ffd4 	bl	8013244 <etharp_request_dst>
 801329c:	4603      	mov	r3, r0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3708      	adds	r7, #8
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	0801905c 	.word	0x0801905c

080132ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b08e      	sub	sp, #56	; 0x38
 80132b0:	af04      	add	r7, sp, #16
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80132b6:	4b79      	ldr	r3, [pc, #484]	; (801349c <icmp_input+0x1f0>)
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80132bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	f003 030f 	and.w	r3, r3, #15
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	009b      	lsls	r3, r3, #2
 80132c8:	b2db      	uxtb	r3, r3
 80132ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80132cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132ce:	2b13      	cmp	r3, #19
 80132d0:	f240 80cd 	bls.w	801346e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	895b      	ldrh	r3, [r3, #10]
 80132d8:	2b03      	cmp	r3, #3
 80132da:	f240 80ca 	bls.w	8013472 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80132e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 80b7 	beq.w	8013460 <icmp_input+0x1b4>
 80132f2:	2b08      	cmp	r3, #8
 80132f4:	f040 80b7 	bne.w	8013466 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80132f8:	4b69      	ldr	r3, [pc, #420]	; (80134a0 <icmp_input+0x1f4>)
 80132fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80132fc:	4b67      	ldr	r3, [pc, #412]	; (801349c <icmp_input+0x1f0>)
 80132fe:	695b      	ldr	r3, [r3, #20]
 8013300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013304:	2be0      	cmp	r3, #224	; 0xe0
 8013306:	f000 80bb 	beq.w	8013480 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801330a:	4b64      	ldr	r3, [pc, #400]	; (801349c <icmp_input+0x1f0>)
 801330c:	695b      	ldr	r3, [r3, #20]
 801330e:	4a63      	ldr	r2, [pc, #396]	; (801349c <icmp_input+0x1f0>)
 8013310:	6812      	ldr	r2, [r2, #0]
 8013312:	4611      	mov	r1, r2
 8013314:	4618      	mov	r0, r3
 8013316:	f000 fbe3 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	f040 80b1 	bne.w	8013484 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	891b      	ldrh	r3, [r3, #8]
 8013326:	2b07      	cmp	r3, #7
 8013328:	f240 80a5 	bls.w	8013476 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801332c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801332e:	330e      	adds	r3, #14
 8013330:	4619      	mov	r1, r3
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7f8 fb3e 	bl	800b9b4 <pbuf_add_header>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d04b      	beq.n	80133d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	891a      	ldrh	r2, [r3, #8]
 8013342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013344:	4413      	add	r3, r2
 8013346:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	891b      	ldrh	r3, [r3, #8]
 801334c:	8b7a      	ldrh	r2, [r7, #26]
 801334e:	429a      	cmp	r2, r3
 8013350:	f0c0 809a 	bcc.w	8013488 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013354:	8b7b      	ldrh	r3, [r7, #26]
 8013356:	f44f 7220 	mov.w	r2, #640	; 0x280
 801335a:	4619      	mov	r1, r3
 801335c:	200e      	movs	r0, #14
 801335e:	f7f8 f8db 	bl	800b518 <pbuf_alloc>
 8013362:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	2b00      	cmp	r3, #0
 8013368:	f000 8090 	beq.w	801348c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	895b      	ldrh	r3, [r3, #10]
 8013370:	461a      	mov	r2, r3
 8013372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013374:	3308      	adds	r3, #8
 8013376:	429a      	cmp	r2, r3
 8013378:	d203      	bcs.n	8013382 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801337a:	6978      	ldr	r0, [r7, #20]
 801337c:	f7f8 fbb0 	bl	800bae0 <pbuf_free>
          goto icmperr;
 8013380:	e085      	b.n	801348e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801338a:	4618      	mov	r0, r3
 801338c:	f001 fde1 	bl	8014f52 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013392:	4619      	mov	r1, r3
 8013394:	6978      	ldr	r0, [r7, #20]
 8013396:	f7f8 fb1d 	bl	800b9d4 <pbuf_remove_header>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d009      	beq.n	80133b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80133a0:	4b40      	ldr	r3, [pc, #256]	; (80134a4 <icmp_input+0x1f8>)
 80133a2:	22b6      	movs	r2, #182	; 0xb6
 80133a4:	4940      	ldr	r1, [pc, #256]	; (80134a8 <icmp_input+0x1fc>)
 80133a6:	4841      	ldr	r0, [pc, #260]	; (80134ac <icmp_input+0x200>)
 80133a8:	f001 fe7e 	bl	80150a8 <iprintf>
          pbuf_free(r);
 80133ac:	6978      	ldr	r0, [r7, #20]
 80133ae:	f7f8 fb97 	bl	800bae0 <pbuf_free>
          goto icmperr;
 80133b2:	e06c      	b.n	801348e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80133b4:	6879      	ldr	r1, [r7, #4]
 80133b6:	6978      	ldr	r0, [r7, #20]
 80133b8:	f7f8 fcb6 	bl	800bd28 <pbuf_copy>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d003      	beq.n	80133ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80133c2:	6978      	ldr	r0, [r7, #20]
 80133c4:	f7f8 fb8c 	bl	800bae0 <pbuf_free>
          goto icmperr;
 80133c8:	e061      	b.n	801348e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7f8 fb88 	bl	800bae0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	607b      	str	r3, [r7, #4]
 80133d4:	e00f      	b.n	80133f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80133d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133d8:	330e      	adds	r3, #14
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7f8 faf9 	bl	800b9d4 <pbuf_remove_header>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d006      	beq.n	80133f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80133e8:	4b2e      	ldr	r3, [pc, #184]	; (80134a4 <icmp_input+0x1f8>)
 80133ea:	22c7      	movs	r2, #199	; 0xc7
 80133ec:	4930      	ldr	r1, [pc, #192]	; (80134b0 <icmp_input+0x204>)
 80133ee:	482f      	ldr	r0, [pc, #188]	; (80134ac <icmp_input+0x200>)
 80133f0:	f001 fe5a 	bl	80150a8 <iprintf>
          goto icmperr;
 80133f4:	e04b      	b.n	801348e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80133fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133fe:	4619      	mov	r1, r3
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7f8 fad7 	bl	800b9b4 <pbuf_add_header>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d12b      	bne.n	8013464 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801341a:	4b20      	ldr	r3, [pc, #128]	; (801349c <icmp_input+0x1f0>)
 801341c:	691a      	ldr	r2, [r3, #16]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013422:	693b      	ldr	r3, [r7, #16]
 8013424:	2200      	movs	r2, #0
 8013426:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	2200      	movs	r2, #0
 801342c:	709a      	strb	r2, [r3, #2]
 801342e:	2200      	movs	r2, #0
 8013430:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	22ff      	movs	r2, #255	; 0xff
 8013436:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2200      	movs	r2, #0
 801343c:	729a      	strb	r2, [r3, #10]
 801343e:	2200      	movs	r2, #0
 8013440:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	9302      	str	r3, [sp, #8]
 8013446:	2301      	movs	r3, #1
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	2300      	movs	r3, #0
 801344c:	9300      	str	r3, [sp, #0]
 801344e:	23ff      	movs	r3, #255	; 0xff
 8013450:	2200      	movs	r2, #0
 8013452:	69f9      	ldr	r1, [r7, #28]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 fa6b 	bl	8013930 <ip4_output_if>
 801345a:	4603      	mov	r3, r0
 801345c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801345e:	e001      	b.n	8013464 <icmp_input+0x1b8>
      break;
 8013460:	bf00      	nop
 8013462:	e000      	b.n	8013466 <icmp_input+0x1ba>
      break;
 8013464:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7f8 fb3a 	bl	800bae0 <pbuf_free>
  return;
 801346c:	e013      	b.n	8013496 <icmp_input+0x1ea>
    goto lenerr;
 801346e:	bf00      	nop
 8013470:	e002      	b.n	8013478 <icmp_input+0x1cc>
    goto lenerr;
 8013472:	bf00      	nop
 8013474:	e000      	b.n	8013478 <icmp_input+0x1cc>
        goto lenerr;
 8013476:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f7f8 fb31 	bl	800bae0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801347e:	e00a      	b.n	8013496 <icmp_input+0x1ea>
        goto icmperr;
 8013480:	bf00      	nop
 8013482:	e004      	b.n	801348e <icmp_input+0x1e2>
        goto icmperr;
 8013484:	bf00      	nop
 8013486:	e002      	b.n	801348e <icmp_input+0x1e2>
          goto icmperr;
 8013488:	bf00      	nop
 801348a:	e000      	b.n	801348e <icmp_input+0x1e2>
          goto icmperr;
 801348c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f7f8 fb26 	bl	800bae0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013494:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013496:	3728      	adds	r7, #40	; 0x28
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	20009770 	.word	0x20009770
 80134a0:	20009784 	.word	0x20009784
 80134a4:	08018ac0 	.word	0x08018ac0
 80134a8:	08018af8 	.word	0x08018af8
 80134ac:	08018b30 	.word	0x08018b30
 80134b0:	08018b58 	.word	0x08018b58

080134b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	460b      	mov	r3, r1
 80134be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80134c0:	78fb      	ldrb	r3, [r7, #3]
 80134c2:	461a      	mov	r2, r3
 80134c4:	2103      	movs	r1, #3
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f000 f814 	bl	80134f4 <icmp_send_response>
}
 80134cc:	bf00      	nop
 80134ce:	3708      	adds	r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	460b      	mov	r3, r1
 80134de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	461a      	mov	r2, r3
 80134e4:	210b      	movs	r1, #11
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f000 f804 	bl	80134f4 <icmp_send_response>
}
 80134ec:	bf00      	nop
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08c      	sub	sp, #48	; 0x30
 80134f8:	af04      	add	r7, sp, #16
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	460b      	mov	r3, r1
 80134fe:	70fb      	strb	r3, [r7, #3]
 8013500:	4613      	mov	r3, r2
 8013502:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013504:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013508:	2124      	movs	r1, #36	; 0x24
 801350a:	2022      	movs	r0, #34	; 0x22
 801350c:	f7f8 f804 	bl	800b518 <pbuf_alloc>
 8013510:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013512:	69fb      	ldr	r3, [r7, #28]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d04c      	beq.n	80135b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	895b      	ldrh	r3, [r3, #10]
 801351c:	2b23      	cmp	r3, #35	; 0x23
 801351e:	d806      	bhi.n	801352e <icmp_send_response+0x3a>
 8013520:	4b26      	ldr	r3, [pc, #152]	; (80135bc <icmp_send_response+0xc8>)
 8013522:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013526:	4926      	ldr	r1, [pc, #152]	; (80135c0 <icmp_send_response+0xcc>)
 8013528:	4826      	ldr	r0, [pc, #152]	; (80135c4 <icmp_send_response+0xd0>)
 801352a:	f001 fdbd 	bl	80150a8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	78fa      	ldrb	r2, [r7, #3]
 801353e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	78ba      	ldrb	r2, [r7, #2]
 8013544:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	2200      	movs	r2, #0
 801354a:	711a      	strb	r2, [r3, #4]
 801354c:	2200      	movs	r2, #0
 801354e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	2200      	movs	r2, #0
 8013554:	719a      	strb	r2, [r3, #6]
 8013556:	2200      	movs	r2, #0
 8013558:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	f103 0008 	add.w	r0, r3, #8
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	221c      	movs	r2, #28
 8013568:	4619      	mov	r1, r3
 801356a:	f001 fcf2 	bl	8014f52 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013574:	f107 030c 	add.w	r3, r7, #12
 8013578:	4618      	mov	r0, r3
 801357a:	f000 f825 	bl	80135c8 <ip4_route>
 801357e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d011      	beq.n	80135aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	2200      	movs	r2, #0
 801358a:	709a      	strb	r2, [r3, #2]
 801358c:	2200      	movs	r2, #0
 801358e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013590:	f107 020c 	add.w	r2, r7, #12
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	9302      	str	r3, [sp, #8]
 8013598:	2301      	movs	r3, #1
 801359a:	9301      	str	r3, [sp, #4]
 801359c:	2300      	movs	r3, #0
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	23ff      	movs	r3, #255	; 0xff
 80135a2:	2100      	movs	r1, #0
 80135a4:	69f8      	ldr	r0, [r7, #28]
 80135a6:	f000 f9c3 	bl	8013930 <ip4_output_if>
  }
  pbuf_free(q);
 80135aa:	69f8      	ldr	r0, [r7, #28]
 80135ac:	f7f8 fa98 	bl	800bae0 <pbuf_free>
 80135b0:	e000      	b.n	80135b4 <icmp_send_response+0xc0>
    return;
 80135b2:	bf00      	nop
}
 80135b4:	3720      	adds	r7, #32
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	08018ac0 	.word	0x08018ac0
 80135c0:	08018b8c 	.word	0x08018b8c
 80135c4:	08018b30 	.word	0x08018b30

080135c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80135c8:	b480      	push	{r7}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80135d0:	4b33      	ldr	r3, [pc, #204]	; (80136a0 <ip4_route+0xd8>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	60fb      	str	r3, [r7, #12]
 80135d6:	e036      	b.n	8013646 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135de:	f003 0301 	and.w	r3, r3, #1
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d02b      	beq.n	8013640 <ip4_route+0x78>
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135ee:	089b      	lsrs	r3, r3, #2
 80135f0:	f003 0301 	and.w	r3, r3, #1
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d022      	beq.n	8013640 <ip4_route+0x78>
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	3304      	adds	r3, #4
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d01d      	beq.n	8013640 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	3304      	adds	r3, #4
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	405a      	eors	r2, r3
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	3308      	adds	r3, #8
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4013      	ands	r3, r2
 8013618:	2b00      	cmp	r3, #0
 801361a:	d101      	bne.n	8013620 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	e038      	b.n	8013692 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013626:	f003 0302 	and.w	r3, r3, #2
 801362a:	2b00      	cmp	r3, #0
 801362c:	d108      	bne.n	8013640 <ip4_route+0x78>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	330c      	adds	r3, #12
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	429a      	cmp	r2, r3
 801363a:	d101      	bne.n	8013640 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	e028      	b.n	8013692 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	60fb      	str	r3, [r7, #12]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d1c5      	bne.n	80135d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801364c:	4b15      	ldr	r3, [pc, #84]	; (80136a4 <ip4_route+0xdc>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d01a      	beq.n	801368a <ip4_route+0xc2>
 8013654:	4b13      	ldr	r3, [pc, #76]	; (80136a4 <ip4_route+0xdc>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	d012      	beq.n	801368a <ip4_route+0xc2>
 8013664:	4b0f      	ldr	r3, [pc, #60]	; (80136a4 <ip4_route+0xdc>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801366c:	f003 0304 	and.w	r3, r3, #4
 8013670:	2b00      	cmp	r3, #0
 8013672:	d00a      	beq.n	801368a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013674:	4b0b      	ldr	r3, [pc, #44]	; (80136a4 <ip4_route+0xdc>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	3304      	adds	r3, #4
 801367a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801367c:	2b00      	cmp	r3, #0
 801367e:	d004      	beq.n	801368a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	b2db      	uxtb	r3, r3
 8013686:	2b7f      	cmp	r3, #127	; 0x7f
 8013688:	d101      	bne.n	801368e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801368a:	2300      	movs	r3, #0
 801368c:	e001      	b.n	8013692 <ip4_route+0xca>
  }

  return netif_default;
 801368e:	4b05      	ldr	r3, [pc, #20]	; (80136a4 <ip4_route+0xdc>)
 8013690:	681b      	ldr	r3, [r3, #0]
}
 8013692:	4618      	mov	r0, r3
 8013694:	3714      	adds	r7, #20
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	200117f0 	.word	0x200117f0
 80136a4:	200117f4 	.word	0x200117f4

080136a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136b6:	f003 0301 	and.w	r3, r3, #1
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d016      	beq.n	80136ee <ip4_input_accept+0x46>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	3304      	adds	r3, #4
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d011      	beq.n	80136ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80136ca:	4b0b      	ldr	r3, [pc, #44]	; (80136f8 <ip4_input_accept+0x50>)
 80136cc:	695a      	ldr	r2, [r3, #20]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	3304      	adds	r3, #4
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d008      	beq.n	80136ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80136d8:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <ip4_input_accept+0x50>)
 80136da:	695b      	ldr	r3, [r3, #20]
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	4618      	mov	r0, r3
 80136e0:	f000 f9fe 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 80136e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80136ea:	2301      	movs	r3, #1
 80136ec:	e000      	b.n	80136f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3708      	adds	r7, #8
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}
 80136f8:	20009770 	.word	0x20009770

080136fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b086      	sub	sp, #24
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	091b      	lsrs	r3, r3, #4
 8013712:	b2db      	uxtb	r3, r3
 8013714:	2b04      	cmp	r3, #4
 8013716:	d004      	beq.n	8013722 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f7f8 f9e1 	bl	800bae0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801371e:	2300      	movs	r3, #0
 8013720:	e0fd      	b.n	801391e <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	f003 030f 	and.w	r3, r3, #15
 801372a:	b2db      	uxtb	r3, r3
 801372c:	009b      	lsls	r3, r3, #2
 801372e:	b2db      	uxtb	r3, r3
 8013730:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	885b      	ldrh	r3, [r3, #2]
 8013736:	b29b      	uxth	r3, r3
 8013738:	4618      	mov	r0, r3
 801373a:	f7f6 fde5 	bl	800a308 <lwip_htons>
 801373e:	4603      	mov	r3, r0
 8013740:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	891b      	ldrh	r3, [r3, #8]
 8013746:	89ba      	ldrh	r2, [r7, #12]
 8013748:	429a      	cmp	r2, r3
 801374a:	d204      	bcs.n	8013756 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801374c:	89bb      	ldrh	r3, [r7, #12]
 801374e:	4619      	mov	r1, r3
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7f8 f83f 	bl	800b7d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	895b      	ldrh	r3, [r3, #10]
 801375a:	89fa      	ldrh	r2, [r7, #14]
 801375c:	429a      	cmp	r2, r3
 801375e:	d807      	bhi.n	8013770 <ip4_input+0x74>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	891b      	ldrh	r3, [r3, #8]
 8013764:	89ba      	ldrh	r2, [r7, #12]
 8013766:	429a      	cmp	r2, r3
 8013768:	d802      	bhi.n	8013770 <ip4_input+0x74>
 801376a:	89fb      	ldrh	r3, [r7, #14]
 801376c:	2b13      	cmp	r3, #19
 801376e:	d804      	bhi.n	801377a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7f8 f9b5 	bl	800bae0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013776:	2300      	movs	r3, #0
 8013778:	e0d1      	b.n	801391e <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	691b      	ldr	r3, [r3, #16]
 801377e:	4a6a      	ldr	r2, [pc, #424]	; (8013928 <ip4_input+0x22c>)
 8013780:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	68db      	ldr	r3, [r3, #12]
 8013786:	4a68      	ldr	r2, [pc, #416]	; (8013928 <ip4_input+0x22c>)
 8013788:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801378a:	4b67      	ldr	r3, [pc, #412]	; (8013928 <ip4_input+0x22c>)
 801378c:	695b      	ldr	r3, [r3, #20]
 801378e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013792:	2be0      	cmp	r3, #224	; 0xe0
 8013794:	d112      	bne.n	80137bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801379c:	f003 0301 	and.w	r3, r3, #1
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d007      	beq.n	80137b6 <ip4_input+0xba>
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	3304      	adds	r3, #4
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d002      	beq.n	80137b6 <ip4_input+0xba>
      netif = inp;
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	613b      	str	r3, [r7, #16]
 80137b4:	e02a      	b.n	801380c <ip4_input+0x110>
    } else {
      netif = NULL;
 80137b6:	2300      	movs	r3, #0
 80137b8:	613b      	str	r3, [r7, #16]
 80137ba:	e027      	b.n	801380c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80137bc:	6838      	ldr	r0, [r7, #0]
 80137be:	f7ff ff73 	bl	80136a8 <ip4_input_accept>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d002      	beq.n	80137ce <ip4_input+0xd2>
      netif = inp;
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	613b      	str	r3, [r7, #16]
 80137cc:	e01e      	b.n	801380c <ip4_input+0x110>
    } else {
      netif = NULL;
 80137ce:	2300      	movs	r3, #0
 80137d0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80137d2:	4b55      	ldr	r3, [pc, #340]	; (8013928 <ip4_input+0x22c>)
 80137d4:	695b      	ldr	r3, [r3, #20]
 80137d6:	b2db      	uxtb	r3, r3
 80137d8:	2b7f      	cmp	r3, #127	; 0x7f
 80137da:	d017      	beq.n	801380c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80137dc:	4b53      	ldr	r3, [pc, #332]	; (801392c <ip4_input+0x230>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	613b      	str	r3, [r7, #16]
 80137e2:	e00e      	b.n	8013802 <ip4_input+0x106>
          if (netif == inp) {
 80137e4:	693a      	ldr	r2, [r7, #16]
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d006      	beq.n	80137fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80137ec:	6938      	ldr	r0, [r7, #16]
 80137ee:	f7ff ff5b 	bl	80136a8 <ip4_input_accept>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d108      	bne.n	801380a <ip4_input+0x10e>
 80137f8:	e000      	b.n	80137fc <ip4_input+0x100>
            continue;
 80137fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	613b      	str	r3, [r7, #16]
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d1ed      	bne.n	80137e4 <ip4_input+0xe8>
 8013808:	e000      	b.n	801380c <ip4_input+0x110>
            break;
 801380a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801380c:	4b46      	ldr	r3, [pc, #280]	; (8013928 <ip4_input+0x22c>)
 801380e:	691b      	ldr	r3, [r3, #16]
 8013810:	6839      	ldr	r1, [r7, #0]
 8013812:	4618      	mov	r0, r3
 8013814:	f000 f964 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d105      	bne.n	801382a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801381e:	4b42      	ldr	r3, [pc, #264]	; (8013928 <ip4_input+0x22c>)
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013826:	2be0      	cmp	r3, #224	; 0xe0
 8013828:	d104      	bne.n	8013834 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f7f8 f958 	bl	800bae0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013830:	2300      	movs	r3, #0
 8013832:	e074      	b.n	801391e <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d104      	bne.n	8013844 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7f8 f950 	bl	800bae0 <pbuf_free>
    return ERR_OK;
 8013840:	2300      	movs	r3, #0
 8013842:	e06c      	b.n	801391e <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	88db      	ldrh	r3, [r3, #6]
 8013848:	b29b      	uxth	r3, r3
 801384a:	461a      	mov	r2, r3
 801384c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013850:	4013      	ands	r3, r2
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00b      	beq.n	801386e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 fc88 	bl	801416c <ip4_reass>
 801385c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d101      	bne.n	8013868 <ip4_input+0x16c>
      return ERR_OK;
 8013864:	2300      	movs	r3, #0
 8013866:	e05a      	b.n	801391e <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801386e:	4a2e      	ldr	r2, [pc, #184]	; (8013928 <ip4_input+0x22c>)
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013874:	4a2c      	ldr	r2, [pc, #176]	; (8013928 <ip4_input+0x22c>)
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801387a:	4a2b      	ldr	r2, [pc, #172]	; (8013928 <ip4_input+0x22c>)
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	f003 030f 	and.w	r3, r3, #15
 8013888:	b2db      	uxtb	r3, r3
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	b2db      	uxtb	r3, r3
 801388e:	b29a      	uxth	r2, r3
 8013890:	4b25      	ldr	r3, [pc, #148]	; (8013928 <ip4_input+0x22c>)
 8013892:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013894:	89fb      	ldrh	r3, [r7, #14]
 8013896:	4619      	mov	r1, r3
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f7f8 f89b 	bl	800b9d4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	7a5b      	ldrb	r3, [r3, #9]
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d006      	beq.n	80138b4 <ip4_input+0x1b8>
 80138a6:	2b06      	cmp	r3, #6
 80138a8:	d109      	bne.n	80138be <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80138aa:	6839      	ldr	r1, [r7, #0]
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f7fa fa1d 	bl	800dcec <tcp_input>
        break;
 80138b2:	e021      	b.n	80138f8 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80138b4:	6839      	ldr	r1, [r7, #0]
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7ff fcf8 	bl	80132ac <icmp_input>
        break;
 80138bc:	e01c      	b.n	80138f8 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80138be:	4b1a      	ldr	r3, [pc, #104]	; (8013928 <ip4_input+0x22c>)
 80138c0:	695b      	ldr	r3, [r3, #20]
 80138c2:	6939      	ldr	r1, [r7, #16]
 80138c4:	4618      	mov	r0, r3
 80138c6:	f000 f90b 	bl	8013ae0 <ip4_addr_isbroadcast_u32>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d10f      	bne.n	80138f0 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80138d0:	4b15      	ldr	r3, [pc, #84]	; (8013928 <ip4_input+0x22c>)
 80138d2:	695b      	ldr	r3, [r3, #20]
 80138d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80138d8:	2be0      	cmp	r3, #224	; 0xe0
 80138da:	d009      	beq.n	80138f0 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80138dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80138e0:	4619      	mov	r1, r3
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7f8 f8e9 	bl	800baba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80138e8:	2102      	movs	r1, #2
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff fde2 	bl	80134b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7f8 f8f5 	bl	800bae0 <pbuf_free>
        break;
 80138f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80138f8:	4b0b      	ldr	r3, [pc, #44]	; (8013928 <ip4_input+0x22c>)
 80138fa:	2200      	movs	r2, #0
 80138fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80138fe:	4b0a      	ldr	r3, [pc, #40]	; (8013928 <ip4_input+0x22c>)
 8013900:	2200      	movs	r2, #0
 8013902:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013904:	4b08      	ldr	r3, [pc, #32]	; (8013928 <ip4_input+0x22c>)
 8013906:	2200      	movs	r2, #0
 8013908:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801390a:	4b07      	ldr	r3, [pc, #28]	; (8013928 <ip4_input+0x22c>)
 801390c:	2200      	movs	r2, #0
 801390e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013910:	4b05      	ldr	r3, [pc, #20]	; (8013928 <ip4_input+0x22c>)
 8013912:	2200      	movs	r2, #0
 8013914:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013916:	4b04      	ldr	r3, [pc, #16]	; (8013928 <ip4_input+0x22c>)
 8013918:	2200      	movs	r2, #0
 801391a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3718      	adds	r7, #24
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	20009770 	.word	0x20009770
 801392c:	200117f0 	.word	0x200117f0

08013930 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b08a      	sub	sp, #40	; 0x28
 8013934:	af04      	add	r7, sp, #16
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	607a      	str	r2, [r7, #4]
 801393c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d009      	beq.n	801395c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d003      	beq.n	8013956 <ip4_output_if+0x26>
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d102      	bne.n	801395c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	3304      	adds	r3, #4
 801395a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801395c:	78fa      	ldrb	r2, [r7, #3]
 801395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013960:	9302      	str	r3, [sp, #8]
 8013962:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013966:	9301      	str	r3, [sp, #4]
 8013968:	f897 3020 	ldrb.w	r3, [r7, #32]
 801396c:	9300      	str	r3, [sp, #0]
 801396e:	4613      	mov	r3, r2
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	6979      	ldr	r1, [r7, #20]
 8013974:	68f8      	ldr	r0, [r7, #12]
 8013976:	f000 f805 	bl	8013984 <ip4_output_if_src>
 801397a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801397c:	4618      	mov	r0, r3
 801397e:	3718      	adds	r7, #24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b088      	sub	sp, #32
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	7b9b      	ldrb	r3, [r3, #14]
 8013996:	2b01      	cmp	r3, #1
 8013998:	d006      	beq.n	80139a8 <ip4_output_if_src+0x24>
 801399a:	4b4b      	ldr	r3, [pc, #300]	; (8013ac8 <ip4_output_if_src+0x144>)
 801399c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80139a0:	494a      	ldr	r1, [pc, #296]	; (8013acc <ip4_output_if_src+0x148>)
 80139a2:	484b      	ldr	r0, [pc, #300]	; (8013ad0 <ip4_output_if_src+0x14c>)
 80139a4:	f001 fb80 	bl	80150a8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d060      	beq.n	8013a70 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80139ae:	2314      	movs	r3, #20
 80139b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80139b2:	2114      	movs	r1, #20
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	f7f7 fffd 	bl	800b9b4 <pbuf_add_header>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d002      	beq.n	80139c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80139c0:	f06f 0301 	mvn.w	r3, #1
 80139c4:	e07c      	b.n	8013ac0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	895b      	ldrh	r3, [r3, #10]
 80139d0:	2b13      	cmp	r3, #19
 80139d2:	d806      	bhi.n	80139e2 <ip4_output_if_src+0x5e>
 80139d4:	4b3c      	ldr	r3, [pc, #240]	; (8013ac8 <ip4_output_if_src+0x144>)
 80139d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80139da:	493e      	ldr	r1, [pc, #248]	; (8013ad4 <ip4_output_if_src+0x150>)
 80139dc:	483c      	ldr	r0, [pc, #240]	; (8013ad0 <ip4_output_if_src+0x14c>)
 80139de:	f001 fb63 	bl	80150a8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80139e2:	69fb      	ldr	r3, [r7, #28]
 80139e4:	78fa      	ldrb	r2, [r7, #3]
 80139e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80139ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80139f8:	8b7b      	ldrh	r3, [r7, #26]
 80139fa:	089b      	lsrs	r3, r3, #2
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a04:	b2da      	uxtb	r2, r3
 8013a06:	69fb      	ldr	r3, [r7, #28]
 8013a08:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013a10:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	891b      	ldrh	r3, [r3, #8]
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7f6 fc76 	bl	800a308 <lwip_htons>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	461a      	mov	r2, r3
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013a24:	69fb      	ldr	r3, [r7, #28]
 8013a26:	2200      	movs	r2, #0
 8013a28:	719a      	strb	r2, [r3, #6]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013a2e:	4b2a      	ldr	r3, [pc, #168]	; (8013ad8 <ip4_output_if_src+0x154>)
 8013a30:	881b      	ldrh	r3, [r3, #0]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7f6 fc68 	bl	800a308 <lwip_htons>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	461a      	mov	r2, r3
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013a40:	4b25      	ldr	r3, [pc, #148]	; (8013ad8 <ip4_output_if_src+0x154>)
 8013a42:	881b      	ldrh	r3, [r3, #0]
 8013a44:	3301      	adds	r3, #1
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	4b23      	ldr	r3, [pc, #140]	; (8013ad8 <ip4_output_if_src+0x154>)
 8013a4a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d104      	bne.n	8013a5c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013a52:	4b22      	ldr	r3, [pc, #136]	; (8013adc <ip4_output_if_src+0x158>)
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	60da      	str	r2, [r3, #12]
 8013a5a:	e003      	b.n	8013a64 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	69fb      	ldr	r3, [r7, #28]
 8013a62:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	2200      	movs	r2, #0
 8013a68:	729a      	strb	r2, [r3, #10]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	72da      	strb	r2, [r3, #11]
 8013a6e:	e00f      	b.n	8013a90 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	895b      	ldrh	r3, [r3, #10]
 8013a74:	2b13      	cmp	r3, #19
 8013a76:	d802      	bhi.n	8013a7e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013a78:	f06f 0301 	mvn.w	r3, #1
 8013a7c:	e020      	b.n	8013ac0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	691b      	ldr	r3, [r3, #16]
 8013a88:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013a8a:	f107 0314 	add.w	r3, r7, #20
 8013a8e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d00c      	beq.n	8013ab2 <ip4_output_if_src+0x12e>
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	891a      	ldrh	r2, [r3, #8]
 8013a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d906      	bls.n	8013ab2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013aa8:	68f8      	ldr	r0, [r7, #12]
 8013aaa:	f000 fd53 	bl	8014554 <ip4_frag>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	e006      	b.n	8013ac0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab4:	695b      	ldr	r3, [r3, #20]
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	68f9      	ldr	r1, [r7, #12]
 8013aba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013abc:	4798      	blx	r3
 8013abe:	4603      	mov	r3, r0
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3720      	adds	r7, #32
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	08018bb8 	.word	0x08018bb8
 8013acc:	08018bec 	.word	0x08018bec
 8013ad0:	08018bf8 	.word	0x08018bf8
 8013ad4:	08018c20 	.word	0x08018c20
 8013ad8:	2001194a 	.word	0x2001194a
 8013adc:	08019058 	.word	0x08019058

08013ae0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b085      	sub	sp, #20
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013af4:	d002      	beq.n	8013afc <ip4_addr_isbroadcast_u32+0x1c>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d101      	bne.n	8013b00 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013afc:	2301      	movs	r3, #1
 8013afe:	e02a      	b.n	8013b56 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b06:	f003 0302 	and.w	r3, r3, #2
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d101      	bne.n	8013b12 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	e021      	b.n	8013b56 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	3304      	adds	r3, #4
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	687a      	ldr	r2, [r7, #4]
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d101      	bne.n	8013b22 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	e019      	b.n	8013b56 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013b22:	68fa      	ldr	r2, [r7, #12]
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	3304      	adds	r3, #4
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	405a      	eors	r2, r3
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	3308      	adds	r3, #8
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	4013      	ands	r3, r2
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d10d      	bne.n	8013b54 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	3308      	adds	r3, #8
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	43da      	mvns	r2, r3
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	3308      	adds	r3, #8
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d101      	bne.n	8013b54 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013b50:	2301      	movs	r3, #1
 8013b52:	e000      	b.n	8013b56 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013b54:	2300      	movs	r3, #0
  }
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3714      	adds	r7, #20
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr
	...

08013b64 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013b6e:	4b12      	ldr	r3, [pc, #72]	; (8013bb8 <ip_reass_tmr+0x54>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013b74:	e018      	b.n	8013ba8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	7fdb      	ldrb	r3, [r3, #31]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d00b      	beq.n	8013b96 <ip_reass_tmr+0x32>
      r->timer--;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	7fdb      	ldrb	r3, [r3, #31]
 8013b82:	3b01      	subs	r3, #1
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	60fb      	str	r3, [r7, #12]
 8013b94:	e008      	b.n	8013ba8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013ba0:	68b9      	ldr	r1, [r7, #8]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f000 f80a 	bl	8013bbc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d1e3      	bne.n	8013b76 <ip_reass_tmr+0x12>
    }
  }
}
 8013bae:	bf00      	nop
 8013bb0:	bf00      	nop
 8013bb2:	3710      	adds	r7, #16
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	2001194c 	.word	0x2001194c

08013bbc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b088      	sub	sp, #32
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013bca:	683a      	ldr	r2, [r7, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d105      	bne.n	8013bde <ip_reass_free_complete_datagram+0x22>
 8013bd2:	4b45      	ldr	r3, [pc, #276]	; (8013ce8 <ip_reass_free_complete_datagram+0x12c>)
 8013bd4:	22ab      	movs	r2, #171	; 0xab
 8013bd6:	4945      	ldr	r1, [pc, #276]	; (8013cec <ip_reass_free_complete_datagram+0x130>)
 8013bd8:	4845      	ldr	r0, [pc, #276]	; (8013cf0 <ip_reass_free_complete_datagram+0x134>)
 8013bda:	f001 fa65 	bl	80150a8 <iprintf>
  if (prev != NULL) {
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00a      	beq.n	8013bfa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d005      	beq.n	8013bfa <ip_reass_free_complete_datagram+0x3e>
 8013bee:	4b3e      	ldr	r3, [pc, #248]	; (8013ce8 <ip_reass_free_complete_datagram+0x12c>)
 8013bf0:	22ad      	movs	r2, #173	; 0xad
 8013bf2:	4940      	ldr	r1, [pc, #256]	; (8013cf4 <ip_reass_free_complete_datagram+0x138>)
 8013bf4:	483e      	ldr	r0, [pc, #248]	; (8013cf0 <ip_reass_free_complete_datagram+0x134>)
 8013bf6:	f001 fa57 	bl	80150a8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	685b      	ldr	r3, [r3, #4]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	889b      	ldrh	r3, [r3, #4]
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d12a      	bne.n	8013c62 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	6858      	ldr	r0, [r3, #4]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	3308      	adds	r3, #8
 8013c22:	2214      	movs	r2, #20
 8013c24:	4619      	mov	r1, r3
 8013c26:	f001 f994 	bl	8014f52 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	69b8      	ldr	r0, [r7, #24]
 8013c2e:	f7ff fc51 	bl	80134d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013c32:	69b8      	ldr	r0, [r7, #24]
 8013c34:	f7f7 ffe2 	bl	800bbfc <pbuf_clen>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013c3c:	8bfa      	ldrh	r2, [r7, #30]
 8013c3e:	8a7b      	ldrh	r3, [r7, #18]
 8013c40:	4413      	add	r3, r2
 8013c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c46:	db05      	blt.n	8013c54 <ip_reass_free_complete_datagram+0x98>
 8013c48:	4b27      	ldr	r3, [pc, #156]	; (8013ce8 <ip_reass_free_complete_datagram+0x12c>)
 8013c4a:	22bc      	movs	r2, #188	; 0xbc
 8013c4c:	492a      	ldr	r1, [pc, #168]	; (8013cf8 <ip_reass_free_complete_datagram+0x13c>)
 8013c4e:	4828      	ldr	r0, [pc, #160]	; (8013cf0 <ip_reass_free_complete_datagram+0x134>)
 8013c50:	f001 fa2a 	bl	80150a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013c54:	8bfa      	ldrh	r2, [r7, #30]
 8013c56:	8a7b      	ldrh	r3, [r7, #18]
 8013c58:	4413      	add	r3, r2
 8013c5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013c5c:	69b8      	ldr	r0, [r7, #24]
 8013c5e:	f7f7 ff3f 	bl	800bae0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013c68:	e01f      	b.n	8013caa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013c7a:	68f8      	ldr	r0, [r7, #12]
 8013c7c:	f7f7 ffbe 	bl	800bbfc <pbuf_clen>
 8013c80:	4603      	mov	r3, r0
 8013c82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013c84:	8bfa      	ldrh	r2, [r7, #30]
 8013c86:	8a7b      	ldrh	r3, [r7, #18]
 8013c88:	4413      	add	r3, r2
 8013c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c8e:	db05      	blt.n	8013c9c <ip_reass_free_complete_datagram+0xe0>
 8013c90:	4b15      	ldr	r3, [pc, #84]	; (8013ce8 <ip_reass_free_complete_datagram+0x12c>)
 8013c92:	22cc      	movs	r2, #204	; 0xcc
 8013c94:	4918      	ldr	r1, [pc, #96]	; (8013cf8 <ip_reass_free_complete_datagram+0x13c>)
 8013c96:	4816      	ldr	r0, [pc, #88]	; (8013cf0 <ip_reass_free_complete_datagram+0x134>)
 8013c98:	f001 fa06 	bl	80150a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013c9c:	8bfa      	ldrh	r2, [r7, #30]
 8013c9e:	8a7b      	ldrh	r3, [r7, #18]
 8013ca0:	4413      	add	r3, r2
 8013ca2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	f7f7 ff1b 	bl	800bae0 <pbuf_free>
  while (p != NULL) {
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d1dc      	bne.n	8013c6a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013cb0:	6839      	ldr	r1, [r7, #0]
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f000 f8c2 	bl	8013e3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013cb8:	4b10      	ldr	r3, [pc, #64]	; (8013cfc <ip_reass_free_complete_datagram+0x140>)
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	8bfa      	ldrh	r2, [r7, #30]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d905      	bls.n	8013cce <ip_reass_free_complete_datagram+0x112>
 8013cc2:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <ip_reass_free_complete_datagram+0x12c>)
 8013cc4:	22d2      	movs	r2, #210	; 0xd2
 8013cc6:	490e      	ldr	r1, [pc, #56]	; (8013d00 <ip_reass_free_complete_datagram+0x144>)
 8013cc8:	4809      	ldr	r0, [pc, #36]	; (8013cf0 <ip_reass_free_complete_datagram+0x134>)
 8013cca:	f001 f9ed 	bl	80150a8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013cce:	4b0b      	ldr	r3, [pc, #44]	; (8013cfc <ip_reass_free_complete_datagram+0x140>)
 8013cd0:	881a      	ldrh	r2, [r3, #0]
 8013cd2:	8bfb      	ldrh	r3, [r7, #30]
 8013cd4:	1ad3      	subs	r3, r2, r3
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	4b08      	ldr	r3, [pc, #32]	; (8013cfc <ip_reass_free_complete_datagram+0x140>)
 8013cda:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013cdc:	8bfb      	ldrh	r3, [r7, #30]
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3720      	adds	r7, #32
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	08018c50 	.word	0x08018c50
 8013cec:	08018c8c 	.word	0x08018c8c
 8013cf0:	08018c98 	.word	0x08018c98
 8013cf4:	08018cc0 	.word	0x08018cc0
 8013cf8:	08018cd4 	.word	0x08018cd4
 8013cfc:	20011950 	.word	0x20011950
 8013d00:	08018cf4 	.word	0x08018cf4

08013d04 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b08a      	sub	sp, #40	; 0x28
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013d12:	2300      	movs	r3, #0
 8013d14:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013d16:	2300      	movs	r3, #0
 8013d18:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013d22:	4b28      	ldr	r3, [pc, #160]	; (8013dc4 <ip_reass_remove_oldest_datagram+0xc0>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013d28:	e030      	b.n	8013d8c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2c:	695a      	ldr	r2, [r3, #20]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	68db      	ldr	r3, [r3, #12]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d10c      	bne.n	8013d50 <ip_reass_remove_oldest_datagram+0x4c>
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	699a      	ldr	r2, [r3, #24]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	691b      	ldr	r3, [r3, #16]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d106      	bne.n	8013d50 <ip_reass_remove_oldest_datagram+0x4c>
 8013d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d44:	899a      	ldrh	r2, [r3, #12]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	889b      	ldrh	r3, [r3, #4]
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d014      	beq.n	8013d7a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	3301      	adds	r3, #1
 8013d54:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013d56:	6a3b      	ldr	r3, [r7, #32]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d104      	bne.n	8013d66 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	61bb      	str	r3, [r7, #24]
 8013d64:	e009      	b.n	8013d7a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d68:	7fda      	ldrb	r2, [r3, #31]
 8013d6a:	6a3b      	ldr	r3, [r7, #32]
 8013d6c:	7fdb      	ldrb	r3, [r3, #31]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d803      	bhi.n	8013d7a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d74:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d001      	beq.n	8013d86 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d84:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d1cb      	bne.n	8013d2a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013d92:	6a3b      	ldr	r3, [r7, #32]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d008      	beq.n	8013daa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013d98:	69b9      	ldr	r1, [r7, #24]
 8013d9a:	6a38      	ldr	r0, [r7, #32]
 8013d9c:	f7ff ff0e 	bl	8013bbc <ip_reass_free_complete_datagram>
 8013da0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013da2:	697a      	ldr	r2, [r7, #20]
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	4413      	add	r3, r2
 8013da8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013daa:	697a      	ldr	r2, [r7, #20]
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	da02      	bge.n	8013db8 <ip_reass_remove_oldest_datagram+0xb4>
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	dcac      	bgt.n	8013d12 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013db8:	697b      	ldr	r3, [r7, #20]
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3728      	adds	r7, #40	; 0x28
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	2001194c 	.word	0x2001194c

08013dc8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013dd2:	2003      	movs	r0, #3
 8013dd4:	f7f6 ff6e 	bl	800acb4 <memp_malloc>
 8013dd8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d110      	bne.n	8013e02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013de0:	6839      	ldr	r1, [r7, #0]
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7ff ff8e 	bl	8013d04 <ip_reass_remove_oldest_datagram>
 8013de8:	4602      	mov	r2, r0
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	4293      	cmp	r3, r2
 8013dee:	dc03      	bgt.n	8013df8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013df0:	2003      	movs	r0, #3
 8013df2:	f7f6 ff5f 	bl	800acb4 <memp_malloc>
 8013df6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d101      	bne.n	8013e02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	e016      	b.n	8013e30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013e02:	2220      	movs	r2, #32
 8013e04:	2100      	movs	r1, #0
 8013e06:	68f8      	ldr	r0, [r7, #12]
 8013e08:	f001 f8b1 	bl	8014f6e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	220f      	movs	r2, #15
 8013e10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013e12:	4b09      	ldr	r3, [pc, #36]	; (8013e38 <ip_reass_enqueue_new_datagram+0x70>)
 8013e14:	681a      	ldr	r2, [r3, #0]
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013e1a:	4a07      	ldr	r2, [pc, #28]	; (8013e38 <ip_reass_enqueue_new_datagram+0x70>)
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	3308      	adds	r3, #8
 8013e24:	2214      	movs	r2, #20
 8013e26:	6879      	ldr	r1, [r7, #4]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f001 f892 	bl	8014f52 <memcpy>
  return ipr;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	2001194c 	.word	0x2001194c

08013e3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b082      	sub	sp, #8
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013e46:	4b10      	ldr	r3, [pc, #64]	; (8013e88 <ip_reass_dequeue_datagram+0x4c>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d104      	bne.n	8013e5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	4a0c      	ldr	r2, [pc, #48]	; (8013e88 <ip_reass_dequeue_datagram+0x4c>)
 8013e56:	6013      	str	r3, [r2, #0]
 8013e58:	e00d      	b.n	8013e76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d106      	bne.n	8013e6e <ip_reass_dequeue_datagram+0x32>
 8013e60:	4b0a      	ldr	r3, [pc, #40]	; (8013e8c <ip_reass_dequeue_datagram+0x50>)
 8013e62:	f240 1245 	movw	r2, #325	; 0x145
 8013e66:	490a      	ldr	r1, [pc, #40]	; (8013e90 <ip_reass_dequeue_datagram+0x54>)
 8013e68:	480a      	ldr	r0, [pc, #40]	; (8013e94 <ip_reass_dequeue_datagram+0x58>)
 8013e6a:	f001 f91d 	bl	80150a8 <iprintf>
    prev->next = ipr->next;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013e76:	6879      	ldr	r1, [r7, #4]
 8013e78:	2003      	movs	r0, #3
 8013e7a:	f7f6 ff91 	bl	800ada0 <memp_free>
}
 8013e7e:	bf00      	nop
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	2001194c 	.word	0x2001194c
 8013e8c:	08018c50 	.word	0x08018c50
 8013e90:	08018d18 	.word	0x08018d18
 8013e94:	08018c98 	.word	0x08018c98

08013e98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b08c      	sub	sp, #48	; 0x30
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013eb2:	69fb      	ldr	r3, [r7, #28]
 8013eb4:	885b      	ldrh	r3, [r3, #2]
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f6 fa25 	bl	800a308 <lwip_htons>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	f003 030f 	and.w	r3, r3, #15
 8013eca:	b2db      	uxtb	r3, r3
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013ed0:	7e7b      	ldrb	r3, [r7, #25]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	8b7a      	ldrh	r2, [r7, #26]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d202      	bcs.n	8013ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ede:	e135      	b.n	801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013ee0:	7e7b      	ldrb	r3, [r7, #25]
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	8b7a      	ldrh	r2, [r7, #26]
 8013ee6:	1ad3      	subs	r3, r2, r3
 8013ee8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	88db      	ldrh	r3, [r3, #6]
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7f6 fa09 	bl	800a308 <lwip_htons>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	00db      	lsls	r3, r3, #3
 8013f00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	701a      	strb	r2, [r3, #0]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	705a      	strb	r2, [r3, #1]
 8013f12:	2200      	movs	r2, #0
 8013f14:	709a      	strb	r2, [r3, #2]
 8013f16:	2200      	movs	r2, #0
 8013f18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1c:	8afa      	ldrh	r2, [r7, #22]
 8013f1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013f20:	8afa      	ldrh	r2, [r7, #22]
 8013f22:	8b7b      	ldrh	r3, [r7, #26]
 8013f24:	4413      	add	r3, r2
 8013f26:	b29a      	uxth	r2, r3
 8013f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2e:	88db      	ldrh	r3, [r3, #6]
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	8afa      	ldrh	r2, [r7, #22]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d902      	bls.n	8013f3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f3c:	e106      	b.n	801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	685b      	ldr	r3, [r3, #4]
 8013f42:	627b      	str	r3, [r7, #36]	; 0x24
 8013f44:	e068      	b.n	8014018 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f48:	685b      	ldr	r3, [r3, #4]
 8013f4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4e:	889b      	ldrh	r3, [r3, #4]
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	889b      	ldrh	r3, [r3, #4]
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d235      	bcs.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d020      	beq.n	8013faa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6a:	889b      	ldrh	r3, [r3, #4]
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f70:	88db      	ldrh	r3, [r3, #6]
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d307      	bcc.n	8013f88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	88db      	ldrh	r3, [r3, #6]
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	889b      	ldrh	r3, [r3, #4]
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d902      	bls.n	8013f8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f8c:	e0de      	b.n	801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	68ba      	ldr	r2, [r7, #8]
 8013f92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f96:	88db      	ldrh	r3, [r3, #6]
 8013f98:	b29a      	uxth	r2, r3
 8013f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9c:	889b      	ldrh	r3, [r3, #4]
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d03d      	beq.n	8014020 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013fa8:	e03a      	b.n	8014020 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fac:	88db      	ldrh	r3, [r3, #6]
 8013fae:	b29a      	uxth	r2, r3
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	889b      	ldrh	r3, [r3, #4]
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d902      	bls.n	8013fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fbe:	e0c5      	b.n	801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	68ba      	ldr	r2, [r7, #8]
 8013fc4:	605a      	str	r2, [r3, #4]
      break;
 8013fc6:	e02b      	b.n	8014020 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fca:	889b      	ldrh	r3, [r3, #4]
 8013fcc:	b29a      	uxth	r2, r3
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	889b      	ldrh	r3, [r3, #4]
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d102      	bne.n	8013fde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fdc:	e0b6      	b.n	801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe0:	889b      	ldrh	r3, [r3, #4]
 8013fe2:	b29a      	uxth	r2, r3
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	88db      	ldrh	r3, [r3, #6]
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d202      	bcs.n	8013ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ff2:	e0ab      	b.n	801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d009      	beq.n	801400e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ffc:	88db      	ldrh	r3, [r3, #6]
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	693b      	ldr	r3, [r7, #16]
 8014002:	889b      	ldrh	r3, [r3, #4]
 8014004:	b29b      	uxth	r3, r3
 8014006:	429a      	cmp	r2, r3
 8014008:	d001      	beq.n	801400e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801400a:	2300      	movs	r3, #0
 801400c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401a:	2b00      	cmp	r3, #0
 801401c:	d193      	bne.n	8013f46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801401e:	e000      	b.n	8014022 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014020:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	2b00      	cmp	r3, #0
 8014026:	d12d      	bne.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402a:	2b00      	cmp	r3, #0
 801402c:	d01c      	beq.n	8014068 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014030:	88db      	ldrh	r3, [r3, #6]
 8014032:	b29a      	uxth	r2, r3
 8014034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014036:	889b      	ldrh	r3, [r3, #4]
 8014038:	b29b      	uxth	r3, r3
 801403a:	429a      	cmp	r2, r3
 801403c:	d906      	bls.n	801404c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801403e:	4b45      	ldr	r3, [pc, #276]	; (8014154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014040:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014044:	4944      	ldr	r1, [pc, #272]	; (8014158 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014046:	4845      	ldr	r0, [pc, #276]	; (801415c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014048:	f001 f82e 	bl	80150a8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404e:	68ba      	ldr	r2, [r7, #8]
 8014050:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014054:	88db      	ldrh	r3, [r3, #6]
 8014056:	b29a      	uxth	r2, r3
 8014058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405a:	889b      	ldrh	r3, [r3, #4]
 801405c:	b29b      	uxth	r3, r3
 801405e:	429a      	cmp	r2, r3
 8014060:	d010      	beq.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014062:	2300      	movs	r3, #0
 8014064:	623b      	str	r3, [r7, #32]
 8014066:	e00d      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d006      	beq.n	801407e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014070:	4b38      	ldr	r3, [pc, #224]	; (8014154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014072:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014076:	493a      	ldr	r1, [pc, #232]	; (8014160 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014078:	4838      	ldr	r0, [pc, #224]	; (801415c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801407a:	f001 f815 	bl	80150a8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	68ba      	ldr	r2, [r7, #8]
 8014082:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d105      	bne.n	8014096 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	7f9b      	ldrb	r3, [r3, #30]
 801408e:	f003 0301 	and.w	r3, r3, #1
 8014092:	2b00      	cmp	r3, #0
 8014094:	d059      	beq.n	801414a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014096:	6a3b      	ldr	r3, [r7, #32]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d04f      	beq.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d006      	beq.n	80140b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	889b      	ldrh	r3, [r3, #4]
 80140ac:	b29b      	uxth	r3, r3
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d002      	beq.n	80140b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80140b2:	2300      	movs	r3, #0
 80140b4:	623b      	str	r3, [r7, #32]
 80140b6:	e041      	b.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80140b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80140bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80140c2:	e012      	b.n	80140ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80140c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80140ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140cc:	88db      	ldrh	r3, [r3, #6]
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d2:	889b      	ldrh	r3, [r3, #4]
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d002      	beq.n	80140e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80140da:	2300      	movs	r3, #0
 80140dc:	623b      	str	r3, [r7, #32]
            break;
 80140de:	e007      	b.n	80140f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80140e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80140ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d1e9      	bne.n	80140c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80140f0:	6a3b      	ldr	r3, [r7, #32]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d022      	beq.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	685b      	ldr	r3, [r3, #4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d106      	bne.n	801410c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80140fe:	4b15      	ldr	r3, [pc, #84]	; (8014154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014100:	f240 12df 	movw	r2, #479	; 0x1df
 8014104:	4917      	ldr	r1, [pc, #92]	; (8014164 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014106:	4815      	ldr	r0, [pc, #84]	; (801415c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014108:	f000 ffce 	bl	80150a8 <iprintf>
          LWIP_ASSERT("sanity check",
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014114:	429a      	cmp	r2, r3
 8014116:	d106      	bne.n	8014126 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014118:	4b0e      	ldr	r3, [pc, #56]	; (8014154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801411a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801411e:	4911      	ldr	r1, [pc, #68]	; (8014164 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014120:	480e      	ldr	r0, [pc, #56]	; (801415c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014122:	f000 ffc1 	bl	80150a8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d006      	beq.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801412e:	4b09      	ldr	r3, [pc, #36]	; (8014154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014130:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014134:	490c      	ldr	r1, [pc, #48]	; (8014168 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014136:	4809      	ldr	r0, [pc, #36]	; (801415c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014138:	f000 ffb6 	bl	80150a8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	2b00      	cmp	r3, #0
 8014140:	bf14      	ite	ne
 8014142:	2301      	movne	r3, #1
 8014144:	2300      	moveq	r3, #0
 8014146:	b2db      	uxtb	r3, r3
 8014148:	e000      	b.n	801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801414a:	2300      	movs	r3, #0
}
 801414c:	4618      	mov	r0, r3
 801414e:	3730      	adds	r7, #48	; 0x30
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	08018c50 	.word	0x08018c50
 8014158:	08018d34 	.word	0x08018d34
 801415c:	08018c98 	.word	0x08018c98
 8014160:	08018d54 	.word	0x08018d54
 8014164:	08018d8c 	.word	0x08018d8c
 8014168:	08018d9c 	.word	0x08018d9c

0801416c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b08e      	sub	sp, #56	; 0x38
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	f003 030f 	and.w	r3, r3, #15
 8014182:	b2db      	uxtb	r3, r3
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	b2db      	uxtb	r3, r3
 8014188:	2b14      	cmp	r3, #20
 801418a:	f040 8171 	bne.w	8014470 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014190:	88db      	ldrh	r3, [r3, #6]
 8014192:	b29b      	uxth	r3, r3
 8014194:	4618      	mov	r0, r3
 8014196:	f7f6 f8b7 	bl	800a308 <lwip_htons>
 801419a:	4603      	mov	r3, r0
 801419c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141a0:	b29b      	uxth	r3, r3
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80141a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a8:	885b      	ldrh	r3, [r3, #2]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7f6 f8ab 	bl	800a308 <lwip_htons>
 80141b2:	4603      	mov	r3, r0
 80141b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80141b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	f003 030f 	and.w	r3, r3, #15
 80141be:	b2db      	uxtb	r3, r3
 80141c0:	009b      	lsls	r3, r3, #2
 80141c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80141c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80141ca:	b29b      	uxth	r3, r3
 80141cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80141ce:	429a      	cmp	r2, r3
 80141d0:	f0c0 8150 	bcc.w	8014474 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80141d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80141d8:	b29b      	uxth	r3, r3
 80141da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80141dc:	1ad3      	subs	r3, r2, r3
 80141de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7f7 fd0b 	bl	800bbfc <pbuf_clen>
 80141e6:	4603      	mov	r3, r0
 80141e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80141ea:	4b8c      	ldr	r3, [pc, #560]	; (801441c <ip4_reass+0x2b0>)
 80141ec:	881b      	ldrh	r3, [r3, #0]
 80141ee:	461a      	mov	r2, r3
 80141f0:	8c3b      	ldrh	r3, [r7, #32]
 80141f2:	4413      	add	r3, r2
 80141f4:	2b0a      	cmp	r3, #10
 80141f6:	dd10      	ble.n	801421a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80141f8:	8c3b      	ldrh	r3, [r7, #32]
 80141fa:	4619      	mov	r1, r3
 80141fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141fe:	f7ff fd81 	bl	8013d04 <ip_reass_remove_oldest_datagram>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	f000 8137 	beq.w	8014478 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801420a:	4b84      	ldr	r3, [pc, #528]	; (801441c <ip4_reass+0x2b0>)
 801420c:	881b      	ldrh	r3, [r3, #0]
 801420e:	461a      	mov	r2, r3
 8014210:	8c3b      	ldrh	r3, [r7, #32]
 8014212:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014214:	2b0a      	cmp	r3, #10
 8014216:	f300 812f 	bgt.w	8014478 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801421a:	4b81      	ldr	r3, [pc, #516]	; (8014420 <ip4_reass+0x2b4>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	633b      	str	r3, [r7, #48]	; 0x30
 8014220:	e015      	b.n	801424e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014224:	695a      	ldr	r2, [r3, #20]
 8014226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	429a      	cmp	r2, r3
 801422c:	d10c      	bne.n	8014248 <ip4_reass+0xdc>
 801422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014230:	699a      	ldr	r2, [r3, #24]
 8014232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014234:	691b      	ldr	r3, [r3, #16]
 8014236:	429a      	cmp	r2, r3
 8014238:	d106      	bne.n	8014248 <ip4_reass+0xdc>
 801423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801423c:	899a      	ldrh	r2, [r3, #12]
 801423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014240:	889b      	ldrh	r3, [r3, #4]
 8014242:	b29b      	uxth	r3, r3
 8014244:	429a      	cmp	r2, r3
 8014246:	d006      	beq.n	8014256 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	633b      	str	r3, [r7, #48]	; 0x30
 801424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014250:	2b00      	cmp	r3, #0
 8014252:	d1e6      	bne.n	8014222 <ip4_reass+0xb6>
 8014254:	e000      	b.n	8014258 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014256:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425a:	2b00      	cmp	r3, #0
 801425c:	d109      	bne.n	8014272 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801425e:	8c3b      	ldrh	r3, [r7, #32]
 8014260:	4619      	mov	r1, r3
 8014262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014264:	f7ff fdb0 	bl	8013dc8 <ip_reass_enqueue_new_datagram>
 8014268:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426c:	2b00      	cmp	r3, #0
 801426e:	d11c      	bne.n	80142aa <ip4_reass+0x13e>
      goto nullreturn;
 8014270:	e105      	b.n	801447e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014274:	88db      	ldrh	r3, [r3, #6]
 8014276:	b29b      	uxth	r3, r3
 8014278:	4618      	mov	r0, r3
 801427a:	f7f6 f845 	bl	800a308 <lwip_htons>
 801427e:	4603      	mov	r3, r0
 8014280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014284:	2b00      	cmp	r3, #0
 8014286:	d110      	bne.n	80142aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801428a:	89db      	ldrh	r3, [r3, #14]
 801428c:	4618      	mov	r0, r3
 801428e:	f7f6 f83b 	bl	800a308 <lwip_htons>
 8014292:	4603      	mov	r3, r0
 8014294:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014298:	2b00      	cmp	r3, #0
 801429a:	d006      	beq.n	80142aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429e:	3308      	adds	r3, #8
 80142a0:	2214      	movs	r2, #20
 80142a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80142a4:	4618      	mov	r0, r3
 80142a6:	f000 fe54 	bl	8014f52 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	88db      	ldrh	r3, [r3, #6]
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	f003 0320 	and.w	r3, r3, #32
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	bf0c      	ite	eq
 80142b8:	2301      	moveq	r3, #1
 80142ba:	2300      	movne	r3, #0
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80142c0:	69fb      	ldr	r3, [r7, #28]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d00e      	beq.n	80142e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80142c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80142c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142ca:	4413      	add	r3, r2
 80142cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80142ce:	8b7a      	ldrh	r2, [r7, #26]
 80142d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80142d2:	429a      	cmp	r2, r3
 80142d4:	f0c0 80a0 	bcc.w	8014418 <ip4_reass+0x2ac>
 80142d8:	8b7b      	ldrh	r3, [r7, #26]
 80142da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80142de:	4293      	cmp	r3, r2
 80142e0:	f200 809a 	bhi.w	8014418 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80142e4:	69fa      	ldr	r2, [r7, #28]
 80142e6:	6879      	ldr	r1, [r7, #4]
 80142e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142ea:	f7ff fdd5 	bl	8013e98 <ip_reass_chain_frag_into_datagram_and_validate>
 80142ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142f6:	f000 809b 	beq.w	8014430 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80142fa:	4b48      	ldr	r3, [pc, #288]	; (801441c <ip4_reass+0x2b0>)
 80142fc:	881a      	ldrh	r2, [r3, #0]
 80142fe:	8c3b      	ldrh	r3, [r7, #32]
 8014300:	4413      	add	r3, r2
 8014302:	b29a      	uxth	r2, r3
 8014304:	4b45      	ldr	r3, [pc, #276]	; (801441c <ip4_reass+0x2b0>)
 8014306:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00d      	beq.n	801432a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801430e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014312:	4413      	add	r3, r2
 8014314:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014318:	8a7a      	ldrh	r2, [r7, #18]
 801431a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431e:	7f9b      	ldrb	r3, [r3, #30]
 8014320:	f043 0301 	orr.w	r3, r3, #1
 8014324:	b2da      	uxtb	r2, r3
 8014326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014328:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d171      	bne.n	8014414 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014332:	8b9b      	ldrh	r3, [r3, #28]
 8014334:	3314      	adds	r3, #20
 8014336:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433a:	685b      	ldr	r3, [r3, #4]
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801434c:	3308      	adds	r3, #8
 801434e:	2214      	movs	r2, #20
 8014350:	4619      	mov	r1, r3
 8014352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014354:	f000 fdfd 	bl	8014f52 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014358:	8a3b      	ldrh	r3, [r7, #16]
 801435a:	4618      	mov	r0, r3
 801435c:	f7f5 ffd4 	bl	800a308 <lwip_htons>
 8014360:	4603      	mov	r3, r0
 8014362:	461a      	mov	r2, r3
 8014364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014366:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436a:	2200      	movs	r2, #0
 801436c:	719a      	strb	r2, [r3, #6]
 801436e:	2200      	movs	r2, #0
 8014370:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014374:	2200      	movs	r2, #0
 8014376:	729a      	strb	r2, [r3, #10]
 8014378:	2200      	movs	r2, #0
 801437a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014382:	e00d      	b.n	80143a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801438a:	2114      	movs	r1, #20
 801438c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801438e:	f7f7 fb21 	bl	800b9d4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014392:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f7f7 fc71 	bl	800bc7c <pbuf_cat>
      r = iprh->next_pbuf;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80143a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d1ee      	bne.n	8014384 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80143a6:	4b1e      	ldr	r3, [pc, #120]	; (8014420 <ip4_reass+0x2b4>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d102      	bne.n	80143b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80143b0:	2300      	movs	r3, #0
 80143b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143b4:	e010      	b.n	80143d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80143b6:	4b1a      	ldr	r3, [pc, #104]	; (8014420 <ip4_reass+0x2b4>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143bc:	e007      	b.n	80143ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80143be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d006      	beq.n	80143d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80143c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d1f4      	bne.n	80143be <ip4_reass+0x252>
 80143d4:	e000      	b.n	80143d8 <ip4_reass+0x26c>
          break;
 80143d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80143d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143dc:	f7ff fd2e 	bl	8013e3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f7f7 fc0b 	bl	800bbfc <pbuf_clen>
 80143e6:	4603      	mov	r3, r0
 80143e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80143ea:	4b0c      	ldr	r3, [pc, #48]	; (801441c <ip4_reass+0x2b0>)
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	8c3a      	ldrh	r2, [r7, #32]
 80143f0:	429a      	cmp	r2, r3
 80143f2:	d906      	bls.n	8014402 <ip4_reass+0x296>
 80143f4:	4b0b      	ldr	r3, [pc, #44]	; (8014424 <ip4_reass+0x2b8>)
 80143f6:	f240 229b 	movw	r2, #667	; 0x29b
 80143fa:	490b      	ldr	r1, [pc, #44]	; (8014428 <ip4_reass+0x2bc>)
 80143fc:	480b      	ldr	r0, [pc, #44]	; (801442c <ip4_reass+0x2c0>)
 80143fe:	f000 fe53 	bl	80150a8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014402:	4b06      	ldr	r3, [pc, #24]	; (801441c <ip4_reass+0x2b0>)
 8014404:	881a      	ldrh	r2, [r3, #0]
 8014406:	8c3b      	ldrh	r3, [r7, #32]
 8014408:	1ad3      	subs	r3, r2, r3
 801440a:	b29a      	uxth	r2, r3
 801440c:	4b03      	ldr	r3, [pc, #12]	; (801441c <ip4_reass+0x2b0>)
 801440e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	e038      	b.n	8014486 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014414:	2300      	movs	r3, #0
 8014416:	e036      	b.n	8014486 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014418:	bf00      	nop
 801441a:	e00a      	b.n	8014432 <ip4_reass+0x2c6>
 801441c:	20011950 	.word	0x20011950
 8014420:	2001194c 	.word	0x2001194c
 8014424:	08018c50 	.word	0x08018c50
 8014428:	08018dc0 	.word	0x08018dc0
 801442c:	08018c98 	.word	0x08018c98
    goto nullreturn_ipr;
 8014430:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014434:	2b00      	cmp	r3, #0
 8014436:	d106      	bne.n	8014446 <ip4_reass+0x2da>
 8014438:	4b15      	ldr	r3, [pc, #84]	; (8014490 <ip4_reass+0x324>)
 801443a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801443e:	4915      	ldr	r1, [pc, #84]	; (8014494 <ip4_reass+0x328>)
 8014440:	4815      	ldr	r0, [pc, #84]	; (8014498 <ip4_reass+0x32c>)
 8014442:	f000 fe31 	bl	80150a8 <iprintf>
  if (ipr->p == NULL) {
 8014446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d116      	bne.n	801447c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801444e:	4b13      	ldr	r3, [pc, #76]	; (801449c <ip4_reass+0x330>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014454:	429a      	cmp	r2, r3
 8014456:	d006      	beq.n	8014466 <ip4_reass+0x2fa>
 8014458:	4b0d      	ldr	r3, [pc, #52]	; (8014490 <ip4_reass+0x324>)
 801445a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801445e:	4910      	ldr	r1, [pc, #64]	; (80144a0 <ip4_reass+0x334>)
 8014460:	480d      	ldr	r0, [pc, #52]	; (8014498 <ip4_reass+0x32c>)
 8014462:	f000 fe21 	bl	80150a8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014466:	2100      	movs	r1, #0
 8014468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801446a:	f7ff fce7 	bl	8013e3c <ip_reass_dequeue_datagram>
 801446e:	e006      	b.n	801447e <ip4_reass+0x312>
    goto nullreturn;
 8014470:	bf00      	nop
 8014472:	e004      	b.n	801447e <ip4_reass+0x312>
    goto nullreturn;
 8014474:	bf00      	nop
 8014476:	e002      	b.n	801447e <ip4_reass+0x312>
      goto nullreturn;
 8014478:	bf00      	nop
 801447a:	e000      	b.n	801447e <ip4_reass+0x312>
  }

nullreturn:
 801447c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f7f7 fb2e 	bl	800bae0 <pbuf_free>
  return NULL;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3738      	adds	r7, #56	; 0x38
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	08018c50 	.word	0x08018c50
 8014494:	08018ddc 	.word	0x08018ddc
 8014498:	08018c98 	.word	0x08018c98
 801449c:	2001194c 	.word	0x2001194c
 80144a0:	08018de8 	.word	0x08018de8

080144a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80144a8:	2004      	movs	r0, #4
 80144aa:	f7f6 fc03 	bl	800acb4 <memp_malloc>
 80144ae:	4603      	mov	r3, r0
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d106      	bne.n	80144d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80144c2:	4b07      	ldr	r3, [pc, #28]	; (80144e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80144c4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80144c8:	4906      	ldr	r1, [pc, #24]	; (80144e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80144ca:	4807      	ldr	r0, [pc, #28]	; (80144e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80144cc:	f000 fdec 	bl	80150a8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80144d0:	6879      	ldr	r1, [r7, #4]
 80144d2:	2004      	movs	r0, #4
 80144d4:	f7f6 fc64 	bl	800ada0 <memp_free>
}
 80144d8:	bf00      	nop
 80144da:	3708      	adds	r7, #8
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	08018c50 	.word	0x08018c50
 80144e4:	08018e08 	.word	0x08018e08
 80144e8:	08018c98 	.word	0x08018c98

080144ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d106      	bne.n	801450c <ipfrag_free_pbuf_custom+0x20>
 80144fe:	4b11      	ldr	r3, [pc, #68]	; (8014544 <ipfrag_free_pbuf_custom+0x58>)
 8014500:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014504:	4910      	ldr	r1, [pc, #64]	; (8014548 <ipfrag_free_pbuf_custom+0x5c>)
 8014506:	4811      	ldr	r0, [pc, #68]	; (801454c <ipfrag_free_pbuf_custom+0x60>)
 8014508:	f000 fdce 	bl	80150a8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	429a      	cmp	r2, r3
 8014512:	d006      	beq.n	8014522 <ipfrag_free_pbuf_custom+0x36>
 8014514:	4b0b      	ldr	r3, [pc, #44]	; (8014544 <ipfrag_free_pbuf_custom+0x58>)
 8014516:	f240 22cf 	movw	r2, #719	; 0x2cf
 801451a:	490d      	ldr	r1, [pc, #52]	; (8014550 <ipfrag_free_pbuf_custom+0x64>)
 801451c:	480b      	ldr	r0, [pc, #44]	; (801454c <ipfrag_free_pbuf_custom+0x60>)
 801451e:	f000 fdc3 	bl	80150a8 <iprintf>
  if (pcr->original != NULL) {
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	695b      	ldr	r3, [r3, #20]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d004      	beq.n	8014534 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	695b      	ldr	r3, [r3, #20]
 801452e:	4618      	mov	r0, r3
 8014530:	f7f7 fad6 	bl	800bae0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014534:	68f8      	ldr	r0, [r7, #12]
 8014536:	f7ff ffbd 	bl	80144b4 <ip_frag_free_pbuf_custom_ref>
}
 801453a:	bf00      	nop
 801453c:	3710      	adds	r7, #16
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	08018c50 	.word	0x08018c50
 8014548:	08018e14 	.word	0x08018e14
 801454c:	08018c98 	.word	0x08018c98
 8014550:	08018e20 	.word	0x08018e20

08014554 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b094      	sub	sp, #80	; 0x50
 8014558:	af02      	add	r7, sp, #8
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	60b9      	str	r1, [r7, #8]
 801455e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014560:	2300      	movs	r3, #0
 8014562:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801456a:	3b14      	subs	r3, #20
 801456c:	2b00      	cmp	r3, #0
 801456e:	da00      	bge.n	8014572 <ip4_frag+0x1e>
 8014570:	3307      	adds	r3, #7
 8014572:	10db      	asrs	r3, r3, #3
 8014574:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014576:	2314      	movs	r3, #20
 8014578:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014582:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	f003 030f 	and.w	r3, r3, #15
 801458c:	b2db      	uxtb	r3, r3
 801458e:	009b      	lsls	r3, r3, #2
 8014590:	b2db      	uxtb	r3, r3
 8014592:	2b14      	cmp	r3, #20
 8014594:	d002      	beq.n	801459c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014596:	f06f 0305 	mvn.w	r3, #5
 801459a:	e110      	b.n	80147be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	895b      	ldrh	r3, [r3, #10]
 80145a0:	2b13      	cmp	r3, #19
 80145a2:	d809      	bhi.n	80145b8 <ip4_frag+0x64>
 80145a4:	4b88      	ldr	r3, [pc, #544]	; (80147c8 <ip4_frag+0x274>)
 80145a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80145aa:	4988      	ldr	r1, [pc, #544]	; (80147cc <ip4_frag+0x278>)
 80145ac:	4888      	ldr	r0, [pc, #544]	; (80147d0 <ip4_frag+0x27c>)
 80145ae:	f000 fd7b 	bl	80150a8 <iprintf>
 80145b2:	f06f 0305 	mvn.w	r3, #5
 80145b6:	e102      	b.n	80147be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80145b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ba:	88db      	ldrh	r3, [r3, #6]
 80145bc:	b29b      	uxth	r3, r3
 80145be:	4618      	mov	r0, r3
 80145c0:	f7f5 fea2 	bl	800a308 <lwip_htons>
 80145c4:	4603      	mov	r3, r0
 80145c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80145c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80145d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80145d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	891b      	ldrh	r3, [r3, #8]
 80145de:	3b14      	subs	r3, #20
 80145e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80145e4:	e0e1      	b.n	80147aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80145e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80145e8:	00db      	lsls	r3, r3, #3
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80145f0:	4293      	cmp	r3, r2
 80145f2:	bf28      	it	cs
 80145f4:	4613      	movcs	r3, r2
 80145f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80145f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145fc:	2114      	movs	r1, #20
 80145fe:	200e      	movs	r0, #14
 8014600:	f7f6 ff8a 	bl	800b518 <pbuf_alloc>
 8014604:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014608:	2b00      	cmp	r3, #0
 801460a:	f000 80d5 	beq.w	80147b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014610:	895b      	ldrh	r3, [r3, #10]
 8014612:	2b13      	cmp	r3, #19
 8014614:	d806      	bhi.n	8014624 <ip4_frag+0xd0>
 8014616:	4b6c      	ldr	r3, [pc, #432]	; (80147c8 <ip4_frag+0x274>)
 8014618:	f44f 7249 	mov.w	r2, #804	; 0x324
 801461c:	496d      	ldr	r1, [pc, #436]	; (80147d4 <ip4_frag+0x280>)
 801461e:	486c      	ldr	r0, [pc, #432]	; (80147d0 <ip4_frag+0x27c>)
 8014620:	f000 fd42 	bl	80150a8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	2214      	movs	r2, #20
 801462a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801462c:	4618      	mov	r0, r3
 801462e:	f000 fc90 	bl	8014f52 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014638:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801463a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801463e:	e064      	b.n	801470a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	895a      	ldrh	r2, [r3, #10]
 8014644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014646:	1ad3      	subs	r3, r2, r3
 8014648:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	895b      	ldrh	r3, [r3, #10]
 801464e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014650:	429a      	cmp	r2, r3
 8014652:	d906      	bls.n	8014662 <ip4_frag+0x10e>
 8014654:	4b5c      	ldr	r3, [pc, #368]	; (80147c8 <ip4_frag+0x274>)
 8014656:	f240 322d 	movw	r2, #813	; 0x32d
 801465a:	495f      	ldr	r1, [pc, #380]	; (80147d8 <ip4_frag+0x284>)
 801465c:	485c      	ldr	r0, [pc, #368]	; (80147d0 <ip4_frag+0x27c>)
 801465e:	f000 fd23 	bl	80150a8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014662:	8bfa      	ldrh	r2, [r7, #30]
 8014664:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014668:	4293      	cmp	r3, r2
 801466a:	bf28      	it	cs
 801466c:	4613      	movcs	r3, r2
 801466e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014676:	2b00      	cmp	r3, #0
 8014678:	d105      	bne.n	8014686 <ip4_frag+0x132>
        poff = 0;
 801467a:	2300      	movs	r3, #0
 801467c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	60fb      	str	r3, [r7, #12]
        continue;
 8014684:	e041      	b.n	801470a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014686:	f7ff ff0d 	bl	80144a4 <ip_frag_alloc_pbuf_custom_ref>
 801468a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d103      	bne.n	801469a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014694:	f7f7 fa24 	bl	800bae0 <pbuf_free>
        goto memerr;
 8014698:	e08f      	b.n	80147ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801469a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80146a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80146a2:	4413      	add	r3, r2
 80146a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80146a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80146ac:	9201      	str	r2, [sp, #4]
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	4603      	mov	r3, r0
 80146b2:	2241      	movs	r2, #65	; 0x41
 80146b4:	2000      	movs	r0, #0
 80146b6:	f7f7 f859 	bl	800b76c <pbuf_alloced_custom>
 80146ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d106      	bne.n	80146d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80146c2:	69b8      	ldr	r0, [r7, #24]
 80146c4:	f7ff fef6 	bl	80144b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80146c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146ca:	f7f7 fa09 	bl	800bae0 <pbuf_free>
        goto memerr;
 80146ce:	e074      	b.n	80147ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	f7f7 faab 	bl	800bc2c <pbuf_ref>
      pcr->original = p;
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	68fa      	ldr	r2, [r7, #12]
 80146da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80146dc:	69bb      	ldr	r3, [r7, #24]
 80146de:	4a3f      	ldr	r2, [pc, #252]	; (80147dc <ip4_frag+0x288>)
 80146e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80146e2:	6979      	ldr	r1, [r7, #20]
 80146e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146e6:	f7f7 fac9 	bl	800bc7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80146ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80146ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80146f2:	1ad3      	subs	r3, r2, r3
 80146f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80146f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d004      	beq.n	801470a <ip4_frag+0x1b6>
        poff = 0;
 8014700:	2300      	movs	r3, #0
 8014702:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801470a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801470e:	2b00      	cmp	r3, #0
 8014710:	d196      	bne.n	8014640 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014712:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014718:	4413      	add	r3, r2
 801471a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014720:	f1a3 0213 	sub.w	r2, r3, #19
 8014724:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014728:	429a      	cmp	r2, r3
 801472a:	bfcc      	ite	gt
 801472c:	2301      	movgt	r3, #1
 801472e:	2300      	movle	r3, #0
 8014730:	b2db      	uxtb	r3, r3
 8014732:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801473c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801473e:	6a3b      	ldr	r3, [r7, #32]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d002      	beq.n	801474a <ip4_frag+0x1f6>
 8014744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014746:	2b00      	cmp	r3, #0
 8014748:	d003      	beq.n	8014752 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801474a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801474c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014750:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014752:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014754:	4618      	mov	r0, r3
 8014756:	f7f5 fdd7 	bl	800a308 <lwip_htons>
 801475a:	4603      	mov	r3, r0
 801475c:	461a      	mov	r2, r3
 801475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014760:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014762:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014764:	3314      	adds	r3, #20
 8014766:	b29b      	uxth	r3, r3
 8014768:	4618      	mov	r0, r3
 801476a:	f7f5 fdcd 	bl	800a308 <lwip_htons>
 801476e:	4603      	mov	r3, r0
 8014770:	461a      	mov	r2, r3
 8014772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014774:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014778:	2200      	movs	r2, #0
 801477a:	729a      	strb	r2, [r3, #10]
 801477c:	2200      	movs	r2, #0
 801477e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	695b      	ldr	r3, [r3, #20]
 8014784:	687a      	ldr	r2, [r7, #4]
 8014786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014788:	68b8      	ldr	r0, [r7, #8]
 801478a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801478c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801478e:	f7f7 f9a7 	bl	800bae0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014792:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014796:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014798:	1ad3      	subs	r3, r2, r3
 801479a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801479e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80147a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80147a4:	4413      	add	r3, r2
 80147a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80147aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	f47f af19 	bne.w	80145e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80147b4:	2300      	movs	r3, #0
 80147b6:	e002      	b.n	80147be <ip4_frag+0x26a>
      goto memerr;
 80147b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80147ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3748      	adds	r7, #72	; 0x48
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	08018c50 	.word	0x08018c50
 80147cc:	08018e2c 	.word	0x08018e2c
 80147d0:	08018c98 	.word	0x08018c98
 80147d4:	08018e48 	.word	0x08018e48
 80147d8:	08018e68 	.word	0x08018e68
 80147dc:	080144ed 	.word	0x080144ed

080147e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80147ea:	230e      	movs	r3, #14
 80147ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	895b      	ldrh	r3, [r3, #10]
 80147f2:	2b0e      	cmp	r3, #14
 80147f4:	d96e      	bls.n	80148d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	7bdb      	ldrb	r3, [r3, #15]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d106      	bne.n	801480c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014804:	3301      	adds	r3, #1
 8014806:	b2da      	uxtb	r2, r3
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	7b1a      	ldrb	r2, [r3, #12]
 8014816:	7b5b      	ldrb	r3, [r3, #13]
 8014818:	021b      	lsls	r3, r3, #8
 801481a:	4313      	orrs	r3, r2
 801481c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	f003 0301 	and.w	r3, r3, #1
 8014826:	2b00      	cmp	r3, #0
 8014828:	d023      	beq.n	8014872 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	2b01      	cmp	r3, #1
 8014830:	d10f      	bne.n	8014852 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	785b      	ldrb	r3, [r3, #1]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d11b      	bne.n	8014872 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801483e:	2b5e      	cmp	r3, #94	; 0x5e
 8014840:	d117      	bne.n	8014872 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	7b5b      	ldrb	r3, [r3, #13]
 8014846:	f043 0310 	orr.w	r3, r3, #16
 801484a:	b2da      	uxtb	r2, r3
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	735a      	strb	r2, [r3, #13]
 8014850:	e00f      	b.n	8014872 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	2206      	movs	r2, #6
 8014856:	4928      	ldr	r1, [pc, #160]	; (80148f8 <ethernet_input+0x118>)
 8014858:	4618      	mov	r0, r3
 801485a:	f000 fb6a 	bl	8014f32 <memcmp>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d106      	bne.n	8014872 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	7b5b      	ldrb	r3, [r3, #13]
 8014868:	f043 0308 	orr.w	r3, r3, #8
 801486c:	b2da      	uxtb	r2, r3
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014872:	89fb      	ldrh	r3, [r7, #14]
 8014874:	2b08      	cmp	r3, #8
 8014876:	d003      	beq.n	8014880 <ethernet_input+0xa0>
 8014878:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801487c:	d014      	beq.n	80148a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801487e:	e032      	b.n	80148e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014886:	f003 0308 	and.w	r3, r3, #8
 801488a:	2b00      	cmp	r3, #0
 801488c:	d024      	beq.n	80148d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801488e:	8afb      	ldrh	r3, [r7, #22]
 8014890:	4619      	mov	r1, r3
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f7f7 f89e 	bl	800b9d4 <pbuf_remove_header>
 8014898:	4603      	mov	r3, r0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d11e      	bne.n	80148dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801489e:	6839      	ldr	r1, [r7, #0]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7fe ff2b 	bl	80136fc <ip4_input>
      break;
 80148a6:	e013      	b.n	80148d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148ae:	f003 0308 	and.w	r3, r3, #8
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d014      	beq.n	80148e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80148b6:	8afb      	ldrh	r3, [r7, #22]
 80148b8:	4619      	mov	r1, r3
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f7f7 f88a 	bl	800b9d4 <pbuf_remove_header>
 80148c0:	4603      	mov	r3, r0
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d10e      	bne.n	80148e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80148c6:	6839      	ldr	r1, [r7, #0]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f7fe f8cb 	bl	8012a64 <etharp_input>
      break;
 80148ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80148d0:	2300      	movs	r3, #0
 80148d2:	e00c      	b.n	80148ee <ethernet_input+0x10e>
    goto free_and_return;
 80148d4:	bf00      	nop
 80148d6:	e006      	b.n	80148e6 <ethernet_input+0x106>
        goto free_and_return;
 80148d8:	bf00      	nop
 80148da:	e004      	b.n	80148e6 <ethernet_input+0x106>
        goto free_and_return;
 80148dc:	bf00      	nop
 80148de:	e002      	b.n	80148e6 <ethernet_input+0x106>
        goto free_and_return;
 80148e0:	bf00      	nop
 80148e2:	e000      	b.n	80148e6 <ethernet_input+0x106>
        goto free_and_return;
 80148e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f7f7 f8fa 	bl	800bae0 <pbuf_free>
  return ERR_OK;
 80148ec:	2300      	movs	r3, #0
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3718      	adds	r7, #24
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
 80148f6:	bf00      	nop
 80148f8:	0801905c 	.word	0x0801905c

080148fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b086      	sub	sp, #24
 8014900:	af00      	add	r7, sp, #0
 8014902:	60f8      	str	r0, [r7, #12]
 8014904:	60b9      	str	r1, [r7, #8]
 8014906:	607a      	str	r2, [r7, #4]
 8014908:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801490a:	8c3b      	ldrh	r3, [r7, #32]
 801490c:	4618      	mov	r0, r3
 801490e:	f7f5 fcfb 	bl	800a308 <lwip_htons>
 8014912:	4603      	mov	r3, r0
 8014914:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014916:	210e      	movs	r1, #14
 8014918:	68b8      	ldr	r0, [r7, #8]
 801491a:	f7f7 f84b 	bl	800b9b4 <pbuf_add_header>
 801491e:	4603      	mov	r3, r0
 8014920:	2b00      	cmp	r3, #0
 8014922:	d125      	bne.n	8014970 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	8afa      	ldrh	r2, [r7, #22]
 801492e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	2206      	movs	r2, #6
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	4618      	mov	r0, r3
 8014938:	f000 fb0b 	bl	8014f52 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801493c:	693b      	ldr	r3, [r7, #16]
 801493e:	3306      	adds	r3, #6
 8014940:	2206      	movs	r2, #6
 8014942:	6879      	ldr	r1, [r7, #4]
 8014944:	4618      	mov	r0, r3
 8014946:	f000 fb04 	bl	8014f52 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014950:	2b06      	cmp	r3, #6
 8014952:	d006      	beq.n	8014962 <ethernet_output+0x66>
 8014954:	4b0a      	ldr	r3, [pc, #40]	; (8014980 <ethernet_output+0x84>)
 8014956:	f44f 7299 	mov.w	r2, #306	; 0x132
 801495a:	490a      	ldr	r1, [pc, #40]	; (8014984 <ethernet_output+0x88>)
 801495c:	480a      	ldr	r0, [pc, #40]	; (8014988 <ethernet_output+0x8c>)
 801495e:	f000 fba3 	bl	80150a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	699b      	ldr	r3, [r3, #24]
 8014966:	68b9      	ldr	r1, [r7, #8]
 8014968:	68f8      	ldr	r0, [r7, #12]
 801496a:	4798      	blx	r3
 801496c:	4603      	mov	r3, r0
 801496e:	e002      	b.n	8014976 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014970:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014972:	f06f 0301 	mvn.w	r3, #1
}
 8014976:	4618      	mov	r0, r3
 8014978:	3718      	adds	r7, #24
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	08018e78 	.word	0x08018e78
 8014984:	08018eb0 	.word	0x08018eb0
 8014988:	08018ee4 	.word	0x08018ee4

0801498c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	2200      	movs	r2, #0
 801499a:	2104      	movs	r1, #4
 801499c:	4618      	mov	r0, r3
 801499e:	f7f0 fb95 	bl	80050cc <osMessageQueueNew>
 80149a2:	4602      	mov	r2, r0
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d102      	bne.n	80149b6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80149b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149b4:	e000      	b.n	80149b8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}

080149c0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7f0 fce9 	bl	80053a4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7f0 fd16 	bl	8005408 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80149dc:	bf00      	nop
 80149de:	3708      	adds	r7, #8
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6818      	ldr	r0, [r3, #0]
 80149f2:	4639      	mov	r1, r7
 80149f4:	2300      	movs	r3, #0
 80149f6:	2200      	movs	r2, #0
 80149f8:	f7f0 fbee 	bl	80051d8 <osMessageQueuePut>
 80149fc:	4603      	mov	r3, r0
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d102      	bne.n	8014a08 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8014a02:	2300      	movs	r3, #0
 8014a04:	73fb      	strb	r3, [r7, #15]
 8014a06:	e001      	b.n	8014a0c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014a08:	23ff      	movs	r3, #255	; 0xff
 8014a0a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3710      	adds	r7, #16
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014a24:	f7ef ff7e 	bl	8004924 <osKernelGetTickCount>
 8014a28:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d013      	beq.n	8014a58 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	6818      	ldr	r0, [r3, #0]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2200      	movs	r2, #0
 8014a38:	68b9      	ldr	r1, [r7, #8]
 8014a3a:	f7f0 fc41 	bl	80052c0 <osMessageQueueGet>
 8014a3e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d105      	bne.n	8014a52 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8014a46:	f7ef ff6d 	bl	8004924 <osKernelGetTickCount>
 8014a4a:	4602      	mov	r2, r0
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	1ad3      	subs	r3, r2, r3
 8014a50:	e00f      	b.n	8014a72 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a56:	e00c      	b.n	8014a72 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	6818      	ldr	r0, [r3, #0]
 8014a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a60:	2200      	movs	r2, #0
 8014a62:	68b9      	ldr	r1, [r7, #8]
 8014a64:	f7f0 fc2c 	bl	80052c0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014a68:	f7ef ff5c 	bl	8004924 <osKernelGetTickCount>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3718      	adds	r7, #24
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}

08014a7a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b082      	sub	sp, #8
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
 8014a82:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6818      	ldr	r0, [r3, #0]
 8014a88:	2300      	movs	r3, #0
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	6839      	ldr	r1, [r7, #0]
 8014a8e:	f7f0 fc17 	bl	80052c0 <osMessageQueueGet>
 8014a92:	4603      	mov	r3, r0
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d101      	bne.n	8014a9c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	e001      	b.n	8014aa0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3708      	adds	r7, #8
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d101      	bne.n	8014abc <sys_mbox_valid+0x14>
    return 0;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	e000      	b.n	8014abe <sys_mbox_valid+0x16>
  else
    return 1;
 8014abc:	2301      	movs	r3, #1
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	370c      	adds	r7, #12
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac8:	4770      	bx	lr

08014aca <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014aca:	b480      	push	{r7}
 8014acc:	b083      	sub	sp, #12
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]
}
 8014ad8:	bf00      	nop
 8014ada:	370c      	adds	r7, #12
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr

08014ae4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	460b      	mov	r3, r1
 8014aee:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8014af0:	78fb      	ldrb	r3, [r7, #3]
 8014af2:	2200      	movs	r2, #0
 8014af4:	4619      	mov	r1, r3
 8014af6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014afa:	f7f0 f957 	bl	8004dac <osSemaphoreNew>
 8014afe:	4602      	mov	r2, r0
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d102      	bne.n	8014b12 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b10:	e009      	b.n	8014b26 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8014b12:	78fb      	ldrb	r3, [r7, #3]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d105      	bne.n	8014b24 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2100      	movs	r1, #0
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7f0 f9e0 	bl	8004ee4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014b24:	2300      	movs	r3, #0
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	3708      	adds	r7, #8
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}

08014b2e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014b2e:	b580      	push	{r7, lr}
 8014b30:	b084      	sub	sp, #16
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
 8014b36:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8014b38:	f7ef fef4 	bl	8004924 <osKernelGetTickCount>
 8014b3c:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d011      	beq.n	8014b68 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	6839      	ldr	r1, [r7, #0]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7f0 f9ca 	bl	8004ee4 <osSemaphoreAcquire>
 8014b50:	4603      	mov	r3, r0
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d105      	bne.n	8014b62 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8014b56:	f7ef fee5 	bl	8004924 <osKernelGetTickCount>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	e012      	b.n	8014b88 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b66:	e00f      	b.n	8014b88 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8014b68:	bf00      	nop
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7f0 f9b6 	bl	8004ee4 <osSemaphoreAcquire>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d1f5      	bne.n	8014b6a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8014b7e:	f7ef fed1 	bl	8004924 <osKernelGetTickCount>
 8014b82:	4602      	mov	r2, r0
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7f0 fa07 	bl	8004fb0 <osSemaphoreRelease>
}
 8014ba2:	bf00      	nop
 8014ba4:	3708      	adds	r7, #8
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}

08014baa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8014baa:	b580      	push	{r7, lr}
 8014bac:	b082      	sub	sp, #8
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7f0 fa52 	bl	8005060 <osSemaphoreDelete>
}
 8014bbc:	bf00      	nop
 8014bbe:	3708      	adds	r7, #8
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d101      	bne.n	8014bd8 <sys_sem_valid+0x14>
    return 0;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	e000      	b.n	8014bda <sys_sem_valid+0x16>
  else
    return 1;
 8014bd8:	2301      	movs	r3, #1
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	370c      	adds	r7, #12
 8014bde:	46bd      	mov	sp, r7
 8014be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be4:	4770      	bx	lr

08014be6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8014be6:	b480      	push	{r7}
 8014be8:	b083      	sub	sp, #12
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	601a      	str	r2, [r3, #0]
}
 8014bf4:	bf00      	nop
 8014bf6:	370c      	adds	r7, #12
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr

08014c00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8014c04:	2000      	movs	r0, #0
 8014c06:	f7ef ff89 	bl	8004b1c <osMutexNew>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	4a01      	ldr	r2, [pc, #4]	; (8014c14 <sys_init+0x14>)
 8014c0e:	6013      	str	r3, [r2, #0]
#endif
}
 8014c10:	bf00      	nop
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	20011954 	.word	0x20011954

08014c18 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8014c20:	2000      	movs	r0, #0
 8014c22:	f7ef ff7b 	bl	8004b1c <osMutexNew>
 8014c26:	4602      	mov	r2, r0
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d102      	bne.n	8014c3a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c38:	e000      	b.n	8014c3c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014c3a:	2300      	movs	r3, #0
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3708      	adds	r7, #8
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014c54:	4618      	mov	r0, r3
 8014c56:	f7ef fffb 	bl	8004c50 <osMutexAcquire>
#endif
}
 8014c5a:	bf00      	nop
 8014c5c:	3708      	adds	r7, #8
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b082      	sub	sp, #8
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7f0 f84c 	bl	8004d0c <osMutexRelease>
}
 8014c74:	bf00      	nop
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b08e      	sub	sp, #56	; 0x38
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	607a      	str	r2, [r7, #4]
 8014c88:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8014c8a:	f107 0314 	add.w	r3, r7, #20
 8014c8e:	2224      	movs	r2, #36	; 0x24
 8014c90:	2100      	movs	r1, #0
 8014c92:	4618      	mov	r0, r3
 8014c94:	f000 f96b 	bl	8014f6e <memset>
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	617b      	str	r3, [r7, #20]
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014ca4:	f107 0314 	add.w	r3, r7, #20
 8014ca8:	461a      	mov	r2, r3
 8014caa:	6879      	ldr	r1, [r7, #4]
 8014cac:	68b8      	ldr	r0, [r7, #8]
 8014cae:	f7ef fe61 	bl	8004974 <osThreadNew>
 8014cb2:	4603      	mov	r3, r0
#endif
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3738      	adds	r7, #56	; 0x38
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8014cc0:	4b04      	ldr	r3, [pc, #16]	; (8014cd4 <sys_arch_protect+0x18>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7ef ffc1 	bl	8004c50 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8014cce:	2301      	movs	r3, #1
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	bd80      	pop	{r7, pc}
 8014cd4:	20011954 	.word	0x20011954

08014cd8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014ce0:	4b04      	ldr	r3, [pc, #16]	; (8014cf4 <sys_arch_unprotect+0x1c>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7f0 f811 	bl	8004d0c <osMutexRelease>
}
 8014cea:	bf00      	nop
 8014cec:	3708      	adds	r7, #8
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	20011954 	.word	0x20011954

08014cf8 <std>:
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	b510      	push	{r4, lr}
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8014d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d06:	6083      	str	r3, [r0, #8]
 8014d08:	8181      	strh	r1, [r0, #12]
 8014d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8014d0c:	81c2      	strh	r2, [r0, #14]
 8014d0e:	6183      	str	r3, [r0, #24]
 8014d10:	4619      	mov	r1, r3
 8014d12:	2208      	movs	r2, #8
 8014d14:	305c      	adds	r0, #92	; 0x5c
 8014d16:	f000 f92a 	bl	8014f6e <memset>
 8014d1a:	4b05      	ldr	r3, [pc, #20]	; (8014d30 <std+0x38>)
 8014d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8014d1e:	4b05      	ldr	r3, [pc, #20]	; (8014d34 <std+0x3c>)
 8014d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8014d22:	4b05      	ldr	r3, [pc, #20]	; (8014d38 <std+0x40>)
 8014d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014d26:	4b05      	ldr	r3, [pc, #20]	; (8014d3c <std+0x44>)
 8014d28:	6224      	str	r4, [r4, #32]
 8014d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8014d2c:	bd10      	pop	{r4, pc}
 8014d2e:	bf00      	nop
 8014d30:	08015249 	.word	0x08015249
 8014d34:	0801526b 	.word	0x0801526b
 8014d38:	080152a3 	.word	0x080152a3
 8014d3c:	080152c7 	.word	0x080152c7

08014d40 <_cleanup_r>:
 8014d40:	4901      	ldr	r1, [pc, #4]	; (8014d48 <_cleanup_r+0x8>)
 8014d42:	f000 b8af 	b.w	8014ea4 <_fwalk_reent>
 8014d46:	bf00      	nop
 8014d48:	0801545d 	.word	0x0801545d

08014d4c <__sfmoreglue>:
 8014d4c:	b570      	push	{r4, r5, r6, lr}
 8014d4e:	2268      	movs	r2, #104	; 0x68
 8014d50:	1e4d      	subs	r5, r1, #1
 8014d52:	4355      	muls	r5, r2
 8014d54:	460e      	mov	r6, r1
 8014d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014d5a:	f000 f931 	bl	8014fc0 <_malloc_r>
 8014d5e:	4604      	mov	r4, r0
 8014d60:	b140      	cbz	r0, 8014d74 <__sfmoreglue+0x28>
 8014d62:	2100      	movs	r1, #0
 8014d64:	e9c0 1600 	strd	r1, r6, [r0]
 8014d68:	300c      	adds	r0, #12
 8014d6a:	60a0      	str	r0, [r4, #8]
 8014d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014d70:	f000 f8fd 	bl	8014f6e <memset>
 8014d74:	4620      	mov	r0, r4
 8014d76:	bd70      	pop	{r4, r5, r6, pc}

08014d78 <__sfp_lock_acquire>:
 8014d78:	4801      	ldr	r0, [pc, #4]	; (8014d80 <__sfp_lock_acquire+0x8>)
 8014d7a:	f000 b8d8 	b.w	8014f2e <__retarget_lock_acquire_recursive>
 8014d7e:	bf00      	nop
 8014d80:	20011959 	.word	0x20011959

08014d84 <__sfp_lock_release>:
 8014d84:	4801      	ldr	r0, [pc, #4]	; (8014d8c <__sfp_lock_release+0x8>)
 8014d86:	f000 b8d3 	b.w	8014f30 <__retarget_lock_release_recursive>
 8014d8a:	bf00      	nop
 8014d8c:	20011959 	.word	0x20011959

08014d90 <__sinit_lock_acquire>:
 8014d90:	4801      	ldr	r0, [pc, #4]	; (8014d98 <__sinit_lock_acquire+0x8>)
 8014d92:	f000 b8cc 	b.w	8014f2e <__retarget_lock_acquire_recursive>
 8014d96:	bf00      	nop
 8014d98:	2001195a 	.word	0x2001195a

08014d9c <__sinit_lock_release>:
 8014d9c:	4801      	ldr	r0, [pc, #4]	; (8014da4 <__sinit_lock_release+0x8>)
 8014d9e:	f000 b8c7 	b.w	8014f30 <__retarget_lock_release_recursive>
 8014da2:	bf00      	nop
 8014da4:	2001195a 	.word	0x2001195a

08014da8 <__sinit>:
 8014da8:	b510      	push	{r4, lr}
 8014daa:	4604      	mov	r4, r0
 8014dac:	f7ff fff0 	bl	8014d90 <__sinit_lock_acquire>
 8014db0:	69a3      	ldr	r3, [r4, #24]
 8014db2:	b11b      	cbz	r3, 8014dbc <__sinit+0x14>
 8014db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014db8:	f7ff bff0 	b.w	8014d9c <__sinit_lock_release>
 8014dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8014dc2:	4b13      	ldr	r3, [pc, #76]	; (8014e10 <__sinit+0x68>)
 8014dc4:	4a13      	ldr	r2, [pc, #76]	; (8014e14 <__sinit+0x6c>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8014dca:	42a3      	cmp	r3, r4
 8014dcc:	bf04      	itt	eq
 8014dce:	2301      	moveq	r3, #1
 8014dd0:	61a3      	streq	r3, [r4, #24]
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	f000 f820 	bl	8014e18 <__sfp>
 8014dd8:	6060      	str	r0, [r4, #4]
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f000 f81c 	bl	8014e18 <__sfp>
 8014de0:	60a0      	str	r0, [r4, #8]
 8014de2:	4620      	mov	r0, r4
 8014de4:	f000 f818 	bl	8014e18 <__sfp>
 8014de8:	2200      	movs	r2, #0
 8014dea:	60e0      	str	r0, [r4, #12]
 8014dec:	2104      	movs	r1, #4
 8014dee:	6860      	ldr	r0, [r4, #4]
 8014df0:	f7ff ff82 	bl	8014cf8 <std>
 8014df4:	68a0      	ldr	r0, [r4, #8]
 8014df6:	2201      	movs	r2, #1
 8014df8:	2109      	movs	r1, #9
 8014dfa:	f7ff ff7d 	bl	8014cf8 <std>
 8014dfe:	68e0      	ldr	r0, [r4, #12]
 8014e00:	2202      	movs	r2, #2
 8014e02:	2112      	movs	r1, #18
 8014e04:	f7ff ff78 	bl	8014cf8 <std>
 8014e08:	2301      	movs	r3, #1
 8014e0a:	61a3      	str	r3, [r4, #24]
 8014e0c:	e7d2      	b.n	8014db4 <__sinit+0xc>
 8014e0e:	bf00      	nop
 8014e10:	080190cc 	.word	0x080190cc
 8014e14:	08014d41 	.word	0x08014d41

08014e18 <__sfp>:
 8014e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e1a:	4607      	mov	r7, r0
 8014e1c:	f7ff ffac 	bl	8014d78 <__sfp_lock_acquire>
 8014e20:	4b1e      	ldr	r3, [pc, #120]	; (8014e9c <__sfp+0x84>)
 8014e22:	681e      	ldr	r6, [r3, #0]
 8014e24:	69b3      	ldr	r3, [r6, #24]
 8014e26:	b913      	cbnz	r3, 8014e2e <__sfp+0x16>
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f7ff ffbd 	bl	8014da8 <__sinit>
 8014e2e:	3648      	adds	r6, #72	; 0x48
 8014e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014e34:	3b01      	subs	r3, #1
 8014e36:	d503      	bpl.n	8014e40 <__sfp+0x28>
 8014e38:	6833      	ldr	r3, [r6, #0]
 8014e3a:	b30b      	cbz	r3, 8014e80 <__sfp+0x68>
 8014e3c:	6836      	ldr	r6, [r6, #0]
 8014e3e:	e7f7      	b.n	8014e30 <__sfp+0x18>
 8014e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014e44:	b9d5      	cbnz	r5, 8014e7c <__sfp+0x64>
 8014e46:	4b16      	ldr	r3, [pc, #88]	; (8014ea0 <__sfp+0x88>)
 8014e48:	60e3      	str	r3, [r4, #12]
 8014e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8014e50:	f000 f86c 	bl	8014f2c <__retarget_lock_init_recursive>
 8014e54:	f7ff ff96 	bl	8014d84 <__sfp_lock_release>
 8014e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014e60:	6025      	str	r5, [r4, #0]
 8014e62:	61a5      	str	r5, [r4, #24]
 8014e64:	2208      	movs	r2, #8
 8014e66:	4629      	mov	r1, r5
 8014e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014e6c:	f000 f87f 	bl	8014f6e <memset>
 8014e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014e78:	4620      	mov	r0, r4
 8014e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e7c:	3468      	adds	r4, #104	; 0x68
 8014e7e:	e7d9      	b.n	8014e34 <__sfp+0x1c>
 8014e80:	2104      	movs	r1, #4
 8014e82:	4638      	mov	r0, r7
 8014e84:	f7ff ff62 	bl	8014d4c <__sfmoreglue>
 8014e88:	4604      	mov	r4, r0
 8014e8a:	6030      	str	r0, [r6, #0]
 8014e8c:	2800      	cmp	r0, #0
 8014e8e:	d1d5      	bne.n	8014e3c <__sfp+0x24>
 8014e90:	f7ff ff78 	bl	8014d84 <__sfp_lock_release>
 8014e94:	230c      	movs	r3, #12
 8014e96:	603b      	str	r3, [r7, #0]
 8014e98:	e7ee      	b.n	8014e78 <__sfp+0x60>
 8014e9a:	bf00      	nop
 8014e9c:	080190cc 	.word	0x080190cc
 8014ea0:	ffff0001 	.word	0xffff0001

08014ea4 <_fwalk_reent>:
 8014ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ea8:	4606      	mov	r6, r0
 8014eaa:	4688      	mov	r8, r1
 8014eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014eb0:	2700      	movs	r7, #0
 8014eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8014eba:	d505      	bpl.n	8014ec8 <_fwalk_reent+0x24>
 8014ebc:	6824      	ldr	r4, [r4, #0]
 8014ebe:	2c00      	cmp	r4, #0
 8014ec0:	d1f7      	bne.n	8014eb2 <_fwalk_reent+0xe>
 8014ec2:	4638      	mov	r0, r7
 8014ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ec8:	89ab      	ldrh	r3, [r5, #12]
 8014eca:	2b01      	cmp	r3, #1
 8014ecc:	d907      	bls.n	8014ede <_fwalk_reent+0x3a>
 8014ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	d003      	beq.n	8014ede <_fwalk_reent+0x3a>
 8014ed6:	4629      	mov	r1, r5
 8014ed8:	4630      	mov	r0, r6
 8014eda:	47c0      	blx	r8
 8014edc:	4307      	orrs	r7, r0
 8014ede:	3568      	adds	r5, #104	; 0x68
 8014ee0:	e7e9      	b.n	8014eb6 <_fwalk_reent+0x12>
	...

08014ee4 <__libc_init_array>:
 8014ee4:	b570      	push	{r4, r5, r6, lr}
 8014ee6:	4d0d      	ldr	r5, [pc, #52]	; (8014f1c <__libc_init_array+0x38>)
 8014ee8:	4c0d      	ldr	r4, [pc, #52]	; (8014f20 <__libc_init_array+0x3c>)
 8014eea:	1b64      	subs	r4, r4, r5
 8014eec:	10a4      	asrs	r4, r4, #2
 8014eee:	2600      	movs	r6, #0
 8014ef0:	42a6      	cmp	r6, r4
 8014ef2:	d109      	bne.n	8014f08 <__libc_init_array+0x24>
 8014ef4:	4d0b      	ldr	r5, [pc, #44]	; (8014f24 <__libc_init_array+0x40>)
 8014ef6:	4c0c      	ldr	r4, [pc, #48]	; (8014f28 <__libc_init_array+0x44>)
 8014ef8:	f001 f802 	bl	8015f00 <_init>
 8014efc:	1b64      	subs	r4, r4, r5
 8014efe:	10a4      	asrs	r4, r4, #2
 8014f00:	2600      	movs	r6, #0
 8014f02:	42a6      	cmp	r6, r4
 8014f04:	d105      	bne.n	8014f12 <__libc_init_array+0x2e>
 8014f06:	bd70      	pop	{r4, r5, r6, pc}
 8014f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f0c:	4798      	blx	r3
 8014f0e:	3601      	adds	r6, #1
 8014f10:	e7ee      	b.n	8014ef0 <__libc_init_array+0xc>
 8014f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f16:	4798      	blx	r3
 8014f18:	3601      	adds	r6, #1
 8014f1a:	e7f2      	b.n	8014f02 <__libc_init_array+0x1e>
 8014f1c:	080191bc 	.word	0x080191bc
 8014f20:	080191bc 	.word	0x080191bc
 8014f24:	080191bc 	.word	0x080191bc
 8014f28:	080191c0 	.word	0x080191c0

08014f2c <__retarget_lock_init_recursive>:
 8014f2c:	4770      	bx	lr

08014f2e <__retarget_lock_acquire_recursive>:
 8014f2e:	4770      	bx	lr

08014f30 <__retarget_lock_release_recursive>:
 8014f30:	4770      	bx	lr

08014f32 <memcmp>:
 8014f32:	b510      	push	{r4, lr}
 8014f34:	3901      	subs	r1, #1
 8014f36:	4402      	add	r2, r0
 8014f38:	4290      	cmp	r0, r2
 8014f3a:	d101      	bne.n	8014f40 <memcmp+0xe>
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	e005      	b.n	8014f4c <memcmp+0x1a>
 8014f40:	7803      	ldrb	r3, [r0, #0]
 8014f42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014f46:	42a3      	cmp	r3, r4
 8014f48:	d001      	beq.n	8014f4e <memcmp+0x1c>
 8014f4a:	1b18      	subs	r0, r3, r4
 8014f4c:	bd10      	pop	{r4, pc}
 8014f4e:	3001      	adds	r0, #1
 8014f50:	e7f2      	b.n	8014f38 <memcmp+0x6>

08014f52 <memcpy>:
 8014f52:	440a      	add	r2, r1
 8014f54:	4291      	cmp	r1, r2
 8014f56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014f5a:	d100      	bne.n	8014f5e <memcpy+0xc>
 8014f5c:	4770      	bx	lr
 8014f5e:	b510      	push	{r4, lr}
 8014f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f68:	4291      	cmp	r1, r2
 8014f6a:	d1f9      	bne.n	8014f60 <memcpy+0xe>
 8014f6c:	bd10      	pop	{r4, pc}

08014f6e <memset>:
 8014f6e:	4402      	add	r2, r0
 8014f70:	4603      	mov	r3, r0
 8014f72:	4293      	cmp	r3, r2
 8014f74:	d100      	bne.n	8014f78 <memset+0xa>
 8014f76:	4770      	bx	lr
 8014f78:	f803 1b01 	strb.w	r1, [r3], #1
 8014f7c:	e7f9      	b.n	8014f72 <memset+0x4>
	...

08014f80 <sbrk_aligned>:
 8014f80:	b570      	push	{r4, r5, r6, lr}
 8014f82:	4e0e      	ldr	r6, [pc, #56]	; (8014fbc <sbrk_aligned+0x3c>)
 8014f84:	460c      	mov	r4, r1
 8014f86:	6831      	ldr	r1, [r6, #0]
 8014f88:	4605      	mov	r5, r0
 8014f8a:	b911      	cbnz	r1, 8014f92 <sbrk_aligned+0x12>
 8014f8c:	f000 f94c 	bl	8015228 <_sbrk_r>
 8014f90:	6030      	str	r0, [r6, #0]
 8014f92:	4621      	mov	r1, r4
 8014f94:	4628      	mov	r0, r5
 8014f96:	f000 f947 	bl	8015228 <_sbrk_r>
 8014f9a:	1c43      	adds	r3, r0, #1
 8014f9c:	d00a      	beq.n	8014fb4 <sbrk_aligned+0x34>
 8014f9e:	1cc4      	adds	r4, r0, #3
 8014fa0:	f024 0403 	bic.w	r4, r4, #3
 8014fa4:	42a0      	cmp	r0, r4
 8014fa6:	d007      	beq.n	8014fb8 <sbrk_aligned+0x38>
 8014fa8:	1a21      	subs	r1, r4, r0
 8014faa:	4628      	mov	r0, r5
 8014fac:	f000 f93c 	bl	8015228 <_sbrk_r>
 8014fb0:	3001      	adds	r0, #1
 8014fb2:	d101      	bne.n	8014fb8 <sbrk_aligned+0x38>
 8014fb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014fb8:	4620      	mov	r0, r4
 8014fba:	bd70      	pop	{r4, r5, r6, pc}
 8014fbc:	20011960 	.word	0x20011960

08014fc0 <_malloc_r>:
 8014fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc4:	1ccd      	adds	r5, r1, #3
 8014fc6:	f025 0503 	bic.w	r5, r5, #3
 8014fca:	3508      	adds	r5, #8
 8014fcc:	2d0c      	cmp	r5, #12
 8014fce:	bf38      	it	cc
 8014fd0:	250c      	movcc	r5, #12
 8014fd2:	2d00      	cmp	r5, #0
 8014fd4:	4607      	mov	r7, r0
 8014fd6:	db01      	blt.n	8014fdc <_malloc_r+0x1c>
 8014fd8:	42a9      	cmp	r1, r5
 8014fda:	d905      	bls.n	8014fe8 <_malloc_r+0x28>
 8014fdc:	230c      	movs	r3, #12
 8014fde:	603b      	str	r3, [r7, #0]
 8014fe0:	2600      	movs	r6, #0
 8014fe2:	4630      	mov	r0, r6
 8014fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe8:	4e2e      	ldr	r6, [pc, #184]	; (80150a4 <_malloc_r+0xe4>)
 8014fea:	f000 fa9f 	bl	801552c <__malloc_lock>
 8014fee:	6833      	ldr	r3, [r6, #0]
 8014ff0:	461c      	mov	r4, r3
 8014ff2:	bb34      	cbnz	r4, 8015042 <_malloc_r+0x82>
 8014ff4:	4629      	mov	r1, r5
 8014ff6:	4638      	mov	r0, r7
 8014ff8:	f7ff ffc2 	bl	8014f80 <sbrk_aligned>
 8014ffc:	1c43      	adds	r3, r0, #1
 8014ffe:	4604      	mov	r4, r0
 8015000:	d14d      	bne.n	801509e <_malloc_r+0xde>
 8015002:	6834      	ldr	r4, [r6, #0]
 8015004:	4626      	mov	r6, r4
 8015006:	2e00      	cmp	r6, #0
 8015008:	d140      	bne.n	801508c <_malloc_r+0xcc>
 801500a:	6823      	ldr	r3, [r4, #0]
 801500c:	4631      	mov	r1, r6
 801500e:	4638      	mov	r0, r7
 8015010:	eb04 0803 	add.w	r8, r4, r3
 8015014:	f000 f908 	bl	8015228 <_sbrk_r>
 8015018:	4580      	cmp	r8, r0
 801501a:	d13a      	bne.n	8015092 <_malloc_r+0xd2>
 801501c:	6821      	ldr	r1, [r4, #0]
 801501e:	3503      	adds	r5, #3
 8015020:	1a6d      	subs	r5, r5, r1
 8015022:	f025 0503 	bic.w	r5, r5, #3
 8015026:	3508      	adds	r5, #8
 8015028:	2d0c      	cmp	r5, #12
 801502a:	bf38      	it	cc
 801502c:	250c      	movcc	r5, #12
 801502e:	4629      	mov	r1, r5
 8015030:	4638      	mov	r0, r7
 8015032:	f7ff ffa5 	bl	8014f80 <sbrk_aligned>
 8015036:	3001      	adds	r0, #1
 8015038:	d02b      	beq.n	8015092 <_malloc_r+0xd2>
 801503a:	6823      	ldr	r3, [r4, #0]
 801503c:	442b      	add	r3, r5
 801503e:	6023      	str	r3, [r4, #0]
 8015040:	e00e      	b.n	8015060 <_malloc_r+0xa0>
 8015042:	6822      	ldr	r2, [r4, #0]
 8015044:	1b52      	subs	r2, r2, r5
 8015046:	d41e      	bmi.n	8015086 <_malloc_r+0xc6>
 8015048:	2a0b      	cmp	r2, #11
 801504a:	d916      	bls.n	801507a <_malloc_r+0xba>
 801504c:	1961      	adds	r1, r4, r5
 801504e:	42a3      	cmp	r3, r4
 8015050:	6025      	str	r5, [r4, #0]
 8015052:	bf18      	it	ne
 8015054:	6059      	strne	r1, [r3, #4]
 8015056:	6863      	ldr	r3, [r4, #4]
 8015058:	bf08      	it	eq
 801505a:	6031      	streq	r1, [r6, #0]
 801505c:	5162      	str	r2, [r4, r5]
 801505e:	604b      	str	r3, [r1, #4]
 8015060:	4638      	mov	r0, r7
 8015062:	f104 060b 	add.w	r6, r4, #11
 8015066:	f000 fa67 	bl	8015538 <__malloc_unlock>
 801506a:	f026 0607 	bic.w	r6, r6, #7
 801506e:	1d23      	adds	r3, r4, #4
 8015070:	1af2      	subs	r2, r6, r3
 8015072:	d0b6      	beq.n	8014fe2 <_malloc_r+0x22>
 8015074:	1b9b      	subs	r3, r3, r6
 8015076:	50a3      	str	r3, [r4, r2]
 8015078:	e7b3      	b.n	8014fe2 <_malloc_r+0x22>
 801507a:	6862      	ldr	r2, [r4, #4]
 801507c:	42a3      	cmp	r3, r4
 801507e:	bf0c      	ite	eq
 8015080:	6032      	streq	r2, [r6, #0]
 8015082:	605a      	strne	r2, [r3, #4]
 8015084:	e7ec      	b.n	8015060 <_malloc_r+0xa0>
 8015086:	4623      	mov	r3, r4
 8015088:	6864      	ldr	r4, [r4, #4]
 801508a:	e7b2      	b.n	8014ff2 <_malloc_r+0x32>
 801508c:	4634      	mov	r4, r6
 801508e:	6876      	ldr	r6, [r6, #4]
 8015090:	e7b9      	b.n	8015006 <_malloc_r+0x46>
 8015092:	230c      	movs	r3, #12
 8015094:	603b      	str	r3, [r7, #0]
 8015096:	4638      	mov	r0, r7
 8015098:	f000 fa4e 	bl	8015538 <__malloc_unlock>
 801509c:	e7a1      	b.n	8014fe2 <_malloc_r+0x22>
 801509e:	6025      	str	r5, [r4, #0]
 80150a0:	e7de      	b.n	8015060 <_malloc_r+0xa0>
 80150a2:	bf00      	nop
 80150a4:	2001195c 	.word	0x2001195c

080150a8 <iprintf>:
 80150a8:	b40f      	push	{r0, r1, r2, r3}
 80150aa:	4b0a      	ldr	r3, [pc, #40]	; (80150d4 <iprintf+0x2c>)
 80150ac:	b513      	push	{r0, r1, r4, lr}
 80150ae:	681c      	ldr	r4, [r3, #0]
 80150b0:	b124      	cbz	r4, 80150bc <iprintf+0x14>
 80150b2:	69a3      	ldr	r3, [r4, #24]
 80150b4:	b913      	cbnz	r3, 80150bc <iprintf+0x14>
 80150b6:	4620      	mov	r0, r4
 80150b8:	f7ff fe76 	bl	8014da8 <__sinit>
 80150bc:	ab05      	add	r3, sp, #20
 80150be:	9a04      	ldr	r2, [sp, #16]
 80150c0:	68a1      	ldr	r1, [r4, #8]
 80150c2:	9301      	str	r3, [sp, #4]
 80150c4:	4620      	mov	r0, r4
 80150c6:	f000 fab3 	bl	8015630 <_vfiprintf_r>
 80150ca:	b002      	add	sp, #8
 80150cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150d0:	b004      	add	sp, #16
 80150d2:	4770      	bx	lr
 80150d4:	2000002c 	.word	0x2000002c

080150d8 <rand>:
 80150d8:	4b16      	ldr	r3, [pc, #88]	; (8015134 <rand+0x5c>)
 80150da:	b510      	push	{r4, lr}
 80150dc:	681c      	ldr	r4, [r3, #0]
 80150de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80150e0:	b9b3      	cbnz	r3, 8015110 <rand+0x38>
 80150e2:	2018      	movs	r0, #24
 80150e4:	f000 fa1a 	bl	801551c <malloc>
 80150e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80150ea:	b928      	cbnz	r0, 80150f8 <rand+0x20>
 80150ec:	4602      	mov	r2, r0
 80150ee:	4b12      	ldr	r3, [pc, #72]	; (8015138 <rand+0x60>)
 80150f0:	4812      	ldr	r0, [pc, #72]	; (801513c <rand+0x64>)
 80150f2:	214e      	movs	r1, #78	; 0x4e
 80150f4:	f000 f8fe 	bl	80152f4 <__assert_func>
 80150f8:	4a11      	ldr	r2, [pc, #68]	; (8015140 <rand+0x68>)
 80150fa:	4b12      	ldr	r3, [pc, #72]	; (8015144 <rand+0x6c>)
 80150fc:	e9c0 2300 	strd	r2, r3, [r0]
 8015100:	4b11      	ldr	r3, [pc, #68]	; (8015148 <rand+0x70>)
 8015102:	6083      	str	r3, [r0, #8]
 8015104:	230b      	movs	r3, #11
 8015106:	8183      	strh	r3, [r0, #12]
 8015108:	2201      	movs	r2, #1
 801510a:	2300      	movs	r3, #0
 801510c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015110:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015112:	4a0e      	ldr	r2, [pc, #56]	; (801514c <rand+0x74>)
 8015114:	6920      	ldr	r0, [r4, #16]
 8015116:	6963      	ldr	r3, [r4, #20]
 8015118:	490d      	ldr	r1, [pc, #52]	; (8015150 <rand+0x78>)
 801511a:	4342      	muls	r2, r0
 801511c:	fb01 2203 	mla	r2, r1, r3, r2
 8015120:	fba0 0101 	umull	r0, r1, r0, r1
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	eb42 0001 	adc.w	r0, r2, r1
 801512a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801512e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015132:	bd10      	pop	{r4, pc}
 8015134:	2000002c 	.word	0x2000002c
 8015138:	080190d0 	.word	0x080190d0
 801513c:	080190e7 	.word	0x080190e7
 8015140:	abcd330e 	.word	0xabcd330e
 8015144:	e66d1234 	.word	0xe66d1234
 8015148:	0005deec 	.word	0x0005deec
 801514c:	5851f42d 	.word	0x5851f42d
 8015150:	4c957f2d 	.word	0x4c957f2d

08015154 <cleanup_glue>:
 8015154:	b538      	push	{r3, r4, r5, lr}
 8015156:	460c      	mov	r4, r1
 8015158:	6809      	ldr	r1, [r1, #0]
 801515a:	4605      	mov	r5, r0
 801515c:	b109      	cbz	r1, 8015162 <cleanup_glue+0xe>
 801515e:	f7ff fff9 	bl	8015154 <cleanup_glue>
 8015162:	4621      	mov	r1, r4
 8015164:	4628      	mov	r0, r5
 8015166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801516a:	f000 b9eb 	b.w	8015544 <_free_r>
	...

08015170 <_reclaim_reent>:
 8015170:	4b2c      	ldr	r3, [pc, #176]	; (8015224 <_reclaim_reent+0xb4>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4283      	cmp	r3, r0
 8015176:	b570      	push	{r4, r5, r6, lr}
 8015178:	4604      	mov	r4, r0
 801517a:	d051      	beq.n	8015220 <_reclaim_reent+0xb0>
 801517c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801517e:	b143      	cbz	r3, 8015192 <_reclaim_reent+0x22>
 8015180:	68db      	ldr	r3, [r3, #12]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d14a      	bne.n	801521c <_reclaim_reent+0xac>
 8015186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015188:	6819      	ldr	r1, [r3, #0]
 801518a:	b111      	cbz	r1, 8015192 <_reclaim_reent+0x22>
 801518c:	4620      	mov	r0, r4
 801518e:	f000 f9d9 	bl	8015544 <_free_r>
 8015192:	6961      	ldr	r1, [r4, #20]
 8015194:	b111      	cbz	r1, 801519c <_reclaim_reent+0x2c>
 8015196:	4620      	mov	r0, r4
 8015198:	f000 f9d4 	bl	8015544 <_free_r>
 801519c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801519e:	b111      	cbz	r1, 80151a6 <_reclaim_reent+0x36>
 80151a0:	4620      	mov	r0, r4
 80151a2:	f000 f9cf 	bl	8015544 <_free_r>
 80151a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80151a8:	b111      	cbz	r1, 80151b0 <_reclaim_reent+0x40>
 80151aa:	4620      	mov	r0, r4
 80151ac:	f000 f9ca 	bl	8015544 <_free_r>
 80151b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80151b2:	b111      	cbz	r1, 80151ba <_reclaim_reent+0x4a>
 80151b4:	4620      	mov	r0, r4
 80151b6:	f000 f9c5 	bl	8015544 <_free_r>
 80151ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80151bc:	b111      	cbz	r1, 80151c4 <_reclaim_reent+0x54>
 80151be:	4620      	mov	r0, r4
 80151c0:	f000 f9c0 	bl	8015544 <_free_r>
 80151c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80151c6:	b111      	cbz	r1, 80151ce <_reclaim_reent+0x5e>
 80151c8:	4620      	mov	r0, r4
 80151ca:	f000 f9bb 	bl	8015544 <_free_r>
 80151ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80151d0:	b111      	cbz	r1, 80151d8 <_reclaim_reent+0x68>
 80151d2:	4620      	mov	r0, r4
 80151d4:	f000 f9b6 	bl	8015544 <_free_r>
 80151d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151da:	b111      	cbz	r1, 80151e2 <_reclaim_reent+0x72>
 80151dc:	4620      	mov	r0, r4
 80151de:	f000 f9b1 	bl	8015544 <_free_r>
 80151e2:	69a3      	ldr	r3, [r4, #24]
 80151e4:	b1e3      	cbz	r3, 8015220 <_reclaim_reent+0xb0>
 80151e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80151e8:	4620      	mov	r0, r4
 80151ea:	4798      	blx	r3
 80151ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80151ee:	b1b9      	cbz	r1, 8015220 <_reclaim_reent+0xb0>
 80151f0:	4620      	mov	r0, r4
 80151f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151f6:	f7ff bfad 	b.w	8015154 <cleanup_glue>
 80151fa:	5949      	ldr	r1, [r1, r5]
 80151fc:	b941      	cbnz	r1, 8015210 <_reclaim_reent+0xa0>
 80151fe:	3504      	adds	r5, #4
 8015200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015202:	2d80      	cmp	r5, #128	; 0x80
 8015204:	68d9      	ldr	r1, [r3, #12]
 8015206:	d1f8      	bne.n	80151fa <_reclaim_reent+0x8a>
 8015208:	4620      	mov	r0, r4
 801520a:	f000 f99b 	bl	8015544 <_free_r>
 801520e:	e7ba      	b.n	8015186 <_reclaim_reent+0x16>
 8015210:	680e      	ldr	r6, [r1, #0]
 8015212:	4620      	mov	r0, r4
 8015214:	f000 f996 	bl	8015544 <_free_r>
 8015218:	4631      	mov	r1, r6
 801521a:	e7ef      	b.n	80151fc <_reclaim_reent+0x8c>
 801521c:	2500      	movs	r5, #0
 801521e:	e7ef      	b.n	8015200 <_reclaim_reent+0x90>
 8015220:	bd70      	pop	{r4, r5, r6, pc}
 8015222:	bf00      	nop
 8015224:	2000002c 	.word	0x2000002c

08015228 <_sbrk_r>:
 8015228:	b538      	push	{r3, r4, r5, lr}
 801522a:	4d06      	ldr	r5, [pc, #24]	; (8015244 <_sbrk_r+0x1c>)
 801522c:	2300      	movs	r3, #0
 801522e:	4604      	mov	r4, r0
 8015230:	4608      	mov	r0, r1
 8015232:	602b      	str	r3, [r5, #0]
 8015234:	f7eb fc82 	bl	8000b3c <_sbrk>
 8015238:	1c43      	adds	r3, r0, #1
 801523a:	d102      	bne.n	8015242 <_sbrk_r+0x1a>
 801523c:	682b      	ldr	r3, [r5, #0]
 801523e:	b103      	cbz	r3, 8015242 <_sbrk_r+0x1a>
 8015240:	6023      	str	r3, [r4, #0]
 8015242:	bd38      	pop	{r3, r4, r5, pc}
 8015244:	20011964 	.word	0x20011964

08015248 <__sread>:
 8015248:	b510      	push	{r4, lr}
 801524a:	460c      	mov	r4, r1
 801524c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015250:	f000 fcb2 	bl	8015bb8 <_read_r>
 8015254:	2800      	cmp	r0, #0
 8015256:	bfab      	itete	ge
 8015258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801525a:	89a3      	ldrhlt	r3, [r4, #12]
 801525c:	181b      	addge	r3, r3, r0
 801525e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015262:	bfac      	ite	ge
 8015264:	6563      	strge	r3, [r4, #84]	; 0x54
 8015266:	81a3      	strhlt	r3, [r4, #12]
 8015268:	bd10      	pop	{r4, pc}

0801526a <__swrite>:
 801526a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801526e:	461f      	mov	r7, r3
 8015270:	898b      	ldrh	r3, [r1, #12]
 8015272:	05db      	lsls	r3, r3, #23
 8015274:	4605      	mov	r5, r0
 8015276:	460c      	mov	r4, r1
 8015278:	4616      	mov	r6, r2
 801527a:	d505      	bpl.n	8015288 <__swrite+0x1e>
 801527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015280:	2302      	movs	r3, #2
 8015282:	2200      	movs	r2, #0
 8015284:	f000 f938 	bl	80154f8 <_lseek_r>
 8015288:	89a3      	ldrh	r3, [r4, #12]
 801528a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801528e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015292:	81a3      	strh	r3, [r4, #12]
 8015294:	4632      	mov	r2, r6
 8015296:	463b      	mov	r3, r7
 8015298:	4628      	mov	r0, r5
 801529a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801529e:	f000 b817 	b.w	80152d0 <_write_r>

080152a2 <__sseek>:
 80152a2:	b510      	push	{r4, lr}
 80152a4:	460c      	mov	r4, r1
 80152a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152aa:	f000 f925 	bl	80154f8 <_lseek_r>
 80152ae:	1c43      	adds	r3, r0, #1
 80152b0:	89a3      	ldrh	r3, [r4, #12]
 80152b2:	bf15      	itete	ne
 80152b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80152b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80152ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80152be:	81a3      	strheq	r3, [r4, #12]
 80152c0:	bf18      	it	ne
 80152c2:	81a3      	strhne	r3, [r4, #12]
 80152c4:	bd10      	pop	{r4, pc}

080152c6 <__sclose>:
 80152c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152ca:	f000 b831 	b.w	8015330 <_close_r>
	...

080152d0 <_write_r>:
 80152d0:	b538      	push	{r3, r4, r5, lr}
 80152d2:	4d07      	ldr	r5, [pc, #28]	; (80152f0 <_write_r+0x20>)
 80152d4:	4604      	mov	r4, r0
 80152d6:	4608      	mov	r0, r1
 80152d8:	4611      	mov	r1, r2
 80152da:	2200      	movs	r2, #0
 80152dc:	602a      	str	r2, [r5, #0]
 80152de:	461a      	mov	r2, r3
 80152e0:	f7eb fbdb 	bl	8000a9a <_write>
 80152e4:	1c43      	adds	r3, r0, #1
 80152e6:	d102      	bne.n	80152ee <_write_r+0x1e>
 80152e8:	682b      	ldr	r3, [r5, #0]
 80152ea:	b103      	cbz	r3, 80152ee <_write_r+0x1e>
 80152ec:	6023      	str	r3, [r4, #0]
 80152ee:	bd38      	pop	{r3, r4, r5, pc}
 80152f0:	20011964 	.word	0x20011964

080152f4 <__assert_func>:
 80152f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152f6:	4614      	mov	r4, r2
 80152f8:	461a      	mov	r2, r3
 80152fa:	4b09      	ldr	r3, [pc, #36]	; (8015320 <__assert_func+0x2c>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	4605      	mov	r5, r0
 8015300:	68d8      	ldr	r0, [r3, #12]
 8015302:	b14c      	cbz	r4, 8015318 <__assert_func+0x24>
 8015304:	4b07      	ldr	r3, [pc, #28]	; (8015324 <__assert_func+0x30>)
 8015306:	9100      	str	r1, [sp, #0]
 8015308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801530c:	4906      	ldr	r1, [pc, #24]	; (8015328 <__assert_func+0x34>)
 801530e:	462b      	mov	r3, r5
 8015310:	f000 f8e0 	bl	80154d4 <fiprintf>
 8015314:	f000 fd22 	bl	8015d5c <abort>
 8015318:	4b04      	ldr	r3, [pc, #16]	; (801532c <__assert_func+0x38>)
 801531a:	461c      	mov	r4, r3
 801531c:	e7f3      	b.n	8015306 <__assert_func+0x12>
 801531e:	bf00      	nop
 8015320:	2000002c 	.word	0x2000002c
 8015324:	08019142 	.word	0x08019142
 8015328:	0801914f 	.word	0x0801914f
 801532c:	0801917d 	.word	0x0801917d

08015330 <_close_r>:
 8015330:	b538      	push	{r3, r4, r5, lr}
 8015332:	4d06      	ldr	r5, [pc, #24]	; (801534c <_close_r+0x1c>)
 8015334:	2300      	movs	r3, #0
 8015336:	4604      	mov	r4, r0
 8015338:	4608      	mov	r0, r1
 801533a:	602b      	str	r3, [r5, #0]
 801533c:	f7eb fbc9 	bl	8000ad2 <_close>
 8015340:	1c43      	adds	r3, r0, #1
 8015342:	d102      	bne.n	801534a <_close_r+0x1a>
 8015344:	682b      	ldr	r3, [r5, #0]
 8015346:	b103      	cbz	r3, 801534a <_close_r+0x1a>
 8015348:	6023      	str	r3, [r4, #0]
 801534a:	bd38      	pop	{r3, r4, r5, pc}
 801534c:	20011964 	.word	0x20011964

08015350 <__sflush_r>:
 8015350:	898a      	ldrh	r2, [r1, #12]
 8015352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015356:	4605      	mov	r5, r0
 8015358:	0710      	lsls	r0, r2, #28
 801535a:	460c      	mov	r4, r1
 801535c:	d458      	bmi.n	8015410 <__sflush_r+0xc0>
 801535e:	684b      	ldr	r3, [r1, #4]
 8015360:	2b00      	cmp	r3, #0
 8015362:	dc05      	bgt.n	8015370 <__sflush_r+0x20>
 8015364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015366:	2b00      	cmp	r3, #0
 8015368:	dc02      	bgt.n	8015370 <__sflush_r+0x20>
 801536a:	2000      	movs	r0, #0
 801536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015372:	2e00      	cmp	r6, #0
 8015374:	d0f9      	beq.n	801536a <__sflush_r+0x1a>
 8015376:	2300      	movs	r3, #0
 8015378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801537c:	682f      	ldr	r7, [r5, #0]
 801537e:	602b      	str	r3, [r5, #0]
 8015380:	d032      	beq.n	80153e8 <__sflush_r+0x98>
 8015382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015384:	89a3      	ldrh	r3, [r4, #12]
 8015386:	075a      	lsls	r2, r3, #29
 8015388:	d505      	bpl.n	8015396 <__sflush_r+0x46>
 801538a:	6863      	ldr	r3, [r4, #4]
 801538c:	1ac0      	subs	r0, r0, r3
 801538e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015390:	b10b      	cbz	r3, 8015396 <__sflush_r+0x46>
 8015392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015394:	1ac0      	subs	r0, r0, r3
 8015396:	2300      	movs	r3, #0
 8015398:	4602      	mov	r2, r0
 801539a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801539c:	6a21      	ldr	r1, [r4, #32]
 801539e:	4628      	mov	r0, r5
 80153a0:	47b0      	blx	r6
 80153a2:	1c43      	adds	r3, r0, #1
 80153a4:	89a3      	ldrh	r3, [r4, #12]
 80153a6:	d106      	bne.n	80153b6 <__sflush_r+0x66>
 80153a8:	6829      	ldr	r1, [r5, #0]
 80153aa:	291d      	cmp	r1, #29
 80153ac:	d82c      	bhi.n	8015408 <__sflush_r+0xb8>
 80153ae:	4a2a      	ldr	r2, [pc, #168]	; (8015458 <__sflush_r+0x108>)
 80153b0:	40ca      	lsrs	r2, r1
 80153b2:	07d6      	lsls	r6, r2, #31
 80153b4:	d528      	bpl.n	8015408 <__sflush_r+0xb8>
 80153b6:	2200      	movs	r2, #0
 80153b8:	6062      	str	r2, [r4, #4]
 80153ba:	04d9      	lsls	r1, r3, #19
 80153bc:	6922      	ldr	r2, [r4, #16]
 80153be:	6022      	str	r2, [r4, #0]
 80153c0:	d504      	bpl.n	80153cc <__sflush_r+0x7c>
 80153c2:	1c42      	adds	r2, r0, #1
 80153c4:	d101      	bne.n	80153ca <__sflush_r+0x7a>
 80153c6:	682b      	ldr	r3, [r5, #0]
 80153c8:	b903      	cbnz	r3, 80153cc <__sflush_r+0x7c>
 80153ca:	6560      	str	r0, [r4, #84]	; 0x54
 80153cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153ce:	602f      	str	r7, [r5, #0]
 80153d0:	2900      	cmp	r1, #0
 80153d2:	d0ca      	beq.n	801536a <__sflush_r+0x1a>
 80153d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153d8:	4299      	cmp	r1, r3
 80153da:	d002      	beq.n	80153e2 <__sflush_r+0x92>
 80153dc:	4628      	mov	r0, r5
 80153de:	f000 f8b1 	bl	8015544 <_free_r>
 80153e2:	2000      	movs	r0, #0
 80153e4:	6360      	str	r0, [r4, #52]	; 0x34
 80153e6:	e7c1      	b.n	801536c <__sflush_r+0x1c>
 80153e8:	6a21      	ldr	r1, [r4, #32]
 80153ea:	2301      	movs	r3, #1
 80153ec:	4628      	mov	r0, r5
 80153ee:	47b0      	blx	r6
 80153f0:	1c41      	adds	r1, r0, #1
 80153f2:	d1c7      	bne.n	8015384 <__sflush_r+0x34>
 80153f4:	682b      	ldr	r3, [r5, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d0c4      	beq.n	8015384 <__sflush_r+0x34>
 80153fa:	2b1d      	cmp	r3, #29
 80153fc:	d001      	beq.n	8015402 <__sflush_r+0xb2>
 80153fe:	2b16      	cmp	r3, #22
 8015400:	d101      	bne.n	8015406 <__sflush_r+0xb6>
 8015402:	602f      	str	r7, [r5, #0]
 8015404:	e7b1      	b.n	801536a <__sflush_r+0x1a>
 8015406:	89a3      	ldrh	r3, [r4, #12]
 8015408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801540c:	81a3      	strh	r3, [r4, #12]
 801540e:	e7ad      	b.n	801536c <__sflush_r+0x1c>
 8015410:	690f      	ldr	r7, [r1, #16]
 8015412:	2f00      	cmp	r7, #0
 8015414:	d0a9      	beq.n	801536a <__sflush_r+0x1a>
 8015416:	0793      	lsls	r3, r2, #30
 8015418:	680e      	ldr	r6, [r1, #0]
 801541a:	bf08      	it	eq
 801541c:	694b      	ldreq	r3, [r1, #20]
 801541e:	600f      	str	r7, [r1, #0]
 8015420:	bf18      	it	ne
 8015422:	2300      	movne	r3, #0
 8015424:	eba6 0807 	sub.w	r8, r6, r7
 8015428:	608b      	str	r3, [r1, #8]
 801542a:	f1b8 0f00 	cmp.w	r8, #0
 801542e:	dd9c      	ble.n	801536a <__sflush_r+0x1a>
 8015430:	6a21      	ldr	r1, [r4, #32]
 8015432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015434:	4643      	mov	r3, r8
 8015436:	463a      	mov	r2, r7
 8015438:	4628      	mov	r0, r5
 801543a:	47b0      	blx	r6
 801543c:	2800      	cmp	r0, #0
 801543e:	dc06      	bgt.n	801544e <__sflush_r+0xfe>
 8015440:	89a3      	ldrh	r3, [r4, #12]
 8015442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015446:	81a3      	strh	r3, [r4, #12]
 8015448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801544c:	e78e      	b.n	801536c <__sflush_r+0x1c>
 801544e:	4407      	add	r7, r0
 8015450:	eba8 0800 	sub.w	r8, r8, r0
 8015454:	e7e9      	b.n	801542a <__sflush_r+0xda>
 8015456:	bf00      	nop
 8015458:	20400001 	.word	0x20400001

0801545c <_fflush_r>:
 801545c:	b538      	push	{r3, r4, r5, lr}
 801545e:	690b      	ldr	r3, [r1, #16]
 8015460:	4605      	mov	r5, r0
 8015462:	460c      	mov	r4, r1
 8015464:	b913      	cbnz	r3, 801546c <_fflush_r+0x10>
 8015466:	2500      	movs	r5, #0
 8015468:	4628      	mov	r0, r5
 801546a:	bd38      	pop	{r3, r4, r5, pc}
 801546c:	b118      	cbz	r0, 8015476 <_fflush_r+0x1a>
 801546e:	6983      	ldr	r3, [r0, #24]
 8015470:	b90b      	cbnz	r3, 8015476 <_fflush_r+0x1a>
 8015472:	f7ff fc99 	bl	8014da8 <__sinit>
 8015476:	4b14      	ldr	r3, [pc, #80]	; (80154c8 <_fflush_r+0x6c>)
 8015478:	429c      	cmp	r4, r3
 801547a:	d11b      	bne.n	80154b4 <_fflush_r+0x58>
 801547c:	686c      	ldr	r4, [r5, #4]
 801547e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d0ef      	beq.n	8015466 <_fflush_r+0xa>
 8015486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015488:	07d0      	lsls	r0, r2, #31
 801548a:	d404      	bmi.n	8015496 <_fflush_r+0x3a>
 801548c:	0599      	lsls	r1, r3, #22
 801548e:	d402      	bmi.n	8015496 <_fflush_r+0x3a>
 8015490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015492:	f7ff fd4c 	bl	8014f2e <__retarget_lock_acquire_recursive>
 8015496:	4628      	mov	r0, r5
 8015498:	4621      	mov	r1, r4
 801549a:	f7ff ff59 	bl	8015350 <__sflush_r>
 801549e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154a0:	07da      	lsls	r2, r3, #31
 80154a2:	4605      	mov	r5, r0
 80154a4:	d4e0      	bmi.n	8015468 <_fflush_r+0xc>
 80154a6:	89a3      	ldrh	r3, [r4, #12]
 80154a8:	059b      	lsls	r3, r3, #22
 80154aa:	d4dd      	bmi.n	8015468 <_fflush_r+0xc>
 80154ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154ae:	f7ff fd3f 	bl	8014f30 <__retarget_lock_release_recursive>
 80154b2:	e7d9      	b.n	8015468 <_fflush_r+0xc>
 80154b4:	4b05      	ldr	r3, [pc, #20]	; (80154cc <_fflush_r+0x70>)
 80154b6:	429c      	cmp	r4, r3
 80154b8:	d101      	bne.n	80154be <_fflush_r+0x62>
 80154ba:	68ac      	ldr	r4, [r5, #8]
 80154bc:	e7df      	b.n	801547e <_fflush_r+0x22>
 80154be:	4b04      	ldr	r3, [pc, #16]	; (80154d0 <_fflush_r+0x74>)
 80154c0:	429c      	cmp	r4, r3
 80154c2:	bf08      	it	eq
 80154c4:	68ec      	ldreq	r4, [r5, #12]
 80154c6:	e7da      	b.n	801547e <_fflush_r+0x22>
 80154c8:	0801908c 	.word	0x0801908c
 80154cc:	080190ac 	.word	0x080190ac
 80154d0:	0801906c 	.word	0x0801906c

080154d4 <fiprintf>:
 80154d4:	b40e      	push	{r1, r2, r3}
 80154d6:	b503      	push	{r0, r1, lr}
 80154d8:	4601      	mov	r1, r0
 80154da:	ab03      	add	r3, sp, #12
 80154dc:	4805      	ldr	r0, [pc, #20]	; (80154f4 <fiprintf+0x20>)
 80154de:	f853 2b04 	ldr.w	r2, [r3], #4
 80154e2:	6800      	ldr	r0, [r0, #0]
 80154e4:	9301      	str	r3, [sp, #4]
 80154e6:	f000 f8a3 	bl	8015630 <_vfiprintf_r>
 80154ea:	b002      	add	sp, #8
 80154ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80154f0:	b003      	add	sp, #12
 80154f2:	4770      	bx	lr
 80154f4:	2000002c 	.word	0x2000002c

080154f8 <_lseek_r>:
 80154f8:	b538      	push	{r3, r4, r5, lr}
 80154fa:	4d07      	ldr	r5, [pc, #28]	; (8015518 <_lseek_r+0x20>)
 80154fc:	4604      	mov	r4, r0
 80154fe:	4608      	mov	r0, r1
 8015500:	4611      	mov	r1, r2
 8015502:	2200      	movs	r2, #0
 8015504:	602a      	str	r2, [r5, #0]
 8015506:	461a      	mov	r2, r3
 8015508:	f7eb fb0a 	bl	8000b20 <_lseek>
 801550c:	1c43      	adds	r3, r0, #1
 801550e:	d102      	bne.n	8015516 <_lseek_r+0x1e>
 8015510:	682b      	ldr	r3, [r5, #0]
 8015512:	b103      	cbz	r3, 8015516 <_lseek_r+0x1e>
 8015514:	6023      	str	r3, [r4, #0]
 8015516:	bd38      	pop	{r3, r4, r5, pc}
 8015518:	20011964 	.word	0x20011964

0801551c <malloc>:
 801551c:	4b02      	ldr	r3, [pc, #8]	; (8015528 <malloc+0xc>)
 801551e:	4601      	mov	r1, r0
 8015520:	6818      	ldr	r0, [r3, #0]
 8015522:	f7ff bd4d 	b.w	8014fc0 <_malloc_r>
 8015526:	bf00      	nop
 8015528:	2000002c 	.word	0x2000002c

0801552c <__malloc_lock>:
 801552c:	4801      	ldr	r0, [pc, #4]	; (8015534 <__malloc_lock+0x8>)
 801552e:	f7ff bcfe 	b.w	8014f2e <__retarget_lock_acquire_recursive>
 8015532:	bf00      	nop
 8015534:	20011958 	.word	0x20011958

08015538 <__malloc_unlock>:
 8015538:	4801      	ldr	r0, [pc, #4]	; (8015540 <__malloc_unlock+0x8>)
 801553a:	f7ff bcf9 	b.w	8014f30 <__retarget_lock_release_recursive>
 801553e:	bf00      	nop
 8015540:	20011958 	.word	0x20011958

08015544 <_free_r>:
 8015544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015546:	2900      	cmp	r1, #0
 8015548:	d044      	beq.n	80155d4 <_free_r+0x90>
 801554a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801554e:	9001      	str	r0, [sp, #4]
 8015550:	2b00      	cmp	r3, #0
 8015552:	f1a1 0404 	sub.w	r4, r1, #4
 8015556:	bfb8      	it	lt
 8015558:	18e4      	addlt	r4, r4, r3
 801555a:	f7ff ffe7 	bl	801552c <__malloc_lock>
 801555e:	4a1e      	ldr	r2, [pc, #120]	; (80155d8 <_free_r+0x94>)
 8015560:	9801      	ldr	r0, [sp, #4]
 8015562:	6813      	ldr	r3, [r2, #0]
 8015564:	b933      	cbnz	r3, 8015574 <_free_r+0x30>
 8015566:	6063      	str	r3, [r4, #4]
 8015568:	6014      	str	r4, [r2, #0]
 801556a:	b003      	add	sp, #12
 801556c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015570:	f7ff bfe2 	b.w	8015538 <__malloc_unlock>
 8015574:	42a3      	cmp	r3, r4
 8015576:	d908      	bls.n	801558a <_free_r+0x46>
 8015578:	6825      	ldr	r5, [r4, #0]
 801557a:	1961      	adds	r1, r4, r5
 801557c:	428b      	cmp	r3, r1
 801557e:	bf01      	itttt	eq
 8015580:	6819      	ldreq	r1, [r3, #0]
 8015582:	685b      	ldreq	r3, [r3, #4]
 8015584:	1949      	addeq	r1, r1, r5
 8015586:	6021      	streq	r1, [r4, #0]
 8015588:	e7ed      	b.n	8015566 <_free_r+0x22>
 801558a:	461a      	mov	r2, r3
 801558c:	685b      	ldr	r3, [r3, #4]
 801558e:	b10b      	cbz	r3, 8015594 <_free_r+0x50>
 8015590:	42a3      	cmp	r3, r4
 8015592:	d9fa      	bls.n	801558a <_free_r+0x46>
 8015594:	6811      	ldr	r1, [r2, #0]
 8015596:	1855      	adds	r5, r2, r1
 8015598:	42a5      	cmp	r5, r4
 801559a:	d10b      	bne.n	80155b4 <_free_r+0x70>
 801559c:	6824      	ldr	r4, [r4, #0]
 801559e:	4421      	add	r1, r4
 80155a0:	1854      	adds	r4, r2, r1
 80155a2:	42a3      	cmp	r3, r4
 80155a4:	6011      	str	r1, [r2, #0]
 80155a6:	d1e0      	bne.n	801556a <_free_r+0x26>
 80155a8:	681c      	ldr	r4, [r3, #0]
 80155aa:	685b      	ldr	r3, [r3, #4]
 80155ac:	6053      	str	r3, [r2, #4]
 80155ae:	4421      	add	r1, r4
 80155b0:	6011      	str	r1, [r2, #0]
 80155b2:	e7da      	b.n	801556a <_free_r+0x26>
 80155b4:	d902      	bls.n	80155bc <_free_r+0x78>
 80155b6:	230c      	movs	r3, #12
 80155b8:	6003      	str	r3, [r0, #0]
 80155ba:	e7d6      	b.n	801556a <_free_r+0x26>
 80155bc:	6825      	ldr	r5, [r4, #0]
 80155be:	1961      	adds	r1, r4, r5
 80155c0:	428b      	cmp	r3, r1
 80155c2:	bf04      	itt	eq
 80155c4:	6819      	ldreq	r1, [r3, #0]
 80155c6:	685b      	ldreq	r3, [r3, #4]
 80155c8:	6063      	str	r3, [r4, #4]
 80155ca:	bf04      	itt	eq
 80155cc:	1949      	addeq	r1, r1, r5
 80155ce:	6021      	streq	r1, [r4, #0]
 80155d0:	6054      	str	r4, [r2, #4]
 80155d2:	e7ca      	b.n	801556a <_free_r+0x26>
 80155d4:	b003      	add	sp, #12
 80155d6:	bd30      	pop	{r4, r5, pc}
 80155d8:	2001195c 	.word	0x2001195c

080155dc <__sfputc_r>:
 80155dc:	6893      	ldr	r3, [r2, #8]
 80155de:	3b01      	subs	r3, #1
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	b410      	push	{r4}
 80155e4:	6093      	str	r3, [r2, #8]
 80155e6:	da08      	bge.n	80155fa <__sfputc_r+0x1e>
 80155e8:	6994      	ldr	r4, [r2, #24]
 80155ea:	42a3      	cmp	r3, r4
 80155ec:	db01      	blt.n	80155f2 <__sfputc_r+0x16>
 80155ee:	290a      	cmp	r1, #10
 80155f0:	d103      	bne.n	80155fa <__sfputc_r+0x1e>
 80155f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155f6:	f000 baf1 	b.w	8015bdc <__swbuf_r>
 80155fa:	6813      	ldr	r3, [r2, #0]
 80155fc:	1c58      	adds	r0, r3, #1
 80155fe:	6010      	str	r0, [r2, #0]
 8015600:	7019      	strb	r1, [r3, #0]
 8015602:	4608      	mov	r0, r1
 8015604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015608:	4770      	bx	lr

0801560a <__sfputs_r>:
 801560a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560c:	4606      	mov	r6, r0
 801560e:	460f      	mov	r7, r1
 8015610:	4614      	mov	r4, r2
 8015612:	18d5      	adds	r5, r2, r3
 8015614:	42ac      	cmp	r4, r5
 8015616:	d101      	bne.n	801561c <__sfputs_r+0x12>
 8015618:	2000      	movs	r0, #0
 801561a:	e007      	b.n	801562c <__sfputs_r+0x22>
 801561c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015620:	463a      	mov	r2, r7
 8015622:	4630      	mov	r0, r6
 8015624:	f7ff ffda 	bl	80155dc <__sfputc_r>
 8015628:	1c43      	adds	r3, r0, #1
 801562a:	d1f3      	bne.n	8015614 <__sfputs_r+0xa>
 801562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015630 <_vfiprintf_r>:
 8015630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015634:	460d      	mov	r5, r1
 8015636:	b09d      	sub	sp, #116	; 0x74
 8015638:	4614      	mov	r4, r2
 801563a:	4698      	mov	r8, r3
 801563c:	4606      	mov	r6, r0
 801563e:	b118      	cbz	r0, 8015648 <_vfiprintf_r+0x18>
 8015640:	6983      	ldr	r3, [r0, #24]
 8015642:	b90b      	cbnz	r3, 8015648 <_vfiprintf_r+0x18>
 8015644:	f7ff fbb0 	bl	8014da8 <__sinit>
 8015648:	4b89      	ldr	r3, [pc, #548]	; (8015870 <_vfiprintf_r+0x240>)
 801564a:	429d      	cmp	r5, r3
 801564c:	d11b      	bne.n	8015686 <_vfiprintf_r+0x56>
 801564e:	6875      	ldr	r5, [r6, #4]
 8015650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015652:	07d9      	lsls	r1, r3, #31
 8015654:	d405      	bmi.n	8015662 <_vfiprintf_r+0x32>
 8015656:	89ab      	ldrh	r3, [r5, #12]
 8015658:	059a      	lsls	r2, r3, #22
 801565a:	d402      	bmi.n	8015662 <_vfiprintf_r+0x32>
 801565c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801565e:	f7ff fc66 	bl	8014f2e <__retarget_lock_acquire_recursive>
 8015662:	89ab      	ldrh	r3, [r5, #12]
 8015664:	071b      	lsls	r3, r3, #28
 8015666:	d501      	bpl.n	801566c <_vfiprintf_r+0x3c>
 8015668:	692b      	ldr	r3, [r5, #16]
 801566a:	b9eb      	cbnz	r3, 80156a8 <_vfiprintf_r+0x78>
 801566c:	4629      	mov	r1, r5
 801566e:	4630      	mov	r0, r6
 8015670:	f000 fb06 	bl	8015c80 <__swsetup_r>
 8015674:	b1c0      	cbz	r0, 80156a8 <_vfiprintf_r+0x78>
 8015676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015678:	07dc      	lsls	r4, r3, #31
 801567a:	d50e      	bpl.n	801569a <_vfiprintf_r+0x6a>
 801567c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015680:	b01d      	add	sp, #116	; 0x74
 8015682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015686:	4b7b      	ldr	r3, [pc, #492]	; (8015874 <_vfiprintf_r+0x244>)
 8015688:	429d      	cmp	r5, r3
 801568a:	d101      	bne.n	8015690 <_vfiprintf_r+0x60>
 801568c:	68b5      	ldr	r5, [r6, #8]
 801568e:	e7df      	b.n	8015650 <_vfiprintf_r+0x20>
 8015690:	4b79      	ldr	r3, [pc, #484]	; (8015878 <_vfiprintf_r+0x248>)
 8015692:	429d      	cmp	r5, r3
 8015694:	bf08      	it	eq
 8015696:	68f5      	ldreq	r5, [r6, #12]
 8015698:	e7da      	b.n	8015650 <_vfiprintf_r+0x20>
 801569a:	89ab      	ldrh	r3, [r5, #12]
 801569c:	0598      	lsls	r0, r3, #22
 801569e:	d4ed      	bmi.n	801567c <_vfiprintf_r+0x4c>
 80156a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156a2:	f7ff fc45 	bl	8014f30 <__retarget_lock_release_recursive>
 80156a6:	e7e9      	b.n	801567c <_vfiprintf_r+0x4c>
 80156a8:	2300      	movs	r3, #0
 80156aa:	9309      	str	r3, [sp, #36]	; 0x24
 80156ac:	2320      	movs	r3, #32
 80156ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80156b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80156b6:	2330      	movs	r3, #48	; 0x30
 80156b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801587c <_vfiprintf_r+0x24c>
 80156bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80156c0:	f04f 0901 	mov.w	r9, #1
 80156c4:	4623      	mov	r3, r4
 80156c6:	469a      	mov	sl, r3
 80156c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156cc:	b10a      	cbz	r2, 80156d2 <_vfiprintf_r+0xa2>
 80156ce:	2a25      	cmp	r2, #37	; 0x25
 80156d0:	d1f9      	bne.n	80156c6 <_vfiprintf_r+0x96>
 80156d2:	ebba 0b04 	subs.w	fp, sl, r4
 80156d6:	d00b      	beq.n	80156f0 <_vfiprintf_r+0xc0>
 80156d8:	465b      	mov	r3, fp
 80156da:	4622      	mov	r2, r4
 80156dc:	4629      	mov	r1, r5
 80156de:	4630      	mov	r0, r6
 80156e0:	f7ff ff93 	bl	801560a <__sfputs_r>
 80156e4:	3001      	adds	r0, #1
 80156e6:	f000 80aa 	beq.w	801583e <_vfiprintf_r+0x20e>
 80156ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156ec:	445a      	add	r2, fp
 80156ee:	9209      	str	r2, [sp, #36]	; 0x24
 80156f0:	f89a 3000 	ldrb.w	r3, [sl]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	f000 80a2 	beq.w	801583e <_vfiprintf_r+0x20e>
 80156fa:	2300      	movs	r3, #0
 80156fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015704:	f10a 0a01 	add.w	sl, sl, #1
 8015708:	9304      	str	r3, [sp, #16]
 801570a:	9307      	str	r3, [sp, #28]
 801570c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015710:	931a      	str	r3, [sp, #104]	; 0x68
 8015712:	4654      	mov	r4, sl
 8015714:	2205      	movs	r2, #5
 8015716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801571a:	4858      	ldr	r0, [pc, #352]	; (801587c <_vfiprintf_r+0x24c>)
 801571c:	f7ea fd78 	bl	8000210 <memchr>
 8015720:	9a04      	ldr	r2, [sp, #16]
 8015722:	b9d8      	cbnz	r0, 801575c <_vfiprintf_r+0x12c>
 8015724:	06d1      	lsls	r1, r2, #27
 8015726:	bf44      	itt	mi
 8015728:	2320      	movmi	r3, #32
 801572a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801572e:	0713      	lsls	r3, r2, #28
 8015730:	bf44      	itt	mi
 8015732:	232b      	movmi	r3, #43	; 0x2b
 8015734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015738:	f89a 3000 	ldrb.w	r3, [sl]
 801573c:	2b2a      	cmp	r3, #42	; 0x2a
 801573e:	d015      	beq.n	801576c <_vfiprintf_r+0x13c>
 8015740:	9a07      	ldr	r2, [sp, #28]
 8015742:	4654      	mov	r4, sl
 8015744:	2000      	movs	r0, #0
 8015746:	f04f 0c0a 	mov.w	ip, #10
 801574a:	4621      	mov	r1, r4
 801574c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015750:	3b30      	subs	r3, #48	; 0x30
 8015752:	2b09      	cmp	r3, #9
 8015754:	d94e      	bls.n	80157f4 <_vfiprintf_r+0x1c4>
 8015756:	b1b0      	cbz	r0, 8015786 <_vfiprintf_r+0x156>
 8015758:	9207      	str	r2, [sp, #28]
 801575a:	e014      	b.n	8015786 <_vfiprintf_r+0x156>
 801575c:	eba0 0308 	sub.w	r3, r0, r8
 8015760:	fa09 f303 	lsl.w	r3, r9, r3
 8015764:	4313      	orrs	r3, r2
 8015766:	9304      	str	r3, [sp, #16]
 8015768:	46a2      	mov	sl, r4
 801576a:	e7d2      	b.n	8015712 <_vfiprintf_r+0xe2>
 801576c:	9b03      	ldr	r3, [sp, #12]
 801576e:	1d19      	adds	r1, r3, #4
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	9103      	str	r1, [sp, #12]
 8015774:	2b00      	cmp	r3, #0
 8015776:	bfbb      	ittet	lt
 8015778:	425b      	neglt	r3, r3
 801577a:	f042 0202 	orrlt.w	r2, r2, #2
 801577e:	9307      	strge	r3, [sp, #28]
 8015780:	9307      	strlt	r3, [sp, #28]
 8015782:	bfb8      	it	lt
 8015784:	9204      	strlt	r2, [sp, #16]
 8015786:	7823      	ldrb	r3, [r4, #0]
 8015788:	2b2e      	cmp	r3, #46	; 0x2e
 801578a:	d10c      	bne.n	80157a6 <_vfiprintf_r+0x176>
 801578c:	7863      	ldrb	r3, [r4, #1]
 801578e:	2b2a      	cmp	r3, #42	; 0x2a
 8015790:	d135      	bne.n	80157fe <_vfiprintf_r+0x1ce>
 8015792:	9b03      	ldr	r3, [sp, #12]
 8015794:	1d1a      	adds	r2, r3, #4
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	9203      	str	r2, [sp, #12]
 801579a:	2b00      	cmp	r3, #0
 801579c:	bfb8      	it	lt
 801579e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80157a2:	3402      	adds	r4, #2
 80157a4:	9305      	str	r3, [sp, #20]
 80157a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801588c <_vfiprintf_r+0x25c>
 80157aa:	7821      	ldrb	r1, [r4, #0]
 80157ac:	2203      	movs	r2, #3
 80157ae:	4650      	mov	r0, sl
 80157b0:	f7ea fd2e 	bl	8000210 <memchr>
 80157b4:	b140      	cbz	r0, 80157c8 <_vfiprintf_r+0x198>
 80157b6:	2340      	movs	r3, #64	; 0x40
 80157b8:	eba0 000a 	sub.w	r0, r0, sl
 80157bc:	fa03 f000 	lsl.w	r0, r3, r0
 80157c0:	9b04      	ldr	r3, [sp, #16]
 80157c2:	4303      	orrs	r3, r0
 80157c4:	3401      	adds	r4, #1
 80157c6:	9304      	str	r3, [sp, #16]
 80157c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157cc:	482c      	ldr	r0, [pc, #176]	; (8015880 <_vfiprintf_r+0x250>)
 80157ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157d2:	2206      	movs	r2, #6
 80157d4:	f7ea fd1c 	bl	8000210 <memchr>
 80157d8:	2800      	cmp	r0, #0
 80157da:	d03f      	beq.n	801585c <_vfiprintf_r+0x22c>
 80157dc:	4b29      	ldr	r3, [pc, #164]	; (8015884 <_vfiprintf_r+0x254>)
 80157de:	bb1b      	cbnz	r3, 8015828 <_vfiprintf_r+0x1f8>
 80157e0:	9b03      	ldr	r3, [sp, #12]
 80157e2:	3307      	adds	r3, #7
 80157e4:	f023 0307 	bic.w	r3, r3, #7
 80157e8:	3308      	adds	r3, #8
 80157ea:	9303      	str	r3, [sp, #12]
 80157ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ee:	443b      	add	r3, r7
 80157f0:	9309      	str	r3, [sp, #36]	; 0x24
 80157f2:	e767      	b.n	80156c4 <_vfiprintf_r+0x94>
 80157f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80157f8:	460c      	mov	r4, r1
 80157fa:	2001      	movs	r0, #1
 80157fc:	e7a5      	b.n	801574a <_vfiprintf_r+0x11a>
 80157fe:	2300      	movs	r3, #0
 8015800:	3401      	adds	r4, #1
 8015802:	9305      	str	r3, [sp, #20]
 8015804:	4619      	mov	r1, r3
 8015806:	f04f 0c0a 	mov.w	ip, #10
 801580a:	4620      	mov	r0, r4
 801580c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015810:	3a30      	subs	r2, #48	; 0x30
 8015812:	2a09      	cmp	r2, #9
 8015814:	d903      	bls.n	801581e <_vfiprintf_r+0x1ee>
 8015816:	2b00      	cmp	r3, #0
 8015818:	d0c5      	beq.n	80157a6 <_vfiprintf_r+0x176>
 801581a:	9105      	str	r1, [sp, #20]
 801581c:	e7c3      	b.n	80157a6 <_vfiprintf_r+0x176>
 801581e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015822:	4604      	mov	r4, r0
 8015824:	2301      	movs	r3, #1
 8015826:	e7f0      	b.n	801580a <_vfiprintf_r+0x1da>
 8015828:	ab03      	add	r3, sp, #12
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	462a      	mov	r2, r5
 801582e:	4b16      	ldr	r3, [pc, #88]	; (8015888 <_vfiprintf_r+0x258>)
 8015830:	a904      	add	r1, sp, #16
 8015832:	4630      	mov	r0, r6
 8015834:	f3af 8000 	nop.w
 8015838:	4607      	mov	r7, r0
 801583a:	1c78      	adds	r0, r7, #1
 801583c:	d1d6      	bne.n	80157ec <_vfiprintf_r+0x1bc>
 801583e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015840:	07d9      	lsls	r1, r3, #31
 8015842:	d405      	bmi.n	8015850 <_vfiprintf_r+0x220>
 8015844:	89ab      	ldrh	r3, [r5, #12]
 8015846:	059a      	lsls	r2, r3, #22
 8015848:	d402      	bmi.n	8015850 <_vfiprintf_r+0x220>
 801584a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801584c:	f7ff fb70 	bl	8014f30 <__retarget_lock_release_recursive>
 8015850:	89ab      	ldrh	r3, [r5, #12]
 8015852:	065b      	lsls	r3, r3, #25
 8015854:	f53f af12 	bmi.w	801567c <_vfiprintf_r+0x4c>
 8015858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801585a:	e711      	b.n	8015680 <_vfiprintf_r+0x50>
 801585c:	ab03      	add	r3, sp, #12
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	462a      	mov	r2, r5
 8015862:	4b09      	ldr	r3, [pc, #36]	; (8015888 <_vfiprintf_r+0x258>)
 8015864:	a904      	add	r1, sp, #16
 8015866:	4630      	mov	r0, r6
 8015868:	f000 f880 	bl	801596c <_printf_i>
 801586c:	e7e4      	b.n	8015838 <_vfiprintf_r+0x208>
 801586e:	bf00      	nop
 8015870:	0801908c 	.word	0x0801908c
 8015874:	080190ac 	.word	0x080190ac
 8015878:	0801906c 	.word	0x0801906c
 801587c:	0801917e 	.word	0x0801917e
 8015880:	08019188 	.word	0x08019188
 8015884:	00000000 	.word	0x00000000
 8015888:	0801560b 	.word	0x0801560b
 801588c:	08019184 	.word	0x08019184

08015890 <_printf_common>:
 8015890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015894:	4616      	mov	r6, r2
 8015896:	4699      	mov	r9, r3
 8015898:	688a      	ldr	r2, [r1, #8]
 801589a:	690b      	ldr	r3, [r1, #16]
 801589c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80158a0:	4293      	cmp	r3, r2
 80158a2:	bfb8      	it	lt
 80158a4:	4613      	movlt	r3, r2
 80158a6:	6033      	str	r3, [r6, #0]
 80158a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80158ac:	4607      	mov	r7, r0
 80158ae:	460c      	mov	r4, r1
 80158b0:	b10a      	cbz	r2, 80158b6 <_printf_common+0x26>
 80158b2:	3301      	adds	r3, #1
 80158b4:	6033      	str	r3, [r6, #0]
 80158b6:	6823      	ldr	r3, [r4, #0]
 80158b8:	0699      	lsls	r1, r3, #26
 80158ba:	bf42      	ittt	mi
 80158bc:	6833      	ldrmi	r3, [r6, #0]
 80158be:	3302      	addmi	r3, #2
 80158c0:	6033      	strmi	r3, [r6, #0]
 80158c2:	6825      	ldr	r5, [r4, #0]
 80158c4:	f015 0506 	ands.w	r5, r5, #6
 80158c8:	d106      	bne.n	80158d8 <_printf_common+0x48>
 80158ca:	f104 0a19 	add.w	sl, r4, #25
 80158ce:	68e3      	ldr	r3, [r4, #12]
 80158d0:	6832      	ldr	r2, [r6, #0]
 80158d2:	1a9b      	subs	r3, r3, r2
 80158d4:	42ab      	cmp	r3, r5
 80158d6:	dc26      	bgt.n	8015926 <_printf_common+0x96>
 80158d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80158dc:	1e13      	subs	r3, r2, #0
 80158de:	6822      	ldr	r2, [r4, #0]
 80158e0:	bf18      	it	ne
 80158e2:	2301      	movne	r3, #1
 80158e4:	0692      	lsls	r2, r2, #26
 80158e6:	d42b      	bmi.n	8015940 <_printf_common+0xb0>
 80158e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158ec:	4649      	mov	r1, r9
 80158ee:	4638      	mov	r0, r7
 80158f0:	47c0      	blx	r8
 80158f2:	3001      	adds	r0, #1
 80158f4:	d01e      	beq.n	8015934 <_printf_common+0xa4>
 80158f6:	6823      	ldr	r3, [r4, #0]
 80158f8:	68e5      	ldr	r5, [r4, #12]
 80158fa:	6832      	ldr	r2, [r6, #0]
 80158fc:	f003 0306 	and.w	r3, r3, #6
 8015900:	2b04      	cmp	r3, #4
 8015902:	bf08      	it	eq
 8015904:	1aad      	subeq	r5, r5, r2
 8015906:	68a3      	ldr	r3, [r4, #8]
 8015908:	6922      	ldr	r2, [r4, #16]
 801590a:	bf0c      	ite	eq
 801590c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015910:	2500      	movne	r5, #0
 8015912:	4293      	cmp	r3, r2
 8015914:	bfc4      	itt	gt
 8015916:	1a9b      	subgt	r3, r3, r2
 8015918:	18ed      	addgt	r5, r5, r3
 801591a:	2600      	movs	r6, #0
 801591c:	341a      	adds	r4, #26
 801591e:	42b5      	cmp	r5, r6
 8015920:	d11a      	bne.n	8015958 <_printf_common+0xc8>
 8015922:	2000      	movs	r0, #0
 8015924:	e008      	b.n	8015938 <_printf_common+0xa8>
 8015926:	2301      	movs	r3, #1
 8015928:	4652      	mov	r2, sl
 801592a:	4649      	mov	r1, r9
 801592c:	4638      	mov	r0, r7
 801592e:	47c0      	blx	r8
 8015930:	3001      	adds	r0, #1
 8015932:	d103      	bne.n	801593c <_printf_common+0xac>
 8015934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801593c:	3501      	adds	r5, #1
 801593e:	e7c6      	b.n	80158ce <_printf_common+0x3e>
 8015940:	18e1      	adds	r1, r4, r3
 8015942:	1c5a      	adds	r2, r3, #1
 8015944:	2030      	movs	r0, #48	; 0x30
 8015946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801594a:	4422      	add	r2, r4
 801594c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015954:	3302      	adds	r3, #2
 8015956:	e7c7      	b.n	80158e8 <_printf_common+0x58>
 8015958:	2301      	movs	r3, #1
 801595a:	4622      	mov	r2, r4
 801595c:	4649      	mov	r1, r9
 801595e:	4638      	mov	r0, r7
 8015960:	47c0      	blx	r8
 8015962:	3001      	adds	r0, #1
 8015964:	d0e6      	beq.n	8015934 <_printf_common+0xa4>
 8015966:	3601      	adds	r6, #1
 8015968:	e7d9      	b.n	801591e <_printf_common+0x8e>
	...

0801596c <_printf_i>:
 801596c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015970:	7e0f      	ldrb	r7, [r1, #24]
 8015972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015974:	2f78      	cmp	r7, #120	; 0x78
 8015976:	4691      	mov	r9, r2
 8015978:	4680      	mov	r8, r0
 801597a:	460c      	mov	r4, r1
 801597c:	469a      	mov	sl, r3
 801597e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015982:	d807      	bhi.n	8015994 <_printf_i+0x28>
 8015984:	2f62      	cmp	r7, #98	; 0x62
 8015986:	d80a      	bhi.n	801599e <_printf_i+0x32>
 8015988:	2f00      	cmp	r7, #0
 801598a:	f000 80d8 	beq.w	8015b3e <_printf_i+0x1d2>
 801598e:	2f58      	cmp	r7, #88	; 0x58
 8015990:	f000 80a3 	beq.w	8015ada <_printf_i+0x16e>
 8015994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801599c:	e03a      	b.n	8015a14 <_printf_i+0xa8>
 801599e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80159a2:	2b15      	cmp	r3, #21
 80159a4:	d8f6      	bhi.n	8015994 <_printf_i+0x28>
 80159a6:	a101      	add	r1, pc, #4	; (adr r1, 80159ac <_printf_i+0x40>)
 80159a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80159ac:	08015a05 	.word	0x08015a05
 80159b0:	08015a19 	.word	0x08015a19
 80159b4:	08015995 	.word	0x08015995
 80159b8:	08015995 	.word	0x08015995
 80159bc:	08015995 	.word	0x08015995
 80159c0:	08015995 	.word	0x08015995
 80159c4:	08015a19 	.word	0x08015a19
 80159c8:	08015995 	.word	0x08015995
 80159cc:	08015995 	.word	0x08015995
 80159d0:	08015995 	.word	0x08015995
 80159d4:	08015995 	.word	0x08015995
 80159d8:	08015b25 	.word	0x08015b25
 80159dc:	08015a49 	.word	0x08015a49
 80159e0:	08015b07 	.word	0x08015b07
 80159e4:	08015995 	.word	0x08015995
 80159e8:	08015995 	.word	0x08015995
 80159ec:	08015b47 	.word	0x08015b47
 80159f0:	08015995 	.word	0x08015995
 80159f4:	08015a49 	.word	0x08015a49
 80159f8:	08015995 	.word	0x08015995
 80159fc:	08015995 	.word	0x08015995
 8015a00:	08015b0f 	.word	0x08015b0f
 8015a04:	682b      	ldr	r3, [r5, #0]
 8015a06:	1d1a      	adds	r2, r3, #4
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	602a      	str	r2, [r5, #0]
 8015a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a14:	2301      	movs	r3, #1
 8015a16:	e0a3      	b.n	8015b60 <_printf_i+0x1f4>
 8015a18:	6820      	ldr	r0, [r4, #0]
 8015a1a:	6829      	ldr	r1, [r5, #0]
 8015a1c:	0606      	lsls	r6, r0, #24
 8015a1e:	f101 0304 	add.w	r3, r1, #4
 8015a22:	d50a      	bpl.n	8015a3a <_printf_i+0xce>
 8015a24:	680e      	ldr	r6, [r1, #0]
 8015a26:	602b      	str	r3, [r5, #0]
 8015a28:	2e00      	cmp	r6, #0
 8015a2a:	da03      	bge.n	8015a34 <_printf_i+0xc8>
 8015a2c:	232d      	movs	r3, #45	; 0x2d
 8015a2e:	4276      	negs	r6, r6
 8015a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a34:	485e      	ldr	r0, [pc, #376]	; (8015bb0 <_printf_i+0x244>)
 8015a36:	230a      	movs	r3, #10
 8015a38:	e019      	b.n	8015a6e <_printf_i+0x102>
 8015a3a:	680e      	ldr	r6, [r1, #0]
 8015a3c:	602b      	str	r3, [r5, #0]
 8015a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a42:	bf18      	it	ne
 8015a44:	b236      	sxthne	r6, r6
 8015a46:	e7ef      	b.n	8015a28 <_printf_i+0xbc>
 8015a48:	682b      	ldr	r3, [r5, #0]
 8015a4a:	6820      	ldr	r0, [r4, #0]
 8015a4c:	1d19      	adds	r1, r3, #4
 8015a4e:	6029      	str	r1, [r5, #0]
 8015a50:	0601      	lsls	r1, r0, #24
 8015a52:	d501      	bpl.n	8015a58 <_printf_i+0xec>
 8015a54:	681e      	ldr	r6, [r3, #0]
 8015a56:	e002      	b.n	8015a5e <_printf_i+0xf2>
 8015a58:	0646      	lsls	r6, r0, #25
 8015a5a:	d5fb      	bpl.n	8015a54 <_printf_i+0xe8>
 8015a5c:	881e      	ldrh	r6, [r3, #0]
 8015a5e:	4854      	ldr	r0, [pc, #336]	; (8015bb0 <_printf_i+0x244>)
 8015a60:	2f6f      	cmp	r7, #111	; 0x6f
 8015a62:	bf0c      	ite	eq
 8015a64:	2308      	moveq	r3, #8
 8015a66:	230a      	movne	r3, #10
 8015a68:	2100      	movs	r1, #0
 8015a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a6e:	6865      	ldr	r5, [r4, #4]
 8015a70:	60a5      	str	r5, [r4, #8]
 8015a72:	2d00      	cmp	r5, #0
 8015a74:	bfa2      	ittt	ge
 8015a76:	6821      	ldrge	r1, [r4, #0]
 8015a78:	f021 0104 	bicge.w	r1, r1, #4
 8015a7c:	6021      	strge	r1, [r4, #0]
 8015a7e:	b90e      	cbnz	r6, 8015a84 <_printf_i+0x118>
 8015a80:	2d00      	cmp	r5, #0
 8015a82:	d04d      	beq.n	8015b20 <_printf_i+0x1b4>
 8015a84:	4615      	mov	r5, r2
 8015a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8015a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8015a8e:	5dc7      	ldrb	r7, [r0, r7]
 8015a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015a94:	4637      	mov	r7, r6
 8015a96:	42bb      	cmp	r3, r7
 8015a98:	460e      	mov	r6, r1
 8015a9a:	d9f4      	bls.n	8015a86 <_printf_i+0x11a>
 8015a9c:	2b08      	cmp	r3, #8
 8015a9e:	d10b      	bne.n	8015ab8 <_printf_i+0x14c>
 8015aa0:	6823      	ldr	r3, [r4, #0]
 8015aa2:	07de      	lsls	r6, r3, #31
 8015aa4:	d508      	bpl.n	8015ab8 <_printf_i+0x14c>
 8015aa6:	6923      	ldr	r3, [r4, #16]
 8015aa8:	6861      	ldr	r1, [r4, #4]
 8015aaa:	4299      	cmp	r1, r3
 8015aac:	bfde      	ittt	le
 8015aae:	2330      	movle	r3, #48	; 0x30
 8015ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ab4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015ab8:	1b52      	subs	r2, r2, r5
 8015aba:	6122      	str	r2, [r4, #16]
 8015abc:	f8cd a000 	str.w	sl, [sp]
 8015ac0:	464b      	mov	r3, r9
 8015ac2:	aa03      	add	r2, sp, #12
 8015ac4:	4621      	mov	r1, r4
 8015ac6:	4640      	mov	r0, r8
 8015ac8:	f7ff fee2 	bl	8015890 <_printf_common>
 8015acc:	3001      	adds	r0, #1
 8015ace:	d14c      	bne.n	8015b6a <_printf_i+0x1fe>
 8015ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ad4:	b004      	add	sp, #16
 8015ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ada:	4835      	ldr	r0, [pc, #212]	; (8015bb0 <_printf_i+0x244>)
 8015adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015ae0:	6829      	ldr	r1, [r5, #0]
 8015ae2:	6823      	ldr	r3, [r4, #0]
 8015ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8015ae8:	6029      	str	r1, [r5, #0]
 8015aea:	061d      	lsls	r5, r3, #24
 8015aec:	d514      	bpl.n	8015b18 <_printf_i+0x1ac>
 8015aee:	07df      	lsls	r7, r3, #31
 8015af0:	bf44      	itt	mi
 8015af2:	f043 0320 	orrmi.w	r3, r3, #32
 8015af6:	6023      	strmi	r3, [r4, #0]
 8015af8:	b91e      	cbnz	r6, 8015b02 <_printf_i+0x196>
 8015afa:	6823      	ldr	r3, [r4, #0]
 8015afc:	f023 0320 	bic.w	r3, r3, #32
 8015b00:	6023      	str	r3, [r4, #0]
 8015b02:	2310      	movs	r3, #16
 8015b04:	e7b0      	b.n	8015a68 <_printf_i+0xfc>
 8015b06:	6823      	ldr	r3, [r4, #0]
 8015b08:	f043 0320 	orr.w	r3, r3, #32
 8015b0c:	6023      	str	r3, [r4, #0]
 8015b0e:	2378      	movs	r3, #120	; 0x78
 8015b10:	4828      	ldr	r0, [pc, #160]	; (8015bb4 <_printf_i+0x248>)
 8015b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015b16:	e7e3      	b.n	8015ae0 <_printf_i+0x174>
 8015b18:	0659      	lsls	r1, r3, #25
 8015b1a:	bf48      	it	mi
 8015b1c:	b2b6      	uxthmi	r6, r6
 8015b1e:	e7e6      	b.n	8015aee <_printf_i+0x182>
 8015b20:	4615      	mov	r5, r2
 8015b22:	e7bb      	b.n	8015a9c <_printf_i+0x130>
 8015b24:	682b      	ldr	r3, [r5, #0]
 8015b26:	6826      	ldr	r6, [r4, #0]
 8015b28:	6961      	ldr	r1, [r4, #20]
 8015b2a:	1d18      	adds	r0, r3, #4
 8015b2c:	6028      	str	r0, [r5, #0]
 8015b2e:	0635      	lsls	r5, r6, #24
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	d501      	bpl.n	8015b38 <_printf_i+0x1cc>
 8015b34:	6019      	str	r1, [r3, #0]
 8015b36:	e002      	b.n	8015b3e <_printf_i+0x1d2>
 8015b38:	0670      	lsls	r0, r6, #25
 8015b3a:	d5fb      	bpl.n	8015b34 <_printf_i+0x1c8>
 8015b3c:	8019      	strh	r1, [r3, #0]
 8015b3e:	2300      	movs	r3, #0
 8015b40:	6123      	str	r3, [r4, #16]
 8015b42:	4615      	mov	r5, r2
 8015b44:	e7ba      	b.n	8015abc <_printf_i+0x150>
 8015b46:	682b      	ldr	r3, [r5, #0]
 8015b48:	1d1a      	adds	r2, r3, #4
 8015b4a:	602a      	str	r2, [r5, #0]
 8015b4c:	681d      	ldr	r5, [r3, #0]
 8015b4e:	6862      	ldr	r2, [r4, #4]
 8015b50:	2100      	movs	r1, #0
 8015b52:	4628      	mov	r0, r5
 8015b54:	f7ea fb5c 	bl	8000210 <memchr>
 8015b58:	b108      	cbz	r0, 8015b5e <_printf_i+0x1f2>
 8015b5a:	1b40      	subs	r0, r0, r5
 8015b5c:	6060      	str	r0, [r4, #4]
 8015b5e:	6863      	ldr	r3, [r4, #4]
 8015b60:	6123      	str	r3, [r4, #16]
 8015b62:	2300      	movs	r3, #0
 8015b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b68:	e7a8      	b.n	8015abc <_printf_i+0x150>
 8015b6a:	6923      	ldr	r3, [r4, #16]
 8015b6c:	462a      	mov	r2, r5
 8015b6e:	4649      	mov	r1, r9
 8015b70:	4640      	mov	r0, r8
 8015b72:	47d0      	blx	sl
 8015b74:	3001      	adds	r0, #1
 8015b76:	d0ab      	beq.n	8015ad0 <_printf_i+0x164>
 8015b78:	6823      	ldr	r3, [r4, #0]
 8015b7a:	079b      	lsls	r3, r3, #30
 8015b7c:	d413      	bmi.n	8015ba6 <_printf_i+0x23a>
 8015b7e:	68e0      	ldr	r0, [r4, #12]
 8015b80:	9b03      	ldr	r3, [sp, #12]
 8015b82:	4298      	cmp	r0, r3
 8015b84:	bfb8      	it	lt
 8015b86:	4618      	movlt	r0, r3
 8015b88:	e7a4      	b.n	8015ad4 <_printf_i+0x168>
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	4632      	mov	r2, r6
 8015b8e:	4649      	mov	r1, r9
 8015b90:	4640      	mov	r0, r8
 8015b92:	47d0      	blx	sl
 8015b94:	3001      	adds	r0, #1
 8015b96:	d09b      	beq.n	8015ad0 <_printf_i+0x164>
 8015b98:	3501      	adds	r5, #1
 8015b9a:	68e3      	ldr	r3, [r4, #12]
 8015b9c:	9903      	ldr	r1, [sp, #12]
 8015b9e:	1a5b      	subs	r3, r3, r1
 8015ba0:	42ab      	cmp	r3, r5
 8015ba2:	dcf2      	bgt.n	8015b8a <_printf_i+0x21e>
 8015ba4:	e7eb      	b.n	8015b7e <_printf_i+0x212>
 8015ba6:	2500      	movs	r5, #0
 8015ba8:	f104 0619 	add.w	r6, r4, #25
 8015bac:	e7f5      	b.n	8015b9a <_printf_i+0x22e>
 8015bae:	bf00      	nop
 8015bb0:	0801918f 	.word	0x0801918f
 8015bb4:	080191a0 	.word	0x080191a0

08015bb8 <_read_r>:
 8015bb8:	b538      	push	{r3, r4, r5, lr}
 8015bba:	4d07      	ldr	r5, [pc, #28]	; (8015bd8 <_read_r+0x20>)
 8015bbc:	4604      	mov	r4, r0
 8015bbe:	4608      	mov	r0, r1
 8015bc0:	4611      	mov	r1, r2
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	602a      	str	r2, [r5, #0]
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	f7ea ff4a 	bl	8000a60 <_read>
 8015bcc:	1c43      	adds	r3, r0, #1
 8015bce:	d102      	bne.n	8015bd6 <_read_r+0x1e>
 8015bd0:	682b      	ldr	r3, [r5, #0]
 8015bd2:	b103      	cbz	r3, 8015bd6 <_read_r+0x1e>
 8015bd4:	6023      	str	r3, [r4, #0]
 8015bd6:	bd38      	pop	{r3, r4, r5, pc}
 8015bd8:	20011964 	.word	0x20011964

08015bdc <__swbuf_r>:
 8015bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bde:	460e      	mov	r6, r1
 8015be0:	4614      	mov	r4, r2
 8015be2:	4605      	mov	r5, r0
 8015be4:	b118      	cbz	r0, 8015bee <__swbuf_r+0x12>
 8015be6:	6983      	ldr	r3, [r0, #24]
 8015be8:	b90b      	cbnz	r3, 8015bee <__swbuf_r+0x12>
 8015bea:	f7ff f8dd 	bl	8014da8 <__sinit>
 8015bee:	4b21      	ldr	r3, [pc, #132]	; (8015c74 <__swbuf_r+0x98>)
 8015bf0:	429c      	cmp	r4, r3
 8015bf2:	d12b      	bne.n	8015c4c <__swbuf_r+0x70>
 8015bf4:	686c      	ldr	r4, [r5, #4]
 8015bf6:	69a3      	ldr	r3, [r4, #24]
 8015bf8:	60a3      	str	r3, [r4, #8]
 8015bfa:	89a3      	ldrh	r3, [r4, #12]
 8015bfc:	071a      	lsls	r2, r3, #28
 8015bfe:	d52f      	bpl.n	8015c60 <__swbuf_r+0x84>
 8015c00:	6923      	ldr	r3, [r4, #16]
 8015c02:	b36b      	cbz	r3, 8015c60 <__swbuf_r+0x84>
 8015c04:	6923      	ldr	r3, [r4, #16]
 8015c06:	6820      	ldr	r0, [r4, #0]
 8015c08:	1ac0      	subs	r0, r0, r3
 8015c0a:	6963      	ldr	r3, [r4, #20]
 8015c0c:	b2f6      	uxtb	r6, r6
 8015c0e:	4283      	cmp	r3, r0
 8015c10:	4637      	mov	r7, r6
 8015c12:	dc04      	bgt.n	8015c1e <__swbuf_r+0x42>
 8015c14:	4621      	mov	r1, r4
 8015c16:	4628      	mov	r0, r5
 8015c18:	f7ff fc20 	bl	801545c <_fflush_r>
 8015c1c:	bb30      	cbnz	r0, 8015c6c <__swbuf_r+0x90>
 8015c1e:	68a3      	ldr	r3, [r4, #8]
 8015c20:	3b01      	subs	r3, #1
 8015c22:	60a3      	str	r3, [r4, #8]
 8015c24:	6823      	ldr	r3, [r4, #0]
 8015c26:	1c5a      	adds	r2, r3, #1
 8015c28:	6022      	str	r2, [r4, #0]
 8015c2a:	701e      	strb	r6, [r3, #0]
 8015c2c:	6963      	ldr	r3, [r4, #20]
 8015c2e:	3001      	adds	r0, #1
 8015c30:	4283      	cmp	r3, r0
 8015c32:	d004      	beq.n	8015c3e <__swbuf_r+0x62>
 8015c34:	89a3      	ldrh	r3, [r4, #12]
 8015c36:	07db      	lsls	r3, r3, #31
 8015c38:	d506      	bpl.n	8015c48 <__swbuf_r+0x6c>
 8015c3a:	2e0a      	cmp	r6, #10
 8015c3c:	d104      	bne.n	8015c48 <__swbuf_r+0x6c>
 8015c3e:	4621      	mov	r1, r4
 8015c40:	4628      	mov	r0, r5
 8015c42:	f7ff fc0b 	bl	801545c <_fflush_r>
 8015c46:	b988      	cbnz	r0, 8015c6c <__swbuf_r+0x90>
 8015c48:	4638      	mov	r0, r7
 8015c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c4c:	4b0a      	ldr	r3, [pc, #40]	; (8015c78 <__swbuf_r+0x9c>)
 8015c4e:	429c      	cmp	r4, r3
 8015c50:	d101      	bne.n	8015c56 <__swbuf_r+0x7a>
 8015c52:	68ac      	ldr	r4, [r5, #8]
 8015c54:	e7cf      	b.n	8015bf6 <__swbuf_r+0x1a>
 8015c56:	4b09      	ldr	r3, [pc, #36]	; (8015c7c <__swbuf_r+0xa0>)
 8015c58:	429c      	cmp	r4, r3
 8015c5a:	bf08      	it	eq
 8015c5c:	68ec      	ldreq	r4, [r5, #12]
 8015c5e:	e7ca      	b.n	8015bf6 <__swbuf_r+0x1a>
 8015c60:	4621      	mov	r1, r4
 8015c62:	4628      	mov	r0, r5
 8015c64:	f000 f80c 	bl	8015c80 <__swsetup_r>
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	d0cb      	beq.n	8015c04 <__swbuf_r+0x28>
 8015c6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015c70:	e7ea      	b.n	8015c48 <__swbuf_r+0x6c>
 8015c72:	bf00      	nop
 8015c74:	0801908c 	.word	0x0801908c
 8015c78:	080190ac 	.word	0x080190ac
 8015c7c:	0801906c 	.word	0x0801906c

08015c80 <__swsetup_r>:
 8015c80:	4b32      	ldr	r3, [pc, #200]	; (8015d4c <__swsetup_r+0xcc>)
 8015c82:	b570      	push	{r4, r5, r6, lr}
 8015c84:	681d      	ldr	r5, [r3, #0]
 8015c86:	4606      	mov	r6, r0
 8015c88:	460c      	mov	r4, r1
 8015c8a:	b125      	cbz	r5, 8015c96 <__swsetup_r+0x16>
 8015c8c:	69ab      	ldr	r3, [r5, #24]
 8015c8e:	b913      	cbnz	r3, 8015c96 <__swsetup_r+0x16>
 8015c90:	4628      	mov	r0, r5
 8015c92:	f7ff f889 	bl	8014da8 <__sinit>
 8015c96:	4b2e      	ldr	r3, [pc, #184]	; (8015d50 <__swsetup_r+0xd0>)
 8015c98:	429c      	cmp	r4, r3
 8015c9a:	d10f      	bne.n	8015cbc <__swsetup_r+0x3c>
 8015c9c:	686c      	ldr	r4, [r5, #4]
 8015c9e:	89a3      	ldrh	r3, [r4, #12]
 8015ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ca4:	0719      	lsls	r1, r3, #28
 8015ca6:	d42c      	bmi.n	8015d02 <__swsetup_r+0x82>
 8015ca8:	06dd      	lsls	r5, r3, #27
 8015caa:	d411      	bmi.n	8015cd0 <__swsetup_r+0x50>
 8015cac:	2309      	movs	r3, #9
 8015cae:	6033      	str	r3, [r6, #0]
 8015cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015cb4:	81a3      	strh	r3, [r4, #12]
 8015cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cba:	e03e      	b.n	8015d3a <__swsetup_r+0xba>
 8015cbc:	4b25      	ldr	r3, [pc, #148]	; (8015d54 <__swsetup_r+0xd4>)
 8015cbe:	429c      	cmp	r4, r3
 8015cc0:	d101      	bne.n	8015cc6 <__swsetup_r+0x46>
 8015cc2:	68ac      	ldr	r4, [r5, #8]
 8015cc4:	e7eb      	b.n	8015c9e <__swsetup_r+0x1e>
 8015cc6:	4b24      	ldr	r3, [pc, #144]	; (8015d58 <__swsetup_r+0xd8>)
 8015cc8:	429c      	cmp	r4, r3
 8015cca:	bf08      	it	eq
 8015ccc:	68ec      	ldreq	r4, [r5, #12]
 8015cce:	e7e6      	b.n	8015c9e <__swsetup_r+0x1e>
 8015cd0:	0758      	lsls	r0, r3, #29
 8015cd2:	d512      	bpl.n	8015cfa <__swsetup_r+0x7a>
 8015cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cd6:	b141      	cbz	r1, 8015cea <__swsetup_r+0x6a>
 8015cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cdc:	4299      	cmp	r1, r3
 8015cde:	d002      	beq.n	8015ce6 <__swsetup_r+0x66>
 8015ce0:	4630      	mov	r0, r6
 8015ce2:	f7ff fc2f 	bl	8015544 <_free_r>
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8015cea:	89a3      	ldrh	r3, [r4, #12]
 8015cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015cf0:	81a3      	strh	r3, [r4, #12]
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	6063      	str	r3, [r4, #4]
 8015cf6:	6923      	ldr	r3, [r4, #16]
 8015cf8:	6023      	str	r3, [r4, #0]
 8015cfa:	89a3      	ldrh	r3, [r4, #12]
 8015cfc:	f043 0308 	orr.w	r3, r3, #8
 8015d00:	81a3      	strh	r3, [r4, #12]
 8015d02:	6923      	ldr	r3, [r4, #16]
 8015d04:	b94b      	cbnz	r3, 8015d1a <__swsetup_r+0x9a>
 8015d06:	89a3      	ldrh	r3, [r4, #12]
 8015d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d10:	d003      	beq.n	8015d1a <__swsetup_r+0x9a>
 8015d12:	4621      	mov	r1, r4
 8015d14:	4630      	mov	r0, r6
 8015d16:	f000 f84d 	bl	8015db4 <__smakebuf_r>
 8015d1a:	89a0      	ldrh	r0, [r4, #12]
 8015d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d20:	f010 0301 	ands.w	r3, r0, #1
 8015d24:	d00a      	beq.n	8015d3c <__swsetup_r+0xbc>
 8015d26:	2300      	movs	r3, #0
 8015d28:	60a3      	str	r3, [r4, #8]
 8015d2a:	6963      	ldr	r3, [r4, #20]
 8015d2c:	425b      	negs	r3, r3
 8015d2e:	61a3      	str	r3, [r4, #24]
 8015d30:	6923      	ldr	r3, [r4, #16]
 8015d32:	b943      	cbnz	r3, 8015d46 <__swsetup_r+0xc6>
 8015d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d38:	d1ba      	bne.n	8015cb0 <__swsetup_r+0x30>
 8015d3a:	bd70      	pop	{r4, r5, r6, pc}
 8015d3c:	0781      	lsls	r1, r0, #30
 8015d3e:	bf58      	it	pl
 8015d40:	6963      	ldrpl	r3, [r4, #20]
 8015d42:	60a3      	str	r3, [r4, #8]
 8015d44:	e7f4      	b.n	8015d30 <__swsetup_r+0xb0>
 8015d46:	2000      	movs	r0, #0
 8015d48:	e7f7      	b.n	8015d3a <__swsetup_r+0xba>
 8015d4a:	bf00      	nop
 8015d4c:	2000002c 	.word	0x2000002c
 8015d50:	0801908c 	.word	0x0801908c
 8015d54:	080190ac 	.word	0x080190ac
 8015d58:	0801906c 	.word	0x0801906c

08015d5c <abort>:
 8015d5c:	b508      	push	{r3, lr}
 8015d5e:	2006      	movs	r0, #6
 8015d60:	f000 f890 	bl	8015e84 <raise>
 8015d64:	2001      	movs	r0, #1
 8015d66:	f7ea fe71 	bl	8000a4c <_exit>

08015d6a <__swhatbuf_r>:
 8015d6a:	b570      	push	{r4, r5, r6, lr}
 8015d6c:	460e      	mov	r6, r1
 8015d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d72:	2900      	cmp	r1, #0
 8015d74:	b096      	sub	sp, #88	; 0x58
 8015d76:	4614      	mov	r4, r2
 8015d78:	461d      	mov	r5, r3
 8015d7a:	da08      	bge.n	8015d8e <__swhatbuf_r+0x24>
 8015d7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015d80:	2200      	movs	r2, #0
 8015d82:	602a      	str	r2, [r5, #0]
 8015d84:	061a      	lsls	r2, r3, #24
 8015d86:	d410      	bmi.n	8015daa <__swhatbuf_r+0x40>
 8015d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d8c:	e00e      	b.n	8015dac <__swhatbuf_r+0x42>
 8015d8e:	466a      	mov	r2, sp
 8015d90:	f000 f894 	bl	8015ebc <_fstat_r>
 8015d94:	2800      	cmp	r0, #0
 8015d96:	dbf1      	blt.n	8015d7c <__swhatbuf_r+0x12>
 8015d98:	9a01      	ldr	r2, [sp, #4]
 8015d9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015da2:	425a      	negs	r2, r3
 8015da4:	415a      	adcs	r2, r3
 8015da6:	602a      	str	r2, [r5, #0]
 8015da8:	e7ee      	b.n	8015d88 <__swhatbuf_r+0x1e>
 8015daa:	2340      	movs	r3, #64	; 0x40
 8015dac:	2000      	movs	r0, #0
 8015dae:	6023      	str	r3, [r4, #0]
 8015db0:	b016      	add	sp, #88	; 0x58
 8015db2:	bd70      	pop	{r4, r5, r6, pc}

08015db4 <__smakebuf_r>:
 8015db4:	898b      	ldrh	r3, [r1, #12]
 8015db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015db8:	079d      	lsls	r5, r3, #30
 8015dba:	4606      	mov	r6, r0
 8015dbc:	460c      	mov	r4, r1
 8015dbe:	d507      	bpl.n	8015dd0 <__smakebuf_r+0x1c>
 8015dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015dc4:	6023      	str	r3, [r4, #0]
 8015dc6:	6123      	str	r3, [r4, #16]
 8015dc8:	2301      	movs	r3, #1
 8015dca:	6163      	str	r3, [r4, #20]
 8015dcc:	b002      	add	sp, #8
 8015dce:	bd70      	pop	{r4, r5, r6, pc}
 8015dd0:	ab01      	add	r3, sp, #4
 8015dd2:	466a      	mov	r2, sp
 8015dd4:	f7ff ffc9 	bl	8015d6a <__swhatbuf_r>
 8015dd8:	9900      	ldr	r1, [sp, #0]
 8015dda:	4605      	mov	r5, r0
 8015ddc:	4630      	mov	r0, r6
 8015dde:	f7ff f8ef 	bl	8014fc0 <_malloc_r>
 8015de2:	b948      	cbnz	r0, 8015df8 <__smakebuf_r+0x44>
 8015de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015de8:	059a      	lsls	r2, r3, #22
 8015dea:	d4ef      	bmi.n	8015dcc <__smakebuf_r+0x18>
 8015dec:	f023 0303 	bic.w	r3, r3, #3
 8015df0:	f043 0302 	orr.w	r3, r3, #2
 8015df4:	81a3      	strh	r3, [r4, #12]
 8015df6:	e7e3      	b.n	8015dc0 <__smakebuf_r+0xc>
 8015df8:	4b0d      	ldr	r3, [pc, #52]	; (8015e30 <__smakebuf_r+0x7c>)
 8015dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	6020      	str	r0, [r4, #0]
 8015e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e04:	81a3      	strh	r3, [r4, #12]
 8015e06:	9b00      	ldr	r3, [sp, #0]
 8015e08:	6163      	str	r3, [r4, #20]
 8015e0a:	9b01      	ldr	r3, [sp, #4]
 8015e0c:	6120      	str	r0, [r4, #16]
 8015e0e:	b15b      	cbz	r3, 8015e28 <__smakebuf_r+0x74>
 8015e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e14:	4630      	mov	r0, r6
 8015e16:	f000 f863 	bl	8015ee0 <_isatty_r>
 8015e1a:	b128      	cbz	r0, 8015e28 <__smakebuf_r+0x74>
 8015e1c:	89a3      	ldrh	r3, [r4, #12]
 8015e1e:	f023 0303 	bic.w	r3, r3, #3
 8015e22:	f043 0301 	orr.w	r3, r3, #1
 8015e26:	81a3      	strh	r3, [r4, #12]
 8015e28:	89a0      	ldrh	r0, [r4, #12]
 8015e2a:	4305      	orrs	r5, r0
 8015e2c:	81a5      	strh	r5, [r4, #12]
 8015e2e:	e7cd      	b.n	8015dcc <__smakebuf_r+0x18>
 8015e30:	08014d41 	.word	0x08014d41

08015e34 <_raise_r>:
 8015e34:	291f      	cmp	r1, #31
 8015e36:	b538      	push	{r3, r4, r5, lr}
 8015e38:	4604      	mov	r4, r0
 8015e3a:	460d      	mov	r5, r1
 8015e3c:	d904      	bls.n	8015e48 <_raise_r+0x14>
 8015e3e:	2316      	movs	r3, #22
 8015e40:	6003      	str	r3, [r0, #0]
 8015e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e46:	bd38      	pop	{r3, r4, r5, pc}
 8015e48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015e4a:	b112      	cbz	r2, 8015e52 <_raise_r+0x1e>
 8015e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015e50:	b94b      	cbnz	r3, 8015e66 <_raise_r+0x32>
 8015e52:	4620      	mov	r0, r4
 8015e54:	f000 f830 	bl	8015eb8 <_getpid_r>
 8015e58:	462a      	mov	r2, r5
 8015e5a:	4601      	mov	r1, r0
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e62:	f000 b817 	b.w	8015e94 <_kill_r>
 8015e66:	2b01      	cmp	r3, #1
 8015e68:	d00a      	beq.n	8015e80 <_raise_r+0x4c>
 8015e6a:	1c59      	adds	r1, r3, #1
 8015e6c:	d103      	bne.n	8015e76 <_raise_r+0x42>
 8015e6e:	2316      	movs	r3, #22
 8015e70:	6003      	str	r3, [r0, #0]
 8015e72:	2001      	movs	r0, #1
 8015e74:	e7e7      	b.n	8015e46 <_raise_r+0x12>
 8015e76:	2400      	movs	r4, #0
 8015e78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	4798      	blx	r3
 8015e80:	2000      	movs	r0, #0
 8015e82:	e7e0      	b.n	8015e46 <_raise_r+0x12>

08015e84 <raise>:
 8015e84:	4b02      	ldr	r3, [pc, #8]	; (8015e90 <raise+0xc>)
 8015e86:	4601      	mov	r1, r0
 8015e88:	6818      	ldr	r0, [r3, #0]
 8015e8a:	f7ff bfd3 	b.w	8015e34 <_raise_r>
 8015e8e:	bf00      	nop
 8015e90:	2000002c 	.word	0x2000002c

08015e94 <_kill_r>:
 8015e94:	b538      	push	{r3, r4, r5, lr}
 8015e96:	4d07      	ldr	r5, [pc, #28]	; (8015eb4 <_kill_r+0x20>)
 8015e98:	2300      	movs	r3, #0
 8015e9a:	4604      	mov	r4, r0
 8015e9c:	4608      	mov	r0, r1
 8015e9e:	4611      	mov	r1, r2
 8015ea0:	602b      	str	r3, [r5, #0]
 8015ea2:	f7ea fdc1 	bl	8000a28 <_kill>
 8015ea6:	1c43      	adds	r3, r0, #1
 8015ea8:	d102      	bne.n	8015eb0 <_kill_r+0x1c>
 8015eaa:	682b      	ldr	r3, [r5, #0]
 8015eac:	b103      	cbz	r3, 8015eb0 <_kill_r+0x1c>
 8015eae:	6023      	str	r3, [r4, #0]
 8015eb0:	bd38      	pop	{r3, r4, r5, pc}
 8015eb2:	bf00      	nop
 8015eb4:	20011964 	.word	0x20011964

08015eb8 <_getpid_r>:
 8015eb8:	f7ea bdae 	b.w	8000a18 <_getpid>

08015ebc <_fstat_r>:
 8015ebc:	b538      	push	{r3, r4, r5, lr}
 8015ebe:	4d07      	ldr	r5, [pc, #28]	; (8015edc <_fstat_r+0x20>)
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	4608      	mov	r0, r1
 8015ec6:	4611      	mov	r1, r2
 8015ec8:	602b      	str	r3, [r5, #0]
 8015eca:	f7ea fe0e 	bl	8000aea <_fstat>
 8015ece:	1c43      	adds	r3, r0, #1
 8015ed0:	d102      	bne.n	8015ed8 <_fstat_r+0x1c>
 8015ed2:	682b      	ldr	r3, [r5, #0]
 8015ed4:	b103      	cbz	r3, 8015ed8 <_fstat_r+0x1c>
 8015ed6:	6023      	str	r3, [r4, #0]
 8015ed8:	bd38      	pop	{r3, r4, r5, pc}
 8015eda:	bf00      	nop
 8015edc:	20011964 	.word	0x20011964

08015ee0 <_isatty_r>:
 8015ee0:	b538      	push	{r3, r4, r5, lr}
 8015ee2:	4d06      	ldr	r5, [pc, #24]	; (8015efc <_isatty_r+0x1c>)
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	4604      	mov	r4, r0
 8015ee8:	4608      	mov	r0, r1
 8015eea:	602b      	str	r3, [r5, #0]
 8015eec:	f7ea fe0d 	bl	8000b0a <_isatty>
 8015ef0:	1c43      	adds	r3, r0, #1
 8015ef2:	d102      	bne.n	8015efa <_isatty_r+0x1a>
 8015ef4:	682b      	ldr	r3, [r5, #0]
 8015ef6:	b103      	cbz	r3, 8015efa <_isatty_r+0x1a>
 8015ef8:	6023      	str	r3, [r4, #0]
 8015efa:	bd38      	pop	{r3, r4, r5, pc}
 8015efc:	20011964 	.word	0x20011964

08015f00 <_init>:
 8015f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f02:	bf00      	nop
 8015f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f06:	bc08      	pop	{r3}
 8015f08:	469e      	mov	lr, r3
 8015f0a:	4770      	bx	lr

08015f0c <_fini>:
 8015f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f0e:	bf00      	nop
 8015f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f12:	bc08      	pop	{r3}
 8015f14:	469e      	mov	lr, r3
 8015f16:	4770      	bx	lr
